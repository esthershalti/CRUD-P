{"ast":null,"code":"/**\n * @license Angular v7.2.16\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Subject, Subscription, Observable, merge } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @template T\n * @param {?} objWithPropertyToExtract\n * @return {?}\n */\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n  for (let key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === /** @type {?} */getClosureSafeProperty) {\n      return key;\n    }\n  }\n  throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param {?} target The target to set properties on\n * @param {?} source The source of the property keys and values to set\n * @return {?}\n */\nfunction fillProperties(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NG_COMPONENT_DEF = getClosureSafeProperty({\n  ngComponentDef: getClosureSafeProperty\n});\n/** @type {?} */\nconst NG_DIRECTIVE_DEF = getClosureSafeProperty({\n  ngDirectiveDef: getClosureSafeProperty\n});\n/** @type {?} */\nconst NG_INJECTABLE_DEF = getClosureSafeProperty({\n  ngInjectableDef: getClosureSafeProperty\n});\n/** @type {?} */\nconst NG_INJECTOR_DEF = getClosureSafeProperty({\n  ngInjectorDef: getClosureSafeProperty\n});\n/** @type {?} */\nconst NG_PIPE_DEF = getClosureSafeProperty({\n  ngPipeDef: getClosureSafeProperty\n});\n/** @type {?} */\nconst NG_MODULE_DEF = getClosureSafeProperty({\n  ngModuleDef: getClosureSafeProperty\n});\n/** @type {?} */\nconst NG_BASE_DEF = getClosureSafeProperty({\n  ngBaseDef: getClosureSafeProperty\n});\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n * @type {?}\n */\nconst NG_ELEMENT_ID = getClosureSafeProperty({\n  __NG_ELEMENT_ID__: getClosureSafeProperty\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n * in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `\\@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * \\@publicApi\n * @template T\n * @param {?} opts\n * @return {?}\n */\nfunction defineInjectable(opts) {\n  return (/** @type {?} */ /** @type {?} */{\n      providedIn: /** @type {?} */opts.providedIn || null,\n      factory: opts.factory,\n      value: undefined\n    }\n  );\n}\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n *   create the type must be provided. If that factory function needs to inject arguments, it can\n *   use the `inject` function.\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * \\@publicApi\n * @param {?} options\n * @return {?}\n */\nfunction defineInjector(options) {\n  return (/** @type {?} */ /** @type {?} */{\n      factory: options.factory,\n      providers: options.providers || [],\n      imports: options.imports || []\n    }\n  );\n}\n/**\n * Read the `ngInjectableDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @template T\n * @param {?} type type which may have `ngInjectableDef`\n * @return {?}\n */\nfunction getInjectableDef(type) {\n  return type && type.hasOwnProperty(NG_INJECTABLE_DEF) ? /** @type {?} */type[NG_INJECTABLE_DEF] : null;\n}\n/**\n * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @template T\n * @param {?} type type which may have `ngInjectorDef`\n * @return {?}\n */\nfunction getInjectorDef(type) {\n  return type && type.hasOwnProperty(NG_INJECTOR_DEF) ? /** @type {?} */type[NG_INJECTOR_DEF] : null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * \\@publicApi\n * @template T\n */\nclass InjectionToken {\n  /**\n   * @param {?} _desc\n   * @param {?=} options\n   */\n  constructor(_desc, options) {\n    this._desc = _desc;\n    /**\n     * \\@internal\n     */\n    this.ngMetadataName = 'InjectionToken';\n    if (options !== undefined) {\n      /** @nocollapse */this.ngInjectableDef = defineInjectable({\n        providedIn: options.providedIn || 'root',\n        factory: options.factory\n      });\n    } else {\n      /** @nocollapse */this.ngInjectableDef = undefined;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  toString() {\n    return `InjectionToken ${this._desc}`;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ANNOTATIONS = '__annotations__';\n/** @type {?} */\nconst PARAMETERS = '__parameters__';\n/** @type {?} */\nconst PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n * @template T\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} additionalProcessing\n * @param {?=} typeFn\n * @return {?}\n */\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n  /** @type {?} */\n  const metaCtor = makeMetadataCtor(props);\n  /**\n   * @param {...?} args\n   * @return {?}\n   */\n  function DecoratorFactory(...args) {\n    if (this instanceof DecoratorFactory) {\n      metaCtor.call(this, ...args);\n      return this;\n    }\n    /** @type {?} */\n    const annotationInstance = new /** @type {?} */DecoratorFactory(...args);\n    return function TypeDecorator(cls) {\n      if (typeFn) typeFn(cls, ...args);\n      // Use of Object.defineProperty is important since it creates non-enumerable property which\n      // prevents the property is copied during subclassing.\n      /** @type {?} */\n      const annotations = cls.hasOwnProperty(ANNOTATIONS) ? /** @type {?} */cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, {\n        value: []\n      })[ANNOTATIONS];\n      annotations.push(annotationInstance);\n      if (additionalProcessing) additionalProcessing(cls);\n      return cls;\n    };\n  }\n  if (parentClass) {\n    DecoratorFactory.prototype = Object.create(parentClass.prototype);\n  }\n  DecoratorFactory.prototype.ngMetadataName = name;\n  /** @type {?} */DecoratorFactory.annotationCls = DecoratorFactory;\n  return (/** @type {?} */DecoratorFactory\n  );\n}\n/**\n * @param {?=} props\n * @return {?}\n */\nfunction makeMetadataCtor(props) {\n  return function ctor(...args) {\n    if (props) {\n      /** @type {?} */\n      const values = props(...args);\n      for (const propName in values) {\n        this[propName] = values[propName];\n      }\n    }\n  };\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @return {?}\n */\nfunction makeParamDecorator(name, props, parentClass) {\n  /** @type {?} */\n  const metaCtor = makeMetadataCtor(props);\n  /**\n   * @param {...?} args\n   * @return {?}\n   */\n  function ParamDecoratorFactory(...args) {\n    if (this instanceof ParamDecoratorFactory) {\n      metaCtor.apply(this, args);\n      return this;\n    }\n    /** @type {?} */\n    const annotationInstance = new /** @type {?} */ParamDecoratorFactory(...args);\n    /** @type {?} */ParamDecorator.annotation = annotationInstance;\n    return ParamDecorator;\n    /**\n     * @param {?} cls\n     * @param {?} unusedKey\n     * @param {?} index\n     * @return {?}\n     */\n    function ParamDecorator(cls, unusedKey, index) {\n      // Use of Object.defineProperty is important since it creates non-enumerable property which\n      // prevents the property is copied during subclassing.\n      /** @type {?} */\n      const parameters = cls.hasOwnProperty(PARAMETERS) ? /** @type {?} */cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, {\n        value: []\n      })[PARAMETERS];\n      // there might be gaps if some in between parameters do not have annotations.\n      // we pad with nulls.\n      while (parameters.length <= index) {\n        parameters.push(null);\n      }\n      (parameters[index] = parameters[index] || []).push(annotationInstance);\n      return cls;\n    }\n  }\n  if (parentClass) {\n    ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n  }\n  ParamDecoratorFactory.prototype.ngMetadataName = name;\n  /** @type {?} */ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n  return ParamDecoratorFactory;\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} additionalProcessing\n * @return {?}\n */\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\n  /** @type {?} */\n  const metaCtor = makeMetadataCtor(props);\n  /**\n   * @param {...?} args\n   * @return {?}\n   */\n  function PropDecoratorFactory(...args) {\n    if (this instanceof PropDecoratorFactory) {\n      metaCtor.apply(this, args);\n      return this;\n    }\n    /** @type {?} */\n    const decoratorInstance = new /** @type {?} */PropDecoratorFactory(...args);\n    /**\n     * @param {?} target\n     * @param {?} name\n     * @return {?}\n     */\n    function PropDecorator(target, name) {\n      /** @type {?} */\n      const constructor = target.constructor;\n      // Use of Object.defineProperty is important since it creates non-enumerable property which\n      // prevents the property is copied during subclassing.\n      /** @type {?} */\n      const meta = constructor.hasOwnProperty(PROP_METADATA) ? /** @type {?} */constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, {\n        value: {}\n      })[PROP_METADATA];\n      meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n      meta[name].unshift(decoratorInstance);\n      if (additionalProcessing) additionalProcessing(target, name, ...args);\n    }\n    return PropDecorator;\n  }\n  if (parentClass) {\n    PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n  }\n  PropDecoratorFactory.prototype.ngMetadataName = name;\n  /** @type {?} */PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n  return PropDecoratorFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A DI token that you can use to create a virtual [provider](guide/glossary#provider)\n * that will populate the `entryComponents` field of components and NgModules\n * based on its `useValue` property value.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) are added to the `entryComponents` property.\n *\n * \\@usageNotes\n *\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on a router configuration that refers\n * to components.\n *\n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * \\@NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Attribute decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Attribute = makeParamDecorator('Attribute', attributeName => ({\n  attributeName\n}));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Base class for query metadata.\n *\n * @see `ContentChildren`.\n * @see `ContentChild`.\n * @see `ViewChildren`.\n * @see `ViewChild`.\n *\n * \\@publicApi\n * @abstract\n */\nclass Query {}\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst ContentChildren = makePropDecorator('ContentChildren', (selector, data = {}) => Object.assign({\n  selector,\n  first: false,\n  isViewQuery: false,\n  descendants: false\n}, data), Query);\n/**\n * ContentChild decorator and metadata.\n *\n *\n * \\@Annotation\n *\n * \\@publicApi\n * @type {?}\n */\nconst ContentChild = makePropDecorator('ContentChild', (selector, data = {}) => Object.assign({\n  selector,\n  first: true,\n  isViewQuery: false,\n  descendants: true\n}, data), Query);\n/**\n * ViewChildren decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst ViewChildren = makePropDecorator('ViewChildren', (selector, data = {}) => Object.assign({\n  selector,\n  first: false,\n  isViewQuery: true,\n  descendants: true\n}, data), Query);\n/**\n * ViewChild decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst ViewChild = makePropDecorator('ViewChild', (selector, data) => Object.assign({\n  selector,\n  first: true,\n  isViewQuery: true,\n  descendants: true\n}, data), Query);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst ChangeDetectionStrategy = {\n  /**\n   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n   * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n   * Change detection can still be explicitly invoked.\n   * This strategy applies to all child directives and cannot be overridden.\n   */\n  OnPush: 0,\n  /**\n   * Use the default `CheckAlways` strategy, in which change detection is automatic until\n   * explicitly deactivated.\n   */\n  Default: 1\n};\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = 'OnPush';\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = 'Default';\n/** @enum {number} */\nconst ChangeDetectorStatus = {\n  /**\n   * A state in which, after calling `detectChanges()`, the change detector\n   * state becomes `Checked`, and must be explicitly invoked or reactivated.\n   */\n  CheckOnce: 0,\n  /**\n   * A state in which change detection is skipped until the change detector mode\n   * becomes `CheckOnce`.\n   */\n  Checked: 1,\n  /**\n   * A state in which change detection continues automatically until explicitly\n   * deactivated.\n   */\n  CheckAlways: 2,\n  /**\n   * A state in which a change detector sub tree is not a part of the main tree and\n   * should be skipped.\n   */\n  Detached: 3,\n  /**\n   * Indicates that the change detector encountered an error checking a binding\n   * or calling a directive lifecycle method and is now in an inconsistent state. Change\n   * detectors in this state do not detect changes.\n   */\n  Errored: 4,\n  /**\n   * Indicates that the change detector has been destroyed.\n   */\n  Destroyed: 5\n};\nChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = 'CheckOnce';\nChangeDetectorStatus[ChangeDetectorStatus.Checked] = 'Checked';\nChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = 'CheckAlways';\nChangeDetectorStatus[ChangeDetectorStatus.Detached] = 'Detached';\nChangeDetectorStatus[ChangeDetectorStatus.Errored] = 'Errored';\nChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = 'Destroyed';\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @see `ChangeDetectorStatus` / `ChangeDetectorRef`\n * @param {?} changeDetectionStrategy The strategy to check.\n * @return {?} True if the given strategy is the current default, false otherwise.\n */\nfunction isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n  return changeDetectionStrategy == null || changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst __window = typeof window !== 'undefined' && window;\n/** @type {?} */\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;\n/** @type {?} */\nconst __global = typeof global !== 'undefined' && global;\n// Check __global first, because in Node tests both __global and __window may be defined and _global\n// should be __global in that case.\n/** @type {?} */\nconst _global = __global || __window || __self;\n/** @type {?} */\nconst promise = Promise.resolve(0);\n/** @type {?} */\nlet _symbolIterator = null;\n/**\n * @return {?}\n */\nfunction getSymbolIterator() {\n  if (!_symbolIterator) {\n    /** @type {?} */\n    const Symbol = _global['Symbol'];\n    if (Symbol && Symbol.iterator) {\n      _symbolIterator = Symbol.iterator;\n    } else {\n      // es6-shim specific logic\n      /** @type {?} */\n      const keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        /** @type {?} */\n        const key = keys[i];\n        if (key !== 'entries' && key !== 'size' && /** @type {?} */Map.prototype[key] === Map.prototype['entries']) {\n          _symbolIterator = key;\n        }\n      }\n    }\n  }\n  return _symbolIterator;\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nfunction scheduleMicroTask(fn) {\n  if (typeof Zone === 'undefined') {\n    // use promise to schedule microTask instead of use Zone\n    promise.then(() => {\n      fn && fn.apply(null, null);\n    });\n  } else {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n  }\n}\n// JS has NaN !== NaN\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction looseIdentical(a, b) {\n  return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction stringify(token) {\n  if (typeof token === 'string') {\n    return token;\n  }\n  if (token instanceof Array) {\n    return '[' + token.map(stringify).join(', ') + ']';\n  }\n  if (token == null) {\n    return '' + token;\n  }\n  if (token.overriddenName) {\n    return `${token.overriddenName}`;\n  }\n  if (token.name) {\n    return `${token.name}`;\n  }\n  /** @type {?} */\n  const res = token.toString();\n  if (res == null) {\n    return '' + res;\n  }\n  /** @type {?} */\n  const newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n * @param {?} fn\n * @return {?}\n */\nfunction noSideEffects(fn) {\n  return '' + {\n    toString: fn\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst __forward_ref__ = getClosureSafeProperty({\n  __forward_ref__: getClosureSafeProperty\n});\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * \\@usageNotes\n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@publicApi\n * @param {?} forwardRefFn\n * @return {?}\n */\nfunction forwardRef(forwardRefFn) {\n  /** @type {?} */forwardRefFn.__forward_ref__ = forwardRef;\n  /** @type {?} */forwardRefFn.toString = function () {\n    return stringify(this());\n  };\n  return (/** @type {?} */ /** @type {?} */forwardRefFn\n  );\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * \\@publicApi\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction resolveForwardRef(type) {\n  /** @type {?} */\n  const fn = type;\n  if (typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) && fn.__forward_ref__ === forwardRef) {\n    return fn();\n  } else {\n    return type;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to resolve resource URLs on `\\@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * \\@Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `\\@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `\\@Component.templateUrl` into\n * // `\\@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param {?} resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n * @return {?}\n */\nfunction resolveComponentResources(resourceResolver) {\n  // Store all promises which are fetching the resources.\n  /** @type {?} */\n  const urlFetches = [];\n  // Cache so that we don't fetch the same resource more than once.\n  /** @type {?} */\n  const urlMap = new Map();\n  /**\n   * @param {?} url\n   * @return {?}\n   */\n  function cachedResourceResolve(url) {\n    /** @type {?} */\n    let promise = urlMap.get(url);\n    if (!promise) {\n      /** @type {?} */\n      const resp = resourceResolver(url);\n      urlMap.set(url, promise = resp.then(unwrapResponse));\n      urlFetches.push(promise);\n    }\n    return promise;\n  }\n  componentResourceResolutionQueue.forEach(component => {\n    if (component.templateUrl) {\n      cachedResourceResolve(component.templateUrl).then(template => {\n        component.template = template;\n        component.templateUrl = undefined;\n      });\n    }\n    /** @type {?} */\n    const styleUrls = component.styleUrls;\n    /** @type {?} */\n    const styles = component.styles || (component.styles = []);\n    /** @type {?} */\n    const styleOffset = component.styles.length;\n    styleUrls && styleUrls.forEach((styleUrl, index) => {\n      styles.push(''); // pre-allocate array.\n      cachedResourceResolve(styleUrl).then(style => {\n        styles[styleOffset + index] = style;\n        styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n        if (styleUrls.length == 0) {\n          component.styleUrls = undefined;\n        }\n      });\n    });\n  });\n  componentResourceResolutionQueue.clear();\n  return Promise.all(urlFetches).then(() => null);\n}\n/** @type {?} */\nconst componentResourceResolutionQueue = new Set();\n/**\n * @param {?} metadata\n * @return {?}\n */\nfunction maybeQueueResolutionOfComponentResources(metadata) {\n  if (componentNeedsResolution(metadata)) {\n    componentResourceResolutionQueue.add(metadata);\n  }\n}\n/**\n * @param {?} component\n * @return {?}\n */\nfunction componentNeedsResolution(component) {\n  return component.templateUrl || component.styleUrls && component.styleUrls.length;\n}\n/**\n * @param {?} response\n * @return {?}\n */\nfunction unwrapResponse(response) {\n  return typeof response == 'string' ? response : response.text();\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst ViewEncapsulation = {\n  /**\n   * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n   * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n   * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n   * selectors.\n   *\n   * This is the default option.\n   */\n  Emulated: 0,\n  /**\n   * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n   * Use the native encapsulation mechanism of the renderer.\n   *\n   * For the DOM this means using the deprecated [Shadow DOM\n   * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n   * creating a ShadowRoot for Component's Host Element.\n   */\n  Native: 1,\n  /**\n   * Don't provide any template or style encapsulation.\n   */\n  None: 2,\n  /**\n   * Use Shadow DOM to encapsulate styles.\n   *\n   * For the DOM this means using modern [Shadow\n   * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n   * creating a ShadowRoot for Component's Host Element.\n   */\n  ShadowDom: 3\n};\nViewEncapsulation[ViewEncapsulation.Emulated] = 'Emulated';\nViewEncapsulation[ViewEncapsulation.Native] = 'Native';\nViewEncapsulation[ViewEncapsulation.None] = 'None';\nViewEncapsulation[ViewEncapsulation.ShadowDom] = 'ShadowDom';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nfunction ngDevModeResetPerfCounters() {\n  /** @type {?} */\n  const newCounters = {\n    firstTemplatePass: 0,\n    tNode: 0,\n    tView: 0,\n    rendererCreateTextNode: 0,\n    rendererSetText: 0,\n    rendererCreateElement: 0,\n    rendererAddEventListener: 0,\n    rendererSetAttribute: 0,\n    rendererRemoveAttribute: 0,\n    rendererSetProperty: 0,\n    rendererSetClassName: 0,\n    rendererAddClass: 0,\n    rendererRemoveClass: 0,\n    rendererSetStyle: 0,\n    rendererRemoveStyle: 0,\n    rendererDestroy: 0,\n    rendererDestroyNode: 0,\n    rendererMoveNode: 0,\n    rendererRemoveNode: 0,\n    rendererCreateComment: 0\n  };\n  // NOTE: Under Ivy we may have both window & global defined in the Node\n  //    environment since ensureDocument() in render3.ts sets global.window.\n  if (typeof window != 'undefined') {\n    // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n    /** @type {?} */window['ngDevMode'] = newCounters;\n  }\n  if (typeof global != 'undefined') {\n    // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n    /** @type {?} */global['ngDevMode'] = newCounters;\n  }\n  if (typeof self != 'undefined') {\n    // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n    /** @type {?} */self['ngDevMode'] = newCounters;\n  }\n  return newCounters;\n}\n/**\n * This checks to see if the `ngDevMode` has been set. If yes,\n * than we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n */\nif (typeof ngDevMode === 'undefined' || ngDevMode) {\n  ngDevModeResetPerfCounters();\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n * @type {?}\n */\nconst EMPTY_OBJ = {};\n/** @type {?} */\nconst EMPTY_ARRAY = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n  Object.freeze(EMPTY_OBJ);\n  Object.freeze(EMPTY_ARRAY);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _renderCompCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} componentDefinition\n * @return {?}\n */\nfunction defineComponent(componentDefinition) {\n  /** @type {?} */\n  const type = componentDefinition.type;\n  /** @type {?} */\n  const typePrototype = type.prototype;\n  /** @type {?} */\n  const declaredInputs = /** @type {?} */{};\n  /** @type {?} */\n  const def = {\n    type: type,\n    providersResolver: null,\n    consts: componentDefinition.consts,\n    vars: componentDefinition.vars,\n    factory: componentDefinition.factory,\n    template: componentDefinition.template || /** @type {?} */null,\n    hostBindings: componentDefinition.hostBindings || null,\n    contentQueries: componentDefinition.contentQueries || null,\n    contentQueriesRefresh: componentDefinition.contentQueriesRefresh || null,\n    attributes: componentDefinition.attributes || null,\n    declaredInputs: declaredInputs,\n    inputs: /** @type {?} */null,\n    // assigned in noSideEffects\n    outputs: /** @type {?} */null,\n    // assigned in noSideEffects\n    exportAs: componentDefinition.exportAs || null,\n    onInit: typePrototype.ngOnInit || null,\n    doCheck: typePrototype.ngDoCheck || null,\n    afterContentInit: typePrototype.ngAfterContentInit || null,\n    afterContentChecked: typePrototype.ngAfterContentChecked || null,\n    afterViewInit: typePrototype.ngAfterViewInit || null,\n    afterViewChecked: typePrototype.ngAfterViewChecked || null,\n    onDestroy: typePrototype.ngOnDestroy || null,\n    onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n    directiveDefs: /** @type {?} */null,\n    // assigned in noSideEffects\n    pipeDefs: /** @type {?} */null,\n    // assigned in noSideEffects\n    selectors: componentDefinition.selectors,\n    viewQuery: componentDefinition.viewQuery || null,\n    features: componentDefinition.features || null,\n    data: componentDefinition.data || {},\n    // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n    // next line. Also `None` should be 0 not 2.\n    encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n    id: 'c',\n    styles: componentDefinition.styles || EMPTY_ARRAY,\n    _: /** @type {?} */null\n  };\n  def._ = /** @type {?} */noSideEffects(() => {\n    /** @type {?} */\n    const directiveTypes = /** @type {?} */componentDefinition.directives;\n    /** @type {?} */\n    const feature = componentDefinition.features;\n    /** @type {?} */\n    const pipeTypes = /** @type {?} */componentDefinition.pipes;\n    def.id += _renderCompCount++;\n    def.inputs = invertObject(componentDefinition.inputs, declaredInputs), def.outputs = invertObject(componentDefinition.outputs), feature && feature.forEach(fn => fn(def));\n    def.directiveDefs = directiveTypes ? () => (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes).map(extractDirectiveDef) : null;\n    def.pipeDefs = pipeTypes ? () => (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef) : null;\n  });\n  return (/** @type {?} */def\n  );\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction extractDirectiveDef(type) {\n  /** @type {?} */\n  const def = getComponentDef(type) || getDirectiveDef(type);\n  if (ngDevMode && !def) {\n    throw new Error(`'${type.name}' is neither 'ComponentType' or 'DirectiveType'.`);\n  }\n  return (/** @type {?} */def\n  );\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction extractPipeDef(type) {\n  /** @type {?} */\n  const def = getPipeDef(type);\n  if (ngDevMode && !def) {\n    throw new Error(`'${type.name}' is not a 'PipeType'.`);\n  }\n  return (/** @type {?} */def\n  );\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nfunction defineNgModule(def) {\n  /** @type {?} */\n  const res = {\n    type: def.type,\n    bootstrap: def.bootstrap || EMPTY_ARRAY,\n    declarations: def.declarations || EMPTY_ARRAY,\n    imports: def.imports || EMPTY_ARRAY,\n    exports: def.exports || EMPTY_ARRAY,\n    transitiveCompileScopes: null\n  };\n  return (/** @type {?} */res\n  );\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n * \\@Input()\n *   propName1: string;\n *\n * \\@Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n * @param {?} obj\n * @param {?=} secondary\n * @return {?}\n */\nfunction invertObject(obj, secondary) {\n  if (obj == null) return EMPTY_OBJ;\n  /** @type {?} */\n  const newLookup = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      /** @type {?} */\n      let publicName = obj[minifiedKey];\n      /** @type {?} */\n      let declaredName = publicName;\n      if (Array.isArray(publicName)) {\n        declaredName = publicName[1];\n        publicName = publicName[0];\n      }\n      newLookup[publicName] = minifiedKey;\n      if (secondary) {\n        secondary[publicName] = declaredName;\n      }\n    }\n  }\n  return newLookup;\n}\n/**\n * Create a base definition\n *\n * # Example\n * ```\n * class ShouldBeInherited {\n *   static ngBaseDef = defineBase({\n *      ...\n *   })\n * }\n * @template T\n * @param {?} baseDefinition The base definition parameters\n * @return {?}\n */\nfunction defineBase(baseDefinition) {\n  /** @type {?} */\n  const declaredInputs = /** @type {?} */{};\n  return {\n    inputs: invertObject(baseDefinition.inputs, declaredInputs),\n    declaredInputs: declaredInputs,\n    outputs: invertObject(baseDefinition.outputs)\n  };\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n * @type {?}\n */\nconst defineDirective = /** @type {?} */ /** @type {?} */defineComponent;\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} pipeDef Pipe definition generated by the compiler\n * @return {?}\n */\nfunction definePipe(pipeDef) {\n  return (/** @type {?} */ /** @type {?} */{\n      name: pipeDef.name,\n      factory: pipeDef.factory,\n      pure: pipeDef.pure !== false,\n      onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    }\n  );\n}\n/**\n * The following getter methods retrieve the definition form the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getComponentDef(type) {\n  return (/** @type {?} */type[NG_COMPONENT_DEF] || null\n  );\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getDirectiveDef(type) {\n  return (/** @type {?} */type[NG_DIRECTIVE_DEF] || null\n  );\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getPipeDef(type) {\n  return (/** @type {?} */type[NG_PIPE_DEF] || null\n  );\n}\n/**\n * @template T\n * @param {?} type\n * @param {?=} throwNotFound\n * @return {?}\n */\nfunction getNgModuleDef(type, throwNotFound) {\n  /** @type {?} */\n  /** @nocollapse */const ngModuleDef = /** @type {?} */type[NG_MODULE_DEF] || null;\n  if (!ngModuleDef && throwNotFound === true) {\n    throw new Error(`Type ${stringify(type)} does not have 'ngModuleDef' property.`);\n  }\n  return ngModuleDef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nfunction assertEqual(actual, expected, msg) {\n  if (actual != expected) {\n    throwError(msg);\n  }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nfunction assertNotEqual(actual, expected, msg) {\n  if (actual == expected) {\n    throwError(msg);\n  }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nfunction assertLessThan(actual, expected, msg) {\n  if (actual >= expected) {\n    throwError(msg);\n  }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nfunction assertGreaterThan(actual, expected, msg) {\n  if (actual <= expected) {\n    throwError(msg);\n  }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} msg\n * @return {?}\n */\nfunction assertDefined(actual, msg) {\n  if (actual == null) {\n    throwError(msg);\n  }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nfunction assertComponentType(actual, msg = 'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.') {\n  if (!getComponentDef(actual)) {\n    throwError(msg);\n  }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nfunction assertNgModuleType(actual, msg = 'Type passed in is not NgModuleType, it does not have \\'ngModuleDef\\' property.') {\n  if (!getNgModuleDef(actual)) {\n    throwError(msg);\n  }\n}\n/**\n * @param {?} msg\n * @return {?}\n */\nfunction throwError(msg) {\n  // tslint:disable-next-line\n  debugger; // Left intentionally for better debugger experience.\n  throw new Error(`ASSERTION ERROR: ${msg}`);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction assertDomNode(node) {\n  assertEqual(node instanceof Node, true, 'The provided value must be an instance of a DOM Node');\n}\n/**\n * @param {?} isParent\n * @return {?}\n */\nfunction assertPreviousIsParent(isParent) {\n  assertEqual(isParent, true, 'previousOrParentTNode should be a parent');\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction assertHasParent(tNode) {\n  assertDefined(tNode.parent, 'previousOrParentTNode should have a parent');\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction assertDataInRange(arr, index) {\n  assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\n/** @type {?} */\nconst TVIEW = 0;\n/** @type {?} */\nconst FLAGS = 1;\n/** @type {?} */\nconst PARENT = 2;\n/** @type {?} */\nconst NEXT = 3;\n/** @type {?} */\nconst QUERIES = 4;\n/** @type {?} */\nconst HOST = 5;\n/** @type {?} */\nconst HOST_NODE = 6;\n// Rename to `T_HOST`?\n/** @type {?} */\nconst BINDING_INDEX = 7;\n/** @type {?} */\nconst CLEANUP = 8;\n/** @type {?} */\nconst CONTEXT = 9;\n/** @type {?} */\nconst INJECTOR = 10;\n/** @type {?} */\nconst RENDERER_FACTORY = 11;\n/** @type {?} */\nconst RENDERER = 12;\n/** @type {?} */\nconst SANITIZER = 13;\n/** @type {?} */\nconst TAIL = 14;\n/** @type {?} */\nconst CONTAINER_INDEX = 15;\n/** @type {?} */\nconst CONTENT_QUERIES = 16;\n/** @type {?} */\nconst DECLARATION_VIEW = 17;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n * @type {?}\n */\nconst HEADER_OFFSET = 18;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n * @type {?}\n */\nconst ACTIVE_INDEX = 0;\n/** @type {?} */\nconst VIEWS = 1;\n// PARENT, NEXT, QUERIES, and HOST are indices 2, 3, 4, and 5.\n// As we already have these constants in LView, we don't need to re-create them.\n/** @type {?} */\nconst NATIVE = 6;\n/** @type {?} */\nconst RENDER_PARENT = 7;\n// Because interfaces in TS/JS cannot be instanceof-checked this means that we\n// need to rely on predictable characteristics of data-structures to check if they\n// are what we expect for them to be. The `LContainer` interface code below has a\n// fixed length and the constant value below references that. Using the length value\n// below we can predictably gaurantee that we are dealing with an `LContainer` array.\n// This value MUST be kept up to date with the length of the `LContainer` array\n// interface below so that runtime type checking can work.\n/** @type {?} */\nconst LCONTAINER_LENGTH = 8;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This property will be monkey-patched on elements, components and directives\n * @type {?}\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst TNODE = 8;\n/** @type {?} */\nconst PARENT_INJECTOR = 8;\n/** @type {?} */\nconst INJECTOR_BLOOM_PARENT_SIZE = 9;\n/** @type {?} */\nconst NO_PARENT_INJECTOR = /** @type {?} */-1;\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nclass NodeInjectorFactory {\n  /**\n   * @param {?} factory\n   * @param {?} isViewProvider\n   * @param {?} injectImplementation\n   */\n  constructor(factory,\n  /**\n   * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n   */\n  isViewProvider, injectImplementation) {\n    this.factory = factory;\n    /**\n     * Marker set to true during factory invocation to see if we get into recursive loop.\n     * Recursive loop causes an error to be displayed.\n     */\n    this.resolving = false;\n    this.canSeeViewProviders = isViewProvider;\n    this.injectImpl = injectImplementation;\n  }\n}\n/** @type {?} */\nconst FactoryPrototype = NodeInjectorFactory.prototype;\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isFactory(obj) {\n  // See: https://jsperf.com/instanceof-vs-getprototypeof\n  return obj != null && typeof obj == 'object' && Object.getPrototypeOf(obj) == FactoryPrototype;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction isDifferent(a, b) {\n  // NaN is the only value that is not equal to itself so the first\n  // test checks if both a and b are not NaN\n  return !(a !== a && b !== b) && a !== b;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction stringify$1(value) {\n  if (typeof value == 'function') return value.name || value;\n  if (typeof value == 'string') return value;\n  if (value == null) return '';\n  if (typeof value == 'object' && typeof value.type == 'function') return value.type.name || value.type;\n  return '' + value;\n}\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n * @param {?} list\n * @return {?}\n */\nfunction flatten(list) {\n  /** @type {?} */\n  const result = [];\n  /** @type {?} */\n  let i = 0;\n  while (i < list.length) {\n    /** @type {?} */\n    const item = list[i];\n    if (Array.isArray(item)) {\n      if (item.length > 0) {\n        list = item.concat(list.slice(i + 1));\n        i = 0;\n      } else {\n        i++;\n      }\n    } else {\n      result.push(item);\n      i++;\n    }\n  }\n  return result;\n}\n/**\n * Retrieves a value from any `LView` or `TData`.\n * @template T\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction loadInternal(view, index) {\n  ngDevMode && assertDataInRange(view, index + HEADER_OFFSET);\n  return view[index + HEADER_OFFSET];\n}\n/**\n * Takes the value of a slot in `LView` and returns the element node.\n *\n * Normally, element nodes are stored flat, but if the node has styles/classes on it,\n * it might be wrapped in a styling context. Or if that node has a directive that injects\n * ViewContainerRef, it may be wrapped in an LContainer. Or if that node is a component,\n * it will be wrapped in LView. It could even have all three, so we keep looping\n * until we find something that isn't an array.\n *\n * @param {?} value The initial value in `LView`\n * @return {?}\n */\nfunction readElementValue(value) {\n  while (Array.isArray(value)) {\n    value = /** @type {?} */value[HOST];\n  }\n  return value;\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n * @param {?} index\n * @param {?} lView\n * @return {?}\n */\nfunction getNativeByIndex(index, lView) {\n  return readElementValue(lView[index + HEADER_OFFSET]);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nfunction getNativeByTNode(tNode, hostView) {\n  return readElementValue(hostView[tNode.index]);\n}\n/**\n * @param {?} index\n * @param {?} view\n * @return {?}\n */\nfunction getTNode(index, view) {\n  ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n  ngDevMode && assertLessThan(index, view[TVIEW].data.length, 'wrong index for TNode');\n  return (/** @type {?} */view[TVIEW].data[index + HEADER_OFFSET]\n  );\n}\n/**\n * @param {?} nodeIndex\n * @param {?} hostView\n * @return {?}\n */\nfunction getComponentViewByIndex(nodeIndex, hostView) {\n  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n  /** @type {?} */\n  const slotValue = hostView[nodeIndex];\n  return slotValue.length >= HEADER_OFFSET ? slotValue : slotValue[HOST];\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isContentQueryHost(tNode) {\n  return (tNode.flags & 4 /* hasContentQuery */) !== 0;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isComponent(tNode) {\n  return (tNode.flags & 1 /* isComponent */) === 1 /* isComponent */;\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nfunction isComponentDef(def) {\n  return (/** @type {?} */def.template !== null\n  );\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isLContainer(value) {\n  // Styling contexts are also arrays, but their first index contains an element node\n  return Array.isArray(value) && value.length === LCONTAINER_LENGTH;\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction isRootView(target) {\n  return (target[FLAGS] & 128 /* IsRoot */) !== 0;\n}\n/**\n * Retrieve the root view from any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} target\n * @return {?}\n */\nfunction getRootView(target) {\n  ngDevMode && assertDefined(target, 'component');\n  /** @type {?} */\n  let lView = Array.isArray(target) ? /** @type {?} */target : /** @type {?} */readPatchedLView(target);\n  while (lView && !(lView[FLAGS] & 128 /* IsRoot */)) {\n    lView = /** @type {?} */lView[PARENT];\n  }\n  return lView;\n}\n/**\n * @param {?} viewOrComponent\n * @return {?}\n */\nfunction getRootContext(viewOrComponent) {\n  /** @type {?} */\n  const rootView = getRootView(viewOrComponent);\n  ngDevMode && assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n  return (/** @type {?} */rootView[CONTEXT]\n  );\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n * @param {?} target\n * @return {?}\n */\nfunction readPatchedData(target) {\n  ngDevMode && assertDefined(target, 'Target expected');\n  return target[MONKEY_PATCH_KEY_NAME];\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction readPatchedLView(target) {\n  /** @type {?} */\n  const value = readPatchedData(target);\n  if (value) {\n    return Array.isArray(value) ? value : /** @type {?} */value.lView;\n  }\n  return null;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nfunction hasParentInjector(parentLocation) {\n  return parentLocation !== NO_PARENT_INJECTOR;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nfunction getParentInjectorIndex(parentLocation) {\n  return (/** @type {?} */ /** @type {?} */parentLocation & 32767 /* InjectorIndexMask */\n  );\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nfunction getParentInjectorViewOffset(parentLocation) {\n  return (/** @type {?} */ /** @type {?} */parentLocation >> 16 /* ViewOffsetShift */\n  );\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LView instance from which to start walking up the view tree\n * @return {?} The LView instance that contains the parent injector\n */\nfunction getParentInjectorView(location, startView) {\n  /** @type {?} */\n  let viewOffset = getParentInjectorViewOffset(location);\n  /** @type {?} */\n  let parentView = startView;\n  // For most cases, the parent injector can be found on the host node (e.g. for component\n  // or container), but we must keep the loop here to support the rarer case of deeply nested\n  // <ng-template> tags or inline views, where the parent injector might live many views\n  // above the child injector.\n  while (viewOffset > 0) {\n    parentView = /** @type {?} */parentView[DECLARATION_VIEW];\n    viewOffset--;\n  }\n  return parentView;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the TNode of the parent injector is found.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LView instance from which to start walking up the view tree\n * @param {?} startTNode The TNode instance of the starting element\n * @return {?} The TNode of the parent injector\n */\nfunction getParentInjectorTNode(location, startView, startTNode) {\n  if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {\n    // view offset is 0\n    /** @type {?} */\n    const injectorIndex = startTNode.parent.injectorIndex;\n    /** @type {?} */\n    let parentTNode = startTNode.parent;\n    while (parentTNode.parent != null && injectorIndex == parentTNode.injectorIndex) {\n      parentTNode = parentTNode.parent;\n    }\n    return parentTNode;\n  }\n  /** @type {?} */\n  let viewOffset = getParentInjectorViewOffset(location);\n  // view offset is 1\n  /** @type {?} */\n  let parentView = startView;\n  /** @type {?} */\n  let parentTNode = /** @type {?} */startView[HOST_NODE];\n  // view offset is superior to 1\n  while (viewOffset > 1) {\n    parentView = /** @type {?} */parentView[DECLARATION_VIEW];\n    parentTNode = /** @type {?} */parentView[HOST_NODE];\n    viewOffset--;\n  }\n  return parentTNode;\n}\n/** @type {?} */\nconst defaultScheduler = (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame ||\n// browser only\nsetTimeout // everything else\n).bind(_global);\n/**\n * Equivalent to ES6 spread, add each item to an array.\n *\n * @param {?} items The items to add\n * @param {?} arr The array to which you want to add the items\n * @return {?}\n */\nfunction addAllToArray(items, arr) {\n  for (let i = 0; i < items.length; i++) {\n    arr.push(items[i]);\n  }\n}\n/**\n * Given a current view, finds the nearest component's host (LElement).\n *\n * @param {?} lView LView for which we want a host element node\n * @return {?} The host node\n */\nfunction findComponentView(lView) {\n  /** @type {?} */\n  let rootTNode = lView[HOST_NODE];\n  while (rootTNode && rootTNode.type === 2 /* View */) {\n    ngDevMode && assertDefined(lView[DECLARATION_VIEW], 'lView[DECLARATION_VIEW]');\n    lView = /** @type {?} */lView[DECLARATION_VIEW];\n    rootTNode = lView[HOST_NODE];\n  }\n  return lView;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction getCompilerFacade() {\n  /** @type {?} */\n  const globalNg = _global['ng'];\n  if (!globalNg || !globalNg.ɵcompilerFacade) {\n    throw new Error(`Angular JIT compilation failed: '@angular/compiler' not loaded!\\n` + `  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\\n` + `  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\\n` + `  - Alternatively provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`);\n  }\n  return globalNg.ɵcompilerFacade;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Inject decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Inject = makeParamDecorator('Inject', token => ({\n  token\n}));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Optional decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Optional = makeParamDecorator('Optional');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Self decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Self = makeParamDecorator('Self');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * SkipSelf decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst SkipSelf = makeParamDecorator('SkipSelf');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Host decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Host = makeParamDecorator('Host');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst InjectFlags = {\n  // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n  Default: 0,\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host: 1,\n  /** Don't descend into ancestors of the node requesting injection. */\n  Self: 2,\n  /** Skip the node that is requesting injection. */\n  SkipSelf: 4,\n  /** Inject `defaultValue` instead if token not found. */\n  Optional: 8\n};\nInjectFlags[InjectFlags.Default] = 'Default';\nInjectFlags[InjectFlags.Host] = 'Host';\nInjectFlags[InjectFlags.Self] = 'Self';\nInjectFlags[InjectFlags.SkipSelf] = 'SkipSelf';\nInjectFlags[InjectFlags.Optional] = 'Optional';\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n * @type {?}\n */\nlet _currentInjector = undefined;\n/**\n * @param {?} injector\n * @return {?}\n */\nfunction setCurrentInjector(injector) {\n  /** @type {?} */\n  const former = _currentInjector;\n  _currentInjector = injector;\n  return former;\n}\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n * @type {?}\n */\nlet _injectImplementation;\n/**\n * Sets the current inject implementation.\n * @param {?} impl\n * @return {?}\n */\nfunction setInjectImplementation(impl) {\n  /** @type {?} */\n  const previous = _injectImplementation;\n  _injectImplementation = impl;\n  return previous;\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nfunction injectInjectorOnly(token, flags = InjectFlags.Default) {\n  if (_currentInjector === undefined) {\n    throw new Error(`inject() must be called from an injection context`);\n  } else if (_currentInjector === null) {\n    return injectRootLimpMode(token, undefined, flags);\n  } else {\n    return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n  }\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nfunction inject(token, flags = InjectFlags.Default) {\n  return (_injectImplementation || injectInjectorOnly)(token, flags);\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * `InjectableDef`.\n * @template T\n * @param {?} token\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction injectRootLimpMode(token, notFoundValue, flags) {\n  /** @type {?} */\n  const injectableDef = getInjectableDef(token);\n  if (injectableDef && injectableDef.providedIn == 'root') {\n    return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() : injectableDef.value;\n  }\n  if (flags & InjectFlags.Optional) return null;\n  if (notFoundValue !== undefined) return notFoundValue;\n  throw new Error(`Injector: NOT_FOUND [${stringify(token)}]`);\n}\n/**\n * @param {?} types\n * @return {?}\n */\nfunction injectArgs(types) {\n  /** @type {?} */\n  const args = [];\n  for (let i = 0; i < types.length; i++) {\n    /** @type {?} */\n    const arg = types[i];\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new Error('Arguments array must have arguments.');\n      }\n      /** @type {?} */\n      let type = undefined;\n      /** @type {?} */\n      let flags = InjectFlags.Default;\n      for (let j = 0; j < arg.length; j++) {\n        /** @type {?} */\n        const meta = arg[j];\n        if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n          flags |= InjectFlags.Optional;\n        } else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n          flags |= InjectFlags.SkipSelf;\n        } else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n          flags |= InjectFlags.Self;\n        } else if (meta instanceof Inject) {\n          type = meta.token;\n        } else {\n          type = meta;\n        }\n      }\n      args.push(inject( /** @type {?} */type, flags));\n    } else {\n      args.push(inject(arg));\n    }\n  }\n  return args;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} tNode\n * @param {?} type\n * @return {?}\n */\nfunction assertNodeType(tNode, type) {\n  assertDefined(tNode, 'should be called with a TNode');\n  assertEqual(tNode.type, type, `should be a ${typeName(type)}`);\n}\n/**\n * @param {?} tNode\n * @param {...?} types\n * @return {?}\n */\nfunction assertNodeOfPossibleTypes(tNode, ...types) {\n  assertDefined(tNode, 'should be called with a TNode');\n  /** @type {?} */\n  const found = types.some(type => tNode.type === type);\n  assertEqual(found, true, `Should be one of ${types.map(typeName).join(', ')} but got ${typeName(tNode.type)}`);\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction typeName(type) {\n  if (type == 1 /* Projection */) return 'Projection';\n  if (type == 0 /* Container */) return 'Container';\n  if (type == 2 /* View */) return 'View';\n  if (type == 3 /* Element */) return 'Element';\n  if (type == 4 /* ElementContainer */) return 'ElementContainer';\n  return '<unknown>';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * If this is the first template pass, any ngOnInit or ngDoCheck hooks will be queued into\n * TView.initHooks during directiveCreate.\n *\n * The directive index and hook type are encoded into one number (1st bit: type, remaining bits:\n * directive index), then saved in the even indices of the initHooks array. The odd indices\n * hold the hook functions themselves.\n *\n * @param {?} index The index of the directive in LView\n * @param {?} onInit\n * @param {?} doCheck\n * @param {?} tView The current TView\n * @return {?}\n */\nfunction queueInitHooks(index, onInit, doCheck, tView) {\n  ngDevMode && assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n  if (onInit) {\n    (tView.initHooks || (tView.initHooks = [])).push(index, onInit);\n  }\n  if (doCheck) {\n    (tView.initHooks || (tView.initHooks = [])).push(index, doCheck);\n    (tView.checkHooks || (tView.checkHooks = [])).push(index, doCheck);\n  }\n}\n/**\n * Loops through the directives on a node and queues all their hooks except ngOnInit\n * and ngDoCheck, which are queued separately in directiveCreate.\n * @param {?} tView\n * @param {?} tNode\n * @return {?}\n */\nfunction queueLifecycleHooks(tView, tNode) {\n  if (tView.firstTemplatePass) {\n    // It's necessary to loop through the directives at elementEnd() (rather than processing in\n    // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n    // hooks for projected components and directives must be called *before* their hosts.\n    for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n      /** @type {?} */\n      const def = /** @type {?} */tView.data[i];\n      queueContentHooks(def, tView, i);\n      queueViewHooks(def, tView, i);\n      queueDestroyHooks(def, tView, i);\n    }\n  }\n}\n/**\n * Queues afterContentInit and afterContentChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueContentHooks(def, tView, i) {\n  if (def.afterContentInit) {\n    (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentInit);\n  }\n  if (def.afterContentChecked) {\n    (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentChecked);\n    (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, def.afterContentChecked);\n  }\n}\n/**\n * Queues afterViewInit and afterViewChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueViewHooks(def, tView, i) {\n  if (def.afterViewInit) {\n    (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewInit);\n  }\n  if (def.afterViewChecked) {\n    (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewChecked);\n    (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, def.afterViewChecked);\n  }\n}\n/**\n * Queues onDestroy hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueDestroyHooks(def, tView, i) {\n  if (def.onDestroy != null) {\n    (tView.destroyHooks || (tView.destroyHooks = [])).push(i, def.onDestroy);\n  }\n}\n/**\n * Calls onInit and doCheck calls if they haven't already been called.\n *\n * @param {?} currentView The current view\n * @param {?} tView\n * @param {?} checkNoChangesMode\n * @return {?}\n */\nfunction executeInitHooks(currentView, tView, checkNoChangesMode) {\n  if (!checkNoChangesMode && currentView[FLAGS] & 32 /* RunInit */) {\n    executeHooks(currentView, tView.initHooks, tView.checkHooks, checkNoChangesMode);\n    currentView[FLAGS] &= ~32 /* RunInit */;\n  }\n}\n/**\n * Iterates over afterViewInit and afterViewChecked functions and calls them.\n *\n * @param {?} currentView The current view\n * @param {?} allHooks\n * @param {?} checkHooks\n * @param {?} checkNoChangesMode\n * @return {?}\n */\nfunction executeHooks(currentView, allHooks, checkHooks, checkNoChangesMode) {\n  if (checkNoChangesMode) return;\n  /** @type {?} */\n  const hooksToCall = currentView[FLAGS] & 2 /* FirstLViewPass */ ? allHooks : checkHooks;\n  if (hooksToCall) {\n    callHooks(currentView, hooksToCall);\n  }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass.\n *\n * @param {?} currentView The current view\n * @param {?} arr The array in which the hooks are found\n * @return {?}\n */\nfunction callHooks(currentView, arr) {\n  for (let i = 0; i < arr.length; i += 2) {\n    /** @type {?} */arr[i + 1].call(currentView[/** @type {?} */arr[i]]);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Store the element depth count. This is used to identify the root elements of the template\n * so that we can than attach `LView` to only those elements.\n * @type {?}\n */\nlet elementDepthCount;\n/**\n * @return {?}\n */\nfunction getElementDepthCount() {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return elementDepthCount;\n}\n/**\n * @return {?}\n */\nfunction increaseElementDepthCount() {\n  elementDepthCount++;\n}\n/**\n * @return {?}\n */\nfunction decreaseElementDepthCount() {\n  elementDepthCount--;\n}\n/** @type {?} */\nlet currentDirectiveDef = null;\n/**\n * @return {?}\n */\nfunction getCurrentDirectiveDef() {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return currentDirectiveDef;\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction setCurrentDirectiveDef(def) {\n  currentDirectiveDef = def;\n}\n/**\n * Stores whether directives should be matched to elements.\n *\n * When template contains `ngNonBindable` than we need to prevent the runtime form matching\n * directives on children of that element.\n *\n * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n * </div>\n * ```\n * @type {?}\n */\nlet bindingsEnabled;\n/**\n * @return {?}\n */\nfunction getBindingsEnabled() {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return bindingsEnabled;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n * @return {?}\n */\nfunction enableBindings() {\n  bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n * @return {?}\n */\nfunction disableBindings() {\n  bindingsEnabled = false;\n}\n/**\n * @return {?}\n */\nfunction getLView() {\n  return lView;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param {?} viewToRestore The OpaqueViewState instance to restore.\n * @return {?}\n */\nfunction restoreView(viewToRestore) {\n  contextLView = /** @type {?} */ /** @type {?} */viewToRestore;\n}\n/**\n * Used to set the parent property when nodes are created and track query results.\n * @type {?}\n */\nlet previousOrParentTNode;\n/**\n * @return {?}\n */\nfunction getPreviousOrParentTNode() {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return previousOrParentTNode;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction setPreviousOrParentTNode(tNode) {\n  previousOrParentTNode = tNode;\n}\n/**\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nfunction setTNodeAndViewData(tNode, view) {\n  previousOrParentTNode = tNode;\n  lView = view;\n}\n/**\n * If `isParent` is:\n *  - `true`: then `previousOrParentTNode` points to a parent node.\n *  - `false`: then `previousOrParentTNode` points to previous node (sibling).\n * @type {?}\n */\nlet isParent;\n/**\n * @return {?}\n */\nfunction getIsParent() {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return isParent;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction setIsParent(value) {\n  isParent = value;\n}\n/**\n * Query instructions can ask for \"current queries\" in 2 different cases:\n * - when creating view queries (at the root of a component view, before any node is created - in\n * this case currentQueries points to view queries)\n * - when creating content queries (i.e. this previousOrParentTNode points to a node on which we\n * create content queries).\n * @param {?} QueryType\n * @return {?}\n */\nfunction getOrCreateCurrentQueries(QueryType) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  let currentQueries = lView[QUERIES];\n  // if this is the first content query on a node, any existing LQueries needs to be cloned\n  // in subsequent template passes, the cloning occurs before directive instantiation.\n  if (previousOrParentTNode && previousOrParentTNode !== lView[HOST_NODE] && !isContentQueryHost(previousOrParentTNode)) {\n    currentQueries && (currentQueries = lView[QUERIES] = currentQueries.clone());\n    previousOrParentTNode.flags |= 4 /* hasContentQuery */;\n  }\n\n  return currentQueries || (lView[QUERIES] = new QueryType(null, null, null));\n}\n/**\n * Checks whether a given view is in creation mode\n * @param {?=} view\n * @return {?}\n */\nfunction isCreationMode(view = lView) {\n  return (view[FLAGS] & 1 /* CreationMode */) === 1 /* CreationMode */;\n}\n/**\n * State of the current view being processed.\n *\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n * @type {?}\n */\nlet lView;\n/**\n * The last viewData retrieved by nextContext().\n * Allows building nextContext() and reference() calls.\n *\n * e.g. const inner = x().$implicit; const outer = x().$implicit;\n * @type {?}\n */\nlet contextLView = /** @type {?} */null;\n/**\n * @return {?}\n */\nfunction getContextLView() {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return contextLView;\n}\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n * @type {?}\n */\nlet checkNoChangesMode = false;\n/**\n * @return {?}\n */\nfunction getCheckNoChangesMode() {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return checkNoChangesMode;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nfunction setCheckNoChangesMode(mode) {\n  checkNoChangesMode = mode;\n}\n/**\n * Whether or not this is the first time the current view has been processed.\n * @type {?}\n */\nlet firstTemplatePass = true;\n/**\n * @return {?}\n */\nfunction getFirstTemplatePass() {\n  return firstTemplatePass;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction setFirstTemplatePass(value) {\n  firstTemplatePass = value;\n}\n/**\n * The root index from which pure function instructions should calculate their binding\n * indices. In component views, this is TView.bindingStartIndex. In a host binding\n * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n * @type {?}\n */\nlet bindingRootIndex = -1;\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\n/**\n * @return {?}\n */\nfunction getBindingRoot() {\n  return bindingRootIndex;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction setBindingRoot(value) {\n  bindingRootIndex = value;\n}\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param {?} newView New state to become active\n * @param {?} hostTNode\n * @return {?} the previous state;\n */\nfunction enterView(newView, hostTNode) {\n  /** @type {?} */\n  const oldView = lView;\n  if (newView) {\n    /** @type {?} */\n    const tView = newView[TVIEW];\n    firstTemplatePass = tView.firstTemplatePass;\n    bindingRootIndex = tView.bindingStartIndex;\n  }\n  previousOrParentTNode = /** @type {?} */hostTNode;\n  isParent = true;\n  lView = contextLView = newView;\n  return oldView;\n}\n/**\n * @template T\n * @param {?=} level\n * @return {?}\n */\nfunction nextContextImpl(level = 1) {\n  contextLView = walkUpViews(level, /** @type {?} */contextLView);\n  return (/** @type {?} */contextLView[CONTEXT]\n  );\n}\n/**\n * @param {?} nestingLevel\n * @param {?} currentView\n * @return {?}\n */\nfunction walkUpViews(nestingLevel, currentView) {\n  while (nestingLevel > 0) {\n    ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n    currentView = /** @type {?} */currentView[DECLARATION_VIEW];\n    nestingLevel--;\n  }\n  return currentView;\n}\n/**\n * Resets the application state.\n * @return {?}\n */\nfunction resetComponentState() {\n  isParent = false;\n  previousOrParentTNode = /** @type {?} */null;\n  elementDepthCount = 0;\n  bindingsEnabled = true;\n}\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param {?} newView New state to become active\n * @return {?}\n */\nfunction leaveView(newView) {\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  if (isCreationMode(lView)) {\n    lView[FLAGS] &= ~1 /* CreationMode */;\n  } else {\n    executeHooks(lView, tView.viewHooks, tView.viewCheckHooks, checkNoChangesMode);\n    // Views are clean and in update mode after being checked, so these bits are cleared\n    lView[FLAGS] &= ~(8 /* Dirty */ | 2 /* FirstLViewPass */);\n    lView[FLAGS] |= 32 /* RunInit */;\n    lView[BINDING_INDEX] = tView.bindingStartIndex;\n  }\n  enterView(newView, null);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * \\@Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * \\@Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n * @type {?}\n */\nlet includeViewProviders = true;\n/**\n * @param {?} v\n * @return {?}\n */\nfunction setIncludeViewProviders(v) {\n  /** @type {?} */\n  const oldValue = includeViewProviders;\n  includeViewProviders = v;\n  return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n * @type {?}\n */\nconst BLOOM_SIZE = 256;\n/** @type {?} */\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n/**\n * Counter used to generate unique IDs for directives.\n * @type {?}\n */\nlet nextNgElementId = 0;\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param {?} injectorIndex The index of the node injector where this token should be registered\n * @param {?} tView The TView for the injector's bloom filters\n * @param {?} type The directive token to register\n * @return {?}\n */\nfunction bloomAdd(injectorIndex, tView, type) {\n  ngDevMode && assertEqual(tView.firstTemplatePass, true, 'expected firstTemplatePass to be true');\n  /** @type {?} */\n  let id = typeof type !== 'string' ? /** @type {?} */type[NG_ELEMENT_ID] : type.charCodeAt(0) || 0;\n  // Set a unique ID on the directive type, so if something tries to inject the directive,\n  // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n  if (id == null) {\n    id = /** @type {?} */type[NG_ELEMENT_ID] = nextNgElementId++;\n  }\n  // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n  // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n  /** @type {?} */\n  const bloomBit = id & BLOOM_MASK;\n  // Create a mask that targets the specific bit associated with the directive.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  /** @type {?} */\n  const mask = 1 << bloomBit;\n  // Use the raw bloomBit number to determine which bloom filter bucket we should check\n  // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc\n  /** @type {?} */\n  const b7 = bloomBit & 0x80;\n  /** @type {?} */\n  const b6 = bloomBit & 0x40;\n  /** @type {?} */\n  const b5 = bloomBit & 0x20;\n  /** @type {?} */\n  const tData = /** @type {?} */tView.data;\n  if (b7) {\n    b6 ? b5 ? tData[injectorIndex + 7] |= mask : tData[injectorIndex + 6] |= mask : b5 ? tData[injectorIndex + 5] |= mask : tData[injectorIndex + 4] |= mask;\n  } else {\n    b6 ? b5 ? tData[injectorIndex + 3] |= mask : tData[injectorIndex + 2] |= mask : b5 ? tData[injectorIndex + 1] |= mask : tData[injectorIndex] |= mask;\n  }\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param {?} tNode for which an injector should be retrieved / created.\n * @param {?} hostView View where the node is stored\n * @return {?} Node injector\n */\nfunction getOrCreateNodeInjectorForNode(tNode, hostView) {\n  /** @type {?} */\n  const existingInjectorIndex = getInjectorIndex(tNode, hostView);\n  if (existingInjectorIndex !== -1) {\n    return existingInjectorIndex;\n  }\n  /** @type {?} */\n  const tView = hostView[TVIEW];\n  if (tView.firstTemplatePass) {\n    tNode.injectorIndex = hostView.length;\n    insertBloom(tView.data, tNode); // foundation for node bloom\n    insertBloom(hostView, null); // foundation for cumulative bloom\n    insertBloom(tView.blueprint, null);\n    ngDevMode && assertEqual(tNode.flags === 0 || tNode.flags === 1 /* isComponent */, true, 'expected tNode.flags to not be initialized');\n  }\n  /** @type {?} */\n  const parentLoc = getParentInjectorLocation(tNode, hostView);\n  /** @type {?} */\n  const parentIndex = getParentInjectorIndex(parentLoc);\n  /** @type {?} */\n  const parentLView = getParentInjectorView(parentLoc, hostView);\n  /** @type {?} */\n  const injectorIndex = tNode.injectorIndex;\n  // If a parent injector can't be found, its location is set to -1.\n  // In that case, we don't need to set up a cumulative bloom\n  if (hasParentInjector(parentLoc)) {\n    /** @type {?} */\n    const parentData = /** @type {?} */parentLView[TVIEW].data;\n    // Creates a cumulative bloom filter that merges the parent's bloom filter\n    // and its own cumulative bloom (which contains tokens for all ancestors)\n    for (let i = 0; i < 8; i++) {\n      hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n    }\n  }\n  hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;\n  return injectorIndex;\n}\n/**\n * @param {?} arr\n * @param {?} footer\n * @return {?}\n */\nfunction insertBloom(arr, footer) {\n  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nfunction getInjectorIndex(tNode, hostView) {\n  if (tNode.injectorIndex === -1 ||\n  // If the injector index is the same as its parent's injector index, then the index has been\n  // copied down from the parent node. No injector has been created yet on this node.\n  tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex ||\n  // After the first template pass, the injector index might exist but the parent values\n  // might not have been calculated yet for this instance\n  hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {\n    return -1;\n  } else {\n    return tNode.injectorIndex;\n  }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nfunction getParentInjectorLocation(tNode, view) {\n  if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n    return (/** @type {?} */tNode.parent.injectorIndex\n    ); // ViewOffset is 0\n  }\n  // For most cases, the parent injector index can be found on the host node (e.g. for component\n  // or container), so this loop will be skipped, but we must keep the loop here to support\n  // the rarer case of deeply nested <ng-template> tags or inline views.\n  /** @type {?} */\n  let hostTNode = view[HOST_NODE];\n  /** @type {?} */\n  let viewOffset = 1;\n  while (hostTNode && hostTNode.injectorIndex === -1) {\n    view = /** @type {?} */view[DECLARATION_VIEW];\n    hostTNode = view ? view[HOST_NODE] : null;\n    viewOffset++;\n  }\n  return hostTNode ? hostTNode.injectorIndex | viewOffset << 16 /* ViewOffsetShift */ : /** @type {?} */-1;\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param {?} injectorIndex\n * @param {?} view\n * @param {?} token The type or the injection token to be made public\n * @return {?}\n */\nfunction diPublicInInjector(injectorIndex, view, token) {\n  bloomAdd(injectorIndex, view[TVIEW], token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * \\@Component(...)\n * class MyComponent {\n *   constructor(\\@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * \\@publicApi\n * @param {?} tNode\n * @param {?} attrNameToInject\n * @return {?}\n */\nfunction injectAttributeImpl(tNode, attrNameToInject) {\n  ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n  ngDevMode && assertDefined(tNode, 'expecting tNode');\n  /** @type {?} */\n  const attrs = tNode.attrs;\n  if (attrs) {\n    for (let i = 0; i < attrs.length; i = i + 2) {\n      /** @type {?} */\n      const attrName = attrs[i];\n      if (attrName === 3 /* SelectOnly */) break;\n      if (attrName == attrNameToInject) {\n        return (/** @type {?} */attrs[i + 1]\n        );\n      }\n    }\n  }\n  return null;\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * @template T\n * @param {?} tNode The Node where the search for the injector should start\n * @param {?} lView The `LView` that contains the `tNode`\n * @param {?} token The token to look for\n * @param {?=} flags Injection flags\n * @param {?=} notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @return {?} the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {\n  if (tNode) {\n    /** @type {?} */\n    const bloomHash = bloomHashBitOrFactory(token);\n    // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n    // so just call the factory function to create it.\n    if (typeof bloomHash === 'function') {\n      /** @type {?} */\n      const savePreviousOrParentTNode = getPreviousOrParentTNode();\n      /** @type {?} */\n      const saveLView = getLView();\n      setTNodeAndViewData(tNode, lView);\n      try {\n        /** @type {?} */\n        const value = bloomHash();\n        if (value == null && !(flags & InjectFlags.Optional)) {\n          throw new Error(`No provider for ${stringify$1(token)}!`);\n        } else {\n          return value;\n        }\n      } finally {\n        setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n      }\n    } else if (typeof bloomHash == 'number') {\n      // If the token has a bloom hash, then it is a token which could be in NodeInjector.\n      // A reference to the previous injector TView that was found while climbing the element\n      // injector tree. This is used to know if viewProviders can be accessed on the current\n      // injector.\n      /** @type {?} */\n      let previousTView = null;\n      /** @type {?} */\n      let injectorIndex = getInjectorIndex(tNode, lView);\n      /** @type {?} */\n      let parentLocation = NO_PARENT_INJECTOR;\n      /** @type {?} */\n      let hostTElementNode = flags & InjectFlags.Host ? findComponentView(lView)[HOST_NODE] : null;\n      // If we should skip this injector, or if there is no injector on this node, start by\n      // searching\n      // the parent injector.\n      if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n        parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[injectorIndex + PARENT_INJECTOR];\n        if (!shouldSearchParent(flags, false)) {\n          injectorIndex = -1;\n        } else {\n          previousTView = lView[TVIEW];\n          injectorIndex = getParentInjectorIndex(parentLocation);\n          lView = getParentInjectorView(parentLocation, lView);\n        }\n      }\n      // Traverse up the injector tree until we find a potential match or until we know there\n      // *isn't* a match.\n      while (injectorIndex !== -1) {\n        parentLocation = lView[injectorIndex + PARENT_INJECTOR];\n        // Check the current injector. If it matches, see if it contains token.\n        /** @type {?} */\n        const tView = lView[TVIEW];\n        if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n          // At this point, we have an injector which *may* contain the token, so we step through\n          // the providers and directives associated with the injector's corresponding node to get\n          // the instance.\n          /** @type {?} */\n          const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n          if (instance !== NOT_FOUND) {\n            return instance;\n          }\n        }\n        if (shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + TNODE] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {\n          // The def wasn't found anywhere on this node, so it was a false positive.\n          // Traverse up the tree and continue searching.\n          previousTView = tView;\n          injectorIndex = getParentInjectorIndex(parentLocation);\n          lView = getParentInjectorView(parentLocation, lView);\n        } else {\n          // If we should not search parent OR If the ancestor bloom filter value does not have the\n          // bit corresponding to the directive we can give up on traversing up to find the specific\n          // injector.\n          injectorIndex = -1;\n        }\n      }\n    }\n  }\n  if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n    // This must be set or the NullInjector will throw for optional deps\n    notFoundValue = null;\n  }\n  if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n    /** @type {?} */\n    const moduleInjector = lView[INJECTOR];\n    if (moduleInjector) {\n      return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n    } else {\n      return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n    }\n  }\n  if (flags & InjectFlags.Optional) {\n    return notFoundValue;\n  } else {\n    throw new Error(`NodeInjector: NOT_FOUND [${stringify$1(token)}]`);\n  }\n}\n/** @type {?} */\nconst NOT_FOUND = {};\n/**\n * @template T\n * @param {?} injectorIndex\n * @param {?} lView\n * @param {?} token\n * @param {?} previousTView\n * @param {?} flags\n * @param {?} hostTElementNode\n * @return {?}\n */\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n  /** @type {?} */\n  const currentTView = lView[TVIEW];\n  /** @type {?} */\n  const tNode = /** @type {?} */currentTView.data[injectorIndex + TNODE];\n  // First, we need to determine if view providers can be accessed by the starting element.\n  // There are two possibities\n  /** @type {?} */\n  const canAccessViewProviders = previousTView == null ?\n  // 1) This is the first invocation `previousTView == null` which means that we are at the\n  // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n  // to look into the ViewProviders is if:\n  // - we are on a component\n  // - AND the injector set `includeViewProviders` to true (implying that the token can see\n  // ViewProviders because it is the Component or a Service which itself was declared in\n  // ViewProviders)\n  isComponent(tNode) && includeViewProviders :\n  // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n  // In such a case we are only allowed to look into the ViewProviders if:\n  // - We just crossed from child View to Parent View `previousTView != currentTView`\n  // - AND the parent TNode is an Element.\n  // This means that we just came from the Component's View and therefore are allowed to see\n  // into the ViewProviders.\n  previousTView != currentTView && tNode.type === 3 /* Element */;\n  // This special case happens when there is a @host on the inject and when we are searching\n  // on the host element node.\n  /** @type {?} */\n  const isHostSpecialCase = flags & InjectFlags.Host && hostTElementNode === tNode;\n  /** @type {?} */\n  const injectableIdx = locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders, isHostSpecialCase);\n  if (injectableIdx !== null) {\n    return getNodeInjectable(currentTView.data, lView, injectableIdx, /** @type {?} */tNode);\n  } else {\n    return NOT_FOUND;\n  }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @template T\n * @param {?} tNode TNode on which directives are present.\n * @param {?} lView The view we are currently processing\n * @param {?} token Provider token or type of a directive to look for.\n * @param {?} canAccessViewProviders Whether view providers should be considered.\n * @param {?} isHostSpecialCase Whether the host special case applies.\n * @return {?} Index of a found directive or provider, or null when none found.\n */\nfunction locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders, isHostSpecialCase) {\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  /** @type {?} */\n  const nodeProviderIndexes = tNode.providerIndexes;\n  /** @type {?} */\n  const tInjectables = tView.data;\n  /** @type {?} */\n  const injectablesStart = nodeProviderIndexes & 65535 /* ProvidersStartIndexMask */;\n  /** @type {?} */\n  const directivesStart = tNode.directiveStart;\n  /** @type {?} */\n  const directiveEnd = tNode.directiveEnd;\n  /** @type {?} */\n  const cptViewProvidersCount = nodeProviderIndexes >> 16 /* CptViewProvidersCountShift */;\n  /** @type {?} */\n  const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n  // When the host special case applies, only the viewProviders and the component are visible\n  /** @type {?} */\n  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n  for (let i = startingIndex; i < endIndex; i++) {\n    /** @type {?} */\n    const providerTokenOrDef = /** @type {?} */tInjectables[i];\n    if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && /** @type {?} */providerTokenOrDef.type === token) {\n      return i;\n    }\n  }\n  if (isHostSpecialCase) {\n    /** @type {?} */\n    const dirDef = /** @type {?} */tInjectables[directivesStart];\n    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n      return directivesStart;\n    }\n  }\n  return null;\n}\n/**\n * Retrieve or instantiate the injectable from the `lData` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n * @param {?} tData\n * @param {?} lData\n * @param {?} index\n * @param {?} tNode\n * @return {?}\n */\nfunction getNodeInjectable(tData, lData, index, tNode) {\n  /** @type {?} */\n  let value = lData[index];\n  if (isFactory(value)) {\n    /** @type {?} */\n    const factory = value;\n    if (factory.resolving) {\n      throw new Error(`Circular dep for ${stringify$1(tData[index])}`);\n    }\n    /** @type {?} */\n    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n    factory.resolving = true;\n    /** @type {?} */\n    let previousInjectImplementation;\n    if (factory.injectImpl) {\n      previousInjectImplementation = setInjectImplementation(factory.injectImpl);\n    }\n    /** @type {?} */\n    const savePreviousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const saveLView = getLView();\n    setTNodeAndViewData(tNode, lData);\n    try {\n      value = lData[index] = factory.factory(null, tData, lData, tNode);\n    } finally {\n      if (factory.injectImpl) setInjectImplementation(previousInjectImplementation);\n      setIncludeViewProviders(previousIncludeViewProviders);\n      factory.resolving = false;\n      setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n    }\n  }\n  return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param {?} token the injection token\n * @return {?} the matching bit to check in the bloom filter or `null` if the token is not known.\n */\nfunction bloomHashBitOrFactory(token) {\n  ngDevMode && assertDefined(token, 'token must be defined');\n  if (typeof token === 'string') {\n    return token.charCodeAt(0) || 0;\n  }\n  /** @type {?} */\n  const tokenId = /** @type {?} */token[NG_ELEMENT_ID];\n  return typeof tokenId === 'number' ? tokenId & BLOOM_MASK : tokenId;\n}\n/**\n * @param {?} bloomHash\n * @param {?} injectorIndex\n * @param {?} injectorView\n * @return {?}\n */\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\n  // Create a mask that targets the specific bit associated with the directive we're looking for.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  /** @type {?} */\n  const mask = 1 << bloomHash;\n  /** @type {?} */\n  const b7 = bloomHash & 0x80;\n  /** @type {?} */\n  const b6 = bloomHash & 0x40;\n  /** @type {?} */\n  const b5 = bloomHash & 0x20;\n  // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:\n  // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.\n  // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\n  /** @type {?} */\n  let value;\n  if (b7) {\n    value = b6 ? b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6] : b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4];\n  } else {\n    value = b6 ? b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2] : b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex];\n  }\n  // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n  // this injector is a potential match.\n  return !!(value & mask);\n}\n/**\n * Returns true if flags prevent parent injector from being searched for tokens\n * @param {?} flags\n * @param {?} isFirstHostTNode\n * @return {?}\n */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n  return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\n/**\n * @return {?}\n */\nfunction injectInjector() {\n  /** @type {?} */\n  const tNode = /** @type {?} */getPreviousOrParentTNode();\n  return new NodeInjector(tNode, getLView());\n}\nclass NodeInjector {\n  /**\n   * @param {?} _tNode\n   * @param {?} _lView\n   */\n  constructor(_tNode, _lView) {\n    this._tNode = _tNode;\n    this._lView = _lView;\n  }\n  /**\n   * @param {?} token\n   * @param {?=} notFoundValue\n   * @return {?}\n   */\n  get(token, notFoundValue) {\n    return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);\n  }\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getFactoryOf(type) {\n  /** @type {?} */\n  const typeAny = /** @type {?} */type;\n  /** @type {?} */\n  const def = getComponentDef(typeAny) || getDirectiveDef(typeAny) || getPipeDef(typeAny) || getInjectableDef(typeAny) || getInjectorDef(typeAny);\n  if (!def || def.factory === undefined) {\n    return null;\n  }\n  return def.factory;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getInheritedFactory(type) {\n  /** @type {?} */\n  const proto = /** @type {?} */Object.getPrototypeOf(type.prototype).constructor;\n  /** @type {?} */\n  const factory = getFactoryOf(proto);\n  if (factory !== null) {\n    return factory;\n  } else {\n    // There is no factory defined. Either this was improper usage of inheritance\n    // (no Angular decorator on the superclass) or there is no constructor at all\n    // in the inheritance chain. Since the two cases cannot be distinguished, the\n    // latter has to be assumed.\n    return t => new t();\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param {?} target Component, Directive or DOM Node.\n * @return {?}\n */\nfunction getLContext(target) {\n  /** @type {?} */\n  let mpValue = readPatchedData(target);\n  if (mpValue) {\n    // only when it's an array is it considered an LView instance\n    // ... otherwise it's an already constructed LContext instance\n    if (Array.isArray(mpValue)) {\n      /** @type {?} */\n      const lView = /** @type {?} */mpValue;\n      /** @type {?} */\n      let nodeIndex;\n      /** @type {?} */\n      let component = undefined;\n      /** @type {?} */\n      let directives = undefined;\n      if (isComponentInstance(target)) {\n        nodeIndex = findViaComponent(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided component was not found in the application');\n        }\n        component = target;\n      } else if (isDirectiveInstance(target)) {\n        nodeIndex = findViaDirective(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided directive was not found in the application');\n        }\n        directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n      } else {\n        nodeIndex = findViaNativeElement(lView, /** @type {?} */target);\n        if (nodeIndex == -1) {\n          return null;\n        }\n      }\n      // the goal is not to fill the entire context full of data because the lookups\n      // are expensive. Instead, only the target data (the element, component, container, ICU\n      // expression or directive details) are filled into the context. If called multiple times\n      // with different target values then the missing target data will be filled in.\n      /** @type {?} */\n      const native = readElementValue(lView[nodeIndex]);\n      /** @type {?} */\n      const existingCtx = readPatchedData(native);\n      /** @type {?} */\n      const context = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, native);\n      // only when the component has been discovered then update the monkey-patch\n      if (component && context.component === undefined) {\n        context.component = component;\n        attachPatchData(context.component, context);\n      }\n      // only when the directives have been discovered then update the monkey-patch\n      if (directives && context.directives === undefined) {\n        context.directives = directives;\n        for (let i = 0; i < directives.length; i++) {\n          attachPatchData(directives[i], context);\n        }\n      }\n      attachPatchData(context.native, context);\n      mpValue = context;\n    }\n  } else {\n    /** @type {?} */\n    const rElement = /** @type {?} */target;\n    ngDevMode && assertDomNode(rElement);\n    // if the context is not found then we need to traverse upwards up the DOM\n    // to find the nearest element that has already been monkey patched with data\n    /** @type {?} */\n    let parent = /** @type {?} */rElement;\n    while (parent = parent.parentNode) {\n      /** @type {?} */\n      const parentContext = readPatchedData(parent);\n      if (parentContext) {\n        /** @type {?} */\n        let lView;\n        if (Array.isArray(parentContext)) {\n          lView = /** @type {?} */parentContext;\n        } else {\n          lView = parentContext.lView;\n        }\n        // the edge of the app was also reached here through another means\n        // (maybe because the DOM was changed manually).\n        if (!lView) {\n          return null;\n        }\n        /** @type {?} */\n        const index = findViaNativeElement(lView, rElement);\n        if (index >= 0) {\n          /** @type {?} */\n          const native = readElementValue(lView[index]);\n          /** @type {?} */\n          const context = createLContext(lView, index, native);\n          attachPatchData(native, context);\n          mpValue = context;\n          break;\n        }\n      }\n    }\n  }\n  return (/** @type {?} */mpValue || null\n  );\n}\n/**\n * Creates an empty instance of a `LContext` context\n * @param {?} lView\n * @param {?} nodeIndex\n * @param {?} native\n * @return {?}\n */\nfunction createLContext(lView, nodeIndex, native) {\n  return {\n    lView,\n    nodeIndex,\n    native,\n    component: undefined,\n    directives: undefined,\n    localRefs: undefined\n  };\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param {?} componentInstance\n * @return {?} The component's view\n */\nfunction getComponentViewByInstance(componentInstance) {\n  /** @type {?} */\n  let lView = readPatchedData(componentInstance);\n  /** @type {?} */\n  let view;\n  if (Array.isArray(lView)) {\n    /** @type {?} */\n    const nodeIndex = findViaComponent(lView, componentInstance);\n    view = getComponentViewByIndex(nodeIndex, lView);\n    /** @type {?} */\n    const context = createLContext(lView, nodeIndex, /** @type {?} */view[HOST]);\n    context.component = componentInstance;\n    attachPatchData(componentInstance, context);\n    attachPatchData(context.native, context);\n  } else {\n    /** @type {?} */\n    const context = /** @type {?} */ /** @type {?} */lView;\n    view = getComponentViewByIndex(context.nodeIndex, context.lView);\n  }\n  return view;\n}\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n * @param {?} target\n * @param {?} data\n * @return {?}\n */\nfunction attachPatchData(target, data) {\n  target[MONKEY_PATCH_KEY_NAME] = data;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction isComponentInstance(instance) {\n  return instance && instance.constructor && instance.constructor.ngComponentDef;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction isDirectiveInstance(instance) {\n  return instance && instance.constructor && instance.constructor.ngDirectiveDef;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} target\n * @return {?}\n */\nfunction findViaNativeElement(lView, target) {\n  /** @type {?} */\n  let tNode = lView[TVIEW].firstChild;\n  while (tNode) {\n    /** @type {?} */\n    const native = /** @type {?} */getNativeByTNode(tNode, lView);\n    if (native === target) {\n      return tNode.index;\n    }\n    tNode = traverseNextElement(tNode);\n  }\n  return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n * @param {?} tNode\n * @return {?}\n */\nfunction traverseNextElement(tNode) {\n  if (tNode.child) {\n    return tNode.child;\n  } else if (tNode.next) {\n    return tNode.next;\n  } else {\n    // Let's take the following template: <div><span>text</span></div><component/>\n    // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n    // in this case the parent `div`, so that we can find the component.\n    while (tNode.parent && !tNode.parent.next) {\n      tNode = tNode.parent;\n    }\n    return tNode.parent && tNode.parent.next;\n  }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} componentInstance\n * @return {?}\n */\nfunction findViaComponent(lView, componentInstance) {\n  /** @type {?} */\n  const componentIndices = lView[TVIEW].components;\n  if (componentIndices) {\n    for (let i = 0; i < componentIndices.length; i++) {\n      /** @type {?} */\n      const elementComponentIndex = componentIndices[i];\n      /** @type {?} */\n      const componentView = getComponentViewByIndex(elementComponentIndex, lView);\n      if (componentView[CONTEXT] === componentInstance) {\n        return elementComponentIndex;\n      }\n    }\n  } else {\n    /** @type {?} */\n    const rootComponentView = getComponentViewByIndex(HEADER_OFFSET, lView);\n    /** @type {?} */\n    const rootComponent = rootComponentView[CONTEXT];\n    if (rootComponent === componentInstance) {\n      // we are dealing with the root element here therefore we know that the\n      // element is the very first element after the HEADER data in the lView\n      return HEADER_OFFSET;\n    }\n  }\n  return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} directiveInstance\n * @return {?}\n */\nfunction findViaDirective(lView, directiveInstance) {\n  // if a directive is monkey patched then it will (by default)\n  // have a reference to the LView of the current view. The\n  // element bound to the directive being search lives somewhere\n  // in the view data. We loop through the nodes and check their\n  // list of directives for the instance.\n  /** @type {?} */\n  let tNode = lView[TVIEW].firstChild;\n  while (tNode) {\n    /** @type {?} */\n    const directiveIndexStart = tNode.directiveStart;\n    /** @type {?} */\n    const directiveIndexEnd = tNode.directiveEnd;\n    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n      if (lView[i] === directiveInstance) {\n        return tNode.index;\n      }\n    }\n    tNode = traverseNextElement(tNode);\n  }\n  return -1;\n}\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param {?} nodeIndex The node index\n * @param {?} lView The target view data\n * @param {?} includeComponents Whether or not to include components in returned directives\n * @return {?}\n */\nfunction getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {\n  /** @type {?} */\n  const tNode = /** @type {?} */lView[TVIEW].data[nodeIndex];\n  /** @type {?} */\n  let directiveStartIndex = tNode.directiveStart;\n  if (directiveStartIndex == 0) return EMPTY_ARRAY;\n  /** @type {?} */\n  const directiveEndIndex = tNode.directiveEnd;\n  if (!includeComponents && tNode.flags & 1 /* isComponent */) directiveStartIndex++;\n  return lView.slice(directiveStartIndex, directiveEndIndex);\n}\n/**\n * @param {?} nodeIndex\n * @param {?} lView\n * @return {?}\n */\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\n  /** @type {?} */\n  const tNode = /** @type {?} */lView[TVIEW].data[nodeIndex];\n  /** @type {?} */\n  let directiveStartIndex = tNode.directiveStart;\n  return tNode.flags & 1 /* isComponent */ ? lView[directiveStartIndex] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n * @param {?} lView\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction discoverLocalRefs(lView, nodeIndex) {\n  /** @type {?} */\n  const tNode = /** @type {?} */lView[TVIEW].data[nodeIndex];\n  if (tNode && tNode.localNames) {\n    /** @type {?} */\n    const result = {};\n    for (let i = 0; i < tNode.localNames.length; i += 2) {\n      /** @type {?} */\n      const localRefName = tNode.localNames[i];\n      /** @type {?} */\n      const directiveIndex = /** @type {?} */tNode.localNames[i + 1];\n      result[localRefName] = directiveIndex === -1 ? /** @type {?} */getNativeByTNode(tNode, lView) : lView[directiveIndex];\n    }\n    return result;\n  }\n  return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * \\@publicApi\n * @template T\n * @param {?} element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @return {?}\n */\nfunction getComponent(element) {\n  /** @type {?} */\n  const context = loadLContextFromNode(element);\n  if (context.component === undefined) {\n    context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);\n  }\n  return (/** @type {?} */context.component\n  );\n}\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * \\@publicApi\n * @template T\n * @param {?} element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @return {?}\n */\nfunction getContext(element) {\n  /** @type {?} */\n  const context = /** @type {?} */loadLContextFromNode(element);\n  return (/** @type {?} */context.lView[CONTEXT]\n  );\n}\n/**\n * Returns the component instance associated with view which owns the DOM element (`null`\n * otherwise).\n *\n * \\@publicApi\n * @template T\n * @param {?} element DOM element which is owned by an existing component's view.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getViewComponent(<child-comp>) instanceof MyApp).toBeTruthy();\n * expect(getViewComponent(<my-app>)).toEqual(null);\n * ```\n *\n * @return {?}\n */\nfunction getViewComponent(element) {\n  /** @type {?} */\n  const context = /** @type {?} */loadLContext(element);\n  /** @type {?} */\n  let lView = context.lView;\n  while (lView[PARENT] && lView[HOST] === null) {\n    // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`\n    lView = /** @type {?} */lView[PARENT];\n  }\n  return lView[FLAGS] & 128 /* IsRoot */ ? null : /** @type {?} */lView[CONTEXT];\n}\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated.\n *\n * @param {?} target\n * @return {?}\n */\nfunction getRootContext$1(target) {\n  /** @type {?} */\n  const lViewData = Array.isArray(target) ? target : /** @type {?} */loadLContext(target).lView;\n  /** @type {?} */\n  const rootLView = getRootView$1(lViewData);\n  return (/** @type {?} */rootLView[CONTEXT]\n  );\n}\n/**\n * Retrieve all root components.\n *\n * Root components are those which have been bootstrapped by Angular.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getRootComponents(target) {\n  return [...getRootContext$1(target).components];\n}\n/**\n * Retrieves an `Injector` associated with the element, component or directive.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getInjector(target) {\n  /** @type {?} */\n  const context = loadLContext(target);\n  /** @type {?} */\n  const tNode = /** @type {?} */context.lView[TVIEW].data[context.nodeIndex];\n  return new NodeInjector(tNode, context.lView);\n}\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * \\@publicApi\n * @param {?} element Element for which the injection tokens should be retrieved.\n * @return {?}\n */\nfunction getInjectionTokens(element) {\n  /** @type {?} */\n  const context = loadLContext(element, false);\n  if (!context) return [];\n  /** @type {?} */\n  const lView = context.lView;\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  /** @type {?} */\n  const tNode = /** @type {?} */tView.data[context.nodeIndex];\n  /** @type {?} */\n  const providerTokens = [];\n  /** @type {?} */\n  const startIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n  /** @type {?} */\n  const endIndex = tNode.directiveEnd;\n  for (let i = startIndex; i < endIndex; i++) {\n    /** @type {?} */\n    let value = tView.data[i];\n    if (isDirectiveDefHack(value)) {\n      // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n      // design flaw.  We should always store same type so that we can be monomorphic. The issue\n      // is that for Components/Directives we store the def instead the type. The correct behavior\n      // is that we should always be storing injectable type in this location.\n      value = value.type;\n    }\n    providerTokens.push(value);\n  }\n  return providerTokens;\n}\n/**\n * Retrieves directives associated with a given DOM host element.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getDirectives(target) {\n  /** @type {?} */\n  const context = /** @type {?} */loadLContext(target);\n  if (context.directives === undefined) {\n    context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);\n  }\n  return context.directives || [];\n}\n/**\n * @param {?} target\n * @param {?=} throwOnNotFound\n * @return {?}\n */\nfunction loadLContext(target, throwOnNotFound = true) {\n  /** @type {?} */\n  const context = getLContext(target);\n  if (!context && throwOnNotFound) {\n    throw new Error(ngDevMode ? `Unable to find context associated with ${stringify$1(target)}` : 'Invalid ng target');\n  }\n  return context;\n}\n/**\n * Retrieve the root view from any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} componentOrView any component or view\n *\n * @return {?}\n */\nfunction getRootView$1(componentOrView) {\n  /** @type {?} */\n  let lView;\n  if (Array.isArray(componentOrView)) {\n    ngDevMode && assertDefined(componentOrView, 'lView');\n    lView = /** @type {?} */componentOrView;\n  } else {\n    ngDevMode && assertDefined(componentOrView, 'component');\n    lView = /** @type {?} */readPatchedLView(componentOrView);\n  }\n  while (lView && !(lView[FLAGS] & 128 /* IsRoot */)) {\n    lView = /** @type {?} */lView[PARENT];\n  }\n  return lView;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getLocalRefs(target) {\n  /** @type {?} */\n  const context = /** @type {?} */loadLContext(target);\n  if (context.localRefs === undefined) {\n    context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);\n  }\n  return context.localRefs || {};\n}\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * \\@publicApi\n * @template T\n * @param {?} directive Component or Directive for which the host element should be retrieved.\n *\n * @return {?}\n */\nfunction getHostElement(directive) {\n  return (/** @type {?} */ /** @type {?} */ /** @type {?} */getLContext(directive).native\n  );\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction loadLContextFromNode(node) {\n  if (!(node instanceof Node)) throw new Error('Expecting instance of DOM Node');\n  return (/** @type {?} */loadLContext(node)\n  );\n}\n/**\n * @param {?} listener\n * @return {?}\n */\nfunction isBrowserEvents(listener) {\n  // Browser events are those which don't have `useCapture` as boolean.\n  return typeof listener.useCapture === 'boolean';\n}\n/**\n * Retrieves a list of DOM listeners.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div (click)=\"doSomething()\">\n *     </div>\n * </mp-app>\n *\n * expect(getListeners(<div>)).toEqual({\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * });\n * ```\n *\n * \\@publicApi\n * @param {?} element Element for which the DOM listeners should be retrieved.\n * @return {?}\n */\nfunction getListeners(element) {\n  /** @type {?} */\n  const lContext = loadLContextFromNode(element);\n  /** @type {?} */\n  const lView = lContext.lView;\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  /** @type {?} */\n  const lCleanup = lView[CLEANUP];\n  /** @type {?} */\n  const tCleanup = tView.cleanup;\n  /** @type {?} */\n  const listeners = [];\n  if (tCleanup && lCleanup) {\n    for (let i = 0; i < tCleanup.length;) {\n      /** @type {?} */\n      const firstParam = tCleanup[i++];\n      /** @type {?} */\n      const secondParam = tCleanup[i++];\n      if (typeof firstParam === 'string') {\n        /** @type {?} */\n        const name = firstParam;\n        /** @type {?} */\n        const listenerElement = /** @type {?} */ /** @type {?} */readElementValue(lView[secondParam]);\n        /** @type {?} */\n        const callback = lCleanup[tCleanup[i++]];\n        /** @type {?} */\n        const useCaptureOrIndx = tCleanup[i++];\n        // if useCaptureOrIndx is boolean then report it as is.\n        // if useCaptureOrIndx is positive number then it in unsubscribe method\n        // if useCaptureOrIndx is negative number then it is a Subscription\n        /** @type {?} */\n        const useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : useCaptureOrIndx >= 0 ? false : null;\n        if (element == listenerElement) {\n          listeners.push({\n            element,\n            name,\n            callback,\n            useCapture\n          });\n        }\n      }\n    }\n  }\n  listeners.sort(sortListeners);\n  return listeners;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sortListeners(a, b) {\n  if (a.name == b.name) return 0;\n  return a.name < b.name ? -1 : 1;\n}\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n * @param {?} obj\n * @return {?}\n */\nfunction isDirectiveDefHack(obj) {\n  return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} name\n * @return {?}\n */\nfunction normalizeDebugBindingName(name) {\n  // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n  name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n  return `ng-reflect-${name}`;\n}\n/** @type {?} */\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction camelCaseToDashCase(input) {\n  return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeDebugBindingValue(value) {\n  try {\n    // Limit the size of the value as otherwise the DOM just gets polluted.\n    return value != null ? value.toString().slice(0, 30) : value;\n  } catch (e) {\n    return '[ERROR] Exception while trying to serialize the value';\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction devModeEqual(a, b) {\n  /** @type {?} */\n  const isListLikeIterableA = isListLikeIterable(a);\n  /** @type {?} */\n  const isListLikeIterableB = isListLikeIterable(b);\n  if (isListLikeIterableA && isListLikeIterableB) {\n    return areIterablesEqual(a, b, devModeEqual);\n  } else {\n    /** @type {?} */\n    const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n    /** @type {?} */\n    const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n      return true;\n    } else {\n      return looseIdentical(a, b);\n    }\n  }\n}\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * \\@publicApi\n */\nclass WrappedValue {\n  /**\n   * @param {?} value\n   */\n  constructor(value) {\n    this.wrapped = value;\n  }\n  /**\n   * Creates a wrapped value.\n   * @param {?} value\n   * @return {?}\n   */\n  static wrap(value) {\n    return new WrappedValue(value);\n  }\n  /**\n   * Returns the underlying value of a wrapped value.\n   * Returns the given `value` when it is not wrapped.\n   *\n   * @param {?} value\n   * @return {?}\n   */\n  static unwrap(value) {\n    return WrappedValue.isWrapped(value) ? value.wrapped : value;\n  }\n  /**\n   * Returns true if `value` is a wrapped value.\n   * @param {?} value\n   * @return {?}\n   */\n  static isWrapped(value) {\n    return value instanceof WrappedValue;\n  }\n}\n/**\n * Represents a basic change from a previous to a new value.\n *\n * \\@publicApi\n */\nclass SimpleChange {\n  /**\n   * @param {?} previousValue\n   * @param {?} currentValue\n   * @param {?} firstChange\n   */\n  constructor(previousValue, currentValue, firstChange) {\n    this.previousValue = previousValue;\n    this.currentValue = currentValue;\n    this.firstChange = firstChange;\n  }\n  /**\n   * Check whether the new value is the first value assigned.\n   * @return {?}\n   */\n  isFirstChange() {\n    return this.firstChange;\n  }\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isListLikeIterable(obj) {\n  if (!isJsObject(obj)) return false;\n  return Array.isArray(obj) || !(obj instanceof Map) &&\n  // JS Map are iterables but return entries as [k, v]\n  getSymbolIterator() in obj; // JS Iterable have a Symbol.iterator prop\n}\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} comparator\n * @return {?}\n */\nfunction areIterablesEqual(a, b, comparator) {\n  /** @type {?} */\n  const iterator1 = a[getSymbolIterator()]();\n  /** @type {?} */\n  const iterator2 = b[getSymbolIterator()]();\n  while (true) {\n    /** @type {?} */\n    const item1 = iterator1.next();\n    /** @type {?} */\n    const item2 = iterator2.next();\n    if (item1.done && item2.done) return true;\n    if (item1.done || item2.done) return false;\n    if (!comparator(item1.value, item2.value)) return false;\n  }\n}\n/**\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nfunction iterateListLike(obj, fn) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    /** @type {?} */\n    const iterator = obj[getSymbolIterator()]();\n    /** @type {?} */\n    let item;\n    while (!(item = iterator.next()).done) {\n      fn(item.value);\n    }\n  }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isJsObject(o) {\n  return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Called when there are multiple component selectors that match a given node\n * @param {?} tNode\n * @return {?}\n */\nfunction throwMultipleComponentError(tNode) {\n  throw new Error(`Multiple components match node with tagname ${tNode.tagName}`);\n}\n/**\n * Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on.\n * @param {?} creationMode\n * @param {?} oldValue\n * @param {?} currValue\n * @return {?}\n */\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue) {\n  /** @type {?} */\n  let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n  if (creationMode) {\n    msg += ` It seems like the view has been created after its parent and its children have been dirty checked.` + ` Has it been created in a change detection hook ?`;\n  }\n  // TODO: include debug context\n  throw new Error(msg);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * A special value which designates that a value has not changed.\n * @type {?}\n */\nconst NO_CHANGE = /** @type {?} */{};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(misko): consider inlining\n/**\n * Updates binding and returns the value.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nfunction updateBinding(lView, bindingIndex, value) {\n  return lView[bindingIndex] = value;\n}\n/**\n * Gets the current binding value.\n * @param {?} lView\n * @param {?} bindingIndex\n * @return {?}\n */\nfunction getBinding(lView, bindingIndex) {\n  ngDevMode && assertDataInRange(lView, lView[bindingIndex]);\n  ngDevMode && assertNotEqual(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n  return lView[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nfunction bindingUpdated(lView, bindingIndex, value) {\n  ngDevMode && assertNotEqual(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n  ngDevMode && assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n  if (lView[bindingIndex] === NO_CHANGE) {\n    // initial pass\n    lView[bindingIndex] = value;\n  } else if (isDifferent(lView[bindingIndex], value)) {\n    if (ngDevMode && getCheckNoChangesMode()) {\n      if (!devModeEqual(lView[bindingIndex], value)) {\n        throwErrorIfNoChangesMode(isCreationMode(lView), lView[bindingIndex], value);\n      }\n    }\n    lView[bindingIndex] = value;\n  } else {\n    return false;\n  }\n  return true;\n}\n/**\n * Updates 2 bindings if changed, then returns whether either was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @return {?}\n */\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n  /** @type {?} */\n  const different = bindingUpdated(lView, bindingIndex, exp1);\n  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/**\n * Updates 3 bindings if changed, then returns whether any was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @return {?}\n */\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n  /** @type {?} */\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/**\n * Updates 4 bindings if changed, then returns whether any was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @return {?}\n */\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n  /** @type {?} */\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The goal here is to make sure that the browser DOM API is the Renderer.\n * We do this by defining a subset of DOM API to be the renderer and than\n * use that time for rendering.\n *\n * At runtime we can then use the DOM api directly, in server or web-worker\n * it will be easy to implement such API.\n */\n/** @enum {number} */\nconst RendererStyleFlags3 = {\n  Important: 1,\n  DashCase: 2\n};\nRendererStyleFlags3[RendererStyleFlags3.Important] = 'Important';\nRendererStyleFlags3[RendererStyleFlags3.DashCase] = 'DashCase';\n/**\n * Returns whether the `renderer` is a `ProceduralRenderer3`\n * @param {?} renderer\n * @return {?}\n */\nfunction isProceduralRenderer(renderer) {\n  return !! /** @type {?} */renderer.listen;\n}\n/** @type {?} */\nconst domRendererFactory3 = {\n  createRenderer: (hostElement, rendererType) => {\n    return document;\n  }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Retrieves the parent element of a given node.\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction getParentNative(tNode, currentView) {\n  if (tNode.parent == null) {\n    return getHostNative(currentView);\n  } else {\n    /** @type {?} */\n    const parentTNode = getFirstParentNative(tNode);\n    return getNativeByTNode(parentTNode, currentView);\n  }\n}\n/**\n * Get the first parent of a node that isn't an IcuContainer TNode\n * @param {?} tNode\n * @return {?}\n */\nfunction getFirstParentNative(tNode) {\n  /** @type {?} */\n  let parent = tNode.parent;\n  while (parent && parent.type === 5 /* IcuContainer */) {\n    parent = parent.parent;\n  }\n  return (/** @type {?} */parent\n  );\n}\n/**\n * Gets the host element given a view. Will return null if the current view is an embedded view,\n * which does not have a host element.\n * @param {?} currentView\n * @return {?}\n */\nfunction getHostNative(currentView) {\n  /** @type {?} */\n  const hostTNode = /** @type {?} */currentView[HOST_NODE];\n  return hostTNode && hostTNode.type !== 2 /* View */ ? /** @type {?} */getNativeByTNode(hostTNode, /** @type {?} */currentView[PARENT]) : null;\n}\n/**\n * @param {?} tNode\n * @param {?} embeddedView\n * @return {?}\n */\nfunction getLContainer(tNode, embeddedView) {\n  if (tNode.index === -1) {\n    // This is a dynamically created view inside a dynamic container.\n    // If the host index is -1, the view has not yet been inserted, so it has no parent.\n    /** @type {?} */\n    const containerHostIndex = embeddedView[CONTAINER_INDEX];\n    return containerHostIndex > -1 ? /** @type {?} */embeddedView[PARENT][containerHostIndex] : null;\n  } else {\n    // This is a inline view node (e.g. embeddedViewStart)\n    return (/** @type {?} */ /** @type {?} */embeddedView[PARENT][/** @type {?} */tNode.parent.index]\n    );\n  }\n}\n/**\n * Retrieves render parent for a given view.\n * Might be null if a view is not yet attached to any container.\n * @param {?} tViewNode\n * @param {?} view\n * @return {?}\n */\nfunction getContainerRenderParent(tViewNode, view) {\n  /** @type {?} */\n  const container = getLContainer(tViewNode, view);\n  return container ? container[RENDER_PARENT] : null;\n}\n/**\n * Stack used to keep track of projection nodes in walkTNodeTree.\n *\n * This is deliberately created outside of walkTNodeTree to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n * @type {?}\n */\nconst projectionNodeStack = [];\n/**\n * Walks a tree of TNodes, applying a transformation on the element nodes, either only on the first\n * one found, or on all of them.\n *\n * @param {?} viewToWalk the view to walk\n * @param {?} action identifies the action to be performed on the elements\n * @param {?} renderer the current renderer.\n * @param {?} renderParent Optional the render parent node to be set in all LContainers found,\n * required for action modes Insert and Destroy.\n * @param {?=} beforeNode Optional the node before which elements should be added, required for action\n * Insert.\n * @return {?}\n */\nfunction walkTNodeTree(viewToWalk, action, renderer, renderParent, beforeNode) {\n  /** @type {?} */\n  const rootTNode = /** @type {?} */viewToWalk[TVIEW].node;\n  /** @type {?} */\n  let projectionNodeIndex = -1;\n  /** @type {?} */\n  let currentView = viewToWalk;\n  /** @type {?} */\n  let tNode = /** @type {?} */rootTNode.child;\n  while (tNode) {\n    /** @type {?} */\n    let nextTNode = null;\n    if (tNode.type === 3 /* Element */) {\n      executeNodeAction(action, renderer, renderParent, getNativeByTNode(tNode, currentView), beforeNode);\n      /** @type {?} */\n      const nodeOrContainer = currentView[tNode.index];\n      if (isLContainer(nodeOrContainer)) {\n        // This element has an LContainer, and its comment needs to be handled\n        executeNodeAction(action, renderer, renderParent, nodeOrContainer[NATIVE], beforeNode);\n      }\n    } else if (tNode.type === 0 /* Container */) {\n      /** @type {?} */\n      const lContainer = /** @type {?} */ /** @type {?} */currentView[tNode.index];\n      executeNodeAction(action, renderer, renderParent, lContainer[NATIVE], beforeNode);\n      if (renderParent) lContainer[RENDER_PARENT] = renderParent;\n      if (lContainer[VIEWS].length) {\n        currentView = lContainer[VIEWS][0];\n        nextTNode = currentView[TVIEW].node;\n        // When the walker enters a container, then the beforeNode has to become the local native\n        // comment node.\n        beforeNode = lContainer[NATIVE];\n      }\n    } else if (tNode.type === 1 /* Projection */) {\n      /** @type {?} */\n      const componentView = findComponentView( /** @type {?} */currentView);\n      /** @type {?} */\n      const componentHost = /** @type {?} */componentView[HOST_NODE];\n      /** @type {?} */\n      const head = /** @type {?} */componentHost.projection[/** @type {?} */tNode.projection];\n      // Must store both the TNode and the view because this projection node could be nested\n      // deeply inside embedded views, and we need to get back down to this particular nested view.\n      projectionNodeStack[++projectionNodeIndex] = tNode;\n      projectionNodeStack[++projectionNodeIndex] = /** @type {?} */currentView;\n      if (head) {\n        currentView = /** @type {?} */componentView[PARENT];\n        nextTNode = /** @type {?} */currentView[TVIEW].data[head.index];\n      }\n    } else {\n      // Otherwise, this is a View or an ElementContainer\n      nextTNode = tNode.child;\n    }\n    if (nextTNode === null) {\n      // this last node was projected, we need to get back down to its projection node\n      if (tNode.next === null && tNode.flags & 2 /* isProjected */) {\n        currentView = /** @type {?} */projectionNodeStack[projectionNodeIndex--];\n        tNode = /** @type {?} */projectionNodeStack[projectionNodeIndex--];\n      }\n      nextTNode = tNode.next;\n      /**\n       * Find the next node in the TNode tree, taking into account the place where a node is\n       * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n       *\n       * If there is no sibling node, then it goes to the next sibling of the parent node...\n       * until it reaches rootNode (at which point null is returned).\n       */\n      while (!nextTNode) {\n        // If parent is null, we're crossing the view boundary, so we should get the host TNode.\n        tNode = tNode.parent || currentView[TVIEW].node;\n        if (tNode === null || tNode === rootTNode) return null;\n        // When exiting a container, the beforeNode must be restored to the previous value\n        if (tNode.type === 0 /* Container */) {\n          currentView = /** @type {?} */currentView[PARENT];\n          beforeNode = currentView[tNode.index][NATIVE];\n        }\n        if (tNode.type === 2 /* View */ && currentView[NEXT]) {\n          currentView = /** @type {?} */currentView[NEXT];\n          nextTNode = currentView[TVIEW].node;\n        } else {\n          nextTNode = tNode.next;\n        }\n      }\n    }\n    tNode = nextTNode;\n  }\n}\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n * @param {?} action\n * @param {?} renderer\n * @param {?} parent\n * @param {?} node\n * @param {?=} beforeNode\n * @return {?}\n */\nfunction executeNodeAction(action, renderer, parent, node, beforeNode) {\n  if (action === 0 /* Insert */) {\n    isProceduralRenderer( /** @type {?} */renderer) ? /** @type {?} */renderer.insertBefore( /** @type {?} */parent, node, /** @type {?} */beforeNode) : /** @type {?} */parent.insertBefore(node, /** @type {?} */beforeNode, true);\n  } else if (action === 1 /* Detach */) {\n    isProceduralRenderer( /** @type {?} */renderer) ? /** @type {?} */renderer.removeChild( /** @type {?} */parent, node) : /** @type {?} */parent.removeChild(node);\n  } else if (action === 2 /* Destroy */) {\n    ngDevMode && ngDevMode.rendererDestroyNode++;\n    /** @type {?} */ /** @type {?} */renderer.destroyNode(node);\n  }\n}\n/**\n * @param {?} value\n * @param {?} renderer\n * @return {?}\n */\nfunction createTextNode(value, renderer) {\n  return isProceduralRenderer(renderer) ? renderer.createText(stringify$1(value)) : renderer.createTextNode(stringify$1(value));\n}\n/**\n * @param {?} viewToWalk\n * @param {?} insertMode\n * @param {?=} beforeNode\n * @return {?}\n */\nfunction addRemoveViewFromContainer(viewToWalk, insertMode, beforeNode) {\n  /** @type {?} */\n  const renderParent = getContainerRenderParent( /** @type {?} */viewToWalk[TVIEW].node, viewToWalk);\n  ngDevMode && assertNodeType( /** @type {?} */viewToWalk[TVIEW].node, 2 /* View */);\n  if (renderParent) {\n    /** @type {?} */\n    const renderer = viewToWalk[RENDERER];\n    walkTNodeTree(viewToWalk, insertMode ? 0 /* Insert */ : 1 /* Detach */, renderer, renderParent, beforeNode);\n  }\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n * @param {?} rootView The view to destroy\n * @return {?}\n */\nfunction destroyViewTree(rootView) {\n  // If the view has no children, we can clean it up and return early.\n  if (rootView[TVIEW].childIndex === -1) {\n    return cleanUpView(rootView);\n  }\n  /** @type {?} */\n  let viewOrContainer = getLViewChild(rootView);\n  while (viewOrContainer) {\n    /** @type {?} */\n    let next = null;\n    if (viewOrContainer.length >= HEADER_OFFSET) {\n      // If LView, traverse down to child.\n      /** @type {?} */\n      const view = /** @type {?} */viewOrContainer;\n      if (view[TVIEW].childIndex > -1) next = getLViewChild(view);\n    } else {\n      // If container, traverse down to its first LView.\n      /** @type {?} */\n      const container = /** @type {?} */viewOrContainer;\n      if (container[VIEWS].length) next = container[VIEWS][0];\n    }\n    if (next == null) {\n      // Only clean up view when moving to the side or up, as destroy hooks\n      // should be called in order from the bottom up.\n      while (viewOrContainer && ! /** @type {?} */viewOrContainer[NEXT] && viewOrContainer !== rootView) {\n        cleanUpView(viewOrContainer);\n        viewOrContainer = getParentState(viewOrContainer, rootView);\n      }\n      cleanUpView(viewOrContainer || rootView);\n      next = viewOrContainer && /** @type {?} */viewOrContainer[NEXT];\n    }\n    viewOrContainer = next;\n  }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param {?} lView The view to insert\n * @param {?} lContainer The container into which the view should be inserted\n * @param {?} parentView The new parent of the inserted view\n * @param {?} index The index at which to insert the view\n * @param {?} containerIndex The index of the container node, if dynamic\n * @return {?}\n */\nfunction insertView(lView, lContainer, parentView, index, containerIndex) {\n  /** @type {?} */\n  const views = lContainer[VIEWS];\n  if (index > 0) {\n    // This is a new view, we need to add it to the children.\n    views[index - 1][NEXT] = lView;\n  }\n  if (index < views.length) {\n    lView[NEXT] = views[index];\n    views.splice(index, 0, lView);\n  } else {\n    views.push(lView);\n    lView[NEXT] = null;\n  }\n  // Dynamically inserted views need a reference to their parent container's host so it's\n  // possible to jump from a view to its container's next when walking the node tree.\n  if (containerIndex > -1) {\n    lView[CONTAINER_INDEX] = containerIndex;\n    lView[PARENT] = parentView;\n  }\n  // Notify query that a new view has been added\n  if (lView[QUERIES]) {\n    /** @type {?} */lView[QUERIES].insertView(index);\n  }\n  // Sets the attached flag\n  lView[FLAGS] |= 16 /* Attached */;\n}\n/**\n * Detaches a view from a container.\n *\n * This method splices the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param {?} lContainer The container from which to detach a view\n * @param {?} removeIndex The index of the view to detach\n * @param {?} detached Whether or not this view is already detached.\n * @return {?} Detached LView instance.\n */\nfunction detachView(lContainer, removeIndex, detached) {\n  /** @type {?} */\n  const views = lContainer[VIEWS];\n  /** @type {?} */\n  const viewToDetach = views[removeIndex];\n  if (removeIndex > 0) {\n    views[removeIndex - 1][NEXT] = /** @type {?} */viewToDetach[NEXT];\n  }\n  views.splice(removeIndex, 1);\n  if (!detached) {\n    addRemoveViewFromContainer(viewToDetach, false);\n  }\n  if (viewToDetach[QUERIES]) {\n    /** @type {?} */viewToDetach[QUERIES].removeView();\n  }\n  viewToDetach[CONTAINER_INDEX] = -1;\n  viewToDetach[PARENT] = null;\n  // Unsets the attached flag\n  viewToDetach[FLAGS] &= ~16 /* Attached */;\n  return viewToDetach;\n}\n/**\n * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n *\n * @param {?} lContainer The container from which to remove a view\n * @param {?} containerHost\n * @param {?} removeIndex The index of the view to remove\n * @return {?}\n */\nfunction removeView(lContainer, containerHost, removeIndex) {\n  /** @type {?} */\n  const view = lContainer[VIEWS][removeIndex];\n  detachView(lContainer, removeIndex, !!containerHost.detached);\n  destroyLView(view);\n}\n/**\n * Gets the child of the given LView\n * @param {?} lView\n * @return {?}\n */\nfunction getLViewChild(lView) {\n  /** @type {?} */\n  const childIndex = lView[TVIEW].childIndex;\n  return childIndex === -1 ? null : lView[childIndex];\n}\n/**\n * A standalone function which destroys an LView,\n * conducting cleanup (e.g. removing listeners, calling onDestroys).\n *\n * @param {?} view The view to be destroyed.\n * @return {?}\n */\nfunction destroyLView(view) {\n  /** @type {?} */\n  const renderer = view[RENDERER];\n  if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n    walkTNodeTree(view, 2 /* Destroy */, renderer, null);\n  }\n  destroyViewTree(view);\n  // Sets the destroyed flag\n  view[FLAGS] |= 64 /* Destroyed */;\n}\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param {?} state The LViewOrLContainer for which we need a parent state\n * @param {?} rootView The rootView, so we don't propagate too far up the view tree\n * @return {?} The correct parent LViewOrLContainer\n */\nfunction getParentState(state, rootView) {\n  /** @type {?} */\n  let tNode;\n  if (state.length >= HEADER_OFFSET && (tNode = /** @type {?} */ /** @type {?} */state[HOST_NODE]) && tNode.type === 2 /* View */) {\n    // if it's an embedded view, the state needs to go up to the container, in case the\n    // container has a next\n    return (/** @type {?} */getLContainer( /** @type {?} */tNode, /** @type {?} */state)\n    );\n  } else {\n    // otherwise, use parent view for containers or component views\n    return state[PARENT] === rootView ? null : state[PARENT];\n  }\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to \\@Output listeners.\n *\n * @param {?} viewOrContainer\n * @return {?}\n */\nfunction cleanUpView(viewOrContainer) {\n  if ( /** @type {?} */viewOrContainer.length >= HEADER_OFFSET) {\n    /** @type {?} */\n    const view = /** @type {?} */viewOrContainer;\n    executeOnDestroys(view);\n    executePipeOnDestroys(view);\n    removeListeners(view);\n    /** @type {?} */\n    const hostTNode = view[HOST_NODE];\n    // For component views only, the local renderer is destroyed as clean up time.\n    if (hostTNode && hostTNode.type === 3 /* Element */ && isProceduralRenderer(view[RENDERER])) {\n      ngDevMode && ngDevMode.rendererDestroy++;\n      /** @type {?} */view[RENDERER].destroy();\n    }\n  }\n}\n/**\n * Removes listeners and unsubscribes from output subscriptions\n * @param {?} lView\n * @return {?}\n */\nfunction removeListeners(lView) {\n  /** @type {?} */\n  const tCleanup = /** @type {?} */lView[TVIEW].cleanup;\n  if (tCleanup != null) {\n    /** @type {?} */\n    const lCleanup = /** @type {?} */lView[CLEANUP];\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      if (typeof tCleanup[i] === 'string') {\n        // This is a listener with the native renderer\n        /** @type {?} */\n        const idx = tCleanup[i + 1];\n        /** @type {?} */\n        const listener = lCleanup[tCleanup[i + 2]];\n        /** @type {?} */\n        const native = readElementValue(lView[idx]);\n        /** @type {?} */\n        const useCaptureOrSubIdx = tCleanup[i + 3];\n        if (typeof useCaptureOrSubIdx === 'boolean') {\n          // DOM listener\n          native.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n        } else {\n          if (useCaptureOrSubIdx >= 0) {\n            // unregister\n            lCleanup[useCaptureOrSubIdx]();\n          } else {\n            // Subscription\n            lCleanup[-useCaptureOrSubIdx].unsubscribe();\n          }\n        }\n        i += 2;\n      } else if (typeof tCleanup[i] === 'number') {\n        // This is a listener with renderer2 (cleanup fn can be found by index)\n        /** @type {?} */\n        const cleanupFn = lCleanup[tCleanup[i]];\n        cleanupFn();\n      } else {\n        // This is a cleanup function that is grouped with the index of its context\n        /** @type {?} */\n        const context = lCleanup[tCleanup[i + 1]];\n        tCleanup[i].call(context);\n      }\n    }\n    lView[CLEANUP] = null;\n  }\n}\n/**\n * Calls onDestroy hooks for this view\n * @param {?} view\n * @return {?}\n */\nfunction executeOnDestroys(view) {\n  /** @type {?} */\n  const tView = view[TVIEW];\n  /** @type {?} */\n  let destroyHooks;\n  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n    callHooks(view, destroyHooks);\n  }\n}\n/**\n * Calls pipe destroy hooks for this view\n * @param {?} lView\n * @return {?}\n */\nfunction executePipeOnDestroys(lView) {\n  /** @type {?} */\n  const pipeDestroyHooks = lView[TVIEW] && lView[TVIEW].pipeDestroyHooks;\n  if (pipeDestroyHooks) {\n    callHooks( /** @type {?} */lView, pipeDestroyHooks);\n  }\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction getRenderParent(tNode, currentView) {\n  if (canInsertNativeNode(tNode, currentView)) {\n    // If we are asked for a render parent of the root component we need to do low-level DOM\n    // operation as LTree doesn't exist above the topmost host node. We might need to find a render\n    // parent of the topmost host node if the root component injects ViewContainerRef.\n    if (isRootView(currentView)) {\n      return nativeParentNode(currentView[RENDERER], getNativeByTNode(tNode, currentView));\n    }\n    /** @type {?} */\n    const hostTNode = currentView[HOST_NODE];\n    /** @type {?} */\n    const tNodeParent = tNode.parent;\n    if (tNodeParent != null && tNodeParent.type === 4 /* ElementContainer */) {\n      tNode = getHighestElementContainer(tNodeParent);\n    }\n    return tNode.parent == null && /** @type {?} */hostTNode.type === 2 /* View */ ? getContainerRenderParent( /** @type {?} */hostTNode, currentView) : /** @type {?} */getParentNative(tNode, currentView);\n  }\n  return null;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction canInsertNativeChildOfElement(tNode) {\n  // If the parent is null, then we are inserting across views. This happens when we\n  // insert a root element of the component view into the component host element and it\n  // should always be eager.\n  if (tNode.parent == null ||\n  // We should also eagerly insert if the parent is a regular, non-component element\n  // since we know that this relationship will never be broken.\n  tNode.parent.type === 3 /* Element */ && !(tNode.parent.flags & 1 /* isComponent */)) {\n    return true;\n  }\n  // Parent is a Component. Component's content nodes are not inserted immediately\n  // because they will be projected, and so doing insert at this point would be wasteful.\n  // Since the projection would than move it to its final destination.\n  return false;\n}\n/**\n * We might delay insertion of children for a given view if it is disconnected.\n * This might happen for 2 main reasons:\n * - view is not inserted into any container (view was created but not inserted yet)\n * - view is inserted into a container but the container itself is not inserted into the DOM\n * (container might be part of projection or child of a view that is not inserted yet).\n *\n * In other words we can insert children of a given view if this view was inserted into a container\n * and\n * the container itself has its render parent determined.\n * @param {?} viewTNode\n * @param {?} view\n * @return {?}\n */\nfunction canInsertNativeChildOfView(viewTNode, view) {\n  // Because we are inserting into a `View` the `View` may be disconnected.\n  /** @type {?} */\n  const container = /** @type {?} */getLContainer(viewTNode, view);\n  if (container == null || container[RENDER_PARENT] == null) {\n    // The `View` is not inserted into a `Container` or the parent `Container`\n    // itself is disconnected. So we have to delay.\n    return false;\n  }\n  // The parent `Container` is in inserted state, so we can eagerly insert into\n  // this location.\n  return true;\n}\n/**\n * Returns whether a native element can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is mare for projection but has not been inserted\n *   into destination.\n *\n *\n * @param {?} tNode The tNode of the node that we want to insert.\n * @param {?} currentView Current LView being processed.\n * @return {?} boolean Whether the node should be inserted now (or delayed until later).\n */\nfunction canInsertNativeNode(tNode, currentView) {\n  /** @type {?} */\n  let currentNode = tNode;\n  /** @type {?} */\n  let parent = tNode.parent;\n  if (tNode.parent) {\n    if (tNode.parent.type === 4 /* ElementContainer */) {\n      currentNode = getHighestElementContainer(tNode);\n      parent = currentNode.parent;\n    } else if (tNode.parent.type === 5 /* IcuContainer */) {\n      currentNode = getFirstParentNative(currentNode);\n      parent = currentNode.parent;\n    }\n  }\n  if (parent === null) parent = currentView[HOST_NODE];\n  if (parent && parent.type === 2 /* View */) {\n    return canInsertNativeChildOfView( /** @type {?} */parent, currentView);\n  } else {\n    // Parent is a regular element or a component\n    return canInsertNativeChildOfElement(currentNode);\n  }\n}\n/**\n * Inserts a native node before another native node for a given parent using {\\@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?} beforeNode\n * @return {?}\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode) {\n  if (isProceduralRenderer(renderer)) {\n    renderer.insertBefore(parent, child, beforeNode);\n  } else {\n    parent.insertBefore(child, beforeNode, true);\n  }\n}\n/**\n * Returns a native parent of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nfunction nativeParentNode(renderer, node) {\n  return (/** @type {?} */isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode\n  );\n}\n/**\n * Returns a native sibling of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nfunction nativeNextSibling(renderer, node) {\n  return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n}\n/**\n * Appends the `child` element to the `parent`.\n *\n * The element insertion might be delayed {\\@link canInsertNativeNode}.\n *\n * @param {?=} childEl The child that should be appended\n * @param {?=} childTNode The TNode of the child element\n * @param {?=} currentView The current LView\n * @return {?} Whether or not the child was appended\n */\nfunction appendChild(childEl = null, childTNode, currentView) {\n  if (childEl !== null && canInsertNativeNode(childTNode, currentView)) {\n    /** @type {?} */\n    const renderer = currentView[RENDERER];\n    /** @type {?} */\n    const parentEl = getParentNative(childTNode, currentView);\n    /** @type {?} */\n    const parentTNode = childTNode.parent || /** @type {?} */currentView[HOST_NODE];\n    if (parentTNode.type === 2 /* View */) {\n      /** @type {?} */\n      const lContainer = /** @type {?} */getLContainer( /** @type {?} */parentTNode, currentView);\n      /** @type {?} */\n      const views = lContainer[VIEWS];\n      /** @type {?} */\n      const index = views.indexOf(currentView);\n      nativeInsertBefore(renderer, /** @type {?} */lContainer[RENDER_PARENT], childEl, getBeforeNodeForView(index, views, lContainer[NATIVE]));\n    } else if (parentTNode.type === 4 /* ElementContainer */) {\n      /** @type {?} */\n      const renderParent = /** @type {?} */getRenderParent(childTNode, currentView);\n      nativeInsertBefore(renderer, renderParent, childEl, parentEl);\n    } else if (parentTNode.type === 5 /* IcuContainer */) {\n      /** @type {?} */\n      const icuAnchorNode = /** @type {?} */ /** @type {?} */getNativeByTNode( /** @type {?} */childTNode.parent, currentView);\n      nativeInsertBefore(renderer, /** @type {?} */parentEl, childEl, icuAnchorNode);\n    } else {\n      isProceduralRenderer(renderer) ? renderer.appendChild( /** @type {?} */ /** @type {?} */parentEl, childEl) : /** @type {?} */parentEl.appendChild(childEl);\n    }\n    return true;\n  }\n  return false;\n}\n/**\n * Gets the top-level ng-container if ng-containers are nested.\n *\n * @param {?} ngContainer The TNode of the starting ng-container\n * @return {?} tNode The TNode of the highest level ng-container\n */\nfunction getHighestElementContainer(ngContainer) {\n  while (ngContainer.parent != null && ngContainer.parent.type === 4 /* ElementContainer */) {\n    ngContainer = ngContainer.parent;\n  }\n  return ngContainer;\n}\n/**\n * @param {?} index\n * @param {?} views\n * @param {?} containerNative\n * @return {?}\n */\nfunction getBeforeNodeForView(index, views, containerNative) {\n  if (index + 1 < views.length) {\n    /** @type {?} */\n    const view = /** @type {?} */views[index + 1];\n    /** @type {?} */\n    const viewTNode = /** @type {?} */view[HOST_NODE];\n    return viewTNode.child ? getNativeByTNode(viewTNode.child, view) : containerNative;\n  } else {\n    return containerNative;\n  }\n}\n/**\n * Removes the `child` element from the DOM if not in view and not projected.\n *\n * @param {?} childTNode The TNode of the child to remove\n * @param {?} childEl The child that should be removed\n * @param {?} currentView The current LView\n * @return {?} Whether or not the child was removed\n */\nfunction removeChild(childTNode, childEl, currentView) {\n  // We only remove the element if not in View or not projected.\n  if (childEl !== null && canInsertNativeNode(childTNode, currentView)) {\n    /** @type {?} */\n    const parentNative = /** @type {?} */ /** @type {?} */getParentNative(childTNode, currentView);\n    /** @type {?} */\n    const renderer = currentView[RENDERER];\n    isProceduralRenderer(renderer) ? renderer.removeChild( /** @type {?} */parentNative, childEl) : /** @type {?} */parentNative.removeChild(childEl);\n    return true;\n  }\n  return false;\n}\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param {?} projectedTNode The TNode to be projected\n * @param {?} tProjectionNode The projection (ng-content) TNode\n * @param {?} currentView Current LView\n * @param {?} projectionView Projection view (view above current)\n * @return {?}\n */\nfunction appendProjectedNode(projectedTNode, tProjectionNode, currentView, projectionView) {\n  /** @type {?} */\n  const native = getNativeByTNode(projectedTNode, projectionView);\n  appendChild(native, tProjectionNode, currentView);\n  // the projected contents are processed while in the shadow view (which is the currentView)\n  // therefore we need to extract the view where the host element lives since it's the\n  // logical container of the content projected views\n  attachPatchData(native, projectionView);\n  /** @type {?} */\n  const renderParent = getRenderParent(tProjectionNode, currentView);\n  /** @type {?} */\n  const nodeOrContainer = projectionView[projectedTNode.index];\n  if (projectedTNode.type === 0 /* Container */) {\n    // The node we are adding is a container and we are adding it to an element which\n    // is not a component (no more re-projection).\n    // Alternatively a container is projected at the root of a component's template\n    // and can't be re-projected (as not content of any component).\n    // Assign the final projection location in those cases.\n    nodeOrContainer[RENDER_PARENT] = renderParent;\n    /** @type {?} */\n    const views = nodeOrContainer[VIEWS];\n    for (let i = 0; i < views.length; i++) {\n      addRemoveViewFromContainer(views[i], true, nodeOrContainer[NATIVE]);\n    }\n  } else {\n    if (projectedTNode.type === 4 /* ElementContainer */) {\n      /** @type {?} */\n      let ngContainerChildTNode = /** @type {?} */projectedTNode.child;\n      while (ngContainerChildTNode) {\n        appendProjectedNode(ngContainerChildTNode, tProjectionNode, currentView, projectionView);\n        ngContainerChildTNode = ngContainerChildTNode.next;\n      }\n    }\n    if (isLContainer(nodeOrContainer)) {\n      nodeOrContainer[RENDER_PARENT] = renderParent;\n      appendChild(nodeOrContainer[NATIVE], tProjectionNode, currentView);\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n/**\n * @param {?} nodeClassAttrVal\n * @param {?} cssClassToMatch\n * @return {?}\n */\nfunction isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\n  /** @type {?} */\n  const nodeClassesLen = nodeClassAttrVal.length;\n  /** @type {?} */\n  const matchIndex = /** @type {?} */nodeClassAttrVal.indexOf(cssClassToMatch);\n  /** @type {?} */\n  const matchEndIdx = matchIndex + cssClassToMatch.length;\n  if (matchIndex === -1 // no match\n  || matchIndex > 0 && /** @type {?} */nodeClassAttrVal[matchIndex - 1] !== ' ' // no space before\n  || matchEndIdx < nodeClassesLen && /** @type {?} */nodeClassAttrVal[matchEndIdx] !== ' ')\n    // no space after\n    {\n      return false;\n    }\n  return true;\n}\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be perfomed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode. In \"projection\" mode, we do not need to check types, so if tag name\n * matches selector, we declare a match. In \"directive matching\" mode, we also check whether tNode\n * is of expected type:\n * - whether tNode has either Element or ElementContainer type\n * - or if we want to match \"ng-template\" tag, we check for Container type\n * @param {?} tNode\n * @param {?} currentSelector\n * @param {?} isProjectionMode\n * @return {?}\n */\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n  return currentSelector === tNode.tagName && (isProjectionMode || tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */ || tNode.type === 0 /* Container */ && currentSelector === NG_TEMPLATE_SELECTOR);\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param {?} tNode\n * @param {?} selector\n * @param {?} isProjectionMode\n * @return {?} true if node matches the selector.\n */\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n  ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n  /** @type {?} */\n  let mode = 4 /* ELEMENT */;\n  /** @type {?} */\n  const nodeAttrs = /** @type {?} */tNode.attrs;\n  /** @type {?} */\n  const selectOnlyMarkerIdx = nodeAttrs ? nodeAttrs.indexOf(3 /* SelectOnly */) : -1;\n  // When processing \":not\" selectors, we skip to the next \":not\" if the\n  // current one doesn't match\n  /** @type {?} */\n  let skipToNextSelector = false;\n  for (let i = 0; i < selector.length; i++) {\n    /** @type {?} */\n    const current = selector[i];\n    if (typeof current === 'number') {\n      // If we finish processing a :not selector and it hasn't failed, return false\n      if (!skipToNextSelector && !isPositive(mode) && !isPositive( /** @type {?} */current)) {\n        return false;\n      }\n      // If we are skipping to the next :not() and this mode flag is positive,\n      // it's a part of the current :not() selector, and we should keep skipping\n      if (skipToNextSelector && isPositive(current)) continue;\n      skipToNextSelector = false;\n      mode = /** @type {?} */current | mode & 1 /* NOT */;\n      continue;\n    }\n    if (skipToNextSelector) continue;\n    if (mode & 4 /* ELEMENT */) {\n      mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;\n      if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === '' && selector.length === 1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n      }\n    } else {\n      /** @type {?} */\n      const attrName = mode & 8 /* CLASS */ ? 'class' : current;\n      /** @type {?} */\n      const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs);\n      if (attrIndexInNode === -1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n        continue;\n      }\n      /** @type {?} */\n      const selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];\n      if (selectorAttrValue !== '') {\n        /** @type {?} */\n        let nodeAttrValue;\n        /** @type {?} */\n        const maybeAttrName = nodeAttrs[attrIndexInNode];\n        if (selectOnlyMarkerIdx > -1 && attrIndexInNode > selectOnlyMarkerIdx) {\n          nodeAttrValue = '';\n        } else {\n          ngDevMode && assertNotEqual(maybeAttrName, 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');\n          nodeAttrValue = /** @type {?} */nodeAttrs[attrIndexInNode + 1];\n        }\n        if (mode & 8 /* CLASS */ && !isCssClassMatching( /** @type {?} */nodeAttrValue, /** @type {?} */selectorAttrValue) || mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n      }\n    }\n  }\n  return isPositive(mode) || skipToNextSelector;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nfunction isPositive(mode) {\n  return (mode & 1 /* NOT */) === 0;\n}\n/**\n * Examines an attributes definition array from a node to find the index of the\n * attribute with the specified name.\n *\n * NOTE: Will not find namespaced attributes.\n *\n * @param {?} name the name of the attribute to find\n * @param {?} attrs the attribute array to examine\n * @return {?}\n */\nfunction findAttrIndexInNode(name, attrs) {\n  if (attrs === null) return -1;\n  /** @type {?} */\n  let selectOnlyMode = false;\n  /** @type {?} */\n  let i = 0;\n  while (i < attrs.length) {\n    /** @type {?} */\n    const maybeAttrName = attrs[i];\n    if (maybeAttrName === name) {\n      return i;\n    } else if (maybeAttrName === 0 /* NamespaceURI */) {\n      // NOTE(benlesh): will not find namespaced attributes. This is by design.\n      i += 4;\n    } else {\n      if (maybeAttrName === 3 /* SelectOnly */) {\n        selectOnlyMode = true;\n      }\n      i += selectOnlyMode ? 1 : 2;\n    }\n  }\n  return -1;\n}\n/**\n * @param {?} tNode\n * @param {?} selector\n * @param {?=} isProjectionMode\n * @return {?}\n */\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\n  for (let i = 0; i < selector.length; i++) {\n    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction getProjectAsAttrValue(tNode) {\n  /** @type {?} */\n  const nodeAttrs = tNode.attrs;\n  if (nodeAttrs != null) {\n    /** @type {?} */\n    const ngProjectAsAttrIdx = nodeAttrs.indexOf(NG_PROJECT_AS_ATTR_NAME);\n    // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n    // (attribute names are stored at even indexes)\n    if ((ngProjectAsAttrIdx & 1) === 0) {\n      return (/** @type {?} */nodeAttrs[ngProjectAsAttrIdx + 1]\n      );\n    }\n  }\n  return null;\n}\n/**\n * Checks a given node against matching selectors and returns\n * selector index (or 0 if none matched).\n *\n * This function takes into account the ngProjectAs attribute: if present its value will be compared\n * to the raw (un-parsed) CSS selector instead of using standard selector matching logic.\n * @param {?} tNode\n * @param {?} selectors\n * @param {?} textSelectors\n * @return {?}\n */\nfunction matchingSelectorIndex(tNode, selectors, textSelectors) {\n  /** @type {?} */\n  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n  for (let i = 0; i < selectors.length; i++) {\n    // if a node has the ngProjectAs attribute match it against unparsed selector\n    // match a node against a parsed selector only if ngProjectAs attribute is not present\n    if (ngProjectAsAttrVal === textSelectors[i] || ngProjectAsAttrVal === null && isNodeMatchingSelectorList(tNode, selectors[i], /* isProjectionMode */true)) {\n      return i + 1; // first matching selector \"captures\" a given node\n    }\n  }\n\n  return 0;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Combines the binding value and a factory for an animation player.\n *\n * Used to bind a player to an element template binding (currently only\n * `[style]`, `[style.prop]`, `[class]` and `[class.name]` bindings\n * supported). The provided `factoryFn` function will be run once all\n * the associated bindings have been evaluated on the element and is\n * designed to return a player which will then be placed on the element.\n *\n * @template T\n * @param {?} factoryFn The function that is used to create a player\n *   once all the rendering-related (styling values) have been\n *   processed for the element binding.\n * @param {?} value The raw value that will be exposed to the binding\n *   so that the binding can update its internal values when\n *   any changes are evaluated.\n * @return {?}\n */\nfunction bindPlayerFactory(factoryFn, value) {\n  return (/** @type {?} */new BoundPlayerFactory(factoryFn, value)\n  );\n}\n/**\n * @template T\n */\nclass BoundPlayerFactory {\n  /**\n   * @param {?} fn\n   * @param {?} value\n   */\n  constructor(fn, value) {\n    this.fn = fn;\n    this.value = value;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CorePlayerHandler {\n  constructor() {\n    this._players = [];\n  }\n  /**\n   * @return {?}\n   */\n  flushPlayers() {\n    for (let i = 0; i < this._players.length; i++) {\n      /** @type {?} */\n      const player = this._players[i];\n      if (!player.parent && player.state === 0 /* Pending */) {\n        player.play();\n      }\n    }\n    this._players.length = 0;\n  }\n  /**\n   * @param {?} player\n   * @return {?}\n   */\n  queuePlayer(player) {\n    this._players.push(player);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ANIMATION_PROP_PREFIX = '@';\n/**\n * @param {?=} element\n * @param {?=} sanitizer\n * @param {?=} initialStyles\n * @param {?=} initialClasses\n * @return {?}\n */\nfunction createEmptyStylingContext(element, sanitizer, initialStyles, initialClasses) {\n  return [0, [null, -1, false, sanitizer || null], initialStyles || [null], initialClasses || [null], [0, 0], element || null, null, null, null];\n}\n/**\n * Used clone a copy of a pre-computed template of a styling context.\n *\n * A pre-computed template is designed to be computed once for a given element\n * (instructions.ts has logic for caching this).\n * @param {?} element\n * @param {?} templateStyleContext\n * @return {?}\n */\nfunction allocStylingContext(element, templateStyleContext) {\n  // each instance gets a copy\n  /** @type {?} */\n  const context = /** @type {?} */ /** @type {?} */templateStyleContext.slice();\n  context[5 /* ElementPosition */] = element;\n  // this will prevent any other directives from extending the context\n  context[0 /* MasterFlagPosition */] |= 32 /* BindingAllocationLocked */;\n  return context;\n}\n/**\n * Retrieve the `StylingContext` at a given index.\n *\n * This method lazily creates the `StylingContext`. This is because in most cases\n * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n * which would create unnecessary memory pressure.\n *\n * @param {?} index Index of the style allocation. See: `elementStyling`.\n * @param {?} viewData The view to search for the styling context\n * @return {?}\n */\nfunction getStylingContext(index, viewData) {\n  /** @type {?} */\n  let storageIndex = index;\n  /** @type {?} */\n  let slotValue = viewData[storageIndex];\n  /** @type {?} */\n  let wrapper = viewData;\n  while (Array.isArray(slotValue)) {\n    wrapper = slotValue;\n    slotValue = /** @type {?} */slotValue[HOST];\n  }\n  if (isStylingContext(wrapper)) {\n    return (/** @type {?} */wrapper\n    );\n  } else {\n    // This is an LView or an LContainer\n    /** @type {?} */\n    const stylingTemplate = getTNode(index - HEADER_OFFSET, viewData).stylingTemplate;\n    if (wrapper !== viewData) {\n      storageIndex = HOST;\n    }\n    return wrapper[storageIndex] = stylingTemplate ? allocStylingContext(slotValue, stylingTemplate) : createEmptyStylingContext(slotValue);\n  }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isStylingContext(value) {\n  // Not an LView or an LContainer\n  return Array.isArray(value) && typeof value[0 /* MasterFlagPosition */] === 'number' && Array.isArray(value[2 /* InitialStyleValuesPosition */]);\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction isAnimationProp(name) {\n  return name[0] === ANIMATION_PROP_PREFIX;\n}\n/**\n * @param {?} playerContext\n * @param {?} rootContext\n * @param {?} element\n * @param {?} player\n * @param {?} playerContextIndex\n * @param {?=} ref\n * @return {?}\n */\nfunction addPlayerInternal(playerContext, rootContext, element, player, playerContextIndex, ref) {\n  ref = ref || element;\n  if (playerContextIndex) {\n    playerContext[playerContextIndex] = player;\n  } else {\n    playerContext.push(player);\n  }\n  if (player) {\n    player.addEventListener(200 /* Destroyed */, () => {\n      /** @type {?} */\n      const index = playerContext.indexOf(player);\n      /** @type {?} */\n      const nonFactoryPlayerIndex = playerContext[0 /* NonBuilderPlayersStart */];\n      // if the player is being removed from the factory side of the context\n      // (which is where the [style] and [class] bindings do their thing) then\n      // that side of the array cannot be resized since the respective bindings\n      // have pointer index values that point to the associated factory instance\n      if (index) {\n        if (index < nonFactoryPlayerIndex) {\n          playerContext[index] = null;\n        } else {\n          playerContext.splice(index, 1);\n        }\n      }\n      player.destroy();\n    });\n    /** @type {?} */\n    const playerHandler = rootContext.playerHandler || (rootContext.playerHandler = new CorePlayerHandler());\n    playerHandler.queuePlayer(player, ref);\n    return true;\n  }\n  return false;\n}\n/**\n * @param {?} playerContext\n * @return {?}\n */\nfunction getPlayersInternal(playerContext) {\n  /** @type {?} */\n  const players = [];\n  /** @type {?} */\n  const nonFactoryPlayersStart = playerContext[0 /* NonBuilderPlayersStart */];\n  // add all factory-based players (which are apart of [style] and [class] bindings)\n  for (let i = 1 /* PlayerBuildersStartPosition */ + 1 /* PlayerOffsetPosition */; i < nonFactoryPlayersStart; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n    /** @type {?} */\n    const player = /** @type {?} */playerContext[i];\n    if (player) {\n      players.push(player);\n    }\n  }\n  // add all custom players (not apart of [style] and [class] bindings)\n  for (let i = nonFactoryPlayersStart; i < playerContext.length; i++) {\n    players.push( /** @type {?} */playerContext[i]);\n  }\n  return players;\n}\n/**\n * @param {?} target\n * @param {?=} context\n * @return {?}\n */\nfunction getOrCreatePlayerContext(target, context) {\n  context = context || /** @type {?} */getLContext(target);\n  if (!context) {\n    ngDevMode && throwInvalidRefError();\n    return null;\n  }\n  const {\n    lView,\n    nodeIndex\n  } = context;\n  /** @type {?} */\n  const stylingContext = getStylingContext(nodeIndex, lView);\n  return getPlayerContext(stylingContext) || allocPlayerContext(stylingContext);\n}\n/**\n * @param {?} stylingContext\n * @return {?}\n */\nfunction getPlayerContext(stylingContext) {\n  return stylingContext[8 /* PlayerContext */];\n}\n/**\n * @param {?} data\n * @return {?}\n */\nfunction allocPlayerContext(data) {\n  return data[8 /* PlayerContext */] = [5 /* SinglePlayerBuildersStartPosition */, null, null, null, null];\n}\n/**\n * @return {?}\n */\nfunction throwInvalidRefError() {\n  throw new Error('Only elements that exist in an Angular application can be used for animations');\n}\n/**\n * @param {?} attrs\n * @return {?}\n */\nfunction hasStyling(attrs) {\n  for (let i = 0; i < attrs.length; i++) {\n    /** @type {?} */\n    const attr = attrs[i];\n    if (attr == 1 /* Classes */ || attr == 2 /* Styles */) return true;\n  }\n  return false;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction hasClassInput(tNode) {\n  return tNode.flags & 8 /* hasClassInput */ ? true : false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This file includes the code to power all styling-binding operations in Angular.\n *\n * These include:\n * [style]=\"myStyleObj\"\n * [class]=\"myClassObj\"\n * [style.prop]=\"myPropValue\"\n * [class.name]=\"myClassValue\"\n *\n * There are many different ways in which these functions below are called. Please see\n * `interfaces/styles.ts` to get a better idea of how the styling algorithm works.\n */\n/**\n * Creates a new StylingContext an fills it with the provided static styling attribute values.\n * @param {?} attrs\n * @return {?}\n */\nfunction initializeStaticContext(attrs) {\n  /** @type {?} */\n  const context = createEmptyStylingContext();\n  /** @type {?} */\n  const initialClasses = context[3 /* InitialClassValuesPosition */] = [null];\n  /** @type {?} */\n  const initialStyles = context[2 /* InitialStyleValuesPosition */] = [null];\n  // The attributes array has marker values (numbers) indicating what the subsequent\n  // values represent. When we encounter a number, we set the mode to that type of attribute.\n  /** @type {?} */\n  let mode = -1;\n  for (let i = 0; i < attrs.length; i++) {\n    /** @type {?} */\n    const attr = attrs[i];\n    if (typeof attr == 'number') {\n      mode = attr;\n    } else if (mode === 2 /* Styles */) {\n      initialStyles.push( /** @type {?} */attr, /** @type {?} */attrs[++i]);\n    } else if (mode === 1 /* Classes */) {\n      initialClasses.push( /** @type {?} */attr, true);\n    } else if (mode === 3 /* SelectOnly */) {\n      break;\n    }\n  }\n  return context;\n}\n/**\n * Designed to update an existing styling context with new static styling\n * data (classes and styles).\n *\n * @param {?} context the existing styling context\n * @param {?} attrs an array of new static styling attributes that will be\n *              assigned to the context\n * @param {?} directive the directive instance with which static data is associated with.\n * @return {?}\n */\nfunction patchContextWithStaticAttrs(context, attrs, directive) {\n  // If the styling context has already been patched with the given directive's bindings,\n  // then there is no point in doing it again. The reason why this may happen (the directive\n  // styling being patched twice) is because the `stylingBinding` function is called each time\n  // an element is created (both within a template function and within directive host bindings).\n  /** @type {?} */\n  const directives = context[1 /* DirectiveRegistryPosition */];\n  if (getDirectiveRegistryValuesIndexOf(directives, directive) == -1) {\n    // this is a new directive which we have not seen yet.\n    directives.push(directive, -1, false, null);\n    /** @type {?} */\n    let initialClasses = null;\n    /** @type {?} */\n    let initialStyles = null;\n    /** @type {?} */\n    let mode = -1;\n    for (let i = 0; i < attrs.length; i++) {\n      /** @type {?} */\n      const attr = attrs[i];\n      if (typeof attr == 'number') {\n        mode = attr;\n      } else if (mode == 1 /* Classes */) {\n        initialClasses = initialClasses || context[3 /* InitialClassValuesPosition */];\n        patchInitialStylingValue(initialClasses, attr, true);\n      } else if (mode == 2 /* Styles */) {\n        initialStyles = initialStyles || context[2 /* InitialStyleValuesPosition */];\n        patchInitialStylingValue(initialStyles, attr, attrs[++i]);\n      }\n    }\n  }\n}\n/**\n * Designed to add a style or class value into the existing set of initial styles.\n *\n * The function will search and figure out if a style/class value is already present\n * within the provided initial styling array. If and when a style/class value is not\n * present (or if it's value is falsy) then it will be inserted/updated in the list\n * of initial styling values.\n * @param {?} initialStyling\n * @param {?} prop\n * @param {?} value\n * @return {?}\n */\nfunction patchInitialStylingValue(initialStyling, prop, value) {\n  // Even values are keys; Odd numbers are values; Search keys only\n  for (let i = 1 /* KeyValueStartPosition */; i < initialStyling.length;) {\n    /** @type {?} */\n    const key = initialStyling[i];\n    if (key === prop) {\n      /** @type {?} */\n      const existingValue = initialStyling[i + 1 /* ValueOffset */];\n      // If there is no previous style value (when `null`) or no previous class\n      // applied (when `false`) then we update the the newly given value.\n      if (existingValue == null || existingValue == false) {\n        initialStyling[i + 1 /* ValueOffset */] = value;\n      }\n      return;\n    }\n    i = i + 2 /* Size */;\n  }\n  // We did not find existing key, add a new one.\n  initialStyling.push(prop, value);\n}\n/**\n * Runs through the initial styling data present in the context and renders\n * them via the renderer on the element.\n * @param {?} element\n * @param {?} context\n * @param {?} renderer\n * @return {?}\n */\nfunction renderInitialStylesAndClasses(element, context, renderer) {\n  /** @type {?} */\n  const initialClasses = context[3 /* InitialClassValuesPosition */];\n  renderInitialStylingValues(element, renderer, initialClasses, true);\n  /** @type {?} */\n  const initialStyles = context[2 /* InitialStyleValuesPosition */];\n  renderInitialStylingValues(element, renderer, initialStyles, false);\n}\n/**\n * This is a helper function designed to render each entry present within the\n * provided list of initialStylingValues.\n * @param {?} element\n * @param {?} renderer\n * @param {?} initialStylingValues\n * @param {?} isEntryClassBased\n * @return {?}\n */\nfunction renderInitialStylingValues(element, renderer, initialStylingValues, isEntryClassBased) {\n  for (let i = 1 /* KeyValueStartPosition */; i < initialStylingValues.length; i += 2 /* Size */) {\n    /** @type {?} */\n    const value = initialStylingValues[i + 1 /* ValueOffset */];\n    if (value) {\n      if (isEntryClassBased) {\n        setClass(element, /** @type {?} */initialStylingValues[i + 0 /* PropOffset */], true, renderer, null);\n      } else {\n        setStyle(element, /** @type {?} */initialStylingValues[i + 0 /* PropOffset */], /** @type {?} */value, renderer, null);\n      }\n    }\n  }\n}\n/**\n * Adds in new binding values to a styling context.\n *\n * If a directive value is provided then all provided class/style binding names will\n * reference the provided directive.\n *\n * @param {?} context the existing styling context\n * @param {?} directiveRef the directive that the new bindings will reference\n * @param {?=} classBindingNames an array of class binding names that will be added to the context\n * @param {?=} styleBindingNames an array of style binding names that will be added to the context\n * @param {?=} styleSanitizer an optional sanitizer that handle all sanitization on for each of\n *    the bindings added to the context. Note that if a directive is provided then the sanitizer\n *    instance will only be active if and when the directive updates the bindings that it owns.\n * @param {?=} onlyProcessSingleClasses\n * @return {?}\n */\nfunction updateContextWithBindings(context, directiveRef, classBindingNames, styleBindingNames, styleSanitizer, onlyProcessSingleClasses) {\n  if (context[0 /* MasterFlagPosition */] & 32 /* BindingAllocationLocked */) return;\n  // this means the context has already been patched with the directive's bindings\n  /** @type {?} */\n  const directiveIndex = findOrPatchDirectiveIntoRegistry(context, directiveRef, styleSanitizer);\n  if (directiveIndex === -1) {\n    // this means the directive has already been patched in ... No point in doing anything\n    return;\n  }\n  // there are alot of variables being used below to track where in the context the new\n  // binding values will be placed. Because the context consists of multiple types of\n  // entries (single classes/styles and multi classes/styles) alot of the index positions\n  // need to be computed ahead of time and the context needs to be extended before the values\n  // are inserted in.\n  /** @type {?} */\n  const singlePropOffsetValues = context[4 /* SinglePropOffsetPositions */];\n  /** @type {?} */\n  const totalCurrentClassBindings = singlePropOffsetValues[1 /* ClassesCountPosition */];\n  /** @type {?} */\n  const totalCurrentStyleBindings = singlePropOffsetValues[0 /* StylesCountPosition */];\n  /** @type {?} */\n  const classesOffset = totalCurrentClassBindings * 4 /* Size */;\n  /** @type {?} */\n  const stylesOffset = totalCurrentStyleBindings * 4 /* Size */;\n  /** @type {?} */\n  const singleStylesStartIndex = 9 /* SingleStylesStartPosition */;\n  /** @type {?} */\n  let singleClassesStartIndex = singleStylesStartIndex + stylesOffset;\n  /** @type {?} */\n  let multiStylesStartIndex = singleClassesStartIndex + classesOffset;\n  /** @type {?} */\n  let multiClassesStartIndex = multiStylesStartIndex + stylesOffset;\n  // because we're inserting more bindings into the context, this means that the\n  // binding values need to be referenced the singlePropOffsetValues array so that\n  // the template/directive can easily find them inside of the `elementStyleProp`\n  // and the `elementClassProp` functions without iterating through the entire context.\n  // The first step to setting up these reference points is to mark how many bindings\n  // are being added. Even if these bindings already exist in the context, the directive\n  // or template code will still call them unknowingly. Therefore the total values need\n  // to be registered so that we know how many bindings are assigned to each directive.\n  /** @type {?} */\n  const currentSinglePropsLength = singlePropOffsetValues.length;\n  singlePropOffsetValues.push(styleBindingNames ? styleBindingNames.length : 0, classBindingNames ? classBindingNames.length : 0);\n  // the code below will check to see if a new style binding already exists in the context\n  // if so then there is no point in inserting it into the context again. Whether or not it\n  // exists the styling offset code will now know exactly where it is\n  /** @type {?} */\n  let insertionOffset = 0;\n  /** @type {?} */\n  const filteredStyleBindingNames = [];\n  if (styleBindingNames && styleBindingNames.length) {\n    for (let i = 0; i < styleBindingNames.length; i++) {\n      /** @type {?} */\n      const name = styleBindingNames[i];\n      /** @type {?} */\n      let singlePropIndex = getMatchingBindingIndex(context, name, singleStylesStartIndex, singleClassesStartIndex);\n      if (singlePropIndex == -1) {\n        singlePropIndex = singleClassesStartIndex + insertionOffset;\n        insertionOffset += 4 /* Size */;\n        filteredStyleBindingNames.push(name);\n      }\n      singlePropOffsetValues.push(singlePropIndex);\n    }\n  }\n  // just like with the style binding loop above, the new class bindings get the same treatment...\n  /** @type {?} */\n  const filteredClassBindingNames = [];\n  if (classBindingNames && classBindingNames.length) {\n    for (let i = 0; i < classBindingNames.length; i++) {\n      /** @type {?} */\n      const name = classBindingNames[i];\n      /** @type {?} */\n      let singlePropIndex = getMatchingBindingIndex(context, name, singleClassesStartIndex, multiStylesStartIndex);\n      if (singlePropIndex == -1) {\n        singlePropIndex = multiStylesStartIndex + insertionOffset;\n        insertionOffset += 4 /* Size */;\n        filteredClassBindingNames.push(name);\n      } else {\n        singlePropIndex += filteredStyleBindingNames.length * 4 /* Size */;\n      }\n\n      singlePropOffsetValues.push(singlePropIndex);\n    }\n  }\n  // because new styles are being inserted, this means the existing collection of style offset\n  // index values are incorrect (they point to the wrong values). The code below will run through\n  // the entire offset array and update the existing set of index values to point to their new\n  // locations while taking the new binding values into consideration.\n  /** @type {?} */\n  let i = 2 /* ValueStartPosition */;\n  if (filteredStyleBindingNames.length) {\n    while (i < currentSinglePropsLength) {\n      /** @type {?} */\n      const totalStyles = singlePropOffsetValues[i + 0 /* StylesCountPosition */];\n      /** @type {?} */\n      const totalClasses = singlePropOffsetValues[i + 1 /* ClassesCountPosition */];\n      if (totalClasses) {\n        /** @type {?} */\n        const start = i + 2 /* ValueStartPosition */ + totalStyles;\n        for (let j = start; j < start + totalClasses; j++) {\n          singlePropOffsetValues[j] += filteredStyleBindingNames.length * 4 /* Size */;\n        }\n      }\n      /** @type {?} */\n      const total = totalStyles + totalClasses;\n      i += 2 /* ValueStartPosition */ + total;\n    }\n  }\n  /** @type {?} */\n  const totalNewEntries = filteredClassBindingNames.length + filteredStyleBindingNames.length;\n  // in the event that there are new style values being inserted, all existing class and style\n  // bindings need to have their pointer values offsetted with the new amount of space that is\n  // used for the new style/class bindings.\n  for (let i = singleStylesStartIndex; i < context.length; i += 4 /* Size */) {\n    /** @type {?} */\n    const isMultiBased = i >= multiStylesStartIndex;\n    /** @type {?} */\n    const isClassBased = i >= (isMultiBased ? multiClassesStartIndex : singleClassesStartIndex);\n    /** @type {?} */\n    const flag = getPointers(context, i);\n    /** @type {?} */\n    const staticIndex = getInitialIndex(flag);\n    /** @type {?} */\n    let singleOrMultiIndex = getMultiOrSingleIndex(flag);\n    if (isMultiBased) {\n      singleOrMultiIndex += isClassBased ? filteredStyleBindingNames.length * 4 /* Size */ : 0;\n    } else {\n      singleOrMultiIndex += totalNewEntries * 4 /* Size */ + (isClassBased ? filteredStyleBindingNames.length : 0) * 4 /* Size */;\n    }\n\n    setFlag(context, i, pointers(flag, staticIndex, singleOrMultiIndex));\n  }\n  // this is where we make space in the context for the new style bindings\n  for (let i = 0; i < filteredStyleBindingNames.length * 4 /* Size */; i++) {\n    context.splice(multiClassesStartIndex, 0, null);\n    context.splice(singleClassesStartIndex, 0, null);\n    singleClassesStartIndex++;\n    multiStylesStartIndex++;\n    multiClassesStartIndex += 2; // both single + multi slots were inserted\n  }\n  // this is where we make space in the context for the new class bindings\n  for (let i = 0; i < filteredClassBindingNames.length * 4 /* Size */; i++) {\n    context.splice(multiStylesStartIndex, 0, null);\n    context.push(null);\n    multiStylesStartIndex++;\n    multiClassesStartIndex++;\n  }\n  /** @type {?} */\n  const initialClasses = context[3 /* InitialClassValuesPosition */];\n  /** @type {?} */\n  const initialStyles = context[2 /* InitialStyleValuesPosition */];\n  // the code below will insert each new entry into the context and assign the appropriate\n  // flags and index values to them. It's important this runs at the end of this function\n  // because the context, property offset and index values have all been computed just before.\n  for (let i = 0; i < totalNewEntries; i++) {\n    /** @type {?} */\n    const entryIsClassBased = i >= filteredStyleBindingNames.length;\n    /** @type {?} */\n    const adjustedIndex = entryIsClassBased ? i - filteredStyleBindingNames.length : i;\n    /** @type {?} */\n    const propName = entryIsClassBased ? filteredClassBindingNames[adjustedIndex] : filteredStyleBindingNames[adjustedIndex];\n    /** @type {?} */\n    let multiIndex;\n    /** @type {?} */\n    let singleIndex;\n    if (entryIsClassBased) {\n      multiIndex = multiClassesStartIndex + (totalCurrentClassBindings + adjustedIndex) * 4 /* Size */;\n      singleIndex = singleClassesStartIndex + (totalCurrentClassBindings + adjustedIndex) * 4 /* Size */;\n    } else {\n      multiIndex = multiStylesStartIndex + (totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */;\n      singleIndex = singleStylesStartIndex + (totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */;\n    }\n    // if a property is not found in the initial style values list then it\n    // is ALWAYS added incase a follow-up directive introduces the same initial\n    // style/class value later on.\n    /** @type {?} */\n    let initialValuesToLookup = entryIsClassBased ? initialClasses : initialStyles;\n    /** @type {?} */\n    let indexForInitial = getInitialStylingValuesIndexOf(initialValuesToLookup, propName);\n    if (indexForInitial === -1) {\n      indexForInitial = initialValuesToLookup.length + 1 /* ValueOffset */;\n      initialValuesToLookup.push(propName, entryIsClassBased ? false : null);\n    } else {\n      indexForInitial += 1 /* ValueOffset */;\n    }\n    /** @type {?} */\n    const initialFlag = prepareInitialFlag(context, propName, entryIsClassBased, styleSanitizer || null);\n    setFlag(context, singleIndex, pointers(initialFlag, indexForInitial, multiIndex));\n    setProp(context, singleIndex, propName);\n    setValue(context, singleIndex, null);\n    setPlayerBuilderIndex(context, singleIndex, 0, directiveIndex);\n    setFlag(context, multiIndex, pointers(initialFlag, indexForInitial, singleIndex));\n    setProp(context, multiIndex, propName);\n    setValue(context, multiIndex, null);\n    setPlayerBuilderIndex(context, multiIndex, 0, directiveIndex);\n  }\n  // the total classes/style values are updated so the next time the context is patched\n  // additional style/class bindings from another directive then it knows exactly where\n  // to insert them in the context\n  singlePropOffsetValues[1 /* ClassesCountPosition */] = totalCurrentClassBindings + filteredClassBindingNames.length;\n  singlePropOffsetValues[0 /* StylesCountPosition */] = totalCurrentStyleBindings + filteredStyleBindingNames.length;\n  // there is no initial value flag for the master index since it doesn't\n  // reference an initial style value\n  /** @type {?} */\n  const masterFlag = pointers(0, 0, multiStylesStartIndex) | (onlyProcessSingleClasses ? 16 /* OnlyProcessSingleClasses */ : 0);\n  setFlag(context, 0 /* MasterFlagPosition */, masterFlag);\n}\n/**\n * Searches through the existing registry of directives\n * @param {?} context\n * @param {?} directiveRef\n * @param {?=} styleSanitizer\n * @return {?}\n */\nfunction findOrPatchDirectiveIntoRegistry(context, directiveRef, styleSanitizer) {\n  /** @type {?} */\n  const directiveRefs = context[1 /* DirectiveRegistryPosition */];\n  /** @type {?} */\n  const nextOffsetInsertionIndex = context[4 /* SinglePropOffsetPositions */].length;\n  /** @type {?} */\n  let directiveIndex;\n  /** @type {?} */\n  const detectedIndex = getDirectiveRegistryValuesIndexOf(directiveRefs, directiveRef);\n  if (detectedIndex === -1) {\n    directiveIndex = directiveRefs.length / 4 /* Size */;\n    directiveRefs.push(directiveRef, nextOffsetInsertionIndex, false, styleSanitizer || null);\n  } else {\n    /** @type {?} */\n    const singlePropStartPosition = detectedIndex + 1 /* SinglePropValuesIndexOffset */;\n    if ( /** @type {?} */directiveRefs[singlePropStartPosition] >= 0) {\n      // the directive has already been patched into the context\n      return -1;\n    }\n    directiveIndex = detectedIndex / 4 /* Size */;\n    // because the directive already existed this means that it was set during elementHostAttrs or\n    // elementStart which means that the binding values were not here. Therefore, the values below\n    // need to be applied so that single class and style properties can be assigned later.\n    /** @type {?} */\n    const singlePropPositionIndex = detectedIndex + 1 /* SinglePropValuesIndexOffset */;\n    directiveRefs[singlePropPositionIndex] = nextOffsetInsertionIndex;\n    // the sanitizer is also apart of the binding process and will be used when bindings are\n    // applied.\n    /** @type {?} */\n    const styleSanitizerIndex = detectedIndex + 3 /* StyleSanitizerOffset */;\n    directiveRefs[styleSanitizerIndex] = styleSanitizer || null;\n  }\n  return directiveIndex;\n}\n/**\n * @param {?} context\n * @param {?} bindingName\n * @param {?} start\n * @param {?} end\n * @return {?}\n */\nfunction getMatchingBindingIndex(context, bindingName, start, end) {\n  for (let j = start; j < end; j += 4 /* Size */) {\n    if (getProp(context, j) === bindingName) return j;\n  }\n  return -1;\n}\n/**\n * Sets and resolves all `multi` styling on an `StylingContext` so that they can be\n * applied to the element once `renderStyling` is called.\n *\n * All missing styles/class (any values that are not provided in the new `styles`\n * or `classes` params) will resolve to `null` within their respective positions\n * in the context.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style values.\n * @param {?} classesInput The key/value map of CSS class names that will be used for the update.\n * @param {?=} stylesInput The key/value map of CSS styles that will be used for the update.\n * @param {?=} directiveRef\n * @return {?}\n */\nfunction updateStylingMap(context, classesInput, stylesInput, directiveRef) {\n  stylesInput = stylesInput || null;\n  /** @type {?} */\n  const directiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n  /** @type {?} */\n  const element = /** @type {?} */ /** @type {?} */context[5 /* ElementPosition */];\n  /** @type {?} */\n  const classesPlayerBuilder = classesInput instanceof BoundPlayerFactory ? new ClassAndStylePlayerBuilder( /** @type {?} */classesInput, element, 1 /* Class */) : null;\n  /** @type {?} */\n  const stylesPlayerBuilder = stylesInput instanceof BoundPlayerFactory ? new ClassAndStylePlayerBuilder( /** @type {?} */stylesInput, element, 2 /* Style */) : null;\n  /** @type {?} */\n  const classesValue = classesPlayerBuilder ? /** @type {?} */ /** @type {?} */classesInput.value : classesInput;\n  /** @type {?} */\n  const stylesValue = stylesPlayerBuilder ? /** @type {?} */stylesInput['value'] : stylesInput;\n  // early exit (this is what's done to avoid using ctx.bind() to cache the value)\n  /** @type {?} */\n  const ignoreAllClassUpdates = limitToSingleClasses(context) || classesValue === NO_CHANGE || classesValue === context[6 /* CachedClassValueOrInitialClassString */];\n  /** @type {?} */\n  const ignoreAllStyleUpdates = stylesValue === NO_CHANGE || stylesValue === context[7 /* CachedStyleValue */];\n  if (ignoreAllClassUpdates && ignoreAllStyleUpdates) return;\n  context[6 /* CachedClassValueOrInitialClassString */] = classesValue;\n  context[7 /* CachedStyleValue */] = stylesValue;\n  /** @type {?} */\n  let classNames = EMPTY_ARRAY;\n  /** @type {?} */\n  let applyAllClasses = false;\n  /** @type {?} */\n  let playerBuildersAreDirty = false;\n  /** @type {?} */\n  const classesPlayerBuilderIndex = classesPlayerBuilder ? 1 /* ClassMapPlayerBuilderPosition */ : 0;\n  if (hasPlayerBuilderChanged(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */)) {\n    setPlayerBuilder(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */);\n    playerBuildersAreDirty = true;\n  }\n  /** @type {?} */\n  const stylesPlayerBuilderIndex = stylesPlayerBuilder ? 3 /* StyleMapPlayerBuilderPosition */ : 0;\n  if (hasPlayerBuilderChanged(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */)) {\n    setPlayerBuilder(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */);\n    playerBuildersAreDirty = true;\n  }\n  // each time a string-based value pops up then it shouldn't require a deep\n  // check of what's changed.\n  if (!ignoreAllClassUpdates) {\n    if (typeof classesValue == 'string') {\n      classNames = classesValue.split(/\\s+/);\n      // this boolean is used to avoid having to create a key/value map of `true` values\n      // since a classname string implies that all those classes are added\n      applyAllClasses = true;\n    } else {\n      classNames = classesValue ? Object.keys(classesValue) : EMPTY_ARRAY;\n    }\n  }\n  /** @type {?} */\n  const classes = /** @type {?} */classesValue || EMPTY_OBJ;\n  /** @type {?} */\n  const styleProps = stylesValue ? Object.keys(stylesValue) : EMPTY_ARRAY;\n  /** @type {?} */\n  const styles = stylesValue || EMPTY_OBJ;\n  /** @type {?} */\n  const classesStartIndex = styleProps.length;\n  /** @type {?} */\n  let multiStartIndex = getMultiStartIndex(context);\n  /** @type {?} */\n  let dirty = false;\n  /** @type {?} */\n  let ctxIndex = multiStartIndex;\n  /** @type {?} */\n  let propIndex = 0;\n  /** @type {?} */\n  const propLimit = styleProps.length + classNames.length;\n  // the main loop here will try and figure out how the shape of the provided\n  // styles differ with respect to the context. Later if the context/styles/classes\n  // are off-balance then they will be dealt in another loop after this one\n  while (ctxIndex < context.length && propIndex < propLimit) {\n    /** @type {?} */\n    const isClassBased = propIndex >= classesStartIndex;\n    /** @type {?} */\n    const processValue = !isClassBased && !ignoreAllStyleUpdates || isClassBased && !ignoreAllClassUpdates;\n    // when there is a cache-hit for a string-based class then we should\n    // avoid doing any work diffing any of the changes\n    if (processValue) {\n      /** @type {?} */\n      const adjustedPropIndex = isClassBased ? propIndex - classesStartIndex : propIndex;\n      /** @type {?} */\n      const newProp = isClassBased ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n      /** @type {?} */\n      const newValue = isClassBased ? applyAllClasses ? true : classes[newProp] : styles[newProp];\n      /** @type {?} */\n      const playerBuilderIndex = isClassBased ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n      /** @type {?} */\n      const prop = getProp(context, ctxIndex);\n      if (prop === newProp) {\n        /** @type {?} */\n        const value = getValue(context, ctxIndex);\n        /** @type {?} */\n        const flag = getPointers(context, ctxIndex);\n        setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n        if (hasValueChanged(flag, value, newValue)) {\n          setValue(context, ctxIndex, newValue);\n          playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n          /** @type {?} */\n          const initialValue = getInitialValue(context, flag);\n          // SKIP IF INITIAL CHECK\n          // If the former `value` is `null` then it means that an initial value\n          // could be being rendered on screen. If that is the case then there is\n          // no point in updating the value incase it matches. In other words if the\n          // new value is the exact same as the previously rendered value (which\n          // happens to be the initial value) then do nothing.\n          if (value != null || hasValueChanged(flag, initialValue, newValue)) {\n            setDirty(context, ctxIndex, true);\n            dirty = true;\n          }\n        }\n      } else {\n        /** @type {?} */\n        const indexOfEntry = findEntryPositionByProp(context, newProp, ctxIndex);\n        if (indexOfEntry > 0) {\n          // it was found at a later point ... just swap the values\n          /** @type {?} */\n          const valueToCompare = getValue(context, indexOfEntry);\n          /** @type {?} */\n          const flagToCompare = getPointers(context, indexOfEntry);\n          swapMultiContextEntries(context, ctxIndex, indexOfEntry);\n          if (hasValueChanged(flagToCompare, valueToCompare, newValue)) {\n            /** @type {?} */\n            const initialValue = getInitialValue(context, flagToCompare);\n            setValue(context, ctxIndex, newValue);\n            // same if statement logic as above (look for SKIP IF INITIAL CHECK).\n            if (valueToCompare != null || hasValueChanged(flagToCompare, initialValue, newValue)) {\n              setDirty(context, ctxIndex, true);\n              playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n              dirty = true;\n            }\n          }\n        } else {\n          // we only care to do this if the insertion is in the middle\n          /** @type {?} */\n          const newFlag = prepareInitialFlag(context, newProp, isClassBased, getStyleSanitizer(context, directiveIndex));\n          playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n          insertNewMultiProperty(context, ctxIndex, isClassBased, newProp, newFlag, newValue, directiveIndex, playerBuilderIndex);\n          dirty = true;\n        }\n      }\n    }\n    ctxIndex += 4 /* Size */;\n    propIndex++;\n  }\n  // this means that there are left-over values in the context that\n  // were not included in the provided styles/classes and in this\n  // case the  goal is to \"remove\" them from the context (by nullifying)\n  while (ctxIndex < context.length) {\n    /** @type {?} */\n    const flag = getPointers(context, ctxIndex);\n    /** @type {?} */\n    const isClassBased = (flag & 2 /* Class */) === 2 /* Class */;\n    /** @type {?} */\n    const processValue = !isClassBased && !ignoreAllStyleUpdates || isClassBased && !ignoreAllClassUpdates;\n    if (processValue) {\n      /** @type {?} */\n      const value = getValue(context, ctxIndex);\n      /** @type {?} */\n      const doRemoveValue = valueExists(value, isClassBased);\n      if (doRemoveValue) {\n        setDirty(context, ctxIndex, true);\n        setValue(context, ctxIndex, null);\n        // we keep the player factory the same so that the `nulled` value can\n        // be instructed into the player because removing a style and/or a class\n        // is a valid animation player instruction.\n        /** @type {?} */\n        const playerBuilderIndex = isClassBased ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n        setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n        dirty = true;\n      }\n    }\n    ctxIndex += 4 /* Size */;\n  }\n  // this means that there are left-over properties in the context that\n  // were not detected in the context during the loop above. In that\n  // case we want to add the new entries into the list\n  /** @type {?} */\n  const sanitizer = getStyleSanitizer(context, directiveIndex);\n  while (propIndex < propLimit) {\n    /** @type {?} */\n    const isClassBased = propIndex >= classesStartIndex;\n    /** @type {?} */\n    const processValue = !isClassBased && !ignoreAllStyleUpdates || isClassBased && !ignoreAllClassUpdates;\n    if (processValue) {\n      /** @type {?} */\n      const adjustedPropIndex = isClassBased ? propIndex - classesStartIndex : propIndex;\n      /** @type {?} */\n      const prop = isClassBased ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n      /** @type {?} */\n      const value = isClassBased ? applyAllClasses ? true : classes[prop] : styles[prop];\n      /** @type {?} */\n      const flag = prepareInitialFlag(context, prop, isClassBased, sanitizer) | 1 /* Dirty */;\n      /** @type {?} */\n      const playerBuilderIndex = isClassBased ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n      /** @type {?} */\n      const ctxIndex = context.length;\n      context.push(flag, prop, value, 0);\n      setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n      dirty = true;\n    }\n    propIndex++;\n  }\n  if (dirty) {\n    setContextDirty(context, true);\n    setDirectiveDirty(context, directiveIndex, true);\n  }\n  if (playerBuildersAreDirty) {\n    setContextPlayersDirty(context, true);\n  }\n}\n/**\n * This method will toggle the referenced CSS class (by the provided index)\n * within the given context.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided class value.\n * @param {?} offset The index of the CSS class which is being updated.\n * @param {?} addOrRemove Whether or not to add or remove the CSS class\n * @param {?=} directiveRef\n * @return {?}\n */\nfunction updateClassProp(context, offset, addOrRemove, directiveRef) {\n  _updateSingleStylingValue(context, offset, addOrRemove, true, directiveRef);\n}\n/**\n * Sets and resolves a single style value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyling` is called.\n *\n * Note that prop-level styling values are considered higher priority than any styling that\n * has been applied using `updateStylingMap`, therefore, when styling values are rendered\n * then any styles/classes that have been applied using this function will be considered first\n * (then multi values second and then initial values as a backup).\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style value.\n * @param {?} offset The index of the property which is being updated.\n * @param {?} input\n * @param {?=} directiveRef an optional reference to the directive responsible\n *    for this binding change. If present then style binding will only\n *    actualize if the directive has ownership over this binding\n *    (see styling.ts#directives for more information about the algorithm).\n * @return {?}\n */\nfunction updateStyleProp(context, offset, input, directiveRef) {\n  _updateSingleStylingValue(context, offset, input, false, directiveRef);\n}\n/**\n * @param {?} context\n * @param {?} offset\n * @param {?} input\n * @param {?} isClassBased\n * @param {?} directiveRef\n * @return {?}\n */\nfunction _updateSingleStylingValue(context, offset, input, isClassBased, directiveRef) {\n  /** @type {?} */\n  const directiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n  /** @type {?} */\n  const singleIndex = getSinglePropIndexValue(context, directiveIndex, offset, isClassBased);\n  /** @type {?} */\n  const currValue = getValue(context, singleIndex);\n  /** @type {?} */\n  const currFlag = getPointers(context, singleIndex);\n  /** @type {?} */\n  const currDirective = getDirectiveIndexFromEntry(context, singleIndex);\n  /** @type {?} */\n  const value = input instanceof BoundPlayerFactory ? input.value : input;\n  if (hasValueChanged(currFlag, currValue, value) && allowValueChange(currValue, value, currDirective, directiveIndex)) {\n    /** @type {?} */\n    const isClassBased = (currFlag & 2 /* Class */) === 2 /* Class */;\n    /** @type {?} */\n    const element = /** @type {?} */ /** @type {?} */context[5 /* ElementPosition */];\n    /** @type {?} */\n    const playerBuilder = input instanceof BoundPlayerFactory ? new ClassAndStylePlayerBuilder( /** @type {?} */input, element, isClassBased ? 1 /* Class */ : 2 /* Style */) : null;\n    /** @type {?} */\n    const value = /** @type {?} */playerBuilder ? /** @type {?} */input.value : input;\n    /** @type {?} */\n    const currPlayerIndex = getPlayerBuilderIndex(context, singleIndex);\n    /** @type {?} */\n    let playerBuildersAreDirty = false;\n    /** @type {?} */\n    let playerBuilderIndex = playerBuilder ? currPlayerIndex : 0;\n    if (hasPlayerBuilderChanged(context, playerBuilder, currPlayerIndex)) {\n      /** @type {?} */\n      const newIndex = setPlayerBuilder(context, playerBuilder, currPlayerIndex);\n      playerBuilderIndex = playerBuilder ? newIndex : 0;\n      playerBuildersAreDirty = true;\n    }\n    if (playerBuildersAreDirty || currDirective !== directiveIndex) {\n      setPlayerBuilderIndex(context, singleIndex, playerBuilderIndex, directiveIndex);\n    }\n    if (currDirective !== directiveIndex) {\n      /** @type {?} */\n      const prop = getProp(context, singleIndex);\n      /** @type {?} */\n      const sanitizer = getStyleSanitizer(context, directiveIndex);\n      setSanitizeFlag(context, singleIndex, sanitizer && sanitizer(prop) ? true : false);\n    }\n    // the value will always get updated (even if the dirty flag is skipped)\n    setValue(context, singleIndex, value);\n    /** @type {?} */\n    const indexForMulti = getMultiOrSingleIndex(currFlag);\n    // if the value is the same in the multi-area then there's no point in re-assembling\n    /** @type {?} */\n    const valueForMulti = getValue(context, indexForMulti);\n    if (!valueForMulti || hasValueChanged(currFlag, valueForMulti, value)) {\n      /** @type {?} */\n      let multiDirty = false;\n      /** @type {?} */\n      let singleDirty = true;\n      // only when the value is set to `null` should the multi-value get flagged\n      if (!valueExists(value, isClassBased) && valueExists(valueForMulti, isClassBased)) {\n        multiDirty = true;\n        singleDirty = false;\n      }\n      setDirty(context, indexForMulti, multiDirty);\n      setDirty(context, singleIndex, singleDirty);\n      setDirectiveDirty(context, directiveIndex, true);\n      setContextDirty(context, true);\n    }\n    if (playerBuildersAreDirty) {\n      setContextPlayersDirty(context, true);\n    }\n  }\n}\n/**\n * Renders all queued styling using a renderer onto the given element.\n *\n * This function works by rendering any styles (that have been applied\n * using `updateStylingMap`) and any classes (that have been applied using\n * `updateStyleProp`) onto the provided element using the provided renderer.\n * Just before the styles/classes are rendered a final key/value style map\n * will be assembled (if `styleStore` or `classStore` are provided).\n *\n * @param {?} context The styling context that will be used to determine\n *      what styles will be rendered\n * @param {?} renderer the renderer that will be used to apply the styling\n * @param {?} rootOrView\n * @param {?} isFirstRender\n * @param {?=} classesStore if provided, the updated class values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param {?=} stylesStore if provided, the updated style values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param {?=} directiveRef an optional directive that will be used to target which\n *    styling values are rendered. If left empty, only the bindings that are\n *    registered on the template will be rendered.\n * @return {?} number the total amount of players that got queued for animation (if any)\n */\nfunction renderStyling(context, renderer, rootOrView, isFirstRender, classesStore, stylesStore, directiveRef) {\n  /** @type {?} */\n  let totalPlayersQueued = 0;\n  /** @type {?} */\n  const targetDirectiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n  if (isContextDirty(context) && isDirectiveDirty(context, targetDirectiveIndex)) {\n    /** @type {?} */\n    const flushPlayerBuilders = context[0 /* MasterFlagPosition */] & 8 /* PlayerBuildersDirty */;\n    /** @type {?} */\n    const native = /** @type {?} */context[5 /* ElementPosition */];\n    /** @type {?} */\n    const multiStartIndex = getMultiStartIndex(context);\n    /** @type {?} */\n    const onlySingleClasses = limitToSingleClasses(context);\n    /** @type {?} */\n    let stillDirty = false;\n    for (let i = 9 /* SingleStylesStartPosition */; i < context.length; i += 4 /* Size */) {\n      // there is no point in rendering styles that have not changed on screen\n      if (isDirty(context, i)) {\n        /** @type {?} */\n        const flag = getPointers(context, i);\n        /** @type {?} */\n        const directiveIndex = getDirectiveIndexFromEntry(context, i);\n        if (targetDirectiveIndex !== directiveIndex) {\n          stillDirty = true;\n          continue;\n        }\n        /** @type {?} */\n        const prop = getProp(context, i);\n        /** @type {?} */\n        const value = getValue(context, i);\n        /** @type {?} */\n        const styleSanitizer = flag & 4 /* Sanitize */ ? getStyleSanitizer(context, directiveIndex) : null;\n        /** @type {?} */\n        const playerBuilder = getPlayerBuilder(context, i);\n        /** @type {?} */\n        const isClassBased = flag & 2 /* Class */ ? true : false;\n        /** @type {?} */\n        const isInSingleRegion = i < multiStartIndex;\n        /** @type {?} */\n        const readInitialValue = !isClassBased || !onlySingleClasses;\n        /** @type {?} */\n        let valueToApply = value;\n        // VALUE DEFER CASE 1: Use a multi value instead of a null single value\n        // this check implies that a single value was removed and we\n        // should now defer to a multi value and use that (if set).\n        if (isInSingleRegion && !valueExists(valueToApply, isClassBased)) {\n          // single values ALWAYS have a reference to a multi index\n          /** @type {?} */\n          const multiIndex = getMultiOrSingleIndex(flag);\n          valueToApply = getValue(context, multiIndex);\n        }\n        // VALUE DEFER CASE 2: Use the initial value if all else fails (is falsy)\n        // the initial value will always be a string or null,\n        // therefore we can safely adopt it incase there's nothing else\n        // note that this should always be a falsy check since `false` is used\n        // for both class and style comparisons (styles can't be false and false\n        // classes are turned off and should therefore defer to their initial values)\n        // Note that we ignore class-based deferals because otherwise a class can never\n        // be removed in the case that it exists as true in the initial classes list...\n        if (!isClassBased && !valueExists(valueToApply, isClassBased) && readInitialValue) {\n          valueToApply = getInitialValue(context, flag);\n        }\n        // if the first render is true then we do not want to start applying falsy\n        // values to the DOM element's styling. Otherwise then we know there has\n        // been a change and even if it's falsy then it's removing something that\n        // was truthy before.\n        /** @type {?} */\n        const doApplyValue = isFirstRender ? valueToApply : true;\n        if (doApplyValue) {\n          if (isClassBased) {\n            setClass(native, prop, valueToApply ? true : false, renderer, classesStore, playerBuilder);\n          } else {\n            setStyle(native, prop, /** @type {?} */valueToApply, renderer, styleSanitizer, stylesStore, playerBuilder);\n          }\n        }\n        setDirty(context, i, false);\n      }\n    }\n    if (flushPlayerBuilders) {\n      /** @type {?} */\n      const rootContext = Array.isArray(rootOrView) ? getRootContext(rootOrView) : /** @type {?} */rootOrView;\n      /** @type {?} */\n      const playerContext = /** @type {?} */getPlayerContext(context);\n      /** @type {?} */\n      const playersStartIndex = playerContext[0 /* NonBuilderPlayersStart */];\n      for (let i = 1 /* PlayerBuildersStartPosition */; i < playersStartIndex; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n        /** @type {?} */\n        const builder = /** @type {?} */playerContext[i];\n        /** @type {?} */\n        const playerInsertionIndex = i + 1 /* PlayerOffsetPosition */;\n        /** @type {?} */\n        const oldPlayer = /** @type {?} */playerContext[playerInsertionIndex];\n        if (builder) {\n          /** @type {?} */\n          const player = builder.buildPlayer(oldPlayer, isFirstRender);\n          if (player !== undefined) {\n            if (player != null) {\n              /** @type {?} */\n              const wasQueued = addPlayerInternal(playerContext, rootContext, /** @type {?} */native, player, playerInsertionIndex);\n              wasQueued && totalPlayersQueued++;\n            }\n            if (oldPlayer) {\n              oldPlayer.destroy();\n            }\n          }\n        } else if (oldPlayer) {\n          // the player builder has been removed ... therefore we should delete the associated\n          // player\n          oldPlayer.destroy();\n        }\n      }\n      setContextPlayersDirty(context, false);\n    }\n    setDirectiveDirty(context, targetDirectiveIndex, false);\n    setContextDirty(context, stillDirty);\n  }\n  return totalPlayersQueued;\n}\n/**\n * This function renders a given CSS prop/value entry using the\n * provided renderer. If a `store` value is provided then\n * that will be used a render context instead of the provided\n * renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} prop the CSS style property that will be rendered\n * @param {?} value the CSS style value that will be rendered\n * @param {?} renderer\n * @param {?} sanitizer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @param {?=} playerBuilder\n * @return {?}\n */\nfunction setStyle(native, prop, value, renderer, sanitizer, store, playerBuilder) {\n  value = sanitizer && value ? sanitizer(prop, value) : value;\n  if (store || playerBuilder) {\n    if (store) {\n      store.setValue(prop, value);\n    }\n    if (playerBuilder) {\n      playerBuilder.setValue(prop, value);\n    }\n  } else if (value) {\n    value = value.toString(); // opacity, z-index and flexbox all have number values which may not\n    // assign as numbers\n    ngDevMode && ngDevMode.rendererSetStyle++;\n    isProceduralRenderer(renderer) ? renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) : native['style'].setProperty(prop, value);\n  } else {\n    ngDevMode && ngDevMode.rendererRemoveStyle++;\n    isProceduralRenderer(renderer) ? renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) : native['style'].removeProperty(prop);\n  }\n}\n/**\n * This function renders a given CSS class value using the provided\n * renderer (by adding or removing it from the provided element).\n * If a `store` value is provided then that will be used a render\n * context instead of the provided renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} className\n * @param {?} add\n * @param {?} renderer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @param {?=} playerBuilder\n * @return {?}\n */\nfunction setClass(native, className, add, renderer, store, playerBuilder) {\n  if (store || playerBuilder) {\n    if (store) {\n      store.setValue(className, add);\n    }\n    if (playerBuilder) {\n      playerBuilder.setValue(className, add);\n    }\n  } else if (add) {\n    ngDevMode && ngDevMode.rendererAddClass++;\n    isProceduralRenderer(renderer) ? renderer.addClass(native, className) : native['classList'].add(className);\n  } else {\n    ngDevMode && ngDevMode.rendererRemoveClass++;\n    isProceduralRenderer(renderer) ? renderer.removeClass(native, className) : native['classList'].remove(className);\n  }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} sanitizeYes\n * @return {?}\n */\nfunction setSanitizeFlag(context, index, sanitizeYes) {\n  if (sanitizeYes) {\n    /** @type {?} */context[index] |= 4 /* Sanitize */;\n  } else {\n    /** @type {?} */context[index] &= ~4 /* Sanitize */;\n  }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setDirty(context, index, isDirtyYes) {\n  /** @type {?} */\n  const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? index + 0 /* FlagsOffset */ : index;\n  if (isDirtyYes) {\n    /** @type {?} */context[adjustedIndex] |= 1 /* Dirty */;\n  } else {\n    /** @type {?} */context[adjustedIndex] &= ~1 /* Dirty */;\n  }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isDirty(context, index) {\n  /** @type {?} */\n  const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? index + 0 /* FlagsOffset */ : index;\n  return ( /** @type {?} */context[adjustedIndex] & 1 /* Dirty */) == 1 /* Dirty */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isClassBasedValue(context, index) {\n  /** @type {?} */\n  const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? index + 0 /* FlagsOffset */ : index;\n  return ( /** @type {?} */context[adjustedIndex] & 2 /* Class */) == 2 /* Class */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isSanitizable(context, index) {\n  /** @type {?} */\n  const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? index + 0 /* FlagsOffset */ : index;\n  return ( /** @type {?} */context[adjustedIndex] & 4 /* Sanitize */) == 4 /* Sanitize */;\n}\n/**\n * @param {?} configFlag\n * @param {?} staticIndex\n * @param {?} dynamicIndex\n * @return {?}\n */\nfunction pointers(configFlag, staticIndex, dynamicIndex) {\n  return configFlag & 63 /* BitMask */ | staticIndex << 6 /* BitCountSize */ | dynamicIndex << 14 /* BitCountSize */ + 6 /* BitCountSize */;\n}\n/**\n * @param {?} context\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialValue(context, flag) {\n  /** @type {?} */\n  const index = getInitialIndex(flag);\n  /** @type {?} */\n  const entryIsClassBased = flag & 2 /* Class */;\n  /** @type {?} */\n  const initialValues = entryIsClassBased ? context[3 /* InitialClassValuesPosition */] : context[2 /* InitialStyleValuesPosition */];\n  return initialValues[index];\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialIndex(flag) {\n  return flag >> 6 /* BitCountSize */ & 16383 /* BitMask */;\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getMultiOrSingleIndex(flag) {\n  /** @type {?} */\n  const index = flag >> 14 /* BitCountSize */ + 6 /* BitCountSize */ & 16383 /* BitMask */;\n  return index >= 9 /* SingleStylesStartPosition */ ? index : -1;\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getMultiStartIndex(context) {\n  return (/** @type {?} */getMultiOrSingleIndex(context[0 /* MasterFlagPosition */])\n  );\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} prop\n * @return {?}\n */\nfunction setProp(context, index, prop) {\n  context[index + 1 /* PropertyOffset */] = prop;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction setValue(context, index, value) {\n  context[index + 2 /* ValueOffset */] = value;\n}\n/**\n * @param {?} context\n * @param {?} builder\n * @param {?} index\n * @return {?}\n */\nfunction hasPlayerBuilderChanged(context, builder, index) {\n  /** @type {?} */\n  const playerContext = /** @type {?} */context[8 /* PlayerContext */];\n  if (builder) {\n    if (!playerContext || index === 0) {\n      return true;\n    }\n  } else if (!playerContext) {\n    return false;\n  }\n  return playerContext[index] !== builder;\n}\n/**\n * @param {?} context\n * @param {?} builder\n * @param {?} insertionIndex\n * @return {?}\n */\nfunction setPlayerBuilder(context, builder, insertionIndex) {\n  /** @type {?} */\n  let playerContext = context[8 /* PlayerContext */] || allocPlayerContext(context);\n  if (insertionIndex > 0) {\n    playerContext[insertionIndex] = builder;\n  } else {\n    insertionIndex = playerContext[0 /* NonBuilderPlayersStart */];\n    playerContext.splice(insertionIndex, 0, builder, null);\n    playerContext[0 /* NonBuilderPlayersStart */] += 2 /* PlayerAndPlayerBuildersTupleSize */;\n  }\n\n  return insertionIndex;\n}\n/**\n * @param {?} directiveIndex\n * @param {?} playerIndex\n * @return {?}\n */\nfunction directiveOwnerPointers(directiveIndex, playerIndex) {\n  return playerIndex << 16 /* BitCountSize */ | directiveIndex;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} playerBuilderIndex\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction setPlayerBuilderIndex(context, index, playerBuilderIndex, directiveIndex) {\n  /** @type {?} */\n  const value = directiveOwnerPointers(directiveIndex, playerBuilderIndex);\n  context[index + 3 /* PlayerBuilderIndexOffset */] = value;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPlayerBuilderIndex(context, index) {\n  /** @type {?} */\n  const flag = /** @type {?} */context[index + 3 /* PlayerBuilderIndexOffset */];\n  /** @type {?} */\n  const playerBuilderIndex = flag >> 16 /* BitCountSize */ & 65535 /* BitMask */;\n  return playerBuilderIndex;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPlayerBuilder(context, index) {\n  /** @type {?} */\n  const playerBuilderIndex = getPlayerBuilderIndex(context, index);\n  if (playerBuilderIndex) {\n    /** @type {?} */\n    const playerContext = context[8 /* PlayerContext */];\n    if (playerContext) {\n      return (/** @type {?} */playerContext[playerBuilderIndex]\n      );\n    }\n  }\n  return null;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} flag\n * @return {?}\n */\nfunction setFlag(context, index, flag) {\n  /** @type {?} */\n  const adjustedIndex = index === 0 /* MasterFlagPosition */ ? index : index + 0 /* FlagsOffset */;\n  context[adjustedIndex] = flag;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPointers(context, index) {\n  /** @type {?} */\n  const adjustedIndex = index === 0 /* MasterFlagPosition */ ? index : index + 0 /* FlagsOffset */;\n  return (/** @type {?} */context[adjustedIndex]\n  );\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getValue(context, index) {\n  return (/** @type {?} */context[index + 2 /* ValueOffset */]\n  );\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getProp(context, index) {\n  return (/** @type {?} */context[index + 1 /* PropertyOffset */]\n  );\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction isContextDirty(context) {\n  return isDirty(context, 0 /* MasterFlagPosition */);\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction limitToSingleClasses(context) {\n  return context[0 /* MasterFlagPosition */] & 16 /* OnlyProcessSingleClasses */;\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setContextDirty(context, isDirtyYes) {\n  setDirty(context, 0 /* MasterFlagPosition */, isDirtyYes);\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setContextPlayersDirty(context, isDirtyYes) {\n  if (isDirtyYes) {\n    /** @type {?} */context[0 /* MasterFlagPosition */] |= 8 /* PlayerBuildersDirty */;\n  } else {\n    /** @type {?} */context[0 /* MasterFlagPosition */] &= ~8 /* PlayerBuildersDirty */;\n  }\n}\n/**\n * @param {?} context\n * @param {?} prop\n * @param {?=} startIndex\n * @return {?}\n */\nfunction findEntryPositionByProp(context, prop, startIndex) {\n  for (let i = (startIndex || 0) + 1 /* PropertyOffset */; i < context.length; i += 4 /* Size */) {\n    /** @type {?} */\n    const thisProp = context[i];\n    if (thisProp == prop) {\n      return i - 1 /* PropertyOffset */;\n    }\n  }\n\n  return -1;\n}\n/**\n * @param {?} context\n * @param {?} indexA\n * @param {?} indexB\n * @return {?}\n */\nfunction swapMultiContextEntries(context, indexA, indexB) {\n  /** @type {?} */\n  const tmpValue = getValue(context, indexA);\n  /** @type {?} */\n  const tmpProp = getProp(context, indexA);\n  /** @type {?} */\n  const tmpFlag = getPointers(context, indexA);\n  /** @type {?} */\n  const tmpPlayerBuilderIndex = getPlayerBuilderIndex(context, indexA);\n  /** @type {?} */\n  let flagA = tmpFlag;\n  /** @type {?} */\n  let flagB = getPointers(context, indexB);\n  /** @type {?} */\n  const singleIndexA = getMultiOrSingleIndex(flagA);\n  if (singleIndexA >= 0) {\n    /** @type {?} */\n    const _flag = getPointers(context, singleIndexA);\n    /** @type {?} */\n    const _initial = getInitialIndex(_flag);\n    setFlag(context, singleIndexA, pointers(_flag, _initial, indexB));\n  }\n  /** @type {?} */\n  const singleIndexB = getMultiOrSingleIndex(flagB);\n  if (singleIndexB >= 0) {\n    /** @type {?} */\n    const _flag = getPointers(context, singleIndexB);\n    /** @type {?} */\n    const _initial = getInitialIndex(_flag);\n    setFlag(context, singleIndexB, pointers(_flag, _initial, indexA));\n  }\n  setValue(context, indexA, getValue(context, indexB));\n  setProp(context, indexA, getProp(context, indexB));\n  setFlag(context, indexA, getPointers(context, indexB));\n  /** @type {?} */\n  const playerIndexA = getPlayerBuilderIndex(context, indexB);\n  /** @type {?} */\n  const directiveIndexA = 0;\n  setPlayerBuilderIndex(context, indexA, playerIndexA, directiveIndexA);\n  setValue(context, indexB, tmpValue);\n  setProp(context, indexB, tmpProp);\n  setFlag(context, indexB, tmpFlag);\n  setPlayerBuilderIndex(context, indexB, tmpPlayerBuilderIndex, directiveIndexA);\n}\n/**\n * @param {?} context\n * @param {?} indexStartPosition\n * @return {?}\n */\nfunction updateSinglePointerValues(context, indexStartPosition) {\n  for (let i = indexStartPosition; i < context.length; i += 4 /* Size */) {\n    /** @type {?} */\n    const multiFlag = getPointers(context, i);\n    /** @type {?} */\n    const singleIndex = getMultiOrSingleIndex(multiFlag);\n    if (singleIndex > 0) {\n      /** @type {?} */\n      const singleFlag = getPointers(context, singleIndex);\n      /** @type {?} */\n      const initialIndexForSingle = getInitialIndex(singleFlag);\n      /** @type {?} */\n      const flagValue = (isDirty(context, singleIndex) ? 1 /* Dirty */ : 0 /* None */) | (isClassBasedValue(context, singleIndex) ? 2 /* Class */ : 0 /* None */) | (isSanitizable(context, singleIndex) ? 4 /* Sanitize */ : 0 /* None */);\n      /** @type {?} */\n      const updatedFlag = pointers(flagValue, initialIndexForSingle, i);\n      setFlag(context, singleIndex, updatedFlag);\n    }\n  }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} classBased\n * @param {?} name\n * @param {?} flag\n * @param {?} value\n * @param {?} directiveIndex\n * @param {?} playerIndex\n * @return {?}\n */\nfunction insertNewMultiProperty(context, index, classBased, name, flag, value, directiveIndex, playerIndex) {\n  /** @type {?} */\n  const doShift = index < context.length;\n  // prop does not exist in the list, add it in\n  context.splice(index, 0, flag | 1 /* Dirty */ | (classBased ? 2 /* Class */ : 0 /* None */), name, value, 0);\n  setPlayerBuilderIndex(context, index, playerIndex, directiveIndex);\n  if (doShift) {\n    // because the value was inserted midway into the array then we\n    // need to update all the shifted multi values' single value\n    // pointers to point to the newly shifted location\n    updateSinglePointerValues(context, index + 4 /* Size */);\n  }\n}\n/**\n * @param {?} value\n * @param {?=} isClassBased\n * @return {?}\n */\nfunction valueExists(value, isClassBased) {\n  if (isClassBased) {\n    return value ? true : false;\n  }\n  return value !== null;\n}\n/**\n * @param {?} context\n * @param {?} prop\n * @param {?} entryIsClassBased\n * @param {?=} sanitizer\n * @return {?}\n */\nfunction prepareInitialFlag(context, prop, entryIsClassBased, sanitizer) {\n  /** @type {?} */\n  let flag = sanitizer && sanitizer(prop) ? 4 /* Sanitize */ : 0 /* None */;\n  /** @type {?} */\n  let initialIndex;\n  if (entryIsClassBased) {\n    flag |= 2 /* Class */;\n    initialIndex = getInitialStylingValuesIndexOf(context[3 /* InitialClassValuesPosition */], prop);\n  } else {\n    initialIndex = getInitialStylingValuesIndexOf(context[2 /* InitialStyleValuesPosition */], prop);\n  }\n  initialIndex = initialIndex > 0 ? initialIndex + 1 /* ValueOffset */ : 0;\n  return pointers(flag, initialIndex, 0);\n}\n/**\n * @param {?} flag\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction hasValueChanged(flag, a, b) {\n  /** @type {?} */\n  const isClassBased = flag & 2 /* Class */;\n  /** @type {?} */\n  const hasValues = a && b;\n  /** @type {?} */\n  const usesSanitizer = flag & 4 /* Sanitize */;\n  // the toString() comparison ensures that a value is checked\n  // ... otherwise (during sanitization bypassing) the === comparsion\n  // would fail since a new String() instance is created\n  if (!isClassBased && hasValues && usesSanitizer) {\n    // we know for sure we're dealing with strings at this point\n    return (/** @type {?} */a.toString() !== /** @type {?} */b.toString()\n    );\n  }\n  // everything else is safe to check with a normal equality check\n  return a !== b;\n}\n/**\n * @template T\n */\nclass ClassAndStylePlayerBuilder {\n  /**\n   * @param {?} factory\n   * @param {?} _element\n   * @param {?} _type\n   */\n  constructor(factory, _element, _type) {\n    this._element = _element;\n    this._type = _type;\n    this._values = {};\n    this._dirty = false;\n    this._factory = /** @type {?} */factory;\n  }\n  /**\n   * @param {?} prop\n   * @param {?} value\n   * @return {?}\n   */\n  setValue(prop, value) {\n    if (this._values[prop] !== value) {\n      this._values[prop] = value;\n      this._dirty = true;\n    }\n  }\n  /**\n   * @param {?} currentPlayer\n   * @param {?} isFirstRender\n   * @return {?}\n   */\n  buildPlayer(currentPlayer, isFirstRender) {\n    // if no values have been set here then this means the binding didn't\n    // change and therefore the binding values were not updated through\n    // `setValue` which means no new player will be provided.\n    if (this._dirty) {\n      /** @type {?} */\n      const player = this._factory.fn(this._element, this._type, /** @type {?} */this._values, isFirstRender, currentPlayer || null);\n      this._values = {};\n      this._dirty = false;\n      return player;\n    }\n    return undefined;\n  }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getDirectiveIndexFromEntry(context, index) {\n  /** @type {?} */\n  const value = /** @type {?} */context[index + 3 /* PlayerBuilderIndexOffset */];\n  return value & 65535 /* BitMask */;\n}\n/**\n * @param {?} context\n * @param {?} directive\n * @return {?}\n */\nfunction getDirectiveIndexFromRegistry(context, directive) {\n  /** @type {?} */\n  const index = getDirectiveRegistryValuesIndexOf(context[1 /* DirectiveRegistryPosition */], directive);\n  ngDevMode && assertNotEqual(index, -1, `The provided directive ${directive} has not been allocated to the element\\'s style/class bindings`);\n  return index > 0 ? index / 4 /* Size */ : 0;\n  // return index / DirectiveRegistryValuesIndex.Size;\n}\n/**\n * @param {?} directives\n * @param {?} directive\n * @return {?}\n */\nfunction getDirectiveRegistryValuesIndexOf(directives, directive) {\n  for (let i = 0; i < directives.length; i += 4 /* Size */) {\n    if (directives[i] === directive) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\n * @param {?} keyValues\n * @param {?} key\n * @return {?}\n */\nfunction getInitialStylingValuesIndexOf(keyValues, key) {\n  for (let i = 1 /* KeyValueStartPosition */; i < keyValues.length; i += 2 /* Size */) {\n    if (keyValues[i] === key) return i;\n  }\n  return -1;\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} offset\n * @param {?} isClassBased\n * @return {?}\n */\nfunction getSinglePropIndexValue(context, directiveIndex, offset, isClassBased) {\n  /** @type {?} */\n  const singlePropOffsetRegistryIndex = /** @type {?} */context[1 /* DirectiveRegistryPosition */][directiveIndex * 4 /* Size */ + 1 /* SinglePropValuesIndexOffset */];\n  /** @type {?} */\n  const offsets = context[4 /* SinglePropOffsetPositions */];\n  /** @type {?} */\n  const indexForOffset = singlePropOffsetRegistryIndex + 2 /* ValueStartPosition */ + (isClassBased ? offsets[singlePropOffsetRegistryIndex + 0 /* StylesCountPosition */] : 0) + offset;\n  return offsets[indexForOffset];\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction getStyleSanitizer(context, directiveIndex) {\n  /** @type {?} */\n  const dirs = context[1 /* DirectiveRegistryPosition */];\n  /** @type {?} */\n  const value = dirs[directiveIndex * 4 /* Size */ + 3 /* StyleSanitizerOffset */] || dirs[3 /* StyleSanitizerOffset */] || null;\n  return (/** @type {?} */value\n  );\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction isDirectiveDirty(context, directiveIndex) {\n  /** @type {?} */\n  const dirs = context[1 /* DirectiveRegistryPosition */];\n  return (/** @type {?} */dirs[directiveIndex * 4 /* Size */ + 2 /* DirtyFlagOffset */]\n  );\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} dirtyYes\n * @return {?}\n */\nfunction setDirectiveDirty(context, directiveIndex, dirtyYes) {\n  /** @type {?} */\n  const dirs = context[1 /* DirectiveRegistryPosition */];\n  dirs[directiveIndex * 4 /* Size */ + 2 /* DirtyFlagOffset */] = dirtyYes;\n}\n/**\n * @param {?} currentValue\n * @param {?} newValue\n * @param {?} currentDirectiveOwner\n * @param {?} newDirectiveOwner\n * @return {?}\n */\nfunction allowValueChange(currentValue, newValue, currentDirectiveOwner, newDirectiveOwner) {\n  // the code below relies the importance of directive's being tied to their\n  // index value. The index values for each directive are derived from being\n  // registered into the styling context directive registry. The most important\n  // directive is the parent component directive (the template) and each directive\n  // that is added after is considered less important than the previous entry. This\n  // prioritization of directives enables the styling algorithm to decide if a style\n  // or class should be allowed to be updated/replaced incase an earlier directive\n  // already wrote to the exact same style-property or className value. In other words\n  // ... this decides what to do if and when there is a collision.\n  if (currentValue) {\n    if (newValue) {\n      // if a directive index is lower than it always has priority over the\n      // previous directive's value...\n      return newDirectiveOwner <= currentDirectiveOwner;\n    } else {\n      // only write a null value incase it's the same owner writing it.\n      // this avoids having a higher-priority directive write to null\n      // only to have a lesser-priority directive change right to a\n      // non-null value immediately afterwards.\n      return currentDirectiveOwner === newDirectiveOwner;\n    }\n  }\n  return true;\n}\n/**\n * This function is only designed to be called for `[class]` bindings when\n * `[ngClass]` (or something that uses `class` as an input) is present. Once\n * directive host bindings fully work for `[class]` and `[style]` inputs\n * then this can be deleted.\n * @param {?} context\n * @return {?}\n */\nfunction getInitialClassNameValue(context) {\n  /** @type {?} */\n  let className = /** @type {?} */context[6 /* CachedClassValueOrInitialClassString */];\n  if (className == null) {\n    className = '';\n    /** @type {?} */\n    const initialClassValues = context[3 /* InitialClassValuesPosition */];\n    for (let i = 1 /* KeyValueStartPosition */; i < initialClassValues.length; i += 2 /* Size */) {\n      /** @type {?} */\n      const isPresent = initialClassValues[i + 1];\n      if (isPresent) {\n        className += (className.length ? ' ' : '') + initialClassValues[i];\n      }\n    }\n    context[6 /* CachedClassValueOrInitialClassString */] = className;\n  }\n  return className;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n * @type {?}\n */\nconst _CLEAN_PROMISE = Promise.resolve(null);\n/**\n * Refreshes the view, executing the following steps in that order:\n * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n * bindings, refreshes child components.\n * Note: view hooks are triggered later when leaving the view.\n * @param {?} lView\n * @return {?}\n */\nfunction refreshDescendantViews(lView) {\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  // This needs to be set before children are processed to support recursive components\n  tView.firstTemplatePass = false;\n  setFirstTemplatePass(false);\n  // If this is a creation pass, we should not call lifecycle hooks or evaluate bindings.\n  // This will be done in the update pass.\n  if (!isCreationMode(lView)) {\n    /** @type {?} */\n    const checkNoChangesMode = getCheckNoChangesMode();\n    executeInitHooks(lView, tView, checkNoChangesMode);\n    refreshDynamicEmbeddedViews(lView);\n    // Content query results must be refreshed before content hooks are called.\n    refreshContentQueries(tView);\n    executeHooks(lView, tView.contentHooks, tView.contentCheckHooks, checkNoChangesMode);\n    setHostBindings(tView, lView);\n  }\n  refreshChildComponents(tView.components);\n}\n/**\n * Sets the host bindings for the current view.\n * @param {?} tView\n * @param {?} viewData\n * @return {?}\n */\nfunction setHostBindings(tView, viewData) {\n  if (tView.expandoInstructions) {\n    /** @type {?} */\n    let bindingRootIndex = viewData[BINDING_INDEX] = tView.expandoStartIndex;\n    setBindingRoot(bindingRootIndex);\n    /** @type {?} */\n    let currentDirectiveIndex = -1;\n    /** @type {?} */\n    let currentElementIndex = -1;\n    for (let i = 0; i < tView.expandoInstructions.length; i++) {\n      /** @type {?} */\n      const instruction = tView.expandoInstructions[i];\n      if (typeof instruction === 'number') {\n        if (instruction <= 0) {\n          // Negative numbers mean that we are starting new EXPANDO block and need to update\n          // the current element and directive index.\n          currentElementIndex = -instruction;\n          // Injector block and providers are taken into account.\n          /** @type {?} */\n          const providerCount = /** @type {?} */tView.expandoInstructions[++i];\n          bindingRootIndex += INJECTOR_BLOOM_PARENT_SIZE + providerCount;\n          currentDirectiveIndex = bindingRootIndex;\n        } else {\n          // This is either the injector size (so the binding root can skip over directives\n          // and get to the first set of host bindings on this node) or the host var count\n          // (to get to the next set of host bindings on this node).\n          bindingRootIndex += instruction;\n        }\n        setBindingRoot(bindingRootIndex);\n      } else {\n        // If it's not a number, it's a host binding function that needs to be executed.\n        if (instruction !== null) {\n          viewData[BINDING_INDEX] = bindingRootIndex;\n          instruction(2 /* Update */, readElementValue(viewData[currentDirectiveIndex]), currentElementIndex);\n        }\n        currentDirectiveIndex++;\n      }\n    }\n  }\n}\n/**\n * Refreshes content queries for all directives in the given view.\n * @param {?} tView\n * @return {?}\n */\nfunction refreshContentQueries(tView) {\n  if (tView.contentQueries != null) {\n    for (let i = 0; i < tView.contentQueries.length; i += 2) {\n      /** @type {?} */\n      const directiveDefIdx = tView.contentQueries[i];\n      /** @type {?} */\n      const directiveDef = /** @type {?} */tView.data[directiveDefIdx];\n      /** @type {?} */directiveDef.contentQueriesRefresh(directiveDefIdx - HEADER_OFFSET, tView.contentQueries[i + 1]);\n    }\n  }\n}\n/**\n * Refreshes child components in the current view.\n * @param {?} components\n * @return {?}\n */\nfunction refreshChildComponents(components) {\n  if (components != null) {\n    for (let i = 0; i < components.length; i++) {\n      componentRefresh(components[i]);\n    }\n  }\n}\n/**\n * @template T\n * @param {?} parentLView\n * @param {?} tView\n * @param {?} context\n * @param {?} flags\n * @param {?=} rendererFactory\n * @param {?=} renderer\n * @param {?=} sanitizer\n * @param {?=} injector\n * @return {?}\n */\nfunction createLView(parentLView, tView, context, flags, rendererFactory, renderer, sanitizer, injector) {\n  /** @type {?} */\n  const lView = /** @type {?} */tView.blueprint.slice();\n  lView[FLAGS] = flags | 1 /* CreationMode */ | 16 /* Attached */ | 32 /* RunInit */ | 2 /* FirstLViewPass */;\n  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n  lView[CONTEXT] = context;\n  lView[RENDERER_FACTORY] = /** @type {?} */rendererFactory || parentLView && parentLView[RENDERER_FACTORY];\n  ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n  lView[RENDERER] = /** @type {?} */renderer || parentLView && parentLView[RENDERER];\n  ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n  lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || /** @type {?} */null;\n  lView[/** @type {?} */INJECTOR] = injector || parentLView && parentLView[INJECTOR] || null;\n  return lView;\n}\n/**\n * @param {?} index\n * @param {?} type\n * @param {?} native\n * @param {?} name\n * @param {?} attrs\n * @return {?}\n */\nfunction createNodeAtIndex(index, type, native, name, attrs) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  /** @type {?} */\n  const adjustedIndex = index + HEADER_OFFSET;\n  ngDevMode && assertLessThan(adjustedIndex, lView.length, `Slot should have been initialized with null`);\n  lView[adjustedIndex] = native;\n  /** @type {?} */\n  let tNode = /** @type {?} */tView.data[adjustedIndex];\n  if (tNode == null) {\n    // TODO(misko): Refactor createTNode so that it does not depend on LView.\n    tNode = tView.data[adjustedIndex] = createTNode(lView, type, adjustedIndex, name, attrs, null);\n  }\n  // Now link ourselves into the tree.\n  // We need this even if tNode exists, otherwise we might end up pointing to unexisting tNodes when\n  // we use i18n (especially with ICU expressions that update the DOM during the update phase).\n  /** @type {?} */\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  /** @type {?} */\n  const isParent = getIsParent();\n  if (previousOrParentTNode) {\n    if (isParent && previousOrParentTNode.child == null && (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {\n      // We are in the same view, which means we are adding content node to the parent view.\n      previousOrParentTNode.child = tNode;\n    } else if (!isParent) {\n      previousOrParentTNode.next = tNode;\n    }\n  }\n  if (tView.firstChild == null) {\n    tView.firstChild = tNode;\n  }\n  setPreviousOrParentTNode(tNode);\n  setIsParent(true);\n  return (/** @type {?} */tNode\n  );\n}\n/**\n * @param {?} index\n * @param {?} view\n * @return {?}\n */\nfunction createViewNode(index, view) {\n  // View nodes are not stored in data because they can be added / removed at runtime (which\n  // would cause indices to change). Their TNodes are instead stored in tView.node.\n  if (view[TVIEW].node == null) {\n    view[TVIEW].node = /** @type {?} */createTNode(view, 2 /* View */, index, null, null, null);\n  }\n  return view[HOST_NODE] = /** @type {?} */view[TVIEW].node;\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n * template passes.\n * @param {?} view\n * @return {?}\n */\nfunction allocExpando(view) {\n  /** @type {?} */\n  const tView = view[TVIEW];\n  if (tView.firstTemplatePass) {\n    tView.expandoStartIndex++;\n    tView.blueprint.push(null);\n    tView.data.push(null);\n    view.push(null);\n  }\n}\n/**\n * Used for creating the LViewNode of a dynamic embedded view,\n * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n * @template T\n * @param {?} tView\n * @param {?} context\n * @param {?} declarationView\n * @param {?} renderer\n * @param {?} queries\n * @param {?} injectorIndex\n * @return {?}\n */\nfunction createEmbeddedViewAndNode(tView, context, declarationView, renderer, queries, injectorIndex) {\n  /** @type {?} */\n  const _isParent = getIsParent();\n  /** @type {?} */\n  const _previousOrParentTNode = getPreviousOrParentTNode();\n  setIsParent(true);\n  setPreviousOrParentTNode( /** @type {?} */null);\n  /** @type {?} */\n  const lView = createLView(declarationView, tView, context, 4 /* CheckAlways */);\n  lView[DECLARATION_VIEW] = declarationView;\n  if (queries) {\n    lView[QUERIES] = queries.createView();\n  }\n  createViewNode(-1, lView);\n  if (tView.firstTemplatePass) {\n    /** @type {?} */tView.node.injectorIndex = injectorIndex;\n  }\n  setIsParent(_isParent);\n  setPreviousOrParentTNode(_previousOrParentTNode);\n  return lView;\n}\n/**\n * Used for rendering embedded views (e.g. dynamically created views)\n *\n * Dynamically created views must store/retrieve their TViews differently from component views\n * because their template functions are nested in the template functions of their hosts, creating\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n * TView for dynamically created views on their host TNode, which only has one instance.\n * @template T\n * @param {?} viewToRender\n * @param {?} tView\n * @param {?} context\n * @return {?}\n */\nfunction renderEmbeddedTemplate(viewToRender, tView, context) {\n  /** @type {?} */\n  const _isParent = getIsParent();\n  /** @type {?} */\n  const _previousOrParentTNode = getPreviousOrParentTNode();\n  setIsParent(true);\n  setPreviousOrParentTNode( /** @type {?} */null);\n  /** @type {?} */\n  let oldView;\n  if (viewToRender[FLAGS] & 128 /* IsRoot */) {\n    // This is a root view inside the view tree\n    tickRootContext(getRootContext(viewToRender));\n  } else {\n    try {\n      setIsParent(true);\n      setPreviousOrParentTNode( /** @type {?} */null);\n      oldView = enterView(viewToRender, viewToRender[HOST_NODE]);\n      namespaceHTML();\n      /** @type {?} */tView.template(getRenderFlags(viewToRender), context);\n      // This must be set to false immediately after the first creation run because in an\n      // ngFor loop, all the views will be created together before update mode runs and turns\n      // off firstTemplatePass. If we don't set it here, instances will perform directive\n      // matching, etc again and again.\n      viewToRender[TVIEW].firstTemplatePass = false;\n      setFirstTemplatePass(false);\n      refreshDescendantViews(viewToRender);\n    } finally {\n      leaveView( /** @type {?} */oldView);\n      setIsParent(_isParent);\n      setPreviousOrParentTNode(_previousOrParentTNode);\n    }\n  }\n}\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @template T\n * @param {?=} level The relative level of the view from which to grab context compared to contextVewData\n * @return {?} context\n */\nfunction nextContext(level = 1) {\n  return nextContextImpl(level);\n}\n/**\n * @template T\n * @param {?} hostView\n * @param {?} context\n * @param {?=} templateFn\n * @return {?}\n */\nfunction renderComponentOrTemplate(hostView, context, templateFn) {\n  /** @type {?} */\n  const rendererFactory = hostView[RENDERER_FACTORY];\n  /** @type {?} */\n  const oldView = enterView(hostView, hostView[HOST_NODE]);\n  /** @type {?} */\n  const normalExecutionPath = !getCheckNoChangesMode();\n  try {\n    if (normalExecutionPath && rendererFactory.begin) {\n      rendererFactory.begin();\n    }\n    if (isCreationMode(hostView)) {\n      // creation mode pass\n      if (templateFn) {\n        namespaceHTML();\n        templateFn(1 /* Create */, /** @type {?} */context);\n      }\n      refreshDescendantViews(hostView);\n      hostView[FLAGS] &= ~1 /* CreationMode */;\n    }\n    // update mode pass\n    templateFn && templateFn(2 /* Update */, /** @type {?} */context);\n    refreshDescendantViews(hostView);\n  } finally {\n    if (normalExecutionPath && rendererFactory.end) {\n      rendererFactory.end();\n    }\n    leaveView(oldView);\n  }\n}\n/**\n * This function returns the default configuration of rendering flags depending on when the\n * template is in creation mode or update mode. Update block and create block are\n * always run separately.\n * @param {?} view\n * @return {?}\n */\nfunction getRenderFlags(view) {\n  return isCreationMode(view) ? 1 /* Create */ : 2 /* Update */;\n}\n//////////////////////////\n//// Namespace\n//////////////////////////\n/** @type {?} */\nlet _currentNamespace = null;\n/**\n * @return {?}\n */\nfunction namespaceSVG() {\n  _currentNamespace = 'http://www.w3.org/2000/svg';\n}\n/**\n * @return {?}\n */\nfunction namespaceMathML() {\n  _currentNamespace = 'http://www.w3.org/1998/MathML/';\n}\n/**\n * @return {?}\n */\nfunction namespaceHTML() {\n  _currentNamespace = null;\n}\n//////////////////////////\n//// Element\n//////////////////////////\n/**\n * Creates an empty element using {\\@link elementStart} and {\\@link elementEnd}\n *\n * @param {?} index Index of the element in the data array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @return {?}\n */\nfunction element(index, name, attrs, localRefs) {\n  elementStart(index, name, attrs, localRefs);\n  elementEnd();\n}\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param {?} index Index of the element in the LView array\n * @param {?=} attrs Set of attributes to be used when matching directives.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n * @return {?}\n */\nfunction elementContainerStart(index, attrs, localRefs) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  /** @type {?} */\n  const renderer = lView[RENDERER];\n  /** @type {?} */\n  const tagName = 'ng-container';\n  ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'element containers should be created before any bindings');\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  /** @type {?} */\n  const native = renderer.createComment(ngDevMode ? tagName : '');\n  ngDevMode && assertDataInRange(lView, index - 1);\n  /** @type {?} */\n  const tNode = createNodeAtIndex(index, 4 /* ElementContainer */, native, tagName, attrs || null);\n  appendChild(native, tNode, lView);\n  createDirectivesAndLocals(tView, lView, localRefs);\n  attachPatchData(native, lView);\n}\n/**\n * Mark the end of the <ng-container>.\n * @return {?}\n */\nfunction elementContainerEnd() {\n  /** @type {?} */\n  let previousOrParentTNode = getPreviousOrParentTNode();\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  if (getIsParent()) {\n    setIsParent(false);\n  } else {\n    ngDevMode && assertHasParent(getPreviousOrParentTNode());\n    previousOrParentTNode = /** @type {?} */previousOrParentTNode.parent;\n    setPreviousOrParentTNode(previousOrParentTNode);\n  }\n  ngDevMode && assertNodeType(previousOrParentTNode, 4 /* ElementContainer */);\n  /** @type {?} */\n  const currentQueries = lView[QUERIES];\n  if (currentQueries) {\n    lView[QUERIES] = currentQueries.addNode( /** @type {?} */previousOrParentTNode);\n  }\n  queueLifecycleHooks(tView, previousOrParentTNode);\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param {?} index Index of the element in the LView array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n * @return {?}\n */\nfunction elementStart(index, name, attrs, localRefs) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'elements should be created before any bindings ');\n  ngDevMode && ngDevMode.rendererCreateElement++;\n  /** @type {?} */\n  const native = elementCreate(name);\n  ngDevMode && assertDataInRange(lView, index - 1);\n  /** @type {?} */\n  const tNode = createNodeAtIndex(index, 3 /* Element */, /** @type {?} */native, name, attrs || null);\n  if (attrs) {\n    // it's important to only prepare styling-related datastructures once for a given\n    // tNode and not each time an element is created. Also, the styling code is designed\n    // to be patched and constructed at various points, but only up until the first element\n    // is created. Then the styling context is locked and can only be instantiated for each\n    // successive element that is created.\n    if (tView.firstTemplatePass && !tNode.stylingTemplate && hasStyling(attrs)) {\n      tNode.stylingTemplate = initializeStaticContext(attrs);\n    }\n    setUpAttributes(native, attrs);\n  }\n  appendChild(native, tNode, lView);\n  createDirectivesAndLocals(tView, lView, localRefs);\n  // any immediate children of a component or template container must be pre-emptively\n  // monkey-patched with the component view data so that the element can be inspected\n  // later on using any element discovery utility methods (see `element_discovery.ts`)\n  if (getElementDepthCount() === 0) {\n    attachPatchData(native, lView);\n  }\n  increaseElementDepthCount();\n  // if a directive contains a host binding for \"class\" then all class-based data will\n  // flow through that (except for `[class.prop]` bindings). This also includes initial\n  // static class values as well. (Note that this will be fixed once map-based `[style]`\n  // and `[class]` bindings work for multiple directives.)\n  if (tView.firstTemplatePass) {\n    /** @type {?} */\n    const inputData = initializeTNodeInputs(tNode);\n    if (inputData && inputData.hasOwnProperty('class')) {\n      tNode.flags |= 8 /* hasClassInput */;\n    }\n  }\n  // There is no point in rendering styles when a class directive is present since\n  // it will take that over for us (this will be removed once #FW-882 is in).\n  if (tNode.stylingTemplate && (tNode.flags & 8 /* hasClassInput */) === 0) {\n    renderInitialStylesAndClasses(native, tNode.stylingTemplate, lView[RENDERER]);\n  }\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param {?} name the tag name\n * @param {?=} overriddenRenderer Optional A renderer to override the default one\n * @return {?} the element created\n */\nfunction elementCreate(name, overriddenRenderer) {\n  /** @type {?} */\n  let native;\n  /** @type {?} */\n  const rendererToUse = overriddenRenderer || getLView()[RENDERER];\n  if (isProceduralRenderer(rendererToUse)) {\n    native = rendererToUse.createElement(name, _currentNamespace);\n  } else {\n    if (_currentNamespace === null) {\n      native = rendererToUse.createElement(name);\n    } else {\n      native = rendererToUse.createElementNS(_currentNamespace, name);\n    }\n  }\n  return native;\n}\n/**\n * Creates directive instances and populates local refs.\n *\n * @param {?} tView\n * @param {?} viewData\n * @param {?} localRefs Local refs of the node in question\n * @param {?=} localRefExtractor mapping function that extracts local ref value from TNode\n * @return {?}\n */\nfunction createDirectivesAndLocals(tView, viewData, localRefs, localRefExtractor = getNativeByTNode) {\n  if (!getBindingsEnabled()) return;\n  /** @type {?} */\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  if (getFirstTemplatePass()) {\n    ngDevMode && ngDevMode.firstTemplatePass++;\n    resolveDirectives(tView, viewData, findDirectiveMatches(tView, viewData, previousOrParentTNode), previousOrParentTNode, localRefs || null);\n  }\n  instantiateAllDirectives(tView, viewData, previousOrParentTNode);\n  invokeDirectivesHostBindings(tView, viewData, previousOrParentTNode);\n  saveResolvedLocalsInData(viewData, previousOrParentTNode, localRefExtractor);\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n * @param {?} viewData\n * @param {?} tNode\n * @param {?} localRefExtractor\n * @return {?}\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor) {\n  /** @type {?} */\n  const localNames = tNode.localNames;\n  if (localNames) {\n    /** @type {?} */\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < localNames.length; i += 2) {\n      /** @type {?} */\n      const index = /** @type {?} */localNames[i + 1];\n      /** @type {?} */\n      const value = index === -1 ? localRefExtractor( /** @type {?} */tNode, viewData) : viewData[index];\n      viewData[localIndex++] = value;\n    }\n  }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param {?} templateFn The template from which to get static data\n * @param {?} consts The number of nodes, local refs, and pipes in this view\n * @param {?} vars The number of bindings and pure function bindings in this view\n * @param {?} directives Directive defs that should be saved on TView\n * @param {?} pipes Pipe defs that should be saved on TView\n * @param {?} viewQuery\n * @return {?} TView\n */\nfunction getOrCreateTView(templateFn, consts, vars, directives, pipes, viewQuery) {\n  // TODO(misko): reading `ngPrivateData` here is problematic for two reasons\n  // 1. It is a megamorphic call on each invocation.\n  // 2. For nested embedded views (ngFor inside ngFor) the template instance is per\n  //    outer template invocation, which means that no such property will exist\n  // Correct solution is to only put `ngPrivateData` on the Component template\n  // and not on embedded templates.\n  return templateFn.ngPrivateData || (templateFn.ngPrivateData = /** @type {?} */createTView(-1, templateFn, consts, vars, directives, pipes, viewQuery));\n}\n/**\n * Creates a TView instance\n *\n * @param {?} viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n * @param {?} templateFn Template function\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars\n * @param {?} directives Registry of directives for this view\n * @param {?} pipes Registry of pipes for this view\n * @param {?} viewQuery\n * @return {?}\n */\nfunction createTView(viewIndex, templateFn, consts, vars, directives, pipes, viewQuery) {\n  ngDevMode && ngDevMode.tView++;\n  /** @type {?} */\n  const bindingStartIndex = HEADER_OFFSET + consts;\n  // This length does not yet contain host bindings from child directives because at this point,\n  // we don't know which directives are active on this template. As soon as a directive is matched\n  // that has a host binding, we will update the blueprint with that def's hostVars count.\n  /** @type {?} */\n  const initialViewLength = bindingStartIndex + vars;\n  /** @type {?} */\n  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n  return blueprint[/** @type {?} */TVIEW] = {\n    id: viewIndex,\n    blueprint: blueprint,\n    template: templateFn,\n    viewQuery: viewQuery,\n    node: /** @type {?} */null,\n    data: blueprint.slice(),\n    // Fill in to match HEADER_OFFSET in LView\n    childIndex: -1,\n    // Children set in addToViewTree(), if any\n    bindingStartIndex: bindingStartIndex,\n    expandoStartIndex: initialViewLength,\n    expandoInstructions: null,\n    firstTemplatePass: true,\n    initHooks: null,\n    checkHooks: null,\n    contentHooks: null,\n    contentCheckHooks: null,\n    viewHooks: null,\n    viewCheckHooks: null,\n    destroyHooks: null,\n    pipeDestroyHooks: null,\n    cleanup: null,\n    contentQueries: null,\n    components: null,\n    directiveRegistry: typeof directives === 'function' ? directives() : directives,\n    pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n    firstChild: null\n  };\n}\n/**\n * @param {?} bindingStartIndex\n * @param {?} initialViewLength\n * @return {?}\n */\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n  /** @type {?} */\n  const blueprint = /** @type {?} */new Array(initialViewLength).fill(null, 0, bindingStartIndex).fill(NO_CHANGE, bindingStartIndex);\n  blueprint[CONTAINER_INDEX] = -1;\n  blueprint[BINDING_INDEX] = bindingStartIndex;\n  return blueprint;\n}\n/**\n * @param {?} native\n * @param {?} attrs\n * @return {?}\n */\nfunction setUpAttributes(native, attrs) {\n  /** @type {?} */\n  const renderer = getLView()[RENDERER];\n  /** @type {?} */\n  const isProc = isProceduralRenderer(renderer);\n  /** @type {?} */\n  let i = 0;\n  while (i < attrs.length) {\n    /** @type {?} */\n    const attrName = attrs[i++];\n    if (typeof attrName == 'number') {\n      if (attrName === 0 /* NamespaceURI */) {\n        // Namespaced attributes\n        /** @type {?} */\n        const namespaceURI = /** @type {?} */attrs[i++];\n        /** @type {?} */\n        const attrName = /** @type {?} */attrs[i++];\n        /** @type {?} */\n        const attrVal = /** @type {?} */attrs[i++];\n        ngDevMode && ngDevMode.rendererSetAttribute++;\n        isProc ? /** @type {?} */renderer.setAttribute(native, attrName, attrVal, namespaceURI) : native.setAttributeNS(namespaceURI, attrName, attrVal);\n      } else {\n        // All other `AttributeMarker`s are ignored here.\n        break;\n      }\n    } else {\n      /// attrName is string;\n      /** @type {?} */\n      const attrVal = attrs[i++];\n      if (attrName !== NG_PROJECT_AS_ATTR_NAME) {\n        // Standard attributes\n        ngDevMode && ngDevMode.rendererSetAttribute++;\n        if (isAnimationProp(attrName)) {\n          if (isProc) {\n            /** @type {?} */renderer.setProperty(native, attrName, attrVal);\n          }\n        } else {\n          isProc ? /** @type {?} */renderer.setAttribute(native, /** @type {?} */attrName, /** @type {?} */attrVal) : native.setAttribute( /** @type {?} */attrName, /** @type {?} */attrVal);\n        }\n      }\n    }\n  }\n}\n/**\n * @param {?} text\n * @param {?} token\n * @return {?}\n */\nfunction createError(text, token) {\n  return new Error(`Renderer: ${text} [${stringify$1(token)}]`);\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param {?} factory\n * @param {?} elementOrSelector Render element or CSS selector to locate the element.\n * @return {?}\n */\nfunction locateHostElement(factory, elementOrSelector) {\n  /** @type {?} */\n  const defaultRenderer = factory.createRenderer(null, null);\n  /** @type {?} */\n  const rNode = typeof elementOrSelector === 'string' ? isProceduralRenderer(defaultRenderer) ? defaultRenderer.selectRootElement(elementOrSelector) : defaultRenderer.querySelector(elementOrSelector) : elementOrSelector;\n  if (ngDevMode && !rNode) {\n    if (typeof elementOrSelector === 'string') {\n      throw createError('Host node with selector not found:', elementOrSelector);\n    } else {\n      throw createError('Host node is required:', elementOrSelector);\n    }\n  }\n  return rNode;\n}\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param {?} eventName Name of the event\n * @param {?} listenerFn The function to be called when event emits\n * @param {?=} useCapture Whether or not to use capture in event listener.\n * @return {?}\n */\nfunction listener(eventName, listenerFn, useCapture = false) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const tNode = getPreviousOrParentTNode();\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  /** @type {?} */\n  const firstTemplatePass = tView.firstTemplatePass;\n  /** @type {?} */\n  const tCleanup = firstTemplatePass && (tView.cleanup || (tView.cleanup = []));\n  ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n  // add native event listener - applicable to elements only\n  if (tNode.type === 3 /* Element */) {\n    /** @type {?} */\n    const native = /** @type {?} */getNativeByTNode(tNode, lView);\n    ngDevMode && ngDevMode.rendererAddEventListener++;\n    /** @type {?} */\n    const renderer = lView[RENDERER];\n    /** @type {?} */\n    const lCleanup = getCleanup(lView);\n    /** @type {?} */\n    const lCleanupIndex = lCleanup.length;\n    /** @type {?} */\n    let useCaptureOrSubIdx = useCapture;\n    // In order to match current behavior, native DOM event listeners must be added for all\n    // events (including outputs).\n    if (isProceduralRenderer(renderer)) {\n      /** @type {?} */\n      const cleanupFn = renderer.listen(native, eventName, listenerFn);\n      lCleanup.push(listenerFn, cleanupFn);\n      useCaptureOrSubIdx = lCleanupIndex + 1;\n    } else {\n      /** @type {?} */\n      const wrappedListener = wrapListenerWithPreventDefault(listenerFn);\n      native.addEventListener(eventName, wrappedListener, useCapture);\n      lCleanup.push(wrappedListener);\n    }\n    tCleanup && tCleanup.push(eventName, tNode.index, lCleanupIndex, useCaptureOrSubIdx);\n  }\n  // subscribe to directive outputs\n  if (tNode.outputs === undefined) {\n    // if we create TNode here, inputs must be undefined so we know they still need to be\n    // checked\n    tNode.outputs = generatePropertyAliases(tNode, 1 /* Output */);\n  }\n  /** @type {?} */\n  const outputs = tNode.outputs;\n  /** @type {?} */\n  let props;\n  if (outputs && (props = outputs[eventName])) {\n    /** @type {?} */\n    const propsLength = props.length;\n    if (propsLength) {\n      /** @type {?} */\n      const lCleanup = getCleanup(lView);\n      for (let i = 0; i < propsLength; i += 2) {\n        ngDevMode && assertDataInRange(lView, /** @type {?} */props[i]);\n        /** @type {?} */\n        const subscription = lView[/** @type {?} */props[i]][props[i + 1]].subscribe(listenerFn);\n        /** @type {?} */\n        const idx = lCleanup.length;\n        lCleanup.push(listenerFn, subscription);\n        tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n      }\n    }\n  }\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n * @param {?} lView\n * @param {?} context\n * @param {?} cleanupFn\n * @return {?}\n */\nfunction storeCleanupWithContext(lView, context, cleanupFn) {\n  /** @type {?} */\n  const lCleanup = getCleanup(lView);\n  lCleanup.push(context);\n  if (lView[TVIEW].firstTemplatePass) {\n    getTViewCleanup(lView).push(cleanupFn, lCleanup.length - 1);\n  }\n}\n/**\n * Saves the cleanup function itself in LView.cleanupInstances.\n *\n * This is necessary for functions that are wrapped with their contexts, like in renderer2\n * listeners.\n *\n * On the first template pass, the index of the cleanup function is saved in TView.\n * @param {?} view\n * @param {?} cleanupFn\n * @return {?}\n */\nfunction storeCleanupFn(view, cleanupFn) {\n  getCleanup(view).push(cleanupFn);\n  if (view[TVIEW].firstTemplatePass) {\n    getTViewCleanup(view).push( /** @type {?} */view[CLEANUP].length - 1, null);\n  }\n}\n/**\n * Mark the end of the element.\n * @return {?}\n */\nfunction elementEnd() {\n  /** @type {?} */\n  let previousOrParentTNode = getPreviousOrParentTNode();\n  if (getIsParent()) {\n    setIsParent(false);\n  } else {\n    ngDevMode && assertHasParent(getPreviousOrParentTNode());\n    previousOrParentTNode = /** @type {?} */previousOrParentTNode.parent;\n    setPreviousOrParentTNode(previousOrParentTNode);\n  }\n  ngDevMode && assertNodeType(previousOrParentTNode, 3 /* Element */);\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const currentQueries = lView[QUERIES];\n  if (currentQueries) {\n    lView[QUERIES] = currentQueries.addNode( /** @type {?} */previousOrParentTNode);\n  }\n  queueLifecycleHooks(getLView()[TVIEW], previousOrParentTNode);\n  decreaseElementDepthCount();\n  // this is fired at the end of elementEnd because ALL of the stylingBindings code\n  // (for directives and the template) have now executed which means the styling\n  // context can be instantiated properly.\n  if (hasClassInput(previousOrParentTNode)) {\n    /** @type {?} */\n    const stylingContext = getStylingContext(previousOrParentTNode.index, lView);\n    setInputsForProperty(lView, /** @type {?} */ /** @type {?} */previousOrParentTNode.inputs['class'], getInitialClassNameValue(stylingContext));\n  }\n}\n/**\n * Updates the value of removes an attribute on an Element.\n *\n * @param {?} index\n * @param {?} name name The name of the attribute.\n * @param {?} value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?}\n */\nfunction elementAttribute(index, name, value, sanitizer) {\n  if (value !== NO_CHANGE) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const renderer = lView[RENDERER];\n    /** @type {?} */\n    const element = getNativeByIndex(index, lView);\n    if (value == null) {\n      ngDevMode && ngDevMode.rendererRemoveAttribute++;\n      isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name) : element.removeAttribute(name);\n    } else {\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      /** @type {?} */\n      const strValue = sanitizer == null ? stringify$1(value) : sanitizer(value);\n      isProceduralRenderer(renderer) ? renderer.setAttribute(element, name, strValue) : element.setAttribute(name, strValue);\n    }\n  }\n}\n/**\n * Update a property on an element.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\@Inputs don't have to be re-compiled.\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @param {?=} nativeOnly Whether or not we should only set native properties and skip input check\n * (this is necessary for host property bindings)\n * @return {?}\n */\nfunction elementProperty(index, propName, value, sanitizer, nativeOnly) {\n  elementPropertyInternal(index, propName, value, sanitizer, nativeOnly);\n}\n/**\n * Updates a synthetic host binding (e.g. `[\\@foo]`) on a component.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `\\@HostBinding('\\@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation \\@triggers, they need to be\n * evaluated with the sub components renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @param {?=} nativeOnly Whether or not we should only set native properties and skip input check\n * (this is necessary for host property bindings)\n * @return {?}\n */\nfunction componentHostSyntheticProperty(index, propName, value, sanitizer, nativeOnly) {\n  elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadComponentRenderer);\n}\n/**\n * @param {?} tNode\n * @param {?} lView\n * @return {?}\n */\nfunction loadComponentRenderer(tNode, lView) {\n  /** @type {?} */\n  const componentLView = /** @type {?} */lView[tNode.index];\n  return componentLView[RENDERER];\n}\n/**\n * @template T\n * @param {?} index\n * @param {?} propName\n * @param {?} value\n * @param {?=} sanitizer\n * @param {?=} nativeOnly\n * @param {?=} loadRendererFn\n * @return {?}\n */\nfunction elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadRendererFn) {\n  if (value === NO_CHANGE) return;\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const element = /** @type {?} */getNativeByIndex(index, lView);\n  /** @type {?} */\n  const tNode = getTNode(index, lView);\n  /** @type {?} */\n  let inputData;\n  /** @type {?} */\n  let dataValue;\n  if (!nativeOnly && (inputData = initializeTNodeInputs(tNode)) && (dataValue = inputData[propName])) {\n    setInputsForProperty(lView, dataValue, value);\n    if (isComponent(tNode)) markDirtyIfOnPush(lView, index + HEADER_OFFSET);\n    if (ngDevMode) {\n      if (tNode.type === 3 /* Element */ || tNode.type === 0 /* Container */) {\n        setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n      }\n    }\n  } else if (tNode.type === 3 /* Element */) {\n    /** @type {?} */\n    const renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n    // It is assumed that the sanitizer is only added when the compiler determines that the property\n    // is risky, so sanitization can be done without further checks.\n    value = sanitizer != null ? /** @type {?} */sanitizer(value) : value;\n    ngDevMode && ngDevMode.rendererSetProperty++;\n    if (isProceduralRenderer(renderer)) {\n      renderer.setProperty( /** @type {?} */element, propName, value);\n    } else if (!isAnimationProp(propName)) {\n      /** @type {?} */element.setProperty ? /** @type {?} */element.setProperty(propName, value) : /** @type {?} */element[propName] = value;\n    }\n  }\n}\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param {?} lView\n * @param {?} type The type of the node\n * @param {?} adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param {?} tagName The tag name of the node\n * @param {?} attrs The attributes defined on this node\n * @param {?} tViews Any TViews attached to this node\n * @return {?} the TNode object\n */\nfunction createTNode(lView, type, adjustedIndex, tagName, attrs, tViews) {\n  /** @type {?} */\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  ngDevMode && ngDevMode.tNode++;\n  /** @type {?} */\n  const parent = getIsParent() ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n  // Parents cannot cross component boundaries because components will be used in multiple places,\n  // so it's only set if the view is the same.\n  /** @type {?} */\n  const parentInSameView = parent && lView && parent !== lView[HOST_NODE];\n  /** @type {?} */\n  const tParent = parentInSameView ? /** @type {?} */parent : null;\n  return {\n    type: type,\n    index: adjustedIndex,\n    injectorIndex: tParent ? tParent.injectorIndex : -1,\n    directiveStart: -1,\n    directiveEnd: -1,\n    flags: 0,\n    providerIndexes: 0,\n    tagName: tagName,\n    attrs: attrs,\n    localNames: null,\n    initialInputs: undefined,\n    inputs: undefined,\n    outputs: undefined,\n    tViews: tViews,\n    next: null,\n    child: null,\n    parent: tParent,\n    detached: null,\n    stylingTemplate: null,\n    projection: null\n  };\n}\n/**\n * Given a list of directive indices and minified input names, sets the\n * input properties on the corresponding directives.\n * @param {?} lView\n * @param {?} inputs\n * @param {?} value\n * @return {?}\n */\nfunction setInputsForProperty(lView, inputs, value) {\n  for (let i = 0; i < inputs.length; i += 2) {\n    ngDevMode && assertDataInRange(lView, /** @type {?} */inputs[i]);\n    lView[/** @type {?} */inputs[i]][inputs[i + 1]] = value;\n  }\n}\n/**\n * @param {?} lView\n * @param {?} element\n * @param {?} type\n * @param {?} inputs\n * @param {?} value\n * @return {?}\n */\nfunction setNgReflectProperties(lView, element, type, inputs, value) {\n  for (let i = 0; i < inputs.length; i += 2) {\n    /** @type {?} */\n    const renderer = lView[RENDERER];\n    /** @type {?} */\n    const attrName = normalizeDebugBindingName( /** @type {?} */inputs[i + 1]);\n    /** @type {?} */\n    const debugValue = normalizeDebugBindingValue(value);\n    if (type === 3 /* Element */) {\n      isProceduralRenderer(renderer) ? renderer.setAttribute( /** @type {?} */element, attrName, debugValue) : /** @type {?} */element.setAttribute(attrName, debugValue);\n    } else if (value !== undefined) {\n      /** @type {?} */\n      const value = `bindings=${JSON.stringify({\n        [attrName]: debugValue\n      }, null, 2)}`;\n      if (isProceduralRenderer(renderer)) {\n        renderer.setValue( /** @type {?} */element, value);\n      } else {\n        /** @type {?} */element.textContent = value;\n      }\n    }\n  }\n}\n/**\n * Consolidates all inputs or outputs of all directives on this logical node.\n *\n * @param {?} tNode\n * @param {?} direction whether to consider inputs or outputs\n * @return {?} PropertyAliases|null aggregate of all properties if any, `null` otherwise\n */\nfunction generatePropertyAliases(tNode, direction) {\n  /** @type {?} */\n  const tView = getLView()[TVIEW];\n  /** @type {?} */\n  let propStore = null;\n  /** @type {?} */\n  const start = tNode.directiveStart;\n  /** @type {?} */\n  const end = tNode.directiveEnd;\n  if (end > start) {\n    /** @type {?} */\n    const isInput = direction === 0 /* Input */;\n    /** @type {?} */\n    const defs = tView.data;\n    for (let i = start; i < end; i++) {\n      /** @type {?} */\n      const directiveDef = /** @type {?} */defs[i];\n      /** @type {?} */\n      const propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n      for (let publicName in propertyAliasMap) {\n        if (propertyAliasMap.hasOwnProperty(publicName)) {\n          propStore = propStore || {};\n          /** @type {?} */\n          const internalName = propertyAliasMap[publicName];\n          /** @type {?} */\n          const hasProperty = propStore.hasOwnProperty(publicName);\n          hasProperty ? propStore[publicName].push(i, internalName) : propStore[publicName] = [i, internalName];\n        }\n      }\n    }\n  }\n  return propStore;\n}\n/**\n * Assign any inline style values to the element during creation mode.\n *\n * This instruction is meant to be called during creation mode to register all\n * dynamic style and class bindings on the element. Note for static values (no binding)\n * see `elementStart` and `elementHostAttrs`.\n *\n * \\@publicApi\n * @param {?=} classBindingNames An array containing bindable class names.\n *        The `elementClassProp` refers to the class name by index in this array.\n *        (i.e. `['foo', 'bar']` means `foo=0` and `bar=1`).\n * @param {?=} styleBindingNames An array containing bindable style properties.\n *        The `elementStyleProp` refers to the class name by index in this array.\n *        (i.e. `['width', 'height']` means `width=0` and `height=1`).\n * @param {?=} styleSanitizer An optional sanitizer function that will be used to sanitize any CSS\n *        property values that are applied to the element (during rendering).\n *        Note that the sanitizer instance itself is tied to the `directive` (if  provided).\n * @param {?=} directive A directive instance the styling is associated with. If not provided\n *        current view's controller instance is assumed.\n *\n * @return {?}\n */\nfunction elementStyling(classBindingNames, styleBindingNames, styleSanitizer, directive) {\n  /** @type {?} */\n  const tNode = getPreviousOrParentTNode();\n  if (!tNode.stylingTemplate) {\n    tNode.stylingTemplate = createEmptyStylingContext();\n  }\n  updateContextWithBindings( /** @type {?} */tNode.stylingTemplate, directive || null, classBindingNames, styleBindingNames, styleSanitizer, hasClassInput(tNode));\n}\n/**\n * Assign static styling values to a host element.\n *\n * NOTE: This instruction is meant to used from `hostBindings` function only.\n *\n * \\@publicApi\n * @param {?} directive A directive instance the styling is associated with.\n * @param {?} attrs An array containing class and styling information. The values must be marked with\n *              `AttributeMarker`.\n *\n *        ```\n *        var attrs = [AttributeMarker.Classes, 'foo', 'bar',\n *                     AttributeMarker.Styles, 'width', '100px', 'height, '200px']\n *        elementHostAttrs(directive, attrs);\n *        ```\n *\n * @return {?}\n */\nfunction elementHostAttrs(directive, attrs) {\n  /** @type {?} */\n  const tNode = getPreviousOrParentTNode();\n  if (!tNode.stylingTemplate) {\n    tNode.stylingTemplate = initializeStaticContext(attrs);\n  }\n  patchContextWithStaticAttrs(tNode.stylingTemplate, attrs, directive);\n}\n/**\n * Apply styling binding to the element.\n *\n * This instruction is meant to be run after `elementStyle` and/or `elementStyleProp`.\n * if any styling bindings have changed then the changes are flushed to the element.\n *\n *\n * \\@publicApi\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n * components\n *\n * @return {?}\n */\nfunction elementStylingApply(index, directive) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const isFirstRender = (lView[FLAGS] & 2 /* FirstLViewPass */) !== 0;\n  /** @type {?} */\n  const totalPlayersQueued = renderStyling(getStylingContext(index + HEADER_OFFSET, lView), lView[RENDERER], lView, isFirstRender, null, null, directive);\n  if (totalPlayersQueued > 0) {\n    /** @type {?} */\n    const rootContext = getRootContext(lView);\n    scheduleTick(rootContext, 2 /* FlushPlayers */);\n  }\n}\n/**\n * Update a style bindings value on an element.\n *\n * If the style value is `null` then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `elementStyle` or any styles that are present\n * from when the element was created (with `elementStyling`).\n *\n * (Note that the styling element is updated as part of `elementStylingApply`.)\n *\n * \\@publicApi\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?} styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `elementStlyingBindings`.\n * @param {?} value New value to write (null to remove). Note that if a directive also\n *        attempts to write to the same binding value then it will only be able to\n *        do so if the template binding value is `null` (or doesn't exist at all).\n * @param {?=} suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n * components\n *\n * @return {?}\n */\nfunction elementStyleProp(index, styleIndex, value, suffix, directive) {\n  /** @type {?} */\n  let valueToAdd = null;\n  if (value !== null) {\n    if (suffix) {\n      // when a suffix is applied then it will bypass\n      // sanitization entirely (b/c a new string is created)\n      valueToAdd = stringify$1(value) + suffix;\n    } else {\n      // sanitization happens by dealing with a String value\n      // this means that the string value will be passed through\n      // into the style rendering later (which is where the value\n      // will be sanitized before it is applied)\n      valueToAdd = /** @type {?} */ /** @type {?} */value;\n    }\n  }\n  updateStyleProp(getStylingContext(index + HEADER_OFFSET, getLView()), styleIndex, valueToAdd, directive);\n}\n/**\n * Add or remove a class via a class binding on a DOM element.\n *\n * This instruction is meant to handle the [class.foo]=\"exp\" case and, therefore,\n * the class itself must already be applied using `elementStyling` within\n * the creation block.\n *\n * \\@publicApi\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?} classIndex Index of class to toggle. This index value refers to the\n *        index of the class in the class bindings array that was passed into\n *        `elementStlyingBindings` (which is meant to be called before this\n *        function is).\n * @param {?} value A true/false value which will turn the class on or off.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n * components\n *\n * @return {?}\n */\nfunction elementClassProp(index, classIndex, value, directive) {\n  /** @type {?} */\n  const onOrOffClassValue = value instanceof BoundPlayerFactory ? /** @type {?} */value : !!value;\n  updateClassProp(getStylingContext(index + HEADER_OFFSET, getLView()), classIndex, onOrOffClassValue, directive);\n}\n/**\n * Update style and/or class bindings using object literal.\n *\n * This instruction is meant apply styling via the `[style]=\"exp\"` and `[class]=\"exp\"` template\n * bindings. When styles are applied to the Element they will then be placed with respect to\n * any styles set with `elementStyleProp`. If any styles are set to `null` then they will be\n * removed from the element.\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * \\@publicApi\n * @template T\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?} classes A key/value style map of CSS classes that will be added to the given element.\n *        Any missing classes (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's list of CSS classes.\n * @param {?=} styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n *\n * @return {?}\n */\nfunction elementStylingMap(index, classes, styles, directive) {\n  if (directive != undefined) return hackImplementationOfElementStylingMap(index, classes, styles, directive); // supported in next PR\n  // supported in next PR\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const tNode = getTNode(index, lView);\n  /** @type {?} */\n  const stylingContext = getStylingContext(index + HEADER_OFFSET, lView);\n  if (hasClassInput(tNode) && classes !== NO_CHANGE) {\n    /** @type {?} */\n    const initialClasses = getInitialClassNameValue(stylingContext);\n    /** @type {?} */\n    const classInputVal = (initialClasses.length ? initialClasses + ' ' : '') + /** @type {?} */classes;\n    setInputsForProperty(lView, /** @type {?} */ /** @type {?} */tNode.inputs['class'], classInputVal);\n  } else {\n    updateStylingMap(stylingContext, classes, styles);\n  }\n}\n/* START OF HACK BLOCK */\n/**\n * @template T\n * @param {?} index\n * @param {?} classes\n * @param {?=} styles\n * @param {?=} directive\n * @return {?}\n */\nfunction hackImplementationOfElementStylingMap(index, classes, styles, directive) {\n  throw new Error('unimplemented. Should not be needed by ViewEngine compatibility');\n}\n/* END OF HACK BLOCK */\n//////////////////////////\n//// Text\n//////////////////////////\n/**\n * Create static text node\n *\n * @param {?} index Index of the node in the data array\n * @param {?=} value Value to write. This value will be stringified.\n * @return {?}\n */\nfunction text(index, value) {\n  /** @type {?} */\n  const lView = getLView();\n  ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'text nodes should be created before any bindings');\n  ngDevMode && ngDevMode.rendererCreateTextNode++;\n  /** @type {?} */\n  const textNative = createTextNode(value, lView[RENDERER]);\n  /** @type {?} */\n  const tNode = createNodeAtIndex(index, 3 /* Element */, textNative, null, null);\n  // Text nodes are self closing.\n  setIsParent(false);\n  appendChild(textNative, tNode, lView);\n}\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper interpolation(1-8) method\n *\n * @template T\n * @param {?} index Index of the node in the data array.\n * @param {?} value Stringified value to write.\n * @return {?}\n */\nfunction textBinding(index, value) {\n  if (value !== NO_CHANGE) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n    /** @type {?} */\n    const element = /** @type {?} */ /** @type {?} */getNativeByIndex(index, lView);\n    ngDevMode && assertDefined(element, 'native element should exist');\n    ngDevMode && ngDevMode.rendererSetText++;\n    /** @type {?} */\n    const renderer = lView[RENDERER];\n    isProceduralRenderer(renderer) ? renderer.setValue(element, stringify$1(value)) : element.textContent = stringify$1(value);\n  }\n}\n//////////////////////////\n//// Directive\n//////////////////////////\n/**\n * Instantiate a root component.\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @return {?}\n */\nfunction instantiateRootComponent(tView, viewData, def) {\n  /** @type {?} */\n  const rootTNode = getPreviousOrParentTNode();\n  if (tView.firstTemplatePass) {\n    if (def.providersResolver) def.providersResolver(def);\n    generateExpandoInstructionBlock(tView, rootTNode, 1);\n    baseResolveDirective(tView, viewData, def, def.factory);\n  }\n  /** @type {?} */\n  const directive = getNodeInjectable(tView.data, viewData, viewData.length - 1, /** @type {?} */rootTNode);\n  postProcessBaseDirective(viewData, rootTNode, directive, /** @type {?} */def);\n  return directive;\n}\n/**\n * Resolve the matched directives on a node.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} directives\n * @param {?} tNode\n * @param {?} localRefs\n * @return {?}\n */\nfunction resolveDirectives(tView, viewData, directives, tNode, localRefs) {\n  // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.\n  ngDevMode && assertEqual(getFirstTemplatePass(), true, 'should run on first template pass only');\n  /** @type {?} */\n  const exportsMap = localRefs ? {\n    '': -1\n  } : null;\n  if (directives) {\n    initNodeFlags(tNode, tView.data.length, directives.length);\n    // When the same token is provided by several directives on the same node, some rules apply in\n    // the viewEngine:\n    // - viewProviders have priority over providers\n    // - the last directive in NgModule.declarations has priority over the previous one\n    // So to match these rules, the order in which providers are added in the arrays is very\n    // important.\n    for (let i = 0; i < directives.length; i++) {\n      /** @type {?} */\n      const def = /** @type {?} */directives[i];\n      if (def.providersResolver) def.providersResolver(def);\n    }\n    generateExpandoInstructionBlock(tView, tNode, directives.length);\n    for (let i = 0; i < directives.length; i++) {\n      /** @type {?} */\n      const def = /** @type {?} */directives[i];\n      /** @type {?} */\n      const directiveDefIdx = tView.data.length;\n      baseResolveDirective(tView, viewData, def, def.factory);\n      saveNameToExportMap( /** @type {?} */tView.data.length - 1, def, exportsMap);\n      // Init hooks are queued now so ngOnInit is called in host components before\n      // any projected components.\n      queueInitHooks(directiveDefIdx, def.onInit, def.doCheck, tView);\n    }\n  }\n  if (exportsMap) cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n * @param {?} tView\n * @param {?} lView\n * @param {?} tNode\n * @return {?}\n */\nfunction instantiateAllDirectives(tView, lView, tNode) {\n  /** @type {?} */\n  const start = tNode.directiveStart;\n  /** @type {?} */\n  const end = tNode.directiveEnd;\n  if (!getFirstTemplatePass() && start < end) {\n    getOrCreateNodeInjectorForNode( /** @type {?} */tNode, lView);\n  }\n  for (let i = start; i < end; i++) {\n    /** @type {?} */\n    const def = /** @type {?} */tView.data[i];\n    if (isComponentDef(def)) {\n      addComponentLogic(lView, tNode, /** @type {?} */def);\n    }\n    /** @type {?} */\n    const directive = getNodeInjectable(tView.data, /** @type {?} */lView, i, /** @type {?} */tNode);\n    postProcessDirective(lView, directive, def, i);\n  }\n}\n/**\n * @param {?} tView\n * @param {?} viewData\n * @param {?} tNode\n * @return {?}\n */\nfunction invokeDirectivesHostBindings(tView, viewData, tNode) {\n  /** @type {?} */\n  const start = tNode.directiveStart;\n  /** @type {?} */\n  const end = tNode.directiveEnd;\n  /** @type {?} */\n  const expando = /** @type {?} */tView.expandoInstructions;\n  /** @type {?} */\n  const firstTemplatePass = getFirstTemplatePass();\n  for (let i = start; i < end; i++) {\n    /** @type {?} */\n    const def = /** @type {?} */tView.data[i];\n    /** @type {?} */\n    const directive = viewData[i];\n    if (def.hostBindings) {\n      /** @type {?} */\n      const previousExpandoLength = expando.length;\n      setCurrentDirectiveDef(def);\n      /** @type {?} */def.hostBindings(1 /* Create */, directive, tNode.index - HEADER_OFFSET);\n      setCurrentDirectiveDef(null);\n      // `hostBindings` function may or may not contain `allocHostVars` call\n      // (e.g. it may not if it only contains host listeners), so we need to check whether\n      // `expandoInstructions` has changed and if not - we still push `hostBindings` to\n      // expando block, to make sure we execute it for DI cycle\n      if (previousExpandoLength === expando.length && firstTemplatePass) {\n        expando.push(def.hostBindings);\n      }\n    } else if (firstTemplatePass) {\n      expando.push(null);\n    }\n  }\n}\n/**\n * Generates a new block in TView.expandoInstructions for this node.\n *\n * Each expando block starts with the element index (turned negative so we can distinguish\n * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n * @param {?} tView\n * @param {?} tNode\n * @param {?} directiveCount\n * @return {?}\n */\nfunction generateExpandoInstructionBlock(tView, tNode, directiveCount) {\n  ngDevMode && assertEqual(tView.firstTemplatePass, true, 'Expando block should only be generated on first template pass.');\n  /** @type {?} */\n  const elementIndex = -(tNode.index - HEADER_OFFSET);\n  /** @type {?} */\n  const providerStartIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n  /** @type {?} */\n  const providerCount = tView.data.length - providerStartIndex;\n  (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, providerCount, directiveCount);\n}\n/**\n * On the first template pass, we need to reserve space for host binding values\n * after directives are matched (so all directives are saved, then bindings).\n * Because we are updating the blueprint, we only need to do this once.\n * @param {?} tView\n * @param {?} lView\n * @param {?} totalHostVars\n * @return {?}\n */\nfunction prefillHostVars(tView, lView, totalHostVars) {\n  ngDevMode && assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n  for (let i = 0; i < totalHostVars; i++) {\n    lView.push(NO_CHANGE);\n    tView.blueprint.push(NO_CHANGE);\n    tView.data.push(null);\n  }\n}\n/**\n * Process a directive on the current node after its creation.\n * @template T\n * @param {?} viewData\n * @param {?} directive\n * @param {?} def\n * @param {?} directiveDefIdx\n * @return {?}\n */\nfunction postProcessDirective(viewData, directive, def, directiveDefIdx) {\n  /** @type {?} */\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  postProcessBaseDirective(viewData, previousOrParentTNode, directive, def);\n  ngDevMode && assertDefined(previousOrParentTNode, 'previousOrParentTNode');\n  if (previousOrParentTNode && previousOrParentTNode.attrs) {\n    setInputsFromAttrs(directiveDefIdx, directive, def.inputs, previousOrParentTNode);\n  }\n  if (def.contentQueries) {\n    def.contentQueries(directiveDefIdx);\n  }\n  if (isComponentDef(def)) {\n    /** @type {?} */\n    const componentView = getComponentViewByIndex(previousOrParentTNode.index, viewData);\n    componentView[CONTEXT] = directive;\n  }\n}\n/**\n * A lighter version of postProcessDirective() that is used for the root component.\n * @template T\n * @param {?} lView\n * @param {?} previousOrParentTNode\n * @param {?} directive\n * @param {?} def\n * @return {?}\n */\nfunction postProcessBaseDirective(lView, previousOrParentTNode, directive, def) {\n  /** @type {?} */\n  const native = getNativeByTNode(previousOrParentTNode, lView);\n  ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'directives should be created before any bindings');\n  ngDevMode && assertPreviousIsParent(getIsParent());\n  attachPatchData(directive, lView);\n  if (native) {\n    attachPatchData(native, lView);\n  }\n  // TODO(misko): setUpAttributes should be a feature for better treeshakability.\n  if (def.attributes != null && previousOrParentTNode.type == 3 /* Element */) {\n    setUpAttributes( /** @type {?} */native, /** @type {?} */def.attributes);\n  }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} tNode\n * @return {?}\n */\nfunction findDirectiveMatches(tView, viewData, tNode) {\n  ngDevMode && assertEqual(getFirstTemplatePass(), true, 'should run on first template pass only');\n  /** @type {?} */\n  const registry = tView.directiveRegistry;\n  /** @type {?} */\n  let matches = null;\n  if (registry) {\n    for (let i = 0; i < registry.length; i++) {\n      /** @type {?} */\n      const def = /** @type {?} */registry[i];\n      if (isNodeMatchingSelectorList(tNode, /** @type {?} */def.selectors, /* isProjectionMode */false)) {\n        matches || (matches = []);\n        diPublicInInjector(getOrCreateNodeInjectorForNode( /** @type {?} */getPreviousOrParentTNode(), viewData), viewData, def.type);\n        if (isComponentDef(def)) {\n          if (tNode.flags & 1 /* isComponent */) throwMultipleComponentError(tNode);\n          tNode.flags = 1 /* isComponent */;\n          // The component is always stored first with directives after.\n          matches.unshift(def);\n        } else {\n          matches.push(def);\n        }\n      }\n    }\n  }\n  return matches;\n}\n/**\n * Stores index of component's host element so it will be queued for view refresh during CD.\n * @param {?} previousOrParentTNode\n * @return {?}\n */\nfunction queueComponentIndexForCheck(previousOrParentTNode) {\n  ngDevMode && assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n  /** @type {?} */\n  const tView = getLView()[TVIEW];\n  (tView.components || (tView.components = [])).push(previousOrParentTNode.index);\n}\n/**\n * Stores host binding fn and number of host vars so it will be queued for binding refresh during\n * CD.\n * @param {?} tView\n * @param {?} def\n * @param {?} hostVars\n * @return {?}\n */\nfunction queueHostBindingForCheck(tView, def, hostVars) {\n  ngDevMode && assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n  /** @type {?} */\n  const expando = /** @type {?} */tView.expandoInstructions;\n  /** @type {?} */\n  const length = expando.length;\n  // Check whether a given `hostBindings` function already exists in expandoInstructions,\n  // which can happen in case directive definition was extended from base definition (as a part of\n  // the `InheritDefinitionFeature` logic). If we found the same `hostBindings` function in the\n  // list, we just increase the number of host vars associated with that function, but do not add it\n  // into the list again.\n  if (length >= 2 && expando[length - 2] === def.hostBindings) {\n    expando[length - 1] = /** @type {?} */expando[length - 1] + hostVars;\n  } else {\n    expando.push( /** @type {?} */def.hostBindings, hostVars);\n  }\n}\n/**\n * Caches local names and their matching directive indices for query and template lookups.\n * @param {?} tNode\n * @param {?} localRefs\n * @param {?} exportsMap\n * @return {?}\n */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n  if (localRefs) {\n    /** @type {?} */\n    const localNames = tNode.localNames = [];\n    // Local names must be stored in tNode in the same order that localRefs are defined\n    // in the template to ensure the data is loaded in the same slots as their refs\n    // in the template (for template queries).\n    for (let i = 0; i < localRefs.length; i += 2) {\n      /** @type {?} */\n      const index = exportsMap[localRefs[i + 1]];\n      if (index == null) throw new Error(`Export of name '${localRefs[i + 1]}' not found!`);\n      localNames.push(localRefs[i], index);\n    }\n  }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n * @param {?} index\n * @param {?} def\n * @param {?} exportsMap\n * @return {?}\n */\nfunction saveNameToExportMap(index, def, exportsMap) {\n  if (exportsMap) {\n    if (def.exportAs) exportsMap[def.exportAs] = index;\n    if ( /** @type {?} */def.template) exportsMap[''] = index;\n  }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param {?} tNode\n * @param {?} index the initial index\n * @param {?} numberOfDirectives\n * @return {?}\n */\nfunction initNodeFlags(tNode, index, numberOfDirectives) {\n  ngDevMode && assertEqual(getFirstTemplatePass(), true, 'expected firstTemplatePass to be true');\n  /** @type {?} */\n  const flags = tNode.flags;\n  ngDevMode && assertEqual(flags === 0 || flags === 1 /* isComponent */, true, 'expected node flags to not be initialized');\n  ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n  // When the first directive is created on a node, save the index\n  tNode.flags = flags & 1 /* isComponent */;\n  tNode.directiveStart = index;\n  tNode.directiveEnd = index + numberOfDirectives;\n  tNode.providerIndexes = index;\n}\n/**\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @param {?} directiveFactory\n * @return {?}\n */\nfunction baseResolveDirective(tView, viewData, def, directiveFactory) {\n  tView.data.push(def);\n  /** @type {?} */\n  const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);\n  tView.blueprint.push(nodeInjectorFactory);\n  viewData.push(nodeInjectorFactory);\n}\n/**\n * @template T\n * @param {?} lView\n * @param {?} previousOrParentTNode\n * @param {?} def\n * @return {?}\n */\nfunction addComponentLogic(lView, previousOrParentTNode, def) {\n  /** @type {?} */\n  const native = getNativeByTNode(previousOrParentTNode, lView);\n  /** @type {?} */\n  const tView = getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery);\n  // Only component views should be added to the view tree directly. Embedded views are\n  // accessed through their containers because they may be removed / re-added later.\n  /** @type {?} */\n  const rendererFactory = lView[RENDERER_FACTORY];\n  /** @type {?} */\n  const componentView = addToViewTree(lView, /** @type {?} */previousOrParentTNode.index, createLView(lView, tView, null, def.onPush ? 8 /* Dirty */ : 4 /* CheckAlways */, rendererFactory, lView[RENDERER_FACTORY].createRenderer( /** @type {?} */native, def)));\n  componentView[HOST_NODE] = /** @type {?} */previousOrParentTNode;\n  // Component view will always be created before any injected LContainers,\n  // so this is a regular element, wrap it with the component view\n  componentView[HOST] = lView[previousOrParentTNode.index];\n  lView[previousOrParentTNode.index] = componentView;\n  if (getFirstTemplatePass()) {\n    queueComponentIndexForCheck(previousOrParentTNode);\n  }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @template T\n * @param {?} directiveIndex Index of the directive in directives array\n * @param {?} instance Instance of the directive on which to set the initial inputs\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data for this node\n * @return {?}\n */\nfunction setInputsFromAttrs(directiveIndex, instance, inputs, tNode) {\n  /** @type {?} */\n  let initialInputData = /** @type {?} */tNode.initialInputs;\n  if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n    initialInputData = generateInitialInputs(directiveIndex, inputs, tNode);\n  }\n  /** @type {?} */\n  const initialInputs = initialInputData[directiveIndex];\n  if (initialInputs) {\n    for (let i = 0; i < initialInputs.length; i += 2) {\n      /** @type {?} */instance[initialInputs[i]] = initialInputs[i + 1];\n    }\n  }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an \\@Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` \\@Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param {?} directiveIndex Index to store the initial input data\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data on this node\n * @return {?}\n */\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\n  /** @type {?} */\n  const initialInputData = tNode.initialInputs || (tNode.initialInputs = []);\n  initialInputData[directiveIndex] = null;\n  /** @type {?} */\n  const attrs = /** @type {?} */tNode.attrs;\n  /** @type {?} */\n  let i = 0;\n  while (i < attrs.length) {\n    /** @type {?} */\n    const attrName = attrs[i];\n    if (attrName === 3 /* SelectOnly */) break;\n    if (attrName === 0 /* NamespaceURI */) {\n      // We do not allow inputs on namespaced attributes.\n      i += 4;\n      continue;\n    }\n    /** @type {?} */\n    const minifiedInputName = inputs[attrName];\n    /** @type {?} */\n    const attrValue = attrs[i + 1];\n    if (minifiedInputName !== undefined) {\n      /** @type {?} */\n      const inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\n      inputsToStore.push(minifiedInputName, /** @type {?} */attrValue);\n    }\n    i += 2;\n  }\n  return initialInputData;\n}\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param {?} hostNative The host element for the LContainer\n * @param {?} hostTNode The host TNode for the LContainer\n * @param {?} currentView The parent view of the LContainer\n * @param {?} native The native comment element\n * @param {?=} isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @return {?} LContainer\n */\nfunction createLContainer(hostNative, hostTNode, currentView, native, isForViewContainerRef) {\n  return [isForViewContainerRef ? -1 : 0, [], currentView, null, null, hostNative, native, getRenderParent(hostTNode, currentView) // renderParent\n  ];\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param {?} index The index of the container in the data array\n * @param {?} templateFn Inline template\n * @param {?} consts The number of nodes, local refs, and pipes for this template\n * @param {?} vars The number of bindings for this template\n * @param {?=} tagName The name of the container element, if applicable\n * @param {?=} attrs The attrs attached to the container, if applicable\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @param {?=} localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n * @return {?}\n */\nfunction template(index, templateFn, consts, vars, tagName, attrs, localRefs, localRefExtractor) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  // TODO: consider a separate node type for templates\n  /** @type {?} */\n  const tNode = containerInternal(index, tagName || null, attrs || null);\n  if (getFirstTemplatePass()) {\n    tNode.tViews = createTView(-1, templateFn, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n  }\n  createDirectivesAndLocals(tView, lView, localRefs, localRefExtractor);\n  /** @type {?} */\n  const currentQueries = lView[QUERIES];\n  /** @type {?} */\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  /** @type {?} */\n  const native = getNativeByTNode(previousOrParentTNode, lView);\n  attachPatchData(native, lView);\n  if (currentQueries) {\n    lView[QUERIES] = currentQueries.addNode( /** @type {?} */previousOrParentTNode);\n  }\n  queueLifecycleHooks(tView, tNode);\n  setIsParent(false);\n}\n/**\n * Creates an LContainer for inline views, e.g.\n *\n * % if (showing) {\n *   <div></div>\n * % }\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nfunction container(index) {\n  /** @type {?} */\n  const tNode = containerInternal(index, null, null);\n  getFirstTemplatePass() && (tNode.tViews = []);\n  setIsParent(false);\n}\n/**\n * @param {?} index\n * @param {?} tagName\n * @param {?} attrs\n * @return {?}\n */\nfunction containerInternal(index, tagName, attrs) {\n  /** @type {?} */\n  const lView = getLView();\n  ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'container nodes should be created before any bindings');\n  /** @type {?} */\n  const adjustedIndex = index + HEADER_OFFSET;\n  /** @type {?} */\n  const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  /** @type {?} */\n  const tNode = createNodeAtIndex(index, 0 /* Container */, comment, tagName, attrs);\n  /** @type {?} */\n  const lContainer = lView[adjustedIndex] = createLContainer(lView[adjustedIndex], tNode, lView, comment);\n  appendChild(comment, tNode, lView);\n  // Containers are added to the current view tree instead of their embedded views\n  // because views can be removed and re-inserted.\n  addToViewTree(lView, index + HEADER_OFFSET, lContainer);\n  /** @type {?} */\n  const currentQueries = lView[QUERIES];\n  if (currentQueries) {\n    // prepare place for matching nodes from views inserted into a given container\n    lContainer[QUERIES] = currentQueries.container();\n  }\n  ngDevMode && assertNodeType(getPreviousOrParentTNode(), 0 /* Container */);\n  return tNode;\n}\n/**\n * Sets a container up to receive views.\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nfunction containerRefreshStart(index) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  /** @type {?} */\n  let previousOrParentTNode = /** @type {?} */loadInternal(tView.data, index);\n  setPreviousOrParentTNode(previousOrParentTNode);\n  ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n  setIsParent(true);\n  lView[index + HEADER_OFFSET][ACTIVE_INDEX] = 0;\n  // We need to execute init hooks here so ngOnInit hooks are called in top level views\n  // before they are called in embedded views (for backwards compatibility).\n  executeInitHooks(lView, tView, getCheckNoChangesMode());\n}\n/**\n * Marks the end of the LContainer.\n *\n * Marking the end of LContainer is the time when to child views get inserted or removed.\n * @return {?}\n */\nfunction containerRefreshEnd() {\n  /** @type {?} */\n  let previousOrParentTNode = getPreviousOrParentTNode();\n  if (getIsParent()) {\n    setIsParent(false);\n  } else {\n    ngDevMode && assertNodeType(previousOrParentTNode, 2 /* View */);\n    ngDevMode && assertHasParent(previousOrParentTNode);\n    previousOrParentTNode = /** @type {?} */previousOrParentTNode.parent;\n    setPreviousOrParentTNode(previousOrParentTNode);\n  }\n  ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n  /** @type {?} */\n  const lContainer = getLView()[previousOrParentTNode.index];\n  /** @type {?} */\n  const nextIndex = lContainer[ACTIVE_INDEX];\n  // remove extra views at the end of the container\n  while (nextIndex < lContainer[VIEWS].length) {\n    removeView(lContainer, /** @type {?} */previousOrParentTNode, nextIndex);\n  }\n}\n/**\n * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes them\n * by executing an associated template function.\n * @param {?} lView\n * @return {?}\n */\nfunction refreshDynamicEmbeddedViews(lView) {\n  for (let current = getLViewChild(lView); current !== null; current = current[NEXT]) {\n    // Note: current can be an LView or an LContainer instance, but here we are only interested\n    // in LContainer. We can tell it's an LContainer because its length is less than the LView\n    // header.\n    if (current.length < HEADER_OFFSET && current[ACTIVE_INDEX] === -1) {\n      /** @type {?} */\n      const container = /** @type {?} */current;\n      for (let i = 0; i < container[VIEWS].length; i++) {\n        /** @type {?} */\n        const dynamicViewData = container[VIEWS][i];\n        // The directives and pipes are not needed here as an existing view is only being refreshed.\n        ngDevMode && assertDefined(dynamicViewData[TVIEW], 'TView must be allocated');\n        renderEmbeddedTemplate(dynamicViewData, dynamicViewData[TVIEW], /** @type {?} */dynamicViewData[CONTEXT]);\n      }\n    }\n  }\n}\n/**\n * Looks for a view with a given view block id inside a provided LContainer.\n * Removes views that need to be deleted in the process.\n *\n * @param {?} lContainer to search for views\n * @param {?} tContainerNode to search for views\n * @param {?} startIdx starting index in the views array to search from\n * @param {?} viewBlockId exact view block id to look for\n * @return {?} index of a found view or -1 if not found\n */\nfunction scanForView(lContainer, tContainerNode, startIdx, viewBlockId) {\n  /** @type {?} */\n  const views = lContainer[VIEWS];\n  for (let i = startIdx; i < views.length; i++) {\n    /** @type {?} */\n    const viewAtPositionId = views[i][TVIEW].id;\n    if (viewAtPositionId === viewBlockId) {\n      return views[i];\n    } else if (viewAtPositionId < viewBlockId) {\n      // found a view that should not be at this position - remove\n      removeView(lContainer, tContainerNode, i);\n    } else {\n      // found a view with id greater than the one we are searching for\n      // which means that required view doesn't exist and can't be found at\n      // later positions in the views array - stop the searchdef.cont here\n      break;\n    }\n  }\n  return null;\n}\n/**\n * Marks the start of an embedded view.\n *\n * @param {?} viewBlockId The ID of this view\n * @param {?} consts\n * @param {?} vars\n * @return {?} boolean Whether or not this view is in creation mode\n */\nfunction embeddedViewStart(viewBlockId, consts, vars) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  // The previous node can be a view node if we are processing an inline for loop\n  /** @type {?} */\n  const containerTNode = previousOrParentTNode.type === 2 /* View */ ? /** @type {?} */previousOrParentTNode.parent : previousOrParentTNode;\n  /** @type {?} */\n  const lContainer = /** @type {?} */lView[containerTNode.index];\n  ngDevMode && assertNodeType(containerTNode, 0 /* Container */);\n  /** @type {?} */\n  let viewToRender = scanForView(lContainer, /** @type {?} */containerTNode, /** @type {?} */lContainer[ACTIVE_INDEX], viewBlockId);\n  if (viewToRender) {\n    setIsParent(true);\n    enterView(viewToRender, viewToRender[TVIEW].node);\n  } else {\n    // When we create a new LView, we always reset the state of the instructions.\n    viewToRender = createLView(lView, getOrCreateEmbeddedTView(viewBlockId, consts, vars, /** @type {?} */containerTNode), null, 4 /* CheckAlways */);\n    if (lContainer[QUERIES]) {\n      viewToRender[QUERIES] = /** @type {?} */lContainer[QUERIES].createView();\n    }\n    createViewNode(viewBlockId, viewToRender);\n    enterView(viewToRender, viewToRender[TVIEW].node);\n  }\n  if (lContainer) {\n    if (isCreationMode(viewToRender)) {\n      // it is a new view, insert it into collection of views for a given container\n      insertView(viewToRender, lContainer, lView, /** @type {?} */lContainer[ACTIVE_INDEX], -1);\n    }\n    /** @type {?} */lContainer[ACTIVE_INDEX]++;\n  }\n  return isCreationMode(viewToRender) ? 1 /* Create */ | 2 /* Update */ : 2 /* Update */;\n}\n/**\n * Initialize the TView (e.g. static data) for the active embedded view.\n *\n * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\n * static data for a particular node would overwrite the static data for a node in the view above\n * it with the same index (since it's in the same template).\n *\n * @param {?} viewIndex The index of the TView in TNode.tViews\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars The number of bindings and pure function bindings in this template\n * @param {?} parent\n * @return {?} TView\n */\nfunction getOrCreateEmbeddedTView(viewIndex, consts, vars, parent) {\n  /** @type {?} */\n  const tView = getLView()[TVIEW];\n  ngDevMode && assertNodeType(parent, 0 /* Container */);\n  /** @type {?} */\n  const containerTViews = /** @type {?} */parent.tViews;\n  ngDevMode && assertDefined(containerTViews, 'TView expected');\n  ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\n  if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\n    containerTViews[viewIndex] = createTView(viewIndex, null, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n  }\n  return containerTViews[viewIndex];\n}\n/**\n * Marks the end of an embedded view.\n * @return {?}\n */\nfunction embeddedViewEnd() {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const viewHost = lView[HOST_NODE];\n  if (isCreationMode(lView)) {\n    refreshDescendantViews(lView); // creation mode pass\n    lView[FLAGS] &= ~1 /* CreationMode */;\n  }\n\n  refreshDescendantViews(lView); // update mode pass\n  leaveView( /** @type {?} */lView[PARENT]);\n  setPreviousOrParentTNode( /** @type {?} */viewHost);\n  setIsParent(false);\n}\n/////////////\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @template T\n * @param {?} adjustedElementIndex  Element index in LView[] (adjusted for HEADER_OFFSET)\n * @return {?}\n */\nfunction componentRefresh(adjustedElementIndex) {\n  /** @type {?} */\n  const lView = getLView();\n  ngDevMode && assertDataInRange(lView, adjustedElementIndex);\n  /** @type {?} */\n  const hostView = getComponentViewByIndex(adjustedElementIndex, lView);\n  ngDevMode && assertNodeType( /** @type {?} */lView[TVIEW].data[adjustedElementIndex], 3 /* Element */);\n  // Only attached CheckAlways components or attached, dirty OnPush components should be checked\n  if (viewAttached(hostView) && hostView[FLAGS] & (4 /* CheckAlways */ | 8 /* Dirty */)) {\n    syncViewWithBlueprint(hostView);\n    checkView(hostView, hostView[CONTEXT]);\n  }\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param {?} componentView The view to sync\n * @return {?}\n */\nfunction syncViewWithBlueprint(componentView) {\n  /** @type {?} */\n  const componentTView = componentView[TVIEW];\n  for (let i = componentView.length; i < componentTView.blueprint.length; i++) {\n    componentView[i] = componentTView.blueprint[i];\n  }\n}\n/**\n * Returns a boolean for whether the view is attached\n * @param {?} view\n * @return {?}\n */\nfunction viewAttached(view) {\n  return (view[FLAGS] & 16 /* Attached */) === 16 /* Attached */;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param {?=} selectors A collection of parsed CSS selectors\n * @param {?=} textSelectors\n * @return {?}\n */\nfunction projectionDef(selectors, textSelectors) {\n  /** @type {?} */\n  const componentNode = /** @type {?} */findComponentView(getLView())[HOST_NODE];\n  if (!componentNode.projection) {\n    /** @type {?} */\n    const noOfNodeBuckets = selectors ? selectors.length + 1 : 1;\n    /** @type {?} */\n    const pData = componentNode.projection = new Array(noOfNodeBuckets).fill(null);\n    /** @type {?} */\n    const tails = pData.slice();\n    /** @type {?} */\n    let componentChild = componentNode.child;\n    while (componentChild !== null) {\n      /** @type {?} */\n      const bucketIndex = selectors ? matchingSelectorIndex(componentChild, selectors, /** @type {?} */textSelectors) : 0;\n      /** @type {?} */\n      const nextNode = componentChild.next;\n      if (tails[bucketIndex]) {\n        /** @type {?} */tails[bucketIndex].next = componentChild;\n      } else {\n        pData[bucketIndex] = componentChild;\n        componentChild.next = null;\n      }\n      tails[bucketIndex] = componentChild;\n      componentChild = nextNode;\n    }\n  }\n}\n/**\n * Stack used to keep track of projection nodes in projection() instruction.\n *\n * This is deliberately created outside of projection() to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n * @type {?}\n */\nconst projectionNodeStack$1 = [];\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param {?} nodeIndex\n * @param {?=} selectorIndex\n * @param {?=} attrs\n * @return {?}\n */\nfunction projection(nodeIndex, selectorIndex = 0, attrs) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const tProjectionNode = createNodeAtIndex(nodeIndex, 1 /* Projection */, null, null, attrs || null);\n  // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n  if (tProjectionNode.projection === null) tProjectionNode.projection = selectorIndex;\n  // `<ng-content>` has no content\n  setIsParent(false);\n  // re-distribution of projectable nodes is stored on a component's view level\n  /** @type {?} */\n  const componentView = findComponentView(lView);\n  /** @type {?} */\n  const componentNode = /** @type {?} */componentView[HOST_NODE];\n  /** @type {?} */\n  let nodeToProject = /** @type {?} */componentNode.projection[selectorIndex];\n  /** @type {?} */\n  let projectedView = /** @type {?} */componentView[PARENT];\n  /** @type {?} */\n  let projectionNodeIndex = -1;\n  while (nodeToProject) {\n    if (nodeToProject.type === 1 /* Projection */) {\n      // This node is re-projected, so we must go up the tree to get its projected nodes.\n      /** @type {?} */\n      const currentComponentView = findComponentView(projectedView);\n      /** @type {?} */\n      const currentComponentHost = /** @type {?} */currentComponentView[HOST_NODE];\n      /** @type {?} */\n      const firstProjectedNode = /** @type {?} */currentComponentHost.projection[/** @type {?} */nodeToProject.projection];\n      if (firstProjectedNode) {\n        projectionNodeStack$1[++projectionNodeIndex] = nodeToProject;\n        projectionNodeStack$1[++projectionNodeIndex] = projectedView;\n        nodeToProject = firstProjectedNode;\n        projectedView = /** @type {?} */currentComponentView[PARENT];\n        continue;\n      }\n    } else {\n      // This flag must be set now or we won't know that this node is projected\n      // if the nodes are inserted into a container later.\n      nodeToProject.flags |= 2 /* isProjected */;\n      appendProjectedNode(nodeToProject, tProjectionNode, lView, projectedView);\n    }\n    // If we are finished with a list of re-projected nodes, we need to get\n    // back to the root projection node that was re-projected.\n    if (nodeToProject.next === null && projectedView !== /** @type {?} */componentView[PARENT]) {\n      projectedView = /** @type {?} */projectionNodeStack$1[projectionNodeIndex--];\n      nodeToProject = /** @type {?} */projectionNodeStack$1[projectionNodeIndex--];\n    }\n    nodeToProject = nodeToProject.next;\n  }\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @template T\n * @param {?} lView The view where LView or LContainer should be added\n * @param {?} adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param {?} state The LView or LContainer to add to the view tree\n * @return {?} The state passed in\n */\nfunction addToViewTree(lView, adjustedHostIndex, state) {\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  /** @type {?} */\n  const firstTemplatePass = getFirstTemplatePass();\n  if (lView[TAIL]) {\n    /** @type {?} */lView[TAIL][NEXT] = state;\n  } else if (firstTemplatePass) {\n    tView.childIndex = adjustedHostIndex;\n  }\n  lView[TAIL] = state;\n  return state;\n}\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n/**\n * If node is an OnPush component, marks its LView dirty.\n * @param {?} lView\n * @param {?} viewIndex\n * @return {?}\n */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n  /** @type {?} */\n  const childComponentLView = getComponentViewByIndex(viewIndex, lView);\n  if (!(childComponentLView[FLAGS] & 4 /* CheckAlways */)) {\n    childComponentLView[FLAGS] |= 8 /* Dirty */;\n  }\n}\n/**\n * Wraps an event listener with preventDefault behavior.\n * @param {?} listenerFn\n * @return {?}\n */\nfunction wrapListenerWithPreventDefault(listenerFn) {\n  return function wrapListenerIn_preventDefault(e) {\n    if (listenerFn(e) === false) {\n      e.preventDefault();\n      // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n      e.returnValue = false;\n    }\n  };\n}\n/**\n * Marks current view and all ancestors dirty\n * @param {?} lView\n * @return {?}\n */\nfunction markViewDirty(lView) {\n  while (lView && !(lView[FLAGS] & 128 /* IsRoot */)) {\n    lView[FLAGS] |= 8 /* Dirty */;\n    lView = /** @type {?} */lView[PARENT];\n  }\n  lView[FLAGS] |= 8 /* Dirty */;\n  ngDevMode && assertDefined(lView[CONTEXT], 'rootContext should be defined');\n  /** @type {?} */\n  const rootContext = /** @type {?} */lView[CONTEXT];\n  scheduleTick(rootContext, 1 /* DetectChanges */);\n}\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n * @template T\n * @param {?} rootContext\n * @param {?} flags\n * @return {?}\n */\nfunction scheduleTick(rootContext, flags) {\n  /** @type {?} */\n  const nothingScheduled = rootContext.flags === 0 /* Empty */;\n  rootContext.flags |= flags;\n  if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n    /** @type {?} */\n    let res;\n    rootContext.clean = new Promise(r => res = r);\n    rootContext.scheduler(() => {\n      if (rootContext.flags & 1 /* DetectChanges */) {\n        rootContext.flags &= ~1 /* DetectChanges */;\n        tickRootContext(rootContext);\n      }\n      if (rootContext.flags & 2 /* FlushPlayers */) {\n        rootContext.flags &= ~2 /* FlushPlayers */;\n        /** @type {?} */\n        const playerHandler = rootContext.playerHandler;\n        if (playerHandler) {\n          playerHandler.flushPlayers();\n        }\n      }\n      rootContext.clean = _CLEAN_PROMISE;\n      /** @type {?} */res(null);\n    });\n  }\n}\n/**\n * @param {?} rootContext\n * @return {?}\n */\nfunction tickRootContext(rootContext) {\n  for (let i = 0; i < rootContext.components.length; i++) {\n    /** @type {?} */\n    const rootComponent = rootContext.components[i];\n    renderComponentOrTemplate( /** @type {?} */readPatchedLView(rootComponent), rootComponent);\n  }\n}\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {\\@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @template T\n * @param {?} component The component which the change detection should be performed on.\n * @return {?}\n */\nfunction detectChanges(component) {\n  /** @type {?} */\n  const view = /** @type {?} */getComponentViewByInstance(component);\n  detectChangesInternal(view, component);\n}\n/**\n * @template T\n * @param {?} view\n * @param {?} context\n * @return {?}\n */\nfunction detectChangesInternal(view, context) {\n  /** @type {?} */\n  const rendererFactory = view[RENDERER_FACTORY];\n  if (rendererFactory.begin) rendererFactory.begin();\n  if (isCreationMode(view)) {\n    checkView(view, context); // creation mode pass\n  }\n\n  checkView(view, context); // update mode pass\n  if (rendererFactory.end) rendererFactory.end();\n}\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param {?} lView The view which the change detection should be performed on.\n * @return {?}\n */\nfunction detectChangesInRootView(lView) {\n  tickRootContext( /** @type {?} */lView[CONTEXT]);\n}\n/**\n * Checks the change detector and its children, and throws if any changes are detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n * @template T\n * @param {?} component\n * @return {?}\n */\nfunction checkNoChanges(component) {\n  setCheckNoChangesMode(true);\n  try {\n    detectChanges(component);\n  } finally {\n    setCheckNoChangesMode(false);\n  }\n}\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param {?} lView The view which the change detection should be checked on.\n * @return {?}\n */\nfunction checkNoChangesInRootView(lView) {\n  setCheckNoChangesMode(true);\n  try {\n    detectChangesInRootView(lView);\n  } finally {\n    setCheckNoChangesMode(false);\n  }\n}\n/**\n * Checks the view of the component provided. Does not gate on dirty checks or execute doCheck.\n * @template T\n * @param {?} hostView\n * @param {?} component\n * @return {?}\n */\nfunction checkView(hostView, component) {\n  /** @type {?} */\n  const hostTView = hostView[TVIEW];\n  /** @type {?} */\n  const oldView = enterView(hostView, hostView[HOST_NODE]);\n  /** @type {?} */\n  const templateFn = /** @type {?} */hostTView.template;\n  /** @type {?} */\n  const viewQuery = hostTView.viewQuery;\n  try {\n    namespaceHTML();\n    createViewQuery(viewQuery, hostView, component);\n    templateFn(getRenderFlags(hostView), component);\n    refreshDescendantViews(hostView);\n    updateViewQuery(viewQuery, hostView, component);\n  } finally {\n    leaveView(oldView);\n  }\n}\n/**\n * @template T\n * @param {?} viewQuery\n * @param {?} view\n * @param {?} component\n * @return {?}\n */\nfunction createViewQuery(viewQuery, view, component) {\n  if (viewQuery && isCreationMode(view)) {\n    viewQuery(1 /* Create */, component);\n  }\n}\n/**\n * @template T\n * @param {?} viewQuery\n * @param {?} view\n * @param {?} component\n * @return {?}\n */\nfunction updateViewQuery(viewQuery, view, component) {\n  if (viewQuery && !isCreationMode(view)) {\n    viewQuery(2 /* Update */, component);\n  }\n}\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * \\@publicApi\n * @template T\n * @param {?} component Component to mark as dirty.\n *\n * @return {?}\n */\nfunction markDirty(component) {\n  ngDevMode && assertDefined(component, 'component');\n  markViewDirty(getComponentViewByInstance(component));\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\n * Creates a single value binding.\n *\n * @template T\n * @param {?} value Value to diff\n * @return {?}\n */\nfunction bind(value) {\n  /** @type {?} */\n  const lView = getLView();\n  return bindingUpdated(lView, lView[BINDING_INDEX]++, value) ? value : NO_CHANGE;\n}\n/**\n * Allocates the necessary amount of slots for host vars.\n *\n * @param {?} count Amount of vars to be allocated\n * @return {?}\n */\nfunction allocHostVars(count) {\n  if (!getFirstTemplatePass()) return;\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  queueHostBindingForCheck(tView, /** @type {?} */getCurrentDirectiveDef(), count);\n  prefillHostVars(tView, lView, count);\n}\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n * @param {?} values\n * @return {?}\n */\nfunction interpolationV(values) {\n  ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n  ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n  /** @type {?} */\n  let different = false;\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  let bindingIndex = lView[BINDING_INDEX];\n  for (let i = 1; i < values.length; i += 2) {\n    // Check if bindings (odd indexes) have changed\n    bindingUpdated(lView, bindingIndex++, values[i]) && (different = true);\n  }\n  lView[BINDING_INDEX] = bindingIndex;\n  if (!different) {\n    return NO_CHANGE;\n  }\n  // Build the updated content\n  /** @type {?} */\n  let content = values[0];\n  for (let i = 1; i < values.length; i += 2) {\n    content += stringify$1(values[i]) + values[i + 1];\n  }\n  return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param {?} prefix static value used for concatenation only.\n * @param {?} v0 value checked for change.\n * @param {?} suffix static value used for concatenation only.\n * @return {?}\n */\nfunction interpolation1(prefix, v0, suffix) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const different = bindingUpdated(lView, lView[BINDING_INDEX], v0);\n  lView[BINDING_INDEX] += 1;\n  return different ? prefix + stringify$1(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation2(prefix, v0, i0, v1, suffix) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const different = bindingUpdated2(lView, lView[BINDING_INDEX], v0, v1);\n  lView[BINDING_INDEX] += 2;\n  return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation3(prefix, v0, i0, v1, i1, v2, suffix) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const different = bindingUpdated3(lView, lView[BINDING_INDEX], v0, v1, v2);\n  lView[BINDING_INDEX] += 3;\n  return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + suffix : NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const different = bindingUpdated4(lView, lView[BINDING_INDEX], v0, v1, v2, v3);\n  lView[BINDING_INDEX] += 4;\n  return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const bindingIndex = lView[BINDING_INDEX];\n  /** @type {?} */\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n  lView[BINDING_INDEX] += 5;\n  return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 + stringify$1(v4) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const bindingIndex = lView[BINDING_INDEX];\n  /** @type {?} */\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n  lView[BINDING_INDEX] += 6;\n  return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 + stringify$1(v4) + i4 + stringify$1(v5) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const bindingIndex = lView[BINDING_INDEX];\n  /** @type {?} */\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n  lView[BINDING_INDEX] += 7;\n  return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 + stringify$1(v4) + i4 + stringify$1(v5) + i5 + stringify$1(v6) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} i6\n * @param {?} v7\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const bindingIndex = lView[BINDING_INDEX];\n  /** @type {?} */\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n  lView[BINDING_INDEX] += 8;\n  return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 + stringify$1(v4) + i4 + stringify$1(v5) + i5 + stringify$1(v6) + i6 + stringify$1(v7) + suffix : NO_CHANGE;\n}\n/**\n * Store a value in the `data` at a given `index`.\n * @template T\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction store(index, value) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  // We don't store any static data for local variables, so the first time\n  // we see the template, we should store as null to avoid a sparse array\n  /** @type {?} */\n  const adjustedIndex = index + HEADER_OFFSET;\n  if (adjustedIndex >= tView.data.length) {\n    tView.data[adjustedIndex] = null;\n  }\n  lView[adjustedIndex] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @template T\n * @param {?} index The index of the local ref in contextViewData.\n * @return {?}\n */\nfunction reference(index) {\n  /** @type {?} */\n  const contextLView = getContextLView();\n  return loadInternal(contextLView, index);\n}\n/**\n * @template T\n * @param {?} queryListIdx\n * @return {?}\n */\nfunction loadQueryList(queryListIdx) {\n  /** @type {?} */\n  const lView = getLView();\n  ngDevMode && assertDefined(lView[CONTENT_QUERIES], 'Content QueryList array should be defined if reading a query.');\n  ngDevMode && assertDataInRange( /** @type {?} */lView[CONTENT_QUERIES], queryListIdx);\n  return (/** @type {?} */lView[CONTENT_QUERIES][queryListIdx]\n  );\n}\n/**\n * Retrieves a value from current `viewData`.\n * @template T\n * @param {?} index\n * @return {?}\n */\nfunction load(index) {\n  return loadInternal(getLView(), index);\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nfunction directiveInject(token, flags = InjectFlags.Default) {\n  token = resolveForwardRef(token);\n  return getOrCreateInjectable( /** @type {?} */getPreviousOrParentTNode(), getLView(), token, flags);\n}\n/**\n * Facade for the attribute injection from DI.\n * @param {?} attrNameToInject\n * @return {?}\n */\nfunction injectAttribute(attrNameToInject) {\n  return injectAttributeImpl(getPreviousOrParentTNode(), attrNameToInject);\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n * @template Q\n * @param {?} queryList\n * @param {?} currentDirectiveIndex\n * @return {?}\n */\nfunction registerContentQuery(queryList, currentDirectiveIndex) {\n  /** @type {?} */\n  const viewData = getLView();\n  /** @type {?} */\n  const tView = viewData[TVIEW];\n  /** @type {?} */\n  const savedContentQueriesLength = (viewData[CONTENT_QUERIES] || (viewData[CONTENT_QUERIES] = [])).push(queryList);\n  if (getFirstTemplatePass()) {\n    /** @type {?} */\n    const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n    /** @type {?} */\n    const lastSavedDirectiveIndex = tView.contentQueries.length ? tView.contentQueries[tView.contentQueries.length - 2] : -1;\n    if (currentDirectiveIndex !== lastSavedDirectiveIndex) {\n      tViewContentQueries.push(currentDirectiveIndex, savedContentQueriesLength - 1);\n    }\n  }\n}\n/** @type {?} */\nconst CLEAN_PROMISE = _CLEAN_PROMISE;\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction initializeTNodeInputs(tNode) {\n  // If tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n  // yet been checked.\n  if (tNode) {\n    if (tNode.inputs === undefined) {\n      // mark inputs as checked\n      tNode.inputs = generatePropertyAliases(tNode, 0 /* Input */);\n    }\n\n    return tNode.inputs;\n  }\n  return null;\n}\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n * @return {?}\n */\nfunction getCurrentView() {\n  return (/** @type {?} */ /** @type {?} */getLView()\n  );\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getCleanup(view) {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return view[CLEANUP] || (view[CLEANUP] = []);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getTViewCleanup(view) {\n  return view[TVIEW].cleanup || (view[TVIEW].cleanup = []);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Adds a player to an element, directive or component instance that will later be\n * animated once change detection has passed.\n *\n * When a player is added to a reference it will stay active until `player.destroy()`\n * is called. Once called then the player will be removed from the active players\n * present on the associated ref instance.\n *\n * To get a list of all the active players on an element see [getPlayers].\n *\n * @param {?} ref The element, directive or component that the player will be placed on.\n * @param {?} player The player that will be triggered to play once change detection has run.\n * @return {?}\n */\nfunction addPlayer(ref, player) {\n  /** @type {?} */\n  const context = getLContext(ref);\n  if (!context) {\n    ngDevMode && throwInvalidRefError();\n    return;\n  }\n  /** @type {?} */\n  const element$$1 = /** @type {?} */context.native;\n  /** @type {?} */\n  const lView = context.lView;\n  /** @type {?} */\n  const playerContext = /** @type {?} */getOrCreatePlayerContext(element$$1, context);\n  /** @type {?} */\n  const rootContext = getRootContext$1(lView);\n  addPlayerInternal(playerContext, rootContext, element$$1, player, 0, ref);\n  scheduleTick(rootContext, 2 /* FlushPlayers */);\n}\n/**\n * Returns a list of all the active players present on the provided ref instance (which can\n * be an instance of a directive, component or element).\n *\n * This function will only return players that have been added to the ref instance using\n * `addPlayer` or any players that are active through any template styling bindings\n * (`[style]`, `[style.prop]`, `[class]` and `[class.name]`).\n *\n * \\@publicApi\n * @param {?} ref\n * @return {?}\n */\nfunction getPlayers(ref) {\n  /** @type {?} */\n  const context = getLContext(ref);\n  if (!context) {\n    ngDevMode && throwInvalidRefError();\n    return [];\n  }\n  /** @type {?} */\n  const stylingContext = getStylingContext(context.nodeIndex, context.lView);\n  /** @type {?} */\n  const playerContext = stylingContext ? getPlayerContext(stylingContext) : null;\n  return playerContext ? getPlayersInternal(playerContext) : [];\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This value reflects the property on the window where the dev\n * tools are patched (window.ng).\n *\n * @type {?}\n */\nconst GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\n/*\n * Publishes a collection of default debug tools onto `window._ng_`.\n *\n * These functions are available globally when Angular is in development\n * mode and are automatically stripped away from prod mode is on.\n */\n/** @type {?} */\nlet _published = false;\n/**\n * @return {?}\n */\nfunction publishDefaultGlobalUtils() {\n  if (!_published) {\n    _published = true;\n    publishGlobalUtil('getComponent', getComponent);\n    publishGlobalUtil('getContext', getContext);\n    publishGlobalUtil('getListeners', getListeners);\n    publishGlobalUtil('getViewComponent', getViewComponent);\n    publishGlobalUtil('getHostElement', getHostElement);\n    publishGlobalUtil('getInjector', getInjector);\n    publishGlobalUtil('getRootComponents', getRootComponents);\n    publishGlobalUtil('getDirectives', getDirectives);\n    publishGlobalUtil('getPlayers', getPlayers);\n    publishGlobalUtil('markDirty', markDirty);\n  }\n}\n/**\n * Publishes the given function to `window.ngDevMode` so that it can be\n * used from the browser console when an application is not in production.\n * @param {?} name\n * @param {?} fn\n * @return {?}\n */\nfunction publishGlobalUtil(name, fn) {\n  /** @type {?} */\n  const w = /** @type {?} */ /** @type {?} */_global;\n  ngDevMode && assertDefined(fn, 'function not defined');\n  if (w) {\n    /** @type {?} */\n    let container = w[GLOBAL_PUBLISH_EXPANDO_KEY];\n    if (!container) {\n      container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};\n    }\n    container[name] = fn;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {\\@link ViewContainer#createComponent}.\n *\n * @template T\n * @param {?} componentType Component to bootstrap\n * @param {?=} opts\n * @return {?}\n */\nfunction renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts = {}) {\n  ngDevMode && publishDefaultGlobalUtils();\n  ngDevMode && assertComponentType(componentType);\n  /** @type {?} */\n  const rendererFactory = opts.rendererFactory || domRendererFactory3;\n  /** @type {?} */\n  const sanitizer = opts.sanitizer || null;\n  /** @type {?} */\n  const componentDef = /** @type {?} */getComponentDef(componentType);\n  if (componentDef.type != componentType) componentDef.type = componentType;\n  // The first index of the first selector is the tag name.\n  /** @type {?} */\n  const componentTag = /** @type {?} */ /** @type {?} */ /** @type {?} */componentDef.selectors[0][0];\n  /** @type {?} */\n  const hostRNode = locateHostElement(rendererFactory, opts.host || componentTag);\n  /** @type {?} */\n  const rootFlags = componentDef.onPush ? 8 /* Dirty */ | 128 /* IsRoot */ : 4 /* CheckAlways */ | 128 /* IsRoot */;\n  /** @type {?} */\n  const rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n  /** @type {?} */\n  const renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n  /** @type {?} */\n  const rootView = createLView(null, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags, rendererFactory, renderer, undefined, opts.injector || null);\n  /** @type {?} */\n  const oldView = enterView(rootView, null);\n  /** @type {?} */\n  let component;\n  try {\n    if (rendererFactory.begin) rendererFactory.begin();\n    /** @type {?} */\n    const componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);\n    component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n    refreshDescendantViews(rootView); // creation mode pass\n    rootView[FLAGS] &= ~1 /* CreationMode */;\n    refreshDescendantViews(rootView); // update mode pass\n  } finally {\n    leaveView(oldView);\n    if (rendererFactory.end) rendererFactory.end();\n  }\n  return component;\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param {?} rNode Render host element.\n * @param {?} def ComponentDef\n * @param {?} rootView The parent view where the host node is stored\n * @param {?} rendererFactory\n * @param {?} renderer The current renderer\n * @param {?=} sanitizer The sanitizer, if provided\n *\n * @return {?} Component view created\n */\nfunction createRootComponentView(rNode, def, rootView, rendererFactory, renderer, sanitizer) {\n  resetComponentState();\n  /** @type {?} */\n  const tView = rootView[TVIEW];\n  /** @type {?} */\n  const componentView = createLView(rootView, getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery), null, def.onPush ? 8 /* Dirty */ : 4 /* CheckAlways */, rendererFactory, renderer, sanitizer);\n  /** @type {?} */\n  const tNode = createNodeAtIndex(0, 3 /* Element */, rNode, null, null);\n  if (tView.firstTemplatePass) {\n    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), rootView, def.type);\n    tNode.flags = 1 /* isComponent */;\n    initNodeFlags(tNode, rootView.length, 1);\n    queueComponentIndexForCheck(tNode);\n  }\n  // Store component view at node index, with node as the HOST\n  componentView[HOST] = rootView[HEADER_OFFSET];\n  componentView[HOST_NODE] = /** @type {?} */tNode;\n  return rootView[HEADER_OFFSET] = componentView;\n}\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n * @template T\n * @param {?} componentView\n * @param {?} componentDef\n * @param {?} rootView\n * @param {?} rootContext\n * @param {?} hostFeatures\n * @return {?}\n */\nfunction createRootComponent(componentView, componentDef, rootView, rootContext, hostFeatures) {\n  /** @type {?} */\n  const tView = rootView[TVIEW];\n  // Create directive instance with factory() and store at next index in viewData\n  /** @type {?} */\n  const component = instantiateRootComponent(tView, rootView, componentDef);\n  rootContext.components.push(component);\n  componentView[CONTEXT] = component;\n  hostFeatures && hostFeatures.forEach(feature => feature(component, componentDef));\n  if (tView.firstTemplatePass && componentDef.hostBindings) {\n    /** @type {?} */\n    const rootTNode = getPreviousOrParentTNode();\n    setCurrentDirectiveDef(componentDef);\n    componentDef.hostBindings(1 /* Create */, component, rootTNode.index - HEADER_OFFSET);\n    setCurrentDirectiveDef(null);\n  }\n  return component;\n}\n/**\n * @param {?=} scheduler\n * @param {?=} playerHandler\n * @return {?}\n */\nfunction createRootContext(scheduler, playerHandler) {\n  return {\n    components: [],\n    scheduler: scheduler || defaultScheduler,\n    clean: CLEAN_PROMISE,\n    playerHandler: playerHandler || null,\n    flags: 0 /* Empty */\n  };\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n * @param {?} component\n * @param {?} def\n * @return {?}\n */\nfunction LifecycleHooksFeature(component, def) {\n  /** @type {?} */\n  const rootTView = /** @type {?} */readPatchedLView(component)[TVIEW];\n  /** @type {?} */\n  const dirIndex = rootTView.data.length - 1;\n  queueInitHooks(dirIndex, def.onInit, def.doCheck, rootTView);\n  // TODO(misko): replace `as TNode` with createTNode call. (needs refactoring to lose dep on\n  // LNode).\n  queueLifecycleHooks(rootTView, /** @type {?} */{\n    directiveStart: dirIndex,\n    directiveEnd: dirIndex + 1\n  });\n}\n/**\n * Retrieve the root context for any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} component any component\n * @return {?}\n */\nfunction getRootContext$2(component) {\n  /** @type {?} */\n  const rootContext = /** @type {?} */getRootView(component)[CONTEXT];\n  ngDevMode && assertDefined(rootContext, 'rootContext');\n  return rootContext;\n}\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param {?} component Component to wait upon\n * @return {?} Promise which resolves when the component is rendered.\n */\nfunction whenRendered(component) {\n  return getRootContext$2(component).clean;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Determines if a definition is a {\\@link ComponentDef} or a {\\@link DirectiveDef}\n * @template T\n * @param {?} definition The definition to examine\n * @return {?}\n */\nfunction isComponentDef$1(definition) {\n  /** @type {?} */\n  const def = /** @type {?} */definition;\n  return typeof def.template === 'function';\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getSuperType(type) {\n  return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param {?} definition The definition that is a SubClass of another directive of component\n * @return {?}\n */\nfunction InheritDefinitionFeature(definition) {\n  /** @type {?} */\n  let superType = getSuperType(definition.type);\n  while (superType) {\n    /** @type {?} */\n    let superDef = undefined;\n    if (isComponentDef$1(definition)) {\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ngComponentDef || superType.ngDirectiveDef;\n    } else {\n      if (superType.ngComponentDef) {\n        throw new Error('Directives cannot inherit Components');\n      }\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ngDirectiveDef;\n    }\n    /** @nocollapse @type {?} */\n    const baseDef = /** @type {?} */superType.ngBaseDef;\n    // Some fields in the definition may be empty, if there were no values to put in them that\n    // would've justified object creation. Unwrap them if necessary.\n    if (baseDef || superDef) {\n      /** @type {?} */\n      const writeableDef = /** @type {?} */definition;\n      writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n      writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n      writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n    }\n    if (baseDef) {\n      // Merge inputs and outputs\n      fillProperties(definition.inputs, baseDef.inputs);\n      fillProperties(definition.declaredInputs, baseDef.declaredInputs);\n      fillProperties(definition.outputs, baseDef.outputs);\n    }\n    if (superDef) {\n      // Merge hostBindings\n      /** @type {?} */\n      const prevHostBindings = definition.hostBindings;\n      /** @type {?} */\n      const superHostBindings = superDef.hostBindings;\n      if (superHostBindings) {\n        if (prevHostBindings) {\n          definition.hostBindings = (rf, ctx, elementIndex) => {\n            superHostBindings(rf, ctx, elementIndex);\n            prevHostBindings(rf, ctx, elementIndex);\n          };\n        } else {\n          definition.hostBindings = superHostBindings;\n        }\n      }\n      // Merge View Queries\n      if (isComponentDef$1(definition) && isComponentDef$1(superDef)) {\n        /** @type {?} */\n        const prevViewQuery = definition.viewQuery;\n        /** @type {?} */\n        const superViewQuery = superDef.viewQuery;\n        if (superViewQuery) {\n          if (prevViewQuery) {\n            definition.viewQuery = (rf, ctx) => {\n              superViewQuery(rf, ctx);\n              prevViewQuery(rf, ctx);\n            };\n          } else {\n            definition.viewQuery = superViewQuery;\n          }\n        }\n      }\n      // Merge Content Queries\n      /** @type {?} */\n      const prevContentQueries = definition.contentQueries;\n      /** @type {?} */\n      const superContentQueries = superDef.contentQueries;\n      if (superContentQueries) {\n        if (prevContentQueries) {\n          definition.contentQueries = dirIndex => {\n            superContentQueries(dirIndex);\n            prevContentQueries(dirIndex);\n          };\n        } else {\n          definition.contentQueries = superContentQueries;\n        }\n      }\n      // Merge Content Queries Refresh\n      /** @type {?} */\n      const prevContentQueriesRefresh = definition.contentQueriesRefresh;\n      /** @type {?} */\n      const superContentQueriesRefresh = superDef.contentQueriesRefresh;\n      if (superContentQueriesRefresh) {\n        if (prevContentQueriesRefresh) {\n          definition.contentQueriesRefresh = (directiveIndex, queryIndex) => {\n            superContentQueriesRefresh(directiveIndex, queryIndex);\n            prevContentQueriesRefresh(directiveIndex, queryIndex);\n          };\n        } else {\n          definition.contentQueriesRefresh = superContentQueriesRefresh;\n        }\n      }\n      // Merge inputs and outputs\n      fillProperties(definition.inputs, superDef.inputs);\n      fillProperties(definition.declaredInputs, superDef.declaredInputs);\n      fillProperties(definition.outputs, superDef.outputs);\n      // Inherit hooks\n      // Assume super class inheritance feature has already run.\n      definition.afterContentChecked = definition.afterContentChecked || superDef.afterContentChecked;\n      definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n      definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n      definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n      definition.doCheck = definition.doCheck || superDef.doCheck;\n      definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n      definition.onInit = definition.onInit || superDef.onInit;\n      // Run parent features\n      /** @type {?} */\n      const features = superDef.features;\n      if (features) {\n        for (const feature of features) {\n          if (feature && feature.ngInherit) {\n            /** @type {?} */feature(definition);\n          }\n        }\n      }\n      break;\n    } else {\n      // Even if we don't have a definition, check the type for the hooks and use those if need be\n      /** @type {?} */\n      const superPrototype = superType.prototype;\n      if (superPrototype) {\n        definition.afterContentChecked = definition.afterContentChecked || superPrototype.afterContentChecked;\n        definition.afterContentInit = definition.afterContentInit || superPrototype.afterContentInit;\n        definition.afterViewChecked = definition.afterViewChecked || superPrototype.afterViewChecked;\n        definition.afterViewInit = definition.afterViewInit || superPrototype.afterViewInit;\n        definition.doCheck = definition.doCheck || superPrototype.doCheck;\n        definition.onDestroy = definition.onDestroy || superPrototype.onDestroy;\n        definition.onInit = definition.onInit || superPrototype.onInit;\n      }\n    }\n    superType = Object.getPrototypeOf(superType);\n  }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction maybeUnwrapEmpty(value) {\n  if (value === EMPTY_OBJ) {\n    return {};\n  } else if (value === EMPTY_ARRAY) {\n    return [];\n  } else {\n    return value;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst PRIVATE_PREFIX = '__ngOnChanges_';\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {\\@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ngComponentDef = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n * @template T\n * @param {?} definition\n * @return {?}\n */\nfunction NgOnChangesFeature(definition) {\n  /** @type {?} */\n  const publicToDeclaredInputs = definition.declaredInputs;\n  /** @type {?} */\n  const publicToMinifiedInputs = definition.inputs;\n  /** @type {?} */\n  const proto = definition.type.prototype;\n  for (const publicName in publicToDeclaredInputs) {\n    if (publicToDeclaredInputs.hasOwnProperty(publicName)) {\n      /** @type {?} */\n      const minifiedKey = publicToMinifiedInputs[publicName];\n      /** @type {?} */\n      const declaredKey = publicToDeclaredInputs[publicName];\n      /** @type {?} */\n      const privateMinKey = PRIVATE_PREFIX + minifiedKey;\n      // Walk the prototype chain to see if we find a property descriptor\n      // That way we can honor setters and getters that were inherited.\n      /** @type {?} */\n      let originalProperty = undefined;\n      /** @type {?} */\n      let checkProto = proto;\n      while (!originalProperty && checkProto && Object.getPrototypeOf(checkProto) !== Object.getPrototypeOf(Object.prototype)) {\n        originalProperty = Object.getOwnPropertyDescriptor(checkProto, minifiedKey);\n        checkProto = Object.getPrototypeOf(checkProto);\n      }\n      /** @type {?} */\n      const getter = originalProperty && originalProperty.get;\n      /** @type {?} */\n      const setter = originalProperty && originalProperty.set;\n      // create a getter and setter for property\n      Object.defineProperty(proto, minifiedKey, {\n        get: getter || (setter ? undefined : function () {\n          return this[privateMinKey];\n        }),\n        /**\n         * @template T\n         * @this {?}\n         * @param {?} value\n         * @return {?}\n         */\n        set(value) {\n          /** @type {?} */\n          let simpleChanges = this[PRIVATE_PREFIX];\n          if (!simpleChanges) {\n            simpleChanges = {};\n            // Place where we will store SimpleChanges if there is a change\n            Object.defineProperty(this, PRIVATE_PREFIX, {\n              value: simpleChanges,\n              writable: true\n            });\n          }\n          /** @type {?} */\n          const isFirstChange = !this.hasOwnProperty(privateMinKey);\n          /** @type {?} */\n          const currentChange = simpleChanges[declaredKey];\n          if (currentChange) {\n            currentChange.currentValue = value;\n          } else {\n            simpleChanges[declaredKey] = new SimpleChange(this[privateMinKey], value, isFirstChange);\n          }\n          if (isFirstChange) {\n            // Create a place where the actual value will be stored and make it non-enumerable\n            Object.defineProperty(this, privateMinKey, {\n              value,\n              writable: true\n            });\n          } else {\n            this[privateMinKey] = value;\n          }\n          if (setter) setter.call(this, value);\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode\n      });\n    }\n  }\n  // If an onInit hook is defined, it will need to wrap the ngOnChanges call\n  // so the call order is changes-init-check in creation mode. In subsequent\n  // change detection runs, only the check wrapper will be called.\n  if (definition.onInit != null) {\n    definition.onInit = onChangesWrapper(definition.onInit);\n  }\n  definition.doCheck = onChangesWrapper(definition.doCheck);\n}\n// This option ensures that the ngOnChanges lifecycle hook will be inherited\n// from superclasses (in InheritDefinitionFeature).\n/** @type {?} */NgOnChangesFeature.ngInherit = true;\n/**\n * @param {?} delegateHook\n * @return {?}\n */\nfunction onChangesWrapper(delegateHook) {\n  return function () {\n    /** @type {?} */\n    const simpleChanges = this[PRIVATE_PREFIX];\n    if (simpleChanges != null) {\n      this.ngOnChanges(simpleChanges);\n      this[PRIVATE_PREFIX] = null;\n    }\n    if (delegateHook) delegateHook.apply(this);\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {...?} args\n * @return {?}\n */\nfunction noop(...args) {\n  // Do nothing.\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SOURCE = '__source';\n/** @type {?} */\nconst _THROW_IF_NOT_FOUND = new Object();\n/** @type {?} */\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * \\@publicApi\n * @type {?}\n */\nconst INJECTOR$1 = new InjectionToken('INJECTOR');\nclass NullInjector {\n  /**\n   * @param {?} token\n   * @param {?=} notFoundValue\n   * @return {?}\n   */\n  get(token, notFoundValue = _THROW_IF_NOT_FOUND) {\n    if (notFoundValue === _THROW_IF_NOT_FOUND) {\n      // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n      // reason why correctly written application should cause this exception.\n      // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n      // if(ngDevMode) debugger;\n      throw new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n    }\n    return notFoundValue;\n  }\n}\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * \\@publicApi\n * @abstract\n */\nclass Injector {\n  /**\n   * Create a new Injector which is configure using `StaticProvider`s.\n   *\n   * \\@usageNotes\n   * ### Example\n   *\n   * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n   * @param {?} options\n   * @param {?=} parent\n   * @return {?}\n   */\n  static create(options, parent) {\n    if (Array.isArray(options)) {\n      return new StaticInjector(options, parent);\n    } else {\n      return new StaticInjector(options.providers, options.parent, options.name || null);\n    }\n  }\n}\nInjector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\nInjector.NULL = new NullInjector();\n/** @nocollapse */\n/** @nocollapse */\nInjector.ngInjectableDef = defineInjectable({\n  providedIn: /** @type {?} */'any',\n  factory: () => inject(INJECTOR$1)\n});\n/**\n * \\@internal\n */\nInjector.__NG_ELEMENT_ID__ = () => SWITCH_INJECTOR_FACTORY();\n/** @type {?} */\nconst SWITCH_INJECTOR_FACTORY__POST_R3__ = function () {\n  return injectInjector();\n};\n/** @type {?} */\nconst SWITCH_INJECTOR_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_INJECTOR_FACTORY = SWITCH_INJECTOR_FACTORY__PRE_R3__;\n/** @type {?} */\nconst IDENT = function (value) {\n  return value;\n};\n/** @type {?} */\nconst EMPTY = /** @type {?} */[];\n/** @type {?} */\nconst CIRCULAR = IDENT;\n/** @type {?} */\nconst MULTI_PROVIDER_FN = function () {\n  return Array.prototype.slice.call(arguments);\n};\n/** @type {?} */\nconst USE_VALUE = getClosureSafeProperty({\n  provide: String,\n  useValue: getClosureSafeProperty\n});\n/** @type {?} */\nconst NG_TOKEN_PATH = 'ngTokenPath';\n/** @type {?} */\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n/** @type {?} */\nconst NULL_INJECTOR$1 = Injector.NULL;\n/** @type {?} */\nconst NEW_LINE = /\\n/gm;\n/** @type {?} */\nconst NO_NEW_LINE = 'ɵ';\nclass StaticInjector {\n  /**\n   * @param {?} providers\n   * @param {?=} parent\n   * @param {?=} source\n   */\n  constructor(providers, parent = NULL_INJECTOR$1, source = null) {\n    this.parent = parent;\n    this.source = source;\n    /** @type {?} */\n    const records = this._records = new Map();\n    records.set(Injector, /** @type {?} */{\n      token: Injector,\n      fn: IDENT,\n      deps: EMPTY,\n      value: this,\n      useNew: false\n    });\n    records.set(INJECTOR$1, /** @type {?} */{\n      token: INJECTOR$1,\n      fn: IDENT,\n      deps: EMPTY,\n      value: this,\n      useNew: false\n    });\n    recursivelyProcessProviders(records, providers);\n  }\n  /**\n   * @param {?} token\n   * @param {?=} notFoundValue\n   * @param {?=} flags\n   * @return {?}\n   */\n  get(token, notFoundValue, flags = InjectFlags.Default) {\n    /** @type {?} */\n    const record = this._records.get(token);\n    try {\n      return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n    } catch (e) {\n      /** @type {?} */\n      const tokenPath = e[NG_TEMP_TOKEN_PATH];\n      if (token[SOURCE]) {\n        tokenPath.unshift(token[SOURCE]);\n      }\n      e.message = formatError('\\n' + e.message, tokenPath, this.source);\n      e[NG_TOKEN_PATH] = tokenPath;\n      e[NG_TEMP_TOKEN_PATH] = null;\n      throw e;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  toString() {\n    /** @type {?} */\n    const tokens = /** @type {?} */[];\n    /** @type {?} */\n    const records = this._records;\n    records.forEach((v, token) => tokens.push(stringify(token)));\n    return `StaticInjector[${tokens.join(', ')}]`;\n  }\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction resolveProvider(provider) {\n  /** @type {?} */\n  const deps = computeDeps(provider);\n  /** @type {?} */\n  let fn = IDENT;\n  /** @type {?} */\n  let value = EMPTY;\n  /** @type {?} */\n  let useNew = false;\n  /** @type {?} */\n  let provide = resolveForwardRef(provider.provide);\n  if (USE_VALUE in provider) {\n    // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n    value = /** @type {?} */provider.useValue;\n  } else if ( /** @type {?} */provider.useFactory) {\n    fn = /** @type {?} */provider.useFactory;\n  } else if ( /** @type {?} */provider.useExisting) ;else if ( /** @type {?} */provider.useClass) {\n    useNew = true;\n    fn = resolveForwardRef( /** @type {?} */provider.useClass);\n  } else if (typeof provide == 'function') {\n    useNew = true;\n    fn = provide;\n  } else {\n    throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n  }\n  return {\n    deps,\n    fn,\n    useNew,\n    value\n  };\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction multiProviderMixError(token) {\n  return staticError('Cannot mix multi providers and regular providers', token);\n}\n/**\n * @param {?} records\n * @param {?} provider\n * @return {?}\n */\nfunction recursivelyProcessProviders(records, provider) {\n  if (provider) {\n    provider = resolveForwardRef(provider);\n    if (provider instanceof Array) {\n      // if we have an array recurse into the array\n      for (let i = 0; i < provider.length; i++) {\n        recursivelyProcessProviders(records, provider[i]);\n      }\n    } else if (typeof provider === 'function') {\n      // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n      // error messages\n      throw staticError('Function/Class not supported', provider);\n    } else if (provider && typeof provider === 'object' && provider.provide) {\n      // At this point we have what looks like a provider: {provide: ?, ....}\n      /** @type {?} */\n      let token = resolveForwardRef(provider.provide);\n      /** @type {?} */\n      const resolvedProvider = resolveProvider(provider);\n      if (provider.multi === true) {\n        // This is a multi provider.\n        /** @type {?} */\n        let multiProvider = records.get(token);\n        if (multiProvider) {\n          if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n            throw multiProviderMixError(token);\n          }\n        } else {\n          // Create a placeholder factory which will look up the constituents of the multi provider.\n          records.set(token, multiProvider = /** @type {?} */{\n            token: provider.provide,\n            deps: [],\n            useNew: false,\n            fn: MULTI_PROVIDER_FN,\n            value: EMPTY\n          });\n        }\n        // Treat the provider as the token.\n        token = provider;\n        multiProvider.deps.push({\n          token,\n          options: 6 /* Default */\n        });\n      }\n      /** @type {?} */\n      const record = records.get(token);\n      if (record && record.fn == MULTI_PROVIDER_FN) {\n        throw multiProviderMixError(token);\n      }\n      records.set(token, resolvedProvider);\n    } else {\n      throw staticError('Unexpected provider', provider);\n    }\n  }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n  try {\n    return resolveToken(token, record, records, parent, notFoundValue, flags);\n  } catch (e) {\n    // ensure that 'e' is of type Error.\n    if (!(e instanceof Error)) {\n      e = new Error(e);\n    }\n    /** @type {?} */\n    const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n    path.unshift(token);\n    if (record && record.value == CIRCULAR) {\n      // Reset the Circular flag.\n      record.value = EMPTY;\n    }\n    throw e;\n  }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\n  /** @type {?} */\n  let value;\n  if (record && !(flags & InjectFlags.SkipSelf)) {\n    // If we don't have a record, this implies that we don't own the provider hence don't know how\n    // to resolve it.\n    value = record.value;\n    if (value == CIRCULAR) {\n      throw Error(NO_NEW_LINE + 'Circular dependency');\n    } else if (value === EMPTY) {\n      record.value = CIRCULAR;\n      /** @type {?} */\n      let obj = undefined;\n      /** @type {?} */\n      let useNew = record.useNew;\n      /** @type {?} */\n      let fn = record.fn;\n      /** @type {?} */\n      let depRecords = record.deps;\n      /** @type {?} */\n      let deps = EMPTY;\n      if (depRecords.length) {\n        deps = [];\n        for (let i = 0; i < depRecords.length; i++) {\n          /** @type {?} */\n          const depRecord = depRecords[i];\n          /** @type {?} */\n          const options = depRecord.options;\n          /** @type {?} */\n          const childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n          deps.push(tryResolveToken(\n          // Current Token to resolve\n          depRecord.token,\n          // A record which describes how to resolve the token.\n          // If undefined, this means we don't have such a record\n          childRecord,\n          // Other records we know about.\n          records,\n          // If we don't know how to resolve dependency and we should not check parent for it,\n          // than pass in Null injector.\n          !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR$1 : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, InjectFlags.Default));\n        }\n      }\n      record.value = value = useNew ? new /** @type {?} */fn(...deps) : fn.apply(obj, deps);\n    }\n  } else if (!(flags & InjectFlags.Self)) {\n    value = parent.get(token, notFoundValue, InjectFlags.Default);\n  }\n  return value;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction computeDeps(provider) {\n  /** @type {?} */\n  let deps = EMPTY;\n  /** @type {?} */\n  const providerDeps = /** @type {?} */provider.deps;\n  if (providerDeps && providerDeps.length) {\n    deps = [];\n    for (let i = 0; i < providerDeps.length; i++) {\n      /** @type {?} */\n      let options = 6 /* Default */;\n      /** @type {?} */\n      let token = resolveForwardRef(providerDeps[i]);\n      if (token instanceof Array) {\n        for (let j = 0, annotations = token; j < annotations.length; j++) {\n          /** @type {?} */\n          const annotation = annotations[j];\n          if (annotation instanceof Optional || annotation == Optional) {\n            options = options | 1 /* Optional */;\n          } else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n            options = options & ~2 /* CheckSelf */;\n          } else if (annotation instanceof Self || annotation == Self) {\n            options = options & ~4 /* CheckParent */;\n          } else if (annotation instanceof Inject) {\n            token = /** @type {?} */annotation.token;\n          } else {\n            token = resolveForwardRef(annotation);\n          }\n        }\n      }\n      deps.push({\n        token,\n        options\n      });\n    }\n  } else if ( /** @type {?} */provider.useExisting) {\n    /** @type {?} */\n    const token = resolveForwardRef( /** @type {?} */provider.useExisting);\n    deps = [{\n      token,\n      options: 6 /* Default */\n    }];\n  } else if (!providerDeps && !(USE_VALUE in provider)) {\n    // useValue & useExisting are the only ones which are exempt from deps all others need it.\n    throw staticError('\\'deps\\' required', provider);\n  }\n  return deps;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @param {?=} source\n * @return {?}\n */\nfunction formatError(text, obj, source = null) {\n  text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n  /** @type {?} */\n  let context = stringify(obj);\n  if (obj instanceof Array) {\n    context = obj.map(stringify).join(' -> ');\n  } else if (typeof obj === 'object') {\n    /** @type {?} */\n    let parts = /** @type {?} */[];\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        /** @type {?} */\n        let value = obj[key];\n        parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n      }\n    }\n    context = `{${parts.join(', ')}}`;\n  }\n  return `StaticInjectorError${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @return {?}\n */\nfunction staticError(text, obj) {\n  return new Error(formatError(text, obj));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n * @type {?}\n */\nconst APP_ROOT = new InjectionToken('The presence of this token marks an injector as being the root injector.');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n * @type {?}\n */\nconst NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n * @type {?}\n */\nconst CIRCULAR$1 = {};\n/** @type {?} */\nconst EMPTY_ARRAY$1 = /** @type {?} */[];\n/**\n * A lazily initialized NullInjector.\n * @type {?}\n */\nlet NULL_INJECTOR$2 = undefined;\n/**\n * @return {?}\n */\nfunction getNullInjector() {\n  if (NULL_INJECTOR$2 === undefined) {\n    NULL_INJECTOR$2 = new NullInjector();\n  }\n  return NULL_INJECTOR$2;\n}\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * \\@publicApi\n * @param {?} defType\n * @param {?=} parent\n * @param {?=} additionalProviders\n * @return {?}\n */\nfunction createInjector(defType, parent = null, additionalProviders = null) {\n  parent = parent || getNullInjector();\n  return new R3Injector(defType, additionalProviders, parent);\n}\nclass R3Injector {\n  /**\n   * @param {?} def\n   * @param {?} additionalProviders\n   * @param {?} parent\n   */\n  constructor(def, additionalProviders, parent) {\n    this.parent = parent;\n    /**\n     * Map of tokens to records which contain the instances of those tokens.\n     */\n    this.records = new Map();\n    /**\n     * The transitive set of `InjectorType`s which define this injector.\n     */\n    this.injectorDefTypes = new Set();\n    /**\n     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n     */\n    this.onDestroy = new Set();\n    /**\n     * Flag indicating that this injector was previously destroyed.\n     */\n    this.destroyed = false;\n    // Start off by creating Records for every provider declared in every InjectorType\n    // included transitively in `def`.\n    /** @type {?} */\n    const dedupStack = [];\n    deepForEach([def], injectorDef => this.processInjectorType(injectorDef, [], dedupStack));\n    additionalProviders && deepForEach(additionalProviders, provider => this.processProvider(provider, def, additionalProviders));\n    // Make sure the INJECTOR token provides this injector.\n    this.records.set(INJECTOR$1, makeRecord(undefined, this));\n    // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n    // any injectable scoped to APP_ROOT_SCOPE.\n    this.isRootInjector = this.records.has(APP_ROOT);\n    // Eagerly instantiate the InjectorType classes themselves.\n    this.injectorDefTypes.forEach(defType => this.get(defType));\n  }\n  /**\n   * Destroy the injector and release references to every instance or provider associated with it.\n   *\n   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n   * hook was found.\n   * @return {?}\n   */\n  destroy() {\n    this.assertNotDestroyed();\n    // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n    this.destroyed = true;\n    try {\n      // Call all the lifecycle hooks.\n      this.onDestroy.forEach(service => service.ngOnDestroy());\n    } finally {\n      // Release all references.\n      this.records.clear();\n      this.onDestroy.clear();\n      this.injectorDefTypes.clear();\n    }\n  }\n  /**\n   * @template T\n   * @param {?} token\n   * @param {?=} notFoundValue\n   * @param {?=} flags\n   * @return {?}\n   */\n  get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n    this.assertNotDestroyed();\n    // Set the injection context.\n    /** @type {?} */\n    const previousInjector = setCurrentInjector(this);\n    try {\n      // Check for the SkipSelf flag.\n      if (!(flags & InjectFlags.SkipSelf)) {\n        // SkipSelf isn't set, check if the record belongs to this injector.\n        /** @type {?} */\n        let record = this.records.get(token);\n        if (record === undefined) {\n          // No record, but maybe the token is scoped to this injector. Look for an ngInjectableDef\n          // with a scope matching this injector.\n          /** @type {?} */\n          const def = couldBeInjectableType(token) && getInjectableDef(token);\n          if (def && this.injectableDefInScope(def)) {\n            // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\n            // all along.\n            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n            this.records.set(token, record);\n          }\n        }\n        // If a record was found, get the instance for it and return it.\n        if (record !== undefined) {\n          return this.hydrate(token, record);\n        }\n      }\n      // Select the next injector based on the Self flag - if self is set, the next injector is\n      // the NullInjector, otherwise it's the parent.\n      /** @type {?} */\n      const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n      return nextInjector.get(token, notFoundValue);\n    } finally {\n      // Lastly, clean up the state by restoring the previous injector.\n      setCurrentInjector(previousInjector);\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  assertNotDestroyed() {\n    if (this.destroyed) {\n      throw new Error('Injector has already been destroyed.');\n    }\n  }\n  /**\n   * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n   * to this injector.\n   * @private\n   * @param {?} defOrWrappedDef\n   * @param {?} parents\n   * @param {?} dedupStack\n   * @return {?}\n   */\n  processInjectorType(defOrWrappedDef, parents, dedupStack) {\n    defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n    if (!defOrWrappedDef) return;\n    // Either the defOrWrappedDef is an InjectorType (with ngInjectorDef) or an\n    // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\n    // read, so care is taken to only do the read once.\n    // First attempt to read the ngInjectorDef.\n    /** @type {?} */\n    let def = getInjectorDef(defOrWrappedDef);\n    // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\n    /** @type {?} */\n    const ngModule = def == null && /** @type {?} */defOrWrappedDef.ngModule || undefined;\n    // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,\n    // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\n    // is the `ngModule`.\n    /** @type {?} */\n    const defType = ngModule === undefined ? /** @type {?} */defOrWrappedDef : ngModule;\n    // Check for circular dependencies.\n    if (ngDevMode && parents.indexOf(defType) !== -1) {\n      /** @type {?} */\n      const defName = stringify(defType);\n      throw new Error(`Circular dependency in DI detected for type ${defName}. Dependency path: ${parents.map(defType => stringify(defType)).join(' > ')} > ${defName}.`);\n    }\n    // Check for multiple imports of the same module\n    /** @type {?} */\n    const isDuplicate = dedupStack.indexOf(defType) !== -1;\n    // If defOrWrappedType was an InjectorDefTypeWithProviders, then .providers may hold some\n    // extra providers.\n    /** @type {?} */\n    const providers = ngModule !== undefined && /** @type {?} */defOrWrappedDef.providers || EMPTY_ARRAY$1;\n    // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n    // `InjectorDef` is on its `ngModule`.\n    if (ngModule !== undefined) {\n      def = getInjectorDef(ngModule);\n    }\n    // If no definition was found, it might be from exports. Remove it.\n    if (def == null) {\n      return;\n    }\n    // Track the InjectorType and add a provider for it.\n    this.injectorDefTypes.add(defType);\n    this.records.set(defType, makeRecord(def.factory, NOT_YET));\n    // Add providers in the same way that @NgModule resolution did:\n    // First, include providers from any imports.\n    if (def.imports != null && !isDuplicate) {\n      // Before processing defType's imports, add it to the set of parents. This way, if it ends\n      // up deeply importing itself, this can be detected.\n      ngDevMode && parents.push(defType);\n      // Add it to the set of dedups. This way we can detect multiple imports of the same module\n      dedupStack.push(defType);\n      try {\n        deepForEach(def.imports, imported => this.processInjectorType(imported, parents, dedupStack));\n      } finally {\n        // Remove it from the parents set when finished.\n        ngDevMode && parents.pop();\n      }\n    }\n    // Next, include providers listed on the definition itself.\n    /** @type {?} */\n    const defProviders = def.providers;\n    if (defProviders != null && !isDuplicate) {\n      /** @type {?} */\n      const injectorType = /** @type {?} */defOrWrappedDef;\n      deepForEach(defProviders, provider => this.processProvider(provider, injectorType, defProviders));\n    }\n    // Finally, include providers from an InjectorDefTypeWithProviders if there was one.\n    /** @type {?} */\n    const ngModuleType = /** @type {?} */defOrWrappedDef.ngModule;\n    deepForEach(providers, provider => this.processProvider(provider, ngModuleType, providers));\n  }\n  /**\n   * Process a `SingleProvider` and add it.\n   * @private\n   * @param {?} provider\n   * @param {?} ngModuleType\n   * @param {?} providers\n   * @return {?}\n   */\n  processProvider(provider, ngModuleType, providers) {\n    // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n    // property.\n    provider = resolveForwardRef(provider);\n    /** @type {?} */\n    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n    // Construct a `Record` for the provider.\n    /** @type {?} */\n    const record = providerToRecord(provider, ngModuleType, providers);\n    if (!isTypeProvider(provider) && provider.multi === true) {\n      // If the provider indicates that it's a multi-provider, process it specially.\n      // First check whether it's been defined already.\n      /** @type {?} */\n      let multiRecord = this.records.get(token);\n      if (multiRecord) {\n        // It has. Throw a nice error if\n        if (multiRecord.multi === undefined) {\n          throw new Error(`Mixed multi-provider for ${token}.`);\n        }\n      } else {\n        multiRecord = makeRecord(undefined, NOT_YET, true);\n        multiRecord.factory = () => injectArgs( /** @type {?} */ /** @type {?} */multiRecord.multi);\n        this.records.set(token, multiRecord);\n      }\n      token = provider;\n      /** @type {?} */multiRecord.multi.push(provider);\n    } else {\n      /** @type {?} */\n      const existing = this.records.get(token);\n      if (existing && existing.multi !== undefined) {\n        throw new Error(`Mixed multi-provider for ${stringify(token)}`);\n      }\n    }\n    this.records.set(token, record);\n  }\n  /**\n   * @private\n   * @template T\n   * @param {?} token\n   * @param {?} record\n   * @return {?}\n   */\n  hydrate(token, record) {\n    if (record.value === CIRCULAR$1) {\n      throw new Error(`Cannot instantiate cyclic dependency! ${stringify(token)}`);\n    } else if (record.value === NOT_YET) {\n      record.value = CIRCULAR$1;\n      record.value = /** @type {?} */record.factory();\n    }\n    if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n      this.onDestroy.add(record.value);\n    }\n    return (/** @type {?} */record.value\n    );\n  }\n  /**\n   * @private\n   * @param {?} def\n   * @return {?}\n   */\n  injectableDefInScope(def) {\n    if (!def.providedIn) {\n      return false;\n    } else if (typeof def.providedIn === 'string') {\n      return def.providedIn === 'any' || def.providedIn === 'root' && this.isRootInjector;\n    } else {\n      return this.injectorDefTypes.has(def.providedIn);\n    }\n  }\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction injectableDefOrInjectorDefFactory(token) {\n  /** @type {?} */\n  const injectableDef = getInjectableDef( /** @type {?} */token);\n  if (injectableDef === null) {\n    /** @type {?} */\n    const injectorDef = getInjectorDef( /** @type {?} */token);\n    if (injectorDef !== null) {\n      return injectorDef.factory;\n    } else if (token instanceof InjectionToken) {\n      throw new Error(`Token ${stringify(token)} is missing an ngInjectableDef definition.`);\n    } else if (token instanceof Function) {\n      /** @type {?} */\n      const paramLength = token.length;\n      if (paramLength > 0) {\n        /** @type {?} */\n        const args = new Array(paramLength).fill('?');\n        throw new Error(`Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n      }\n      return () => new /** @type {?} */token();\n    }\n    throw new Error('unreachable');\n  }\n  return injectableDef.factory;\n}\n/**\n * @param {?} provider\n * @param {?} ngModuleType\n * @param {?} providers\n * @return {?}\n */\nfunction providerToRecord(provider, ngModuleType, providers) {\n  /** @type {?} */\n  let factory = providerToFactory(provider, ngModuleType, providers);\n  if (isValueProvider(provider)) {\n    return makeRecord(undefined, provider.useValue);\n  } else {\n    return makeRecord(factory, NOT_YET);\n  }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param {?} provider provider to convert to factory\n * @param {?=} ngModuleType\n * @param {?=} providers\n * @return {?}\n */\nfunction providerToFactory(provider, ngModuleType, providers) {\n  /** @type {?} */\n  let factory = undefined;\n  if (isTypeProvider(provider)) {\n    return injectableDefOrInjectorDefFactory(resolveForwardRef(provider));\n  } else {\n    if (isValueProvider(provider)) {\n      factory = () => resolveForwardRef(provider.useValue);\n    } else if (isExistingProvider(provider)) {\n      factory = () => inject(resolveForwardRef(provider.useExisting));\n    } else if (isFactoryProvider(provider)) {\n      factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n    } else {\n      /** @type {?} */\n      const classRef = resolveForwardRef(provider && ( /** @type {?} */provider.useClass || provider.provide));\n      if (!classRef) {\n        /** @type {?} */\n        let ngModuleDetail = '';\n        if (ngModuleType && providers) {\n          /** @type {?} */\n          const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n          ngModuleDetail = ` - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`;\n        }\n        throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}'` + ngModuleDetail);\n      }\n      if (hasDeps(provider)) {\n        factory = () => new classRef(...injectArgs(provider.deps));\n      } else {\n        return injectableDefOrInjectorDefFactory(classRef);\n      }\n    }\n  }\n  return factory;\n}\n/**\n * @template T\n * @param {?} factory\n * @param {?} value\n * @param {?=} multi\n * @return {?}\n */\nfunction makeRecord(factory, value, multi = false) {\n  return {\n    factory: factory,\n    value: value,\n    multi: multi ? [] : undefined\n  };\n}\n/**\n * @template T\n * @param {?} input\n * @param {?} fn\n * @return {?}\n */\nfunction deepForEach(input, fn) {\n  input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isValueProvider(value) {\n  return value && typeof value == 'object' && USE_VALUE in value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isExistingProvider(value) {\n  return !!(value && /** @type {?} */value.useExisting);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFactoryProvider(value) {\n  return !!(value && /** @type {?} */value.useFactory);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isTypeProvider(value) {\n  return typeof value === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasDeps(value) {\n  return !! /** @type {?} */value.deps;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasOnDestroy(value) {\n  return typeof value === 'object' && value != null && /** @type {?} */value.ngOnDestroy && typeof /** @type {?} */value.ngOnDestroy === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction couldBeInjectableType(value) {\n  return typeof value === 'function' || typeof value === 'object' && value instanceof InjectionToken;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @template T\n * @param {?} def the directive definition\n * @param {?} providers\n * @param {?} viewProviders\n * @return {?}\n */\nfunction providersResolver(def, providers, viewProviders) {\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const tView = lView[TVIEW];\n  if (tView.firstTemplatePass) {\n    /** @type {?} */\n    const isComponent$$1 = isComponentDef(def);\n    // The list of view providers is processed first, and the flags are updated\n    resolveProvider$1(viewProviders, tView.data, tView.blueprint, isComponent$$1, true);\n    // Then, the list of providers is processed, and the flags are updated\n    resolveProvider$1(providers, tView.data, tView.blueprint, isComponent$$1, false);\n  }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n * @param {?} provider\n * @param {?} tInjectables\n * @param {?} lInjectablesBlueprint\n * @param {?} isComponent\n * @param {?} isViewProvider\n * @return {?}\n */\nfunction resolveProvider$1(provider, tInjectables, lInjectablesBlueprint, isComponent$$1, isViewProvider) {\n  provider = resolveForwardRef(provider);\n  if (Array.isArray(provider)) {\n    // Recursively call `resolveProvider`\n    // Recursion is OK in this case because this code will not be in hot-path once we implement\n    // cloning of the initial state.\n    for (let i = 0; i < provider.length; i++) {\n      resolveProvider$1(provider[i], tInjectables, lInjectablesBlueprint, isComponent$$1, isViewProvider);\n    }\n  } else {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n    /** @type {?} */\n    let providerFactory = providerToFactory(provider);\n    /** @type {?} */\n    const tNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const beginIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    const endIndex = tNode.directiveStart;\n    /** @type {?} */\n    const cptViewProvidersCount = tNode.providerIndexes >> 16 /* CptViewProvidersCountShift */;\n    if (isTypeProvider(provider) || !provider.multi) {\n      // Single provider case: the factory is created and pushed immediately\n      /** @type {?} */\n      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, directiveInject);\n      /** @type {?} */\n      const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n      if (existingFactoryIndex == -1) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode( /** @type {?} */tNode, lView), lView, token);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n        }\n\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        lInjectablesBlueprint[existingFactoryIndex] = factory;\n        lView[existingFactoryIndex] = factory;\n      }\n    } else {\n      // Multi provider case:\n      // We create a multi factory which is going to aggregate all the values.\n      // Since the output of such a factory depends on content or view injection,\n      // we create two of them, which are linked together.\n      //\n      // The first one (for view providers) is always in the first block of the injectables array,\n      // and the second one (for providers) is always in the second block.\n      // This is important because view providers have higher priority. When a multi token\n      // is being looked up, the view providers should be found first.\n      // Note that it is not possible to have a multi factory in the third block (directive block).\n      //\n      // The algorithm to process multi providers is as follows:\n      // 1) If the multi provider comes from the `viewProviders` of the component:\n      //   a) If the special view providers factory doesn't exist, it is created and pushed.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      // 2) If the multi provider comes from the `providers` of the component or of another\n      // directive:\n      //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n      //      It is also linked to the multi factory for view providers, if it exists.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      /** @type {?} */\n      const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n      /** @type {?} */\n      const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n      /** @type {?} */\n      const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];\n      /** @type {?} */\n      const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n      if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {\n        // Cases 1.a and 2.a\n        diPublicInInjector(getOrCreateNodeInjectorForNode( /** @type {?} */tNode, lView), lView, token);\n        /** @type {?} */\n        const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent$$1, providerFactory);\n        if (!isViewProvider && doesViewProvidersFactoryExist) {\n          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n        }\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n        }\n\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        // Cases 1.b and 2.b\n        multiFactoryAdd( /** @type {?} */lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent$$1);\n      }\n      if (!isViewProvider && isComponent$$1 && doesViewProvidersFactoryExist) {\n        /** @type {?} */lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;\n      }\n    }\n  }\n}\n/**\n * Add a factory in a multi factory.\n * @param {?} multiFactory\n * @param {?} factory\n * @param {?} isComponentProvider\n * @return {?}\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n  /** @type {?} */multiFactory.multi.push(factory);\n  if (isComponentProvider) {\n    /** @type {?} */multiFactory.componentProviders++;\n  }\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n * @param {?} item\n * @param {?} arr\n * @param {?} begin\n * @param {?} end\n * @return {?}\n */\nfunction indexOf(item, arr, begin, end) {\n  for (let i = begin; i < end; i++) {\n    if (arr[i] === item) return i;\n  }\n  return -1;\n}\n/**\n * Use this with `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n  return multiResolve( /** @type {?} */this.multi, []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lData, tNode) {\n  /** @type {?} */\n  const factories = /** @type {?} */this.multi;\n  /** @type {?} */\n  let result;\n  if (this.providerFactory) {\n    /** @type {?} */\n    const componentCount = /** @type {?} */this.providerFactory.componentProviders;\n    /** @type {?} */\n    const multiProviders = getNodeInjectable(tData, lData, /** @type {?} */ /** @type {?} */this.providerFactory.index, tNode);\n    // Copy the section of the array which contains `multi` `providers` from the component\n    result = multiProviders.slice(0, componentCount);\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n    // Copy the section of the array which contains `multi` `providers` from other directives\n    for (let i = componentCount; i < multiProviders.length; i++) {\n      result.push(multiProviders[i]);\n    }\n  } else {\n    result = [];\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n  }\n  return result;\n}\n/**\n * Maps an array of factories into an array of values.\n * @param {?} factories\n * @param {?} result\n * @return {?}\n */\nfunction multiResolve(factories, result) {\n  for (let i = 0; i < factories.length; i++) {\n    /** @type {?} */\n    const factory = /** @type {?} */ /** @type {?} */factories[i];\n    result.push(factory());\n  }\n  return result;\n}\n/**\n * Creates a multi factory.\n * @param {?} factoryFn\n * @param {?} index\n * @param {?} isViewProvider\n * @param {?} isComponent\n * @param {?} f\n * @return {?}\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent$$1, f) {\n  /** @type {?} */\n  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, directiveInject);\n  factory.multi = [];\n  factory.index = index;\n  factory.componentProviders = 0;\n  multiFactoryAdd(factory, f, isComponent$$1 && !isViewProvider);\n  return factory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ngComponentDef = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    consts: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        text(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        textBinding(0, bind(ctx.greeter.greet()));\n *      }\n *    },\n *    features: [ProvidersFeature([GreeterDE])]\n *  });\n * }\n *\n * @template T\n * @param {?} providers\n * @param {?=} viewProviders\n * @return {?}\n */\nfunction ProvidersFeature(providers, viewProviders = []) {\n  return definition => {\n    definition.providersResolver = def => providersResolver(def, providers, viewProviders);\n  };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass ComponentRef {}\n/**\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass ComponentFactory {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} component\n * @return {?}\n */\nfunction noComponentFactoryError(component) {\n  /** @type {?} */\n  const error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n  /** @type {?} */error[ERROR_COMPONENT] = component;\n  return error;\n}\n/** @type {?} */\nconst ERROR_COMPONENT = 'ngComponent';\nclass _NullComponentFactoryResolver {\n  /**\n   * @template T\n   * @param {?} component\n   * @return {?}\n   */\n  resolveComponentFactory(component) {\n    throw noComponentFactoryError(component);\n  }\n}\n/**\n * \\@publicApi\n * @abstract\n */\nclass ComponentFactoryResolver {}\nComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\nclass CodegenComponentFactoryResolver {\n  /**\n   * @param {?} factories\n   * @param {?} _parent\n   * @param {?} _ngModule\n   */\n  constructor(factories, _parent, _ngModule) {\n    this._parent = _parent;\n    this._ngModule = _ngModule;\n    this._factories = new Map();\n    for (let i = 0; i < factories.length; i++) {\n      /** @type {?} */\n      const factory = factories[i];\n      this._factories.set(factory.componentType, factory);\n    }\n  }\n  /**\n   * @template T\n   * @param {?} component\n   * @return {?}\n   */\n  resolveComponentFactory(component) {\n    /** @type {?} */\n    let factory = this._factories.get(component);\n    if (!factory && this._parent) {\n      factory = this._parent.resolveComponentFactory(component);\n    }\n    if (!factory) {\n      throw noComponentFactoryError(component);\n    }\n    return new ComponentFactoryBoundToModule(factory, this._ngModule);\n  }\n}\n/**\n * @template C\n */\nclass ComponentFactoryBoundToModule extends ComponentFactory {\n  /**\n   * @param {?} factory\n   * @param {?} ngModule\n   */\n  constructor(factory, ngModule) {\n    super();\n    this.factory = factory;\n    this.ngModule = ngModule;\n    this.selector = factory.selector;\n    this.componentType = factory.componentType;\n    this.ngContentSelectors = factory.ngContentSelectors;\n    this.inputs = factory.inputs;\n    this.outputs = factory.outputs;\n  }\n  /**\n   * @param {?} injector\n   * @param {?=} projectableNodes\n   * @param {?=} rootSelectorOrNode\n   * @param {?=} ngModule\n   * @return {?}\n   */\n  create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n    return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\n *\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n * NgModule Instance.\n *\n * \\@publicApi\n * @abstract\n * @template T\n */\nclass NgModuleRef {}\n/**\n * \\@publicApi\n * @abstract\n * @template T\n */\nclass NgModuleFactory {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass ViewRef {\n  /**\n   * @param {?} _lView\n   * @param {?} _context\n   * @param {?} _componentIndex\n   */\n  constructor(_lView, _context, _componentIndex) {\n    this._context = _context;\n    this._componentIndex = _componentIndex;\n    this._appRef = null;\n    this._viewContainerRef = null;\n    /**\n     * \\@internal\n     */\n    this._tViewNode = null;\n    this._lView = _lView;\n  }\n  /**\n   * @return {?}\n   */\n  get rootNodes() {\n    if (this._lView[HOST] == null) {\n      /** @type {?} */\n      const tView = /** @type {?} */this._lView[HOST_NODE];\n      return collectNativeNodes(this._lView, tView, []);\n    }\n    return [];\n  }\n  /**\n   * @return {?}\n   */\n  get context() {\n    return this._context ? this._context : this._lookUpContext();\n  }\n  /**\n   * @return {?}\n   */\n  get destroyed() {\n    return (this._lView[FLAGS] & 64 /* Destroyed */) === 64 /* Destroyed */;\n  }\n  /**\n   * @return {?}\n   */\n  destroy() {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._viewContainerRef) {\n      /** @type {?} */\n      const index = this._viewContainerRef.indexOf(this);\n      if (index > -1) {\n        this._viewContainerRef.detach(index);\n      }\n      this._viewContainerRef = null;\n    }\n    destroyLView(this._lView);\n  }\n  /**\n   * @param {?} callback\n   * @return {?}\n   */\n  onDestroy(callback) {\n    storeCleanupFn(this._lView, callback);\n  }\n  /**\n   * Marks a view and all of its ancestors dirty.\n   *\n   * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n   * multiple `markForCheck` calls to into one change detection run.\n   *\n   * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n   * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n   * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   * \\@usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * \\@Component({\n   *   selector: 'my-app',\n   *   template: `Number of ticks: {{numberOfTicks}}`\n   *   changeDetection: ChangeDetectionStrategy.OnPush,\n   * })\n   * class AppComponent {\n   *   numberOfTicks = 0;\n   *\n   *   constructor(private ref: ChangeDetectorRef) {\n   *     setInterval(() => {\n   *       this.numberOfTicks++;\n   *       // the following is required, otherwise the view will not be updated\n   *       this.ref.markForCheck();\n   *     }, 1000);\n   *   }\n   * }\n   * ```\n   * @return {?}\n   */\n  markForCheck() {\n    markViewDirty(this._lView);\n  }\n  /**\n   * Detaches the view from the change detection tree.\n   *\n   * Detached views will not be checked during change detection runs until they are\n   * re-attached, even if they are dirty. `detach` can be used in combination with\n   * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n   * detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * \\@usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds. We can do that by detaching\n   * the component's change detector and doing a local check every five seconds.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   // in a real application the returned data will be different every time\n   *   get data() {\n   *     return [1,2,3,4,5];\n   *   }\n   * }\n   *\n   * \\@Component({\n   *   selector: 'giant-list',\n   *   template: `\n   *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n   *   `,\n   * })\n   * class GiantList {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n   *     ref.detach();\n   *     setInterval(() => {\n   *       this.ref.detectChanges();\n   *     }, 5000);\n   *   }\n   * }\n   *  /\n   *   selector: 'app',\n   *   providers: [DataProvider],\n   *   template: `\n   *     <giant-list><giant-list>\n   *   `,\n   * })\n   * class App {\n   * }\n   * ```\n   * @return {?}\n   */\n  detach() {\n    this._lView[FLAGS] &= ~16 /* Attached */;\n  }\n  /**\n   * Re-attaches a view to the change detection tree.\n   *\n   * This can be used to re-attach views that were previously detached from the tree\n   * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   * \\@usageNotes\n   * ### Example\n   *\n   * The following example creates a component displaying `live` data. The component will detach\n   * its change detector from the main change detector tree when the component's live property\n   * is set to false.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   data = 1;\n   *\n   *   constructor() {\n   *     setInterval(() => {\n   *       this.data = this.data * 2;\n   *     }, 500);\n   *   }\n   * }\n   *\n   * \\@Component({\n   *   selector: 'live-data',\n   *   inputs: ['live'],\n   *   template: 'Data: {{dataProvider.data}}'\n   * })\n   * class LiveData {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n   *\n   *   set live(value) {\n   *     if (value) {\n   *       this.ref.reattach();\n   *     } else {\n   *       this.ref.detach();\n   *     }\n   *   }\n   * }\n   *  /\n   *   selector: 'my-app',\n   *   providers: [DataProvider],\n   *   template: `\n   *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n   *     <live-data [live]=\"live\"><live-data>\n   *   `,\n   * })\n   * class AppComponent {\n   *   live = true;\n   * }\n   * ```\n   * @return {?}\n   */\n  reattach() {\n    this._lView[FLAGS] |= 16 /* Attached */;\n  }\n  /**\n   * Checks the view and its children.\n   *\n   * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n   * local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * \\@usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine, the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds.\n   *\n   * We can do that by detaching the component's change detector and doing a local change detection\n   * check every five seconds.\n   *\n   * See {\\@link ChangeDetectorRef#detach detach} for more information.\n   * @return {?}\n   */\n  detectChanges() {\n    detectChangesInternal(this._lView, this.context);\n  }\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * This is used in development mode to verify that running change detection doesn't\n   * introduce other changes.\n   * @return {?}\n   */\n  checkNoChanges() {\n    checkNoChanges(this.context);\n  }\n  /**\n   * @param {?} vcRef\n   * @return {?}\n   */\n  attachToViewContainerRef(vcRef) {\n    if (this._appRef) {\n      throw new Error('This view is already attached directly to the ApplicationRef!');\n    }\n    this._viewContainerRef = vcRef;\n  }\n  /**\n   * @return {?}\n   */\n  detachFromAppRef() {\n    this._appRef = null;\n  }\n  /**\n   * @param {?} appRef\n   * @return {?}\n   */\n  attachToAppRef(appRef) {\n    if (this._viewContainerRef) {\n      throw new Error('This view is already attached to a ViewContainer!');\n    }\n    this._appRef = appRef;\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _lookUpContext() {\n    return this._context = /** @type {?} */ /** @type {?} */this._lView[PARENT][this._componentIndex];\n  }\n}\n/**\n * \\@internal\n * @template T\n */\nclass RootViewRef extends ViewRef {\n  /**\n   * @param {?} _view\n   */\n  constructor(_view) {\n    super(_view, null, -1);\n    this._view = _view;\n  }\n  /**\n   * @return {?}\n   */\n  detectChanges() {\n    detectChangesInRootView(this._view);\n  }\n  /**\n   * @return {?}\n   */\n  checkNoChanges() {\n    checkNoChangesInRootView(this._view);\n  }\n  /**\n   * @return {?}\n   */\n  get context() {\n    return (/** @type {?} */null\n    );\n  }\n}\n/**\n * @param {?} lView\n * @param {?} parentTNode\n * @param {?} result\n * @return {?}\n */\nfunction collectNativeNodes(lView, parentTNode, result) {\n  /** @type {?} */\n  let tNodeChild = parentTNode.child;\n  while (tNodeChild) {\n    result.push(getNativeByTNode(tNodeChild, lView));\n    if (tNodeChild.type === 4 /* ElementContainer */) {\n      collectNativeNodes(lView, tNodeChild, result);\n    }\n    tNodeChild = tNodeChild.next;\n  }\n  return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @param {?} ElementRefToken\n * @return {?} The ElementRef instance to use\n */\nfunction injectElementRef(ElementRefToken) {\n  return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/** @type {?} */\nlet R3ElementRef;\n/**\n * Creates an ElementRef given a node.\n *\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} tNode The node for which you'd like an ElementRef\n * @param {?} view The view to which the node belongs\n * @return {?} The ElementRef instance to use\n */\nfunction createElementRef(ElementRefToken, tNode, view) {\n  if (!R3ElementRef) {\n    // TODO: Fix class name, should be ElementRef, but there appears to be a rollup bug\n    R3ElementRef = class ElementRef_ extends ElementRefToken {};\n  }\n  return new R3ElementRef(getNativeByTNode(tNode, view));\n}\n/** @type {?} */\nlet R3TemplateRef;\n/**\n * Creates a TemplateRef given a node.\n *\n * @template T\n * @param {?} TemplateRefToken\n * @param {?} ElementRefToken\n * @return {?} The TemplateRef instance to use\n */\nfunction injectTemplateRef(TemplateRefToken, ElementRefToken) {\n  return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @template T\n * @param {?} TemplateRefToken The TemplateRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a TemplateRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The TemplateRef instance to use\n */\nfunction createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {\n  if (!R3TemplateRef) {\n    // TODO: Fix class name, should be TemplateRef, but there appears to be a rollup bug\n    R3TemplateRef = class TemplateRef_ extends TemplateRefToken {\n      /**\n       * @param {?} _declarationParentView\n       * @param {?} elementRef\n       * @param {?} _tView\n       * @param {?} _renderer\n       * @param {?} _queries\n       * @param {?} _injectorIndex\n       */\n      constructor(_declarationParentView, elementRef, _tView, _renderer, _queries, _injectorIndex) {\n        super();\n        this._declarationParentView = _declarationParentView;\n        this.elementRef = elementRef;\n        this._tView = _tView;\n        this._renderer = _renderer;\n        this._queries = _queries;\n        this._injectorIndex = _injectorIndex;\n      }\n      /**\n       * @param {?} context\n       * @param {?=} container\n       * @param {?=} hostTNode\n       * @param {?=} hostView\n       * @param {?=} index\n       * @return {?}\n       */\n      createEmbeddedView(context, container$$1, hostTNode, hostView, index) {\n        /** @type {?} */\n        const lView = createEmbeddedViewAndNode(this._tView, context, this._declarationParentView, this._renderer, this._queries, this._injectorIndex);\n        if (container$$1) {\n          insertView(lView, container$$1, /** @type {?} */hostView, /** @type {?} */index, /** @type {?} */hostTNode.index);\n        }\n        renderEmbeddedTemplate(lView, this._tView, context);\n        /** @type {?} */\n        const viewRef = new ViewRef(lView, context, -1);\n        viewRef._tViewNode = /** @type {?} */lView[HOST_NODE];\n        return viewRef;\n      }\n    };\n  }\n  if (hostTNode.type === 0 /* Container */) {\n    /** @type {?} */\n    const hostContainer = hostView[hostTNode.index];\n    ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n    return new R3TemplateRef(hostView, createElementRef(ElementRefToken, hostTNode, hostView), /** @type {?} */hostTNode.tViews, getLView()[RENDERER], hostContainer[QUERIES], hostTNode.injectorIndex);\n  } else {\n    return null;\n  }\n}\n/** @type {?} */\nlet R3ViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @param {?} ViewContainerRefToken\n * @param {?} ElementRefToken\n * @return {?} The ViewContainerRef instance to use\n */\nfunction injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {\n  /** @type {?} */\n  const previousTNode = /** @type {?} */getPreviousOrParentTNode();\n  return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param {?} ViewContainerRefToken The ViewContainerRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a ViewContainerRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The ViewContainerRef instance to use\n */\nfunction createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {\n  if (!R3ViewContainerRef) {\n    // TODO: Fix class name, should be ViewContainerRef, but there appears to be a rollup bug\n    R3ViewContainerRef = class ViewContainerRef_ extends ViewContainerRefToken {\n      /**\n       * @param {?} _lContainer\n       * @param {?} _hostTNode\n       * @param {?} _hostView\n       */\n      constructor(_lContainer, _hostTNode, _hostView) {\n        super();\n        this._lContainer = _lContainer;\n        this._hostTNode = _hostTNode;\n        this._hostView = _hostView;\n        this._viewRefs = [];\n      }\n      /**\n       * @return {?}\n       */\n      get element() {\n        return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n      }\n      /**\n       * @return {?}\n       */\n      get injector() {\n        return new NodeInjector(this._hostTNode, this._hostView);\n      }\n      /**\n       * @deprecated No replacement\n       * @return {?}\n       */\n      get parentInjector() {\n        /** @type {?} */\n        const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n        /** @type {?} */\n        const parentView = getParentInjectorView(parentLocation, this._hostView);\n        /** @type {?} */\n        const parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);\n        return !hasParentInjector(parentLocation) || parentTNode == null ? new NodeInjector(null, this._hostView) : new NodeInjector(parentTNode, parentView);\n      }\n      /**\n       * @return {?}\n       */\n      clear() {\n        while (this._lContainer[VIEWS].length) {\n          this.remove(0);\n        }\n      }\n      /**\n       * @param {?} index\n       * @return {?}\n       */\n      get(index) {\n        return this._viewRefs[index] || null;\n      }\n      /**\n       * @return {?}\n       */\n      get length() {\n        return this._lContainer[VIEWS].length;\n      }\n      /**\n       * @template C\n       * @param {?} templateRef\n       * @param {?=} context\n       * @param {?=} index\n       * @return {?}\n       */\n      createEmbeddedView(templateRef, context, index) {\n        /** @type {?} */\n        const adjustedIdx = this._adjustIndex(index);\n        /** @type {?} */\n        const viewRef = /** @type {?} */templateRef.createEmbeddedView(context || /** @type {?} */{}, this._lContainer, this._hostTNode, this._hostView, adjustedIdx);\n        /** @type {?} */viewRef.attachToViewContainerRef(this);\n        this._viewRefs.splice(adjustedIdx, 0, viewRef);\n        return viewRef;\n      }\n      /**\n       * @template C\n       * @param {?} componentFactory\n       * @param {?=} index\n       * @param {?=} injector\n       * @param {?=} projectableNodes\n       * @param {?=} ngModuleRef\n       * @return {?}\n       */\n      createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {\n        /** @type {?} */\n        const contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && /** @type {?} */componentFactory.ngModule == null && contextInjector) {\n          ngModuleRef = contextInjector.get(NgModuleRef, null);\n        }\n        /** @type {?} */\n        const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n      }\n      /**\n       * @param {?} viewRef\n       * @param {?=} index\n       * @return {?}\n       */\n      insert(viewRef, index) {\n        if (viewRef.destroyed) {\n          throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        const lView = /** @type {?} */ /** @type {?} */viewRef._lView;\n        /** @type {?} */\n        const adjustedIdx = this._adjustIndex(index);\n        insertView(lView, this._lContainer, this._hostView, adjustedIdx, this._hostTNode.index);\n        /** @type {?} */\n        const beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer[VIEWS], this._lContainer[NATIVE]);\n        addRemoveViewFromContainer(lView, true, beforeNode);\n        /** @type {?} */viewRef.attachToViewContainerRef(this);\n        this._viewRefs.splice(adjustedIdx, 0, viewRef);\n        return viewRef;\n      }\n      /**\n       * @param {?} viewRef\n       * @param {?} newIndex\n       * @return {?}\n       */\n      move(viewRef, newIndex) {\n        if (viewRef.destroyed) {\n          throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        const index = this.indexOf(viewRef);\n        this.detach(index);\n        this.insert(viewRef, this._adjustIndex(newIndex));\n        return viewRef;\n      }\n      /**\n       * @param {?} viewRef\n       * @return {?}\n       */\n      indexOf(viewRef) {\n        return this._viewRefs.indexOf(viewRef);\n      }\n      /**\n       * @param {?=} index\n       * @return {?}\n       */\n      remove(index) {\n        /** @type {?} */\n        const adjustedIdx = this._adjustIndex(index, -1);\n        removeView(this._lContainer, this._hostTNode, adjustedIdx);\n        this._viewRefs.splice(adjustedIdx, 1);\n      }\n      /**\n       * @param {?=} index\n       * @return {?}\n       */\n      detach(index) {\n        /** @type {?} */\n        const adjustedIdx = this._adjustIndex(index, -1);\n        /** @type {?} */\n        const view = detachView(this._lContainer, adjustedIdx, !!this._hostTNode.detached);\n        /** @type {?} */\n        const wasDetached = this._viewRefs.splice(adjustedIdx, 1)[0] != null;\n        return wasDetached ? new ViewRef(view, view[CONTEXT], view[CONTAINER_INDEX]) : null;\n      }\n      /**\n       * @private\n       * @param {?=} index\n       * @param {?=} shift\n       * @return {?}\n       */\n      _adjustIndex(index, shift = 0) {\n        if (index == null) {\n          return this._lContainer[VIEWS].length + shift;\n        }\n        if (ngDevMode) {\n          assertGreaterThan(index, -1, 'index must be positive');\n          // +1 because it's legal to insert at the end.\n          assertLessThan(index, this._lContainer[VIEWS].length + 1 + shift, 'index');\n        }\n        return index;\n      }\n    };\n  }\n  ngDevMode && assertNodeOfPossibleTypes(hostTNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n  /** @type {?} */\n  let lContainer;\n  /** @type {?} */\n  const slotValue = hostView[hostTNode.index];\n  if (isLContainer(slotValue)) {\n    // If the host is a container, we don't need to create a new LContainer\n    lContainer = slotValue;\n    lContainer[ACTIVE_INDEX] = -1;\n  } else {\n    /** @type {?} */\n    const commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    // A container can be created on the root (topmost / bootstrapped) component and in this case we\n    // can't use LTree to insert container's marker node (both parent of a comment node and the\n    // commend node itself is located outside of elements hold by LTree). In this specific case we\n    // use low-level DOM manipulation to insert container's marker (comment) node.\n    if (isRootView(hostView)) {\n      /** @type {?} */\n      const renderer = hostView[RENDERER];\n      /** @type {?} */\n      const hostNative = /** @type {?} */getNativeByTNode(hostTNode, hostView);\n      /** @type {?} */\n      const parentOfHostNative = nativeParentNode(renderer, hostNative);\n      nativeInsertBefore(renderer, /** @type {?} */parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative));\n    } else {\n      appendChild(commentNode, hostTNode, hostView);\n    }\n    hostView[hostTNode.index] = lContainer = createLContainer(slotValue, hostTNode, hostView, commentNode, true);\n    addToViewTree(hostView, /** @type {?} */hostTNode.index, lContainer);\n  }\n  return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n}\n/**\n * Returns a ChangeDetectorRef (a.k.a. a ViewRef)\n * @return {?}\n */\nfunction injectChangeDetectorRef() {\n  return createViewRef(getPreviousOrParentTNode(), getLView(), null);\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param {?} hostTNode The node that is requesting a ChangeDetectorRef\n * @param {?} hostView The view to which the node belongs\n * @param {?} context The context for this change detector ref\n * @return {?} The ChangeDetectorRef to use\n */\nfunction createViewRef(hostTNode, hostView, context) {\n  if (isComponent(hostTNode)) {\n    /** @type {?} */\n    const componentIndex = hostTNode.directiveStart;\n    /** @type {?} */\n    const componentView = getComponentViewByIndex(hostTNode.index, hostView);\n    return new ViewRef(componentView, context, componentIndex);\n  } else if (hostTNode.type === 3 /* Element */) {\n    /** @type {?} */\n    const hostComponentView = findComponentView(hostView);\n    return new ViewRef(hostComponentView, hostComponentView[CONTEXT], -1);\n  }\n  return (/** @type {?} */null\n  );\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getOrCreateRenderer2(view) {\n  /** @type {?} */\n  const renderer = view[RENDERER];\n  if (isProceduralRenderer(renderer)) {\n    return (/** @type {?} */renderer\n    );\n  } else {\n    throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n  }\n}\n/**\n * Returns a Renderer2 (or throws when application was bootstrapped with Renderer3)\n * @return {?}\n */\nfunction injectRenderer2() {\n  return getOrCreateRenderer2(getLView());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * \\@publicApi\n * @template T\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nclass ElementRef {\n  /**\n   * @param {?} nativeElement\n   */\n  constructor(nativeElement) {\n    this.nativeElement = nativeElement;\n  }\n}\n/**\n * \\@internal\n */\nElementRef.__NG_ELEMENT_ID__ = () => SWITCH_ELEMENT_REF_FACTORY(ElementRef);\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = injectElementRef;\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * \\@publicApi\n */\nclass RenderComponentType {\n  /**\n   * @param {?} id\n   * @param {?} templateUrl\n   * @param {?} slotCount\n   * @param {?} encapsulation\n   * @param {?} styles\n   * @param {?} animations\n   */\n  constructor(id, templateUrl, slotCount, encapsulation, styles, animations) {\n    this.id = id;\n    this.templateUrl = templateUrl;\n    this.slotCount = slotCount;\n    this.encapsulation = encapsulation;\n    this.styles = styles;\n    this.animations = animations;\n  }\n}\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n * @abstract\n */\nclass RenderDebugInfo {}\n/**\n * @deprecated Use the `Renderer2` instead.\n * \\@publicApi\n * @abstract\n */\nclass Renderer {}\n/** @type {?} */\nconst Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * \\@publicApi\n * @abstract\n */\nclass RootRenderer {}\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@publicApi\n * @abstract\n */\nclass RendererFactory2 {}\n/** @enum {number} */\nconst RendererStyleFlags2 = {\n  /**\n   * Marks a style as important.\n   */\n  Important: 1,\n  /**\n   * Marks a style as using dash case naming (this-is-dash-case).\n   */\n  DashCase: 2\n};\nRendererStyleFlags2[RendererStyleFlags2.Important] = 'Important';\nRendererStyleFlags2[RendererStyleFlags2.DashCase] = 'DashCase';\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * \\@publicApi\n * @abstract\n */\nclass Renderer2 {}\n/**\n * \\@internal\n */\nRenderer2.__NG_ELEMENT_ID__ = () => SWITCH_RENDERER2_FACTORY();\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY__POST_R3__ = injectRenderer2;\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst SecurityContext = {\n  NONE: 0,\n  HTML: 1,\n  STYLE: 2,\n  SCRIPT: 3,\n  URL: 4,\n  RESOURCE_URL: 5\n};\nSecurityContext[SecurityContext.NONE] = 'NONE';\nSecurityContext[SecurityContext.HTML] = 'HTML';\nSecurityContext[SecurityContext.STYLE] = 'STYLE';\nSecurityContext[SecurityContext.SCRIPT] = 'SCRIPT';\nSecurityContext[SecurityContext.URL] = 'URL';\nSecurityContext[SecurityContext.RESOURCE_URL] = 'RESOURCE_URL';\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * \\@publicApi\n * @abstract\n */\nclass Sanitizer {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description Represents the version of Angular\n *\n * \\@publicApi\n */\nclass Version {\n  /**\n   * @param {?} full\n   */\n  constructor(full) {\n    this.full = full;\n    this.major = full.split('.')[0];\n    this.minor = full.split('.')[1];\n    this.patch = full.split('.').slice(2).join('.');\n  }\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('7.2.16');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ComponentFactoryResolver$1 extends ComponentFactoryResolver {\n  /**\n   * @param {?=} ngModule The NgModuleRef to which all resolved factories are bound.\n   */\n  constructor(ngModule) {\n    super();\n    this.ngModule = ngModule;\n  }\n  /**\n   * @template T\n   * @param {?} component\n   * @return {?}\n   */\n  resolveComponentFactory(component) {\n    ngDevMode && assertComponentType(component);\n    /** @type {?} */\n    const componentDef = /** @type {?} */getComponentDef(component);\n    return new ComponentFactory$1(componentDef, this.ngModule);\n  }\n}\n/**\n * @param {?} map\n * @return {?}\n */\nfunction toRefArray(map) {\n  /** @type {?} */\n  const array = [];\n  for (let nonMinified in map) {\n    if (map.hasOwnProperty(nonMinified)) {\n      /** @type {?} */\n      const minified = map[nonMinified];\n      array.push({\n        propName: minified,\n        templateName: nonMinified\n      });\n    }\n  }\n  return array;\n}\n/**\n * Default {\\@link RootContext} for all components rendered with {\\@link renderComponent}.\n * @type {?}\n */\nconst ROOT_CONTEXT = new InjectionToken('ROOT_CONTEXT_TOKEN', {\n  providedIn: 'root',\n  factory: () => createRootContext(inject(SCHEDULER))\n});\n/**\n * A change detection scheduler token for {\\@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {\\@link ROOT_CONTEXT} token.\n * @type {?}\n */\nconst SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n  providedIn: 'root',\n  factory: () => defaultScheduler\n});\n/** @type {?} */\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n/**\n * @param {?} rootViewInjector\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction createChainedInjector(rootViewInjector, moduleInjector) {\n  return {\n    get: (token, notFoundValue) => {\n      /** @type {?} */\n      const value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n      if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n      }\n      return moduleInjector.get(token, notFoundValue);\n    }\n  };\n}\n/**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nclass ComponentFactory$1 extends ComponentFactory {\n  /**\n   * @param {?} componentDef The component definition.\n   * @param {?=} ngModule The NgModuleRef to which the factory is bound.\n   */\n  constructor(componentDef, ngModule) {\n    super();\n    this.componentDef = componentDef;\n    this.ngModule = ngModule;\n    this.componentType = componentDef.type;\n    this.selector = /** @type {?} */componentDef.selectors[0][0];\n    this.ngContentSelectors = [];\n  }\n  /**\n   * @return {?}\n   */\n  get inputs() {\n    return toRefArray(this.componentDef.inputs);\n  }\n  /**\n   * @return {?}\n   */\n  get outputs() {\n    return toRefArray(this.componentDef.outputs);\n  }\n  /**\n   * @param {?} injector\n   * @param {?=} projectableNodes\n   * @param {?=} rootSelectorOrNode\n   * @param {?=} ngModule\n   * @return {?}\n   */\n  create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n    /** @type {?} */\n    const isInternalRootView = rootSelectorOrNode === undefined;\n    ngModule = ngModule || this.ngModule;\n    /** @type {?} */\n    const rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n    /** @type {?} */\n    const rendererFactory = /** @type {?} */rootViewInjector.get(RendererFactory2, domRendererFactory3);\n    /** @type {?} */\n    const sanitizer = rootViewInjector.get(Sanitizer, null);\n    /** @type {?} */\n    const hostRNode = isInternalRootView ? elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) : locateHostElement(rendererFactory, rootSelectorOrNode);\n    /** @type {?} */\n    const rootFlags = this.componentDef.onPush ? 8 /* Dirty */ | 128 /* IsRoot */ : 4 /* CheckAlways */ | 128 /* IsRoot */;\n    /** @type {?} */\n    const rootContext = !isInternalRootView ? rootViewInjector.get(ROOT_CONTEXT) : createRootContext();\n    /** @type {?} */\n    const renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n    if (rootSelectorOrNode && hostRNode) {\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      isProceduralRenderer(renderer) ? renderer.setAttribute(hostRNode, 'ng-version', VERSION.full) : hostRNode.setAttribute('ng-version', VERSION.full);\n    }\n    // Create the root view. Uses empty TView and ContentTemplate.\n    /** @type {?} */\n    const rootLView = createLView(null, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags, rendererFactory, renderer, sanitizer, rootViewInjector);\n    // rootView is the parent when bootstrapping\n    /** @type {?} */\n    const oldLView = enterView(rootLView, null);\n    /** @type {?} */\n    let component;\n    /** @type {?} */\n    let tElementNode;\n    try {\n      if (rendererFactory.begin) rendererFactory.begin();\n      /** @type {?} */\n      const componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, renderer);\n      tElementNode = /** @type {?} */getTNode(0, rootLView);\n      // Transform the arrays of native nodes into a structure that can be consumed by the\n      // projection instruction. This is needed to support the reprojection of these nodes.\n      if (projectableNodes) {\n        /** @type {?} */\n        let index = 0;\n        /** @type {?} */\n        const tView = rootLView[TVIEW];\n        /** @type {?} */\n        const projection$$1 = tElementNode.projection = [];\n        for (let i = 0; i < projectableNodes.length; i++) {\n          /** @type {?} */\n          const nodeList = projectableNodes[i];\n          /** @type {?} */\n          let firstTNode = null;\n          /** @type {?} */\n          let previousTNode = null;\n          for (let j = 0; j < nodeList.length; j++) {\n            if (tView.firstTemplatePass) {\n              // For dynamically created components such as ComponentRef, we create a new TView for\n              // each insert. This is not ideal since we should be sharing the TViews.\n              // Also the logic here should be shared with `component.ts`'s `renderComponent`\n              // method.\n              tView.expandoStartIndex++;\n              tView.blueprint.splice(++index + HEADER_OFFSET, 0, null);\n              tView.data.splice(index + HEADER_OFFSET, 0, null);\n              rootLView.splice(index + HEADER_OFFSET, 0, null);\n            }\n            /** @type {?} */\n            const tNode = createNodeAtIndex(index, 3 /* Element */, /** @type {?} */nodeList[j], null, null);\n            previousTNode ? previousTNode.next = tNode : firstTNode = tNode;\n            previousTNode = tNode;\n          }\n          projection$$1.push( /** @type {?} */firstTNode);\n        }\n      }\n      // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n      // executed here?\n      // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n      component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n      addToViewTree(rootLView, HEADER_OFFSET, componentView);\n      refreshDescendantViews(rootLView);\n    } finally {\n      leaveView(oldLView);\n      if (rendererFactory.end) rendererFactory.end();\n    }\n    /** @type {?} */\n    const componentRef = new ComponentRef$1(this.componentType, component, createElementRef(ElementRef, tElementNode, rootLView), rootLView, tElementNode);\n    if (isInternalRootView) {\n      // The host element of the internal root view is attached to the component's host view node\n      /** @type {?} */componentRef.hostView._tViewNode.child = tElementNode;\n    }\n    return componentRef;\n  }\n}\n/** @type {?} */\nconst componentFactoryResolver = new ComponentFactoryResolver$1();\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nclass ComponentRef$1 extends ComponentRef {\n  /**\n   * @param {?} componentType\n   * @param {?} instance\n   * @param {?} location\n   * @param {?} _rootLView\n   * @param {?} _tNode\n   */\n  constructor(componentType, instance, location, _rootLView, _tNode) {\n    super();\n    this.location = location;\n    this._rootLView = _rootLView;\n    this._tNode = _tNode;\n    this.destroyCbs = [];\n    this.instance = instance;\n    this.hostView = this.changeDetectorRef = new RootViewRef(_rootLView);\n    this.hostView._tViewNode = createViewNode(-1, _rootLView);\n    this.componentType = componentType;\n  }\n  /**\n   * @return {?}\n   */\n  get injector() {\n    return new NodeInjector(this._tNode, this._rootLView);\n  }\n  /**\n   * @return {?}\n   */\n  destroy() {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    /** @type {?} */this.destroyCbs.forEach(fn => fn());\n    this.destroyCbs = null;\n    this.hostView.destroy();\n  }\n  /**\n   * @param {?} callback\n   * @return {?}\n   */\n  onDestroy(callback) {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    /** @type {?} */this.destroyCbs.push(callback);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n *\n * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n * please see [BAZEL.md](./docs/BAZEL.md).\n */\n/** @type {?} */\nlet _devMode = true;\n/** @type {?} */\nlet _runModeLocked = false;\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction isDevMode() {\n  _runModeLocked = true;\n  return _devMode;\n}\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * \\@publicApi\n * @return {?}\n */\nfunction enableProdMode() {\n  if (_runModeLocked) {\n    throw new Error('Cannot enable prod mode after platform setup.');\n  }\n  _devMode = false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nclass InertBodyHelper {\n  /**\n   * @param {?} defaultDoc\n   */\n  constructor(defaultDoc) {\n    this.defaultDoc = defaultDoc;\n    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n    this.inertBodyElement = this.inertDocument.body;\n    if (this.inertBodyElement == null) {\n      // usually there should be only one body element in the document, but IE doesn't have any, so\n      // we need to create one.\n      /** @type {?} */\n      const inertHtml = this.inertDocument.createElement('html');\n      this.inertDocument.appendChild(inertHtml);\n      this.inertBodyElement = this.inertDocument.createElement('body');\n      inertHtml.appendChild(this.inertBodyElement);\n    }\n    this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n    if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n      // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n      // so use the XHR strategy.\n      this.getInertBodyElement = this.getInertBodyElement_XHR;\n      return;\n    }\n    this.inertBodyElement.innerHTML = '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n    if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n      // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n      // so use the DOMParser strategy, if it is available.\n      // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n      // fall through to the default strategy below.\n      if (isDOMParserAvailable()) {\n        this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n        return;\n      }\n    }\n    // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n    this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n  }\n  /**\n   * Use XHR to create and fill an inert body element (on Safari 10.1)\n   * See\n   * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n   * @private\n   * @param {?} html\n   * @return {?}\n   */\n  getInertBodyElement_XHR(html) {\n    // We add these extra elements to ensure that the rest of the content is parsed as expected\n    // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n    // `<head>` tag.\n    html = '<body><remove></remove>' + html + '</body>';\n    try {\n      html = encodeURI(html);\n    } catch (_a) {\n      return null;\n    }\n    /** @type {?} */\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = 'document';\n    xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n    xhr.send(undefined);\n    /** @type {?} */\n    const body = xhr.response.body;\n    body.removeChild( /** @type {?} */body.firstChild);\n    return body;\n  }\n  /**\n   * Use DOMParser to create and fill an inert body element (on Firefox)\n   * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n   *\n   * @private\n   * @param {?} html\n   * @return {?}\n   */\n  getInertBodyElement_DOMParser(html) {\n    // We add these extra elements to ensure that the rest of the content is parsed as expected\n    // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n    // `<head>` tag.\n    html = '<body><remove></remove>' + html + '</body>';\n    try {\n      /** @type {?} */\n      const body = /** @type {?} */new /** @type {?} */window.DOMParser().parseFromString(html, 'text/html').body;\n      body.removeChild( /** @type {?} */body.firstChild);\n      return body;\n    } catch (_a) {\n      return null;\n    }\n  }\n  /**\n   * Use an HTML5 `template` element, if supported, or an inert body element created via\n   * `createHtmlDocument` to create and fill an inert DOM element.\n   * This is the default sane strategy to use if the browser does not require one of the specialised\n   * strategies above.\n   * @private\n   * @param {?} html\n   * @return {?}\n   */\n  getInertBodyElement_InertDocument(html) {\n    // Prefer using <template> element if supported.\n    /** @type {?} */\n    const templateEl = this.inertDocument.createElement('template');\n    if ('content' in templateEl) {\n      templateEl.innerHTML = html;\n      return templateEl;\n    }\n    this.inertBodyElement.innerHTML = html;\n    // Support: IE 9-11 only\n    // strip custom-namespaced attributes on IE<=11\n    if ( /** @type {?} */this.defaultDoc.documentMode) {\n      this.stripCustomNsAttrs(this.inertBodyElement);\n    }\n    return this.inertBodyElement;\n  }\n  /**\n   * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n   * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n   * 'ns1:xlink:foo').\n   *\n   * This is undesirable since we don't want to allow any of these custom attributes. This method\n   * strips them all.\n   * @private\n   * @param {?} el\n   * @return {?}\n   */\n  stripCustomNsAttrs(el) {\n    /** @type {?} */\n    const elAttrs = el.attributes;\n    // loop backwards so that we can support removals.\n    for (let i = elAttrs.length - 1; 0 < i; i--) {\n      /** @type {?} */\n      const attrib = elAttrs.item(i);\n      /** @type {?} */\n      const attrName = /** @type {?} */attrib.name;\n      if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n        el.removeAttribute(attrName);\n      }\n    }\n    /** @type {?} */\n    let childNode = /** @type {?} */el.firstChild;\n    while (childNode) {\n      if (childNode.nodeType === Node.ELEMENT_NODE) this.stripCustomNsAttrs( /** @type {?} */childNode);\n      childNode = childNode.nextSibling;\n    }\n  }\n}\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n * @return {?}\n */\nfunction isDOMParserAvailable() {\n  try {\n    return !! /** @type {?} */window.DOMParser;\n  } catch (_a) {\n    return false;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either an allowed protocol (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n * @type {?}\n */\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/**\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n * @type {?}\n */\nconst DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {?} url\n * @return {?}\n */\nfunction _sanitizeUrl(url) {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;\n  if (isDevMode()) {\n    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see http://g.co/ng/security#xss)`);\n  }\n  return 'unsafe:' + url;\n}\n/**\n * @param {?} srcset\n * @return {?}\n */\nfunction sanitizeSrcset(srcset) {\n  srcset = String(srcset);\n  return srcset.split(',').map(srcset => _sanitizeUrl(srcset.trim())).join(', ');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags) {\n  /** @type {?} */\n  const res = {};\n  for (const t of tags.split(',')) res[t] = true;\n  return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge$1(...sets) {\n  /** @type {?} */\n  const res = {};\n  for (const s of sets) {\n    for (const v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\n/** @type {?} */\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\n/** @type {?} */\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\n/** @type {?} */\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\n/** @type {?} */\nconst OPTIONAL_END_TAG_ELEMENTS = merge$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\n/** @type {?} */\nconst BLOCK_ELEMENTS = merge$1(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\n/** @type {?} */\nconst INLINE_ELEMENTS = merge$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n/** @type {?} */\nconst VALID_ELEMENTS = merge$1(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\n/** @type {?} */\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n// Attributes that have special href set hence need to be sanitized\n/** @type {?} */\nconst SRCSET_ATTRS = tagSet('srcset');\n/** @type {?} */\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n/** @type {?} */\nconst VALID_ATTRS = merge$1(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\n/** @type {?} */\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n  constructor() {\n    // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n    // because characters were re-encoded.\n    this.sanitizedSomething = false;\n    this.buf = [];\n  }\n  /**\n   * @param {?} el\n   * @return {?}\n   */\n  sanitizeChildren(el) {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    /** @type {?} */\n    let current = /** @type {?} */el.firstChild;\n    /** @type {?} */\n    let traverseContent = true;\n    while (current) {\n      if (current.nodeType === Node.ELEMENT_NODE) {\n        traverseContent = this.startElement( /** @type {?} */current);\n      } else if (current.nodeType === Node.TEXT_NODE) {\n        this.chars( /** @type {?} */current.nodeValue);\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (traverseContent && current.firstChild) {\n        current = /** @type {?} */current.firstChild;\n        continue;\n      }\n      while (current) {\n        // Leaving the element. Walk up and to the right, closing tags as we go.\n        if (current.nodeType === Node.ELEMENT_NODE) {\n          this.endElement( /** @type {?} */current);\n        }\n        /** @type {?} */\n        let next = this.checkClobberedElement(current, /** @type {?} */current.nextSibling);\n        if (next) {\n          current = next;\n          break;\n        }\n        current = this.checkClobberedElement(current, /** @type {?} */current.parentNode);\n      }\n    }\n    return this.buf.join('');\n  }\n  /**\n   * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n   * be traversed. Element content must always be traversed (even if the element itself is not\n   * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n   *\n   * @private\n   * @param {?} element The element to sanitize.\n   * @return {?} True if the element's contents should be traversed.\n   */\n  startElement(element) {\n    /** @type {?} */\n    const tagName = element.nodeName.toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    /** @type {?} */\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      /** @type {?} */\n      const elAttr = elAttrs.item(i);\n      /** @type {?} */\n      const attrName = /** @type {?} */elAttr.name;\n      /** @type {?} */\n      const lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        continue;\n      }\n      /** @type {?} */\n      let value = /** @type {?} */elAttr.value;\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);\n      if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);\n      this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n    }\n    this.buf.push('>');\n    return true;\n  }\n  /**\n   * @private\n   * @param {?} current\n   * @return {?}\n   */\n  endElement(current) {\n    /** @type {?} */\n    const tagName = current.nodeName.toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n  /**\n   * @private\n   * @param {?} chars\n   * @return {?}\n   */\n  chars(chars) {\n    this.buf.push(encodeEntities(chars));\n  }\n  /**\n   * @param {?} node\n   * @param {?} nextNode\n   * @return {?}\n   */\n  checkClobberedElement(node, nextNode) {\n    if (nextNode && (node.compareDocumentPosition(nextNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n      throw new Error(`Failed to sanitize html because the element is clobbered: ${/** @type {?} */node.outerHTML}`);\n    }\n    return nextNode;\n  }\n}\n// Regular Expressions for parsing tags and attributes\n/** @type {?} */\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\n/** @type {?} */\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value) {\n  return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {\n    /** @type {?} */\n    const hi = match.charCodeAt(0);\n    /** @type {?} */\n    const low = match.charCodeAt(1);\n    return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';\n  }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {\n    return '&#' + match.charCodeAt(0) + ';';\n  }).replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n/** @type {?} */\nlet inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n  /** @type {?} */\n  let inertBodyElement = null;\n  try {\n    inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    /** @type {?} */\n    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    /** @type {?} */\n    let mXSSAttempts = 5;\n    /** @type {?} */\n    let parsedHtml = unsafeHtml;\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n      unsafeHtml = parsedHtml;\n      parsedHtml = /** @type {?} */inertBodyElement.innerHTML;\n      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    } while (unsafeHtml !== parsedHtml);\n    /** @type {?} */\n    const sanitizer = new SanitizingHtmlSerializer();\n    /** @type {?} */\n    const safeHtml = sanitizer.sanitizeChildren( /** @type {?} */getTemplateContent( /** @type {?} */inertBodyElement) || inertBodyElement);\n    if (isDevMode() && sanitizer.sanitizedSomething) {\n      console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');\n    }\n    return safeHtml;\n  } finally {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    if (inertBodyElement) {\n      /** @type {?} */\n      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n      while (parent.firstChild) {\n        parent.removeChild(parent.firstChild);\n      }\n    }\n  }\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction getTemplateContent(el) {\n  return 'content' in /** @type {?} */el && isTemplateElement(el) ? el.content : null;\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction isTemplateElement(el) {\n  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Marks that the next string is for element.\n *\n * See `I18nMutateOpCodes` documentation.\n * @type {?}\n */\nconst ELEMENT_MARKER = {\n  marker: 'element'\n};\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Marks that the next string is for comment.\n *\n * See `I18nMutateOpCodes` documentation.\n * @type {?}\n */\nconst COMMENT_MARKER = {\n  marker: 'comment'\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MARKER = `�`;\n/** @type {?} */\nconst ICU_BLOCK_REGEX = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\n/** @type {?} */\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\n/** @type {?} */\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n/** @type {?} */\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\n/** @type {?} */\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\n// i18nPostproocess regexps\n/** @type {?} */\nconst PP_PLACEHOLDERS = /\\[(�.+?�?)\\]/g;\n/** @type {?} */\nconst PP_ICU_VARS = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\n/** @type {?} */\nconst PP_ICUS = /�I18N_EXP_(ICU(_\\d+)?)�/g;\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression into\n * keys and cases.\n * Original code from closure library, modified for Angular.\n *\n * @param {?} pattern (sub)Pattern to be broken.\n *\n * @return {?}\n */\nfunction extractParts(pattern) {\n  if (!pattern) {\n    return [];\n  }\n  /** @type {?} */\n  let prevPos = 0;\n  /** @type {?} */\n  const braceStack = [];\n  /** @type {?} */\n  const results = [];\n  /** @type {?} */\n  const braces = /[{}]/g;\n  // lastIndex doesn't get set to 0 so we have to.\n  braces.lastIndex = 0;\n  /** @type {?} */\n  let match;\n  while (match = braces.exec(pattern)) {\n    /** @type {?} */\n    const pos = match.index;\n    if (match[0] == '}') {\n      braceStack.pop();\n      if (braceStack.length == 0) {\n        // End of the block.\n        /** @type {?} */\n        const block = pattern.substring(prevPos, pos);\n        if (ICU_BLOCK_REGEX.test(block)) {\n          results.push(parseICUBlock(block));\n        } else if (block) {\n          // Don't push empty strings\n          results.push(block);\n        }\n        prevPos = pos + 1;\n      }\n    } else {\n      if (braceStack.length == 0) {\n        /** @type {?} */\n        const substring = pattern.substring(prevPos, pos);\n        results.push(substring);\n        prevPos = pos + 1;\n      }\n      braceStack.push('{');\n    }\n  }\n  /** @type {?} */\n  const substring = pattern.substring(prevPos);\n  if (substring != '') {\n    results.push(substring);\n  }\n  return results;\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param {?} pattern Text containing an ICU expression that needs to be parsed.\n *\n * @return {?}\n */\nfunction parseICUBlock(pattern) {\n  /** @type {?} */\n  const cases = [];\n  /** @type {?} */\n  const values = [];\n  /** @type {?} */\n  let icuType = 1 /* plural */;\n  /** @type {?} */\n  let mainBinding = 0;\n  pattern = pattern.replace(ICU_BLOCK_REGEX, function (str, binding, type) {\n    if (type === 'select') {\n      icuType = 0 /* select */;\n    } else {\n      icuType = 1 /* plural */;\n    }\n\n    mainBinding = parseInt(binding.substr(1), 10);\n    return '';\n  });\n  /** @type {?} */\n  const parts = /** @type {?} */extractParts(pattern);\n  // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n  for (let pos = 0; pos < parts.length;) {\n    /** @type {?} */\n    let key = parts[pos++].trim();\n    if (icuType === 1 /* plural */) {\n      // Key can be \"=x\", we just want \"x\"\n      key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n    }\n    if (key.length) {\n      cases.push(key);\n    }\n    /** @type {?} */\n    const blocks = /** @type {?} */extractParts(parts[pos++]);\n    if (blocks.length) {\n      values.push(blocks);\n    }\n  }\n  assertGreaterThan(cases.indexOf('other'), -1, 'Missing key \"other\" in ICU statement.');\n  // TODO(ocombe): support ICU expressions in attributes, see #21615\n  return {\n    type: icuType,\n    mainBinding: mainBinding,\n    cases,\n    values\n  };\n}\n/**\n * Removes everything inside the sub-templates of a message.\n * @param {?} message\n * @return {?}\n */\nfunction removeInnerTemplateTranslation(message) {\n  /** @type {?} */\n  let match;\n  /** @type {?} */\n  let res = '';\n  /** @type {?} */\n  let index = 0;\n  /** @type {?} */\n  let inTemplate = false;\n  /** @type {?} */\n  let tagMatched;\n  while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n    if (!inTemplate) {\n      res += message.substring(index, match.index + match[0].length);\n      tagMatched = match[1];\n      inTemplate = true;\n    } else {\n      if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n        index = match.index;\n        inTemplate = false;\n      }\n    }\n  }\n  ngDevMode && assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n  res += message.substr(index);\n  return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A translated\n * message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param {?} message The message to crop\n * @param {?=} subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n * @return {?}\n */\nfunction getTranslationForTemplate(message, subTemplateIndex) {\n  if (typeof subTemplateIndex !== 'number') {\n    // We want the root template message, ignore all sub-templates\n    return removeInnerTemplateTranslation(message);\n  } else {\n    // We want a specific sub-template\n    /** @type {?} */\n    const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n    /** @type {?} */\n    const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n    return removeInnerTemplateTranslation(message.substring(start, end));\n  }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param {?} str The string containing the bindings.\n * @param {?} destinationNode Index of the destination node which will receive the binding.\n * @param {?=} attrName Name of the attribute, if the string belongs to an attribute.\n * @param {?=} sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @return {?}\n */\nfunction generateBindingUpdateOpCodes(str, destinationNode, attrName, sanitizeFn = null) {\n  /** @type {?} */\n  const updateOpCodes = [null, null];\n  // Alloc space for mask and size\n  /** @type {?} */\n  const textParts = str.split(BINDING_REGEXP);\n  /** @type {?} */\n  let mask = 0;\n  for (let j = 0; j < textParts.length; j++) {\n    /** @type {?} */\n    const textValue = textParts[j];\n    if (j & 1) {\n      // Odd indexes are bindings\n      /** @type {?} */\n      const bindingIndex = parseInt(textValue, 10);\n      updateOpCodes.push(-1 - bindingIndex);\n      mask = mask | toMaskBit(bindingIndex);\n    } else if (textValue !== '') {\n      // Even indexes are text\n      updateOpCodes.push(textValue);\n    }\n  }\n  updateOpCodes.push(destinationNode << 2 /* SHIFT_REF */ | (attrName ? 1 /* Attr */ : 0 /* Text */));\n  if (attrName) {\n    updateOpCodes.push(attrName, sanitizeFn);\n  }\n  updateOpCodes[0] = mask;\n  updateOpCodes[1] = updateOpCodes.length - 2;\n  return updateOpCodes;\n}\n/**\n * @param {?} icuExpression\n * @param {?=} mask\n * @return {?}\n */\nfunction getBindingMask(icuExpression, mask = 0) {\n  mask = mask | toMaskBit(icuExpression.mainBinding);\n  /** @type {?} */\n  let match;\n  for (let i = 0; i < icuExpression.values.length; i++) {\n    /** @type {?} */\n    const valueArr = icuExpression.values[i];\n    for (let j = 0; j < valueArr.length; j++) {\n      /** @type {?} */\n      const value = valueArr[j];\n      if (typeof value === 'string') {\n        while (match = BINDING_REGEXP.exec(value)) {\n          mask = mask | toMaskBit(parseInt(match[1], 10));\n        }\n      } else {\n        mask = getBindingMask( /** @type {?} */value, mask);\n      }\n    }\n  }\n  return mask;\n}\n/** @type {?} */\nconst i18nIndexStack = [];\n/** @type {?} */\nlet i18nIndexStackPointer = -1;\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to have\n * more than 32 bindings this will be hit very rarely. The downside of hitting this corner case is\n * that we will execute binding code more often than necessary. (penalty of performance)\n * @param {?} bindingIndex\n * @return {?}\n */\nfunction toMaskBit(bindingIndex) {\n  return 1 << Math.min(bindingIndex, 31);\n}\n/** @type {?} */\nconst parentIndexStack = [];\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param {?} index A unique index of the translation in the static block.\n * @param {?} message The translation message.\n * @param {?=} subTemplateIndex Optional sub-template index in the `message`.\n * @return {?}\n */\nfunction i18nStart(index, message, subTemplateIndex) {\n  /** @type {?} */\n  const tView = getLView()[TVIEW];\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  i18nIndexStack[++i18nIndexStackPointer] = index;\n  if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n    i18nStartFirstPass(tView, index, message, subTemplateIndex);\n  }\n}\n/**\n * See `i18nStart` above.\n * @param {?} tView\n * @param {?} index\n * @param {?} message\n * @param {?=} subTemplateIndex\n * @return {?}\n */\nfunction i18nStartFirstPass(tView, index, message, subTemplateIndex) {\n  /** @type {?} */\n  const viewData = getLView();\n  /** @type {?} */\n  const expandoStartIndex = tView.blueprint.length - HEADER_OFFSET;\n  /** @type {?} */\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  /** @type {?} */\n  const parentTNode = getIsParent() ? getPreviousOrParentTNode() : previousOrParentTNode && previousOrParentTNode.parent;\n  /** @type {?} */\n  let parentIndex = parentTNode && parentTNode !== viewData[HOST_NODE] ? parentTNode.index - HEADER_OFFSET : index;\n  /** @type {?} */\n  let parentIndexPointer = 0;\n  parentIndexStack[parentIndexPointer] = parentIndex;\n  /** @type {?} */\n  const createOpCodes = [];\n  // If the previous node wasn't the direct parent then we have a translation without top level\n  // element and we need to keep a reference of the previous element if there is one\n  if (index > 0 && previousOrParentTNode !== parentTNode) {\n    // Create an OpCode to select the previous TNode\n    createOpCodes.push(previousOrParentTNode.index << 3 /* SHIFT_REF */ | 0 /* Select */);\n  }\n  /** @type {?} */\n  const updateOpCodes = [];\n  /** @type {?} */\n  const icuExpressions = [];\n  /** @type {?} */\n  const templateTranslation = getTranslationForTemplate(message, subTemplateIndex);\n  /** @type {?} */\n  const msgParts = templateTranslation.split(PH_REGEXP);\n  for (let i = 0; i < msgParts.length; i++) {\n    /** @type {?} */\n    let value = msgParts[i];\n    if (i & 1) {\n      // Odd indexes are placeholders (elements and sub-templates)\n      if (value.charAt(0) === '/') {\n        // It is a closing tag\n        if (value.charAt(1) === '#') {\n          /** @type {?} */\n          const phIndex = parseInt(value.substr(2), 10);\n          parentIndex = parentIndexStack[--parentIndexPointer];\n          createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 5 /* ElementEnd */);\n        }\n      } else {\n        /** @type {?} */\n        const phIndex = parseInt(value.substr(1), 10);\n        // The value represents a placeholder that we move to the designated index\n        createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 0 /* Select */, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n        if (value.charAt(0) === '#') {\n          parentIndexStack[++parentIndexPointer] = parentIndex = phIndex;\n        }\n      }\n    } else {\n      // Even indexes are text (including bindings & ICU expressions)\n      /** @type {?} */\n      const parts = value.split(ICU_REGEXP);\n      for (let j = 0; j < parts.length; j++) {\n        value = parts[j];\n        if (j & 1) {\n          // Odd indexes are ICU expressions\n          // Create the comment node that will anchor the ICU expression\n          allocExpando(viewData);\n          /** @type {?} */\n          const icuNodeIndex = tView.blueprint.length - 1 - HEADER_OFFSET;\n          createOpCodes.push(COMMENT_MARKER, ngDevMode ? `ICU ${icuNodeIndex}` : '', parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n          // Update codes for the ICU expression\n          /** @type {?} */\n          const icuExpression = parseICUBlock(value.substr(1, value.length - 2));\n          /** @type {?} */\n          const mask = getBindingMask(icuExpression);\n          icuStart(icuExpressions, icuExpression, icuNodeIndex, icuNodeIndex);\n          // Since this is recursive, the last TIcu that was pushed is the one we want\n          /** @type {?} */\n          const tIcuIndex = icuExpressions.length - 1;\n          updateOpCodes.push(toMaskBit(icuExpression.mainBinding),\n          // mask of the main binding\n          3,\n          // skip 3 opCodes if not changed\n          -1 - icuExpression.mainBinding, icuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, tIcuIndex, mask,\n          // mask of all the bindings of this ICU expression\n          2,\n          // skip 2 opCodes if not changed\n          icuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, tIcuIndex);\n        } else if (value !== '') {\n          // Even indexes are text (including bindings)\n          /** @type {?} */\n          const hasBinding = value.match(BINDING_REGEXP);\n          // Create text nodes\n          allocExpando(viewData);\n          createOpCodes.push(\n          // If there is a binding, the value will be set during update\n          hasBinding ? '' : value, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n          if (hasBinding) {\n            addAllToArray(generateBindingUpdateOpCodes(value, tView.blueprint.length - 1 - HEADER_OFFSET), updateOpCodes);\n          }\n        }\n      }\n    }\n  }\n  // NOTE: local var needed to properly assert the type of `TI18n`.\n  /** @type {?} */\n  const tI18n = {\n    vars: tView.blueprint.length - HEADER_OFFSET - expandoStartIndex,\n    expandoStartIndex,\n    create: createOpCodes,\n    update: updateOpCodes,\n    icus: icuExpressions.length ? icuExpressions : null\n  };\n  tView.data[index + HEADER_OFFSET] = tI18n;\n}\n/**\n * @param {?} tNode\n * @param {?} parentTNode\n * @param {?} previousTNode\n * @return {?}\n */\nfunction appendI18nNode(tNode, parentTNode, previousTNode) {\n  ngDevMode && ngDevMode.rendererMoveNode++;\n  /** @type {?} */\n  const viewData = getLView();\n  if (!previousTNode) {\n    previousTNode = parentTNode;\n  }\n  // re-organize node tree to put this node in the correct position.\n  if (previousTNode === parentTNode && tNode !== parentTNode.child) {\n    tNode.next = parentTNode.child;\n    parentTNode.child = tNode;\n  } else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {\n    tNode.next = previousTNode.next;\n    previousTNode.next = tNode;\n  } else {\n    tNode.next = null;\n  }\n  if (parentTNode !== viewData[HOST_NODE]) {\n    tNode.parent = /** @type {?} */parentTNode;\n  }\n  appendChild(getNativeByTNode(tNode, viewData), tNode, viewData);\n  /** @type {?} */\n  const slotValue = viewData[tNode.index];\n  if (tNode.type !== 0 /* Container */ && isLContainer(slotValue)) {\n    // Nodes that inject ViewContainerRef also have a comment node that should be moved\n    appendChild(slotValue[NATIVE], tNode, viewData);\n  }\n  return tNode;\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * \\@publicAPI\n * @param {?} message Raw translation string for post processing\n * @param {?} replacements Set of replacements that should be applied\n *\n * @return {?} Transformed string that can be consumed by i18nStart instruction\n *\n */\nfunction i18nPostprocess(message, replacements) {\n  //\n  // Step 1: resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n  //\n  /** @type {?} */\n  const matches = {};\n  /** @type {?} */\n  let result = message.replace(PP_PLACEHOLDERS, (_match, content) => {\n    if (!matches[content]) {\n      matches[content] = content.split('|');\n    }\n    if (!matches[content].length) {\n      throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n    }\n    return (/** @type {?} */matches[content].shift()\n    );\n  });\n  // verify that we injected all values\n  /** @type {?} */\n  const hasUnmatchedValues = Object.keys(matches).some(key => !!matches[key].length);\n  if (hasUnmatchedValues) {\n    throw new Error(`i18n postprocess: unmatched values - ${JSON.stringify(matches)}`);\n  }\n  // return current result if no replacements specified\n  if (!Object.keys(replacements).length) {\n    return result;\n  }\n  //\n  // Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n  //\n  result = result.replace(PP_ICU_VARS, (match, start, key, _type, _idx, end) => {\n    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n  });\n  //\n  // Step 3: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n  // in case multiple ICUs have the same placeholder name\n  //\n  result = result.replace(PP_ICUS, (match, key) => {\n    if (replacements.hasOwnProperty(key)) {\n      /** @type {?} */\n      const list = /** @type {?} */replacements[key];\n      if (!list.length) {\n        throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n      }\n      return (/** @type {?} */list.shift()\n      );\n    }\n    return match;\n  });\n  return result;\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n * @return {?}\n */\nfunction i18nEnd() {\n  /** @type {?} */\n  const tView = getLView()[TVIEW];\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  i18nEndFirstPass(tView);\n}\n/**\n * See `i18nEnd` above.\n * @param {?} tView\n * @return {?}\n */\nfunction i18nEndFirstPass(tView) {\n  /** @type {?} */\n  const viewData = getLView();\n  ngDevMode && assertEqual(viewData[BINDING_INDEX], viewData[TVIEW].bindingStartIndex, 'i18nEnd should be called before any binding');\n  /** @type {?} */\n  const rootIndex = i18nIndexStack[i18nIndexStackPointer--];\n  /** @type {?} */\n  const tI18n = /** @type {?} */tView.data[rootIndex + HEADER_OFFSET];\n  ngDevMode && assertDefined(tI18n, `You should call i18nStart before i18nEnd`);\n  // The last placeholder that was added before `i18nEnd`\n  /** @type {?} */\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  /** @type {?} */\n  const visitedPlaceholders = readCreateOpCodes(rootIndex, tI18n.create, tI18n.expandoStartIndex, viewData);\n  // Remove deleted placeholders\n  // The last placeholder that was added before `i18nEnd` is `previousOrParentTNode`\n  for (let i = rootIndex + 1; i <= previousOrParentTNode.index - HEADER_OFFSET; i++) {\n    if (visitedPlaceholders.indexOf(i) === -1) {\n      removeNode(i, viewData);\n    }\n  }\n}\n/**\n * @param {?} index\n * @param {?} createOpCodes\n * @param {?} expandoStartIndex\n * @param {?} viewData\n * @return {?}\n */\nfunction readCreateOpCodes(index, createOpCodes, expandoStartIndex, viewData) {\n  /** @type {?} */\n  const renderer = getLView()[RENDERER];\n  /** @type {?} */\n  let currentTNode = null;\n  /** @type {?} */\n  let previousTNode = null;\n  /** @type {?} */\n  const visitedPlaceholders = [];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    /** @type {?} */\n    const opCode = createOpCodes[i];\n    if (typeof opCode == 'string') {\n      /** @type {?} */\n      const textRNode = createTextNode(opCode, renderer);\n      ngDevMode && ngDevMode.rendererCreateTextNode++;\n      previousTNode = currentTNode;\n      currentTNode = createNodeAtIndex(expandoStartIndex++, 3 /* Element */, textRNode, null, null);\n      setIsParent(false);\n    } else if (typeof opCode == 'number') {\n      switch (opCode & 7 /* MASK_OPCODE */) {\n        case 1 /* AppendChild */:\n          /** @type {?} */\n          const destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n          /** @type {?} */\n          let destinationTNode;\n          if (destinationNodeIndex === index) {\n            // If the destination node is `i18nStart`, we don't have a\n            // top-level node and we should use the host node instead\n            destinationTNode = /** @type {?} */viewData[HOST_NODE];\n          } else {\n            destinationTNode = getTNode(destinationNodeIndex, viewData);\n          }\n          ngDevMode && assertDefined( /** @type {?} */currentTNode, `You need to create or select a node before you can insert it into the DOM`);\n          previousTNode = appendI18nNode( /** @type {?} */currentTNode, destinationTNode, previousTNode);\n          destinationTNode.next = null;\n          break;\n        case 0 /* Select */:\n          /** @type {?} */\n          const nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n          visitedPlaceholders.push(nodeIndex);\n          previousTNode = currentTNode;\n          currentTNode = getTNode(nodeIndex, viewData);\n          if (currentTNode) {\n            setPreviousOrParentTNode(currentTNode);\n            if (currentTNode.type === 3 /* Element */) {\n              setIsParent(true);\n            }\n          }\n          break;\n        case 5 /* ElementEnd */:\n          /** @type {?} */\n          const elementIndex = opCode >>> 3 /* SHIFT_REF */;\n          previousTNode = currentTNode = getTNode(elementIndex, viewData);\n          setPreviousOrParentTNode(currentTNode);\n          setIsParent(false);\n          break;\n        case 4 /* Attr */:\n          /** @type {?} */\n          const elementNodeIndex = opCode >>> 3 /* SHIFT_REF */;\n          /** @type {?} */\n          const attrName = /** @type {?} */createOpCodes[++i];\n          /** @type {?} */\n          const attrValue = /** @type {?} */createOpCodes[++i];\n          elementAttribute(elementNodeIndex, attrName, attrValue);\n          break;\n        default:\n          throw new Error(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n      }\n    } else {\n      switch (opCode) {\n        case COMMENT_MARKER:\n          /** @type {?} */\n          const commentValue = /** @type {?} */createOpCodes[++i];\n          ngDevMode && assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\n          /** @type {?} */\n          const commentRNode = renderer.createComment(commentValue);\n          ngDevMode && ngDevMode.rendererCreateComment++;\n          previousTNode = currentTNode;\n          currentTNode = createNodeAtIndex(expandoStartIndex++, 5 /* IcuContainer */, commentRNode, null, null);\n          attachPatchData(commentRNode, viewData);\n          /** @type {?} */currentTNode.activeCaseIndex = null;\n          // We will add the case nodes later, during the update phase\n          setIsParent(false);\n          break;\n        case ELEMENT_MARKER:\n          /** @type {?} */\n          const tagNameValue = /** @type {?} */createOpCodes[++i];\n          ngDevMode && assertEqual(typeof tagNameValue, 'string', `Expected \"${tagNameValue}\" to be an element node tag name`);\n          /** @type {?} */\n          const elementRNode = renderer.createElement(tagNameValue);\n          ngDevMode && ngDevMode.rendererCreateElement++;\n          previousTNode = currentTNode;\n          currentTNode = createNodeAtIndex(expandoStartIndex++, 3 /* Element */, elementRNode, tagNameValue, null);\n          break;\n        default:\n          throw new Error(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n      }\n    }\n  }\n  setIsParent(false);\n  return visitedPlaceholders;\n}\n/**\n * @param {?} updateOpCodes\n * @param {?} icus\n * @param {?} bindingsStartIndex\n * @param {?} changeMask\n * @param {?} viewData\n * @param {?=} bypassCheckBit\n * @return {?}\n */\nfunction readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, viewData, bypassCheckBit = false) {\n  /** @type {?} */\n  let caseCreated = false;\n  for (let i = 0; i < updateOpCodes.length; i++) {\n    // bit code to check if we should apply the next update\n    /** @type {?} */\n    const checkBit = /** @type {?} */updateOpCodes[i];\n    // Number of opCodes to skip until next set of update codes\n    /** @type {?} */\n    const skipCodes = /** @type {?} */updateOpCodes[++i];\n    if (bypassCheckBit || checkBit & changeMask) {\n      // The value has been updated since last checked\n      /** @type {?} */\n      let value = '';\n      for (let j = i + 1; j <= i + skipCodes; j++) {\n        /** @type {?} */\n        const opCode = updateOpCodes[j];\n        if (typeof opCode == 'string') {\n          value += opCode;\n        } else if (typeof opCode == 'number') {\n          if (opCode < 0) {\n            // It's a binding index whose value is negative\n            value += stringify$1(viewData[bindingsStartIndex - opCode]);\n          } else {\n            /** @type {?} */\n            const nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n            /** @type {?} */\n            let tIcuIndex;\n            /** @type {?} */\n            let tIcu;\n            /** @type {?} */\n            let icuTNode;\n            switch (opCode & 3 /* MASK_OPCODE */) {\n              case 1 /* Attr */:\n                /** @type {?} */\n                const attrName = /** @type {?} */updateOpCodes[++j];\n                /** @type {?} */\n                const sanitizeFn = /** @type {?} */updateOpCodes[++j];\n                elementAttribute(nodeIndex, attrName, value, sanitizeFn);\n                break;\n              case 0 /* Text */:\n                textBinding(nodeIndex, value);\n                break;\n              case 2 /* IcuSwitch */:\n                tIcuIndex = /** @type {?} */updateOpCodes[++j];\n                tIcu = /** @type {?} */icus[tIcuIndex];\n                icuTNode = /** @type {?} */getTNode(nodeIndex, viewData);\n                // If there is an active case, delete the old nodes\n                if (icuTNode.activeCaseIndex !== null) {\n                  /** @type {?} */\n                  const removeCodes = tIcu.remove[icuTNode.activeCaseIndex];\n                  for (let k = 0; k < removeCodes.length; k++) {\n                    /** @type {?} */\n                    const removeOpCode = /** @type {?} */removeCodes[k];\n                    switch (removeOpCode & 7 /* MASK_OPCODE */) {\n                      case 3 /* Remove */:\n                        /** @type {?} */\n                        const nodeIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                        removeNode(nodeIndex, viewData);\n                        break;\n                      case 6 /* RemoveNestedIcu */:\n                        /** @type {?} */\n                        const nestedIcuNodeIndex = /** @type {?} */removeCodes[k + 1] >>> 3 /* SHIFT_REF */;\n                        /** @type {?} */\n                        const nestedIcuTNode = /** @type {?} */getTNode(nestedIcuNodeIndex, viewData);\n                        /** @type {?} */\n                        const activeIndex = nestedIcuTNode.activeCaseIndex;\n                        if (activeIndex !== null) {\n                          /** @type {?} */\n                          const nestedIcuTIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                          /** @type {?} */\n                          const nestedTIcu = /** @type {?} */icus[nestedIcuTIndex];\n                          addAllToArray(nestedTIcu.remove[activeIndex], removeCodes);\n                        }\n                        break;\n                    }\n                  }\n                }\n                // Update the active caseIndex\n                /** @type {?} */\n                const caseIndex = getCaseIndex(tIcu, value);\n                icuTNode.activeCaseIndex = caseIndex !== -1 ? caseIndex : null;\n                // Add the nodes for the new case\n                readCreateOpCodes(-1, tIcu.create[caseIndex], tIcu.expandoStartIndex, viewData);\n                caseCreated = true;\n                break;\n              case 3 /* IcuUpdate */:\n                tIcuIndex = /** @type {?} */updateOpCodes[++j];\n                tIcu = /** @type {?} */icus[tIcuIndex];\n                icuTNode = /** @type {?} */getTNode(nodeIndex, viewData);\n                readUpdateOpCodes(tIcu.update[/** @type {?} */icuTNode.activeCaseIndex], icus, bindingsStartIndex, changeMask, viewData, caseCreated);\n                break;\n            }\n          }\n        }\n      }\n    }\n    i += skipCodes;\n  }\n}\n/**\n * @param {?} index\n * @param {?} viewData\n * @return {?}\n */\nfunction removeNode(index, viewData) {\n  /** @type {?} */\n  const removedPhTNode = getTNode(index, viewData);\n  /** @type {?} */\n  const removedPhRNode = getNativeByIndex(index, viewData);\n  removeChild(removedPhTNode, removedPhRNode || null, viewData);\n  removedPhTNode.detached = true;\n  ngDevMode && ngDevMode.rendererRemoveNode++;\n  /** @type {?} */\n  const slotValue = /** @type {?} */load(index);\n  if (isLContainer(slotValue)) {\n    /** @type {?} */\n    const lContainer = /** @type {?} */slotValue;\n    if (removedPhTNode.type !== 0 /* Container */) {\n      removeChild(removedPhTNode, lContainer[NATIVE] || null, viewData);\n    }\n    lContainer[RENDER_PARENT] = null;\n  }\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {\\@link i18nStart} and {\\@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param {?} index A unique index of the translation in the static block.\n * @param {?} message The translation message.\n * @param {?=} subTemplateIndex Optional sub-template index in the `message`.\n * @return {?}\n */\nfunction i18n(index, message, subTemplateIndex) {\n  i18nStart(index, message, subTemplateIndex);\n  i18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * @param {?} index A unique index in the static block\n * @param {?} values\n * @return {?}\n */\nfunction i18nAttributes(index, values) {\n  /** @type {?} */\n  const tView = getLView()[TVIEW];\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  ngDevMode && assertEqual(tView.firstTemplatePass, true, `You should only call i18nEnd on first template pass`);\n  if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n    i18nAttributesFirstPass(tView, index, values);\n  }\n}\n/**\n * See `i18nAttributes` above.\n * @param {?} tView\n * @param {?} index\n * @param {?} values\n * @return {?}\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n  /** @type {?} */\n  const previousElement = getPreviousOrParentTNode();\n  /** @type {?} */\n  const previousElementIndex = previousElement.index - HEADER_OFFSET;\n  /** @type {?} */\n  const updateOpCodes = [];\n  for (let i = 0; i < values.length; i += 2) {\n    /** @type {?} */\n    const attrName = values[i];\n    /** @type {?} */\n    const message = values[i + 1];\n    /** @type {?} */\n    const parts = message.split(ICU_REGEXP);\n    for (let j = 0; j < parts.length; j++) {\n      /** @type {?} */\n      const value = parts[j];\n      if (j & 1) ;else if (value !== '') {\n        // Even indexes are text (including bindings)\n        /** @type {?} */\n        const hasBinding = !!value.match(BINDING_REGEXP);\n        if (hasBinding) {\n          addAllToArray(generateBindingUpdateOpCodes(value, previousElementIndex, attrName), updateOpCodes);\n        } else {\n          elementAttribute(previousElementIndex, attrName, value);\n        }\n      }\n    }\n  }\n  tView.data[index + HEADER_OFFSET] = updateOpCodes;\n}\n/** @type {?} */\nlet changeMask = 0b0;\n/** @type {?} */\nlet shiftsCounter = 0;\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @template T\n * @param {?} expression The binding's new value or NO_CHANGE\n * @return {?}\n */\nfunction i18nExp(expression) {\n  if (expression !== NO_CHANGE) {\n    changeMask = changeMask | 1 << shiftsCounter;\n  }\n  shiftsCounter++;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param {?} index Index of either {\\@link i18nStart} (translation block) or {\\@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n * @return {?}\n */\nfunction i18nApply(index) {\n  if (shiftsCounter) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    /** @type {?} */\n    const tI18n = tView.data[index + HEADER_OFFSET];\n    /** @type {?} */\n    let updateOpCodes;\n    /** @type {?} */\n    let icus = null;\n    if (Array.isArray(tI18n)) {\n      updateOpCodes = /** @type {?} */tI18n;\n    } else {\n      updateOpCodes = /** @type {?} */tI18n.update;\n      icus = /** @type {?} */tI18n.icus;\n    }\n    /** @type {?} */\n    const bindingsStartIndex = lView[BINDING_INDEX] - shiftsCounter - 1;\n    readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, lView);\n    // Reset changeMask & maskBit to default for the next update cycle\n    changeMask = 0b0;\n    shiftsCounter = 0;\n  }\n}\n/** @enum {number} */\nconst Plural = {\n  Zero: 0,\n  One: 1,\n  Two: 2,\n  Few: 3,\n  Many: 4,\n  Other: 5\n};\nPlural[Plural.Zero] = 'Zero';\nPlural[Plural.One] = 'One';\nPlural[Plural.Two] = 'Two';\nPlural[Plural.Few] = 'Few';\nPlural[Plural.Many] = 'Many';\nPlural[Plural.Other] = 'Other';\n/**\n * Returns the plural case based on the locale.\n * This is a copy of the deprecated function that we used in Angular v4.\n * // TODO(ocombe): remove this once we can the real getPluralCase function\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n * @param {?} locale\n * @param {?} nLike\n * @return {?}\n */\nfunction getPluralCase(locale, nLike) {\n  if (typeof nLike === 'string') {\n    nLike = parseInt( /** @type {?} */nLike, 10);\n  }\n  /** @type {?} */\n  const n = /** @type {?} */nLike;\n  /** @type {?} */\n  const nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n  /** @type {?} */\n  const i = Math.floor(Math.abs(n));\n  /** @type {?} */\n  const v = nDecimal.length;\n  /** @type {?} */\n  const f = parseInt(nDecimal, 10);\n  /** @type {?} */\n  const t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n  /** @type {?} */\n  const lang = locale.split('-')[0].toLowerCase();\n  switch (lang) {\n    case 'af':\n    case 'asa':\n    case 'az':\n    case 'bem':\n    case 'bez':\n    case 'bg':\n    case 'brx':\n    case 'ce':\n    case 'cgg':\n    case 'chr':\n    case 'ckb':\n    case 'ee':\n    case 'el':\n    case 'eo':\n    case 'es':\n    case 'eu':\n    case 'fo':\n    case 'fur':\n    case 'gsw':\n    case 'ha':\n    case 'haw':\n    case 'hu':\n    case 'jgo':\n    case 'jmc':\n    case 'ka':\n    case 'kk':\n    case 'kkj':\n    case 'kl':\n    case 'ks':\n    case 'ksb':\n    case 'ky':\n    case 'lb':\n    case 'lg':\n    case 'mas':\n    case 'mgo':\n    case 'ml':\n    case 'mn':\n    case 'nb':\n    case 'nd':\n    case 'ne':\n    case 'nn':\n    case 'nnh':\n    case 'nyn':\n    case 'om':\n    case 'or':\n    case 'os':\n    case 'ps':\n    case 'rm':\n    case 'rof':\n    case 'rwk':\n    case 'saq':\n    case 'seh':\n    case 'sn':\n    case 'so':\n    case 'sq':\n    case 'ta':\n    case 'te':\n    case 'teo':\n    case 'tk':\n    case 'tr':\n    case 'ug':\n    case 'uz':\n    case 'vo':\n    case 'vun':\n    case 'wae':\n    case 'xog':\n      if (n === 1) return Plural.One;\n      return Plural.Other;\n    case 'ak':\n    case 'ln':\n    case 'mg':\n    case 'pa':\n    case 'ti':\n      if (n === Math.floor(n) && n >= 0 && n <= 1) return Plural.One;\n      return Plural.Other;\n    case 'am':\n    case 'as':\n    case 'bn':\n    case 'fa':\n    case 'gu':\n    case 'hi':\n    case 'kn':\n    case 'mr':\n    case 'zu':\n      if (i === 0 || n === 1) return Plural.One;\n      return Plural.Other;\n    case 'ar':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10) return Plural.Few;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99) return Plural.Many;\n      return Plural.Other;\n    case 'ast':\n    case 'ca':\n    case 'de':\n    case 'en':\n    case 'et':\n    case 'fi':\n    case 'fy':\n    case 'gl':\n    case 'it':\n    case 'nl':\n    case 'sv':\n    case 'sw':\n    case 'ur':\n    case 'yi':\n      if (i === 1 && v === 0) return Plural.One;\n      return Plural.Other;\n    case 'be':\n      if (n % 10 === 1 && !(n % 100 === 11)) return Plural.One;\n      if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 && !(n % 100 >= 12 && n % 100 <= 14)) return Plural.Few;\n      if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14) return Plural.Many;\n      return Plural.Other;\n    case 'br':\n      if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91)) return Plural.One;\n      if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92)) return Plural.Two;\n      if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) && !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 || n % 100 >= 90 && n % 100 <= 99)) return Plural.Few;\n      if (!(n === 0) && n % 1e6 === 0) return Plural.Many;\n      return Plural.Other;\n    case 'bs':\n    case 'hr':\n    case 'sr':\n      if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11)) return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14) || f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 && !(f % 100 >= 12 && f % 100 <= 14)) return Plural.Few;\n      return Plural.Other;\n    case 'cs':\n    case 'sk':\n      if (i === 1 && v === 0) return Plural.One;\n      if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0) return Plural.Few;\n      if (!(v === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'cy':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n === 3) return Plural.Few;\n      if (n === 6) return Plural.Many;\n      return Plural.Other;\n    case 'da':\n      if (n === 1 || !(t === 0) && (i === 0 || i === 1)) return Plural.One;\n      return Plural.Other;\n    case 'dsb':\n    case 'hsb':\n      if (v === 0 && i % 100 === 1 || f % 100 === 1) return Plural.One;\n      if (v === 0 && i % 100 === 2 || f % 100 === 2) return Plural.Two;\n      if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4) return Plural.Few;\n      return Plural.Other;\n    case 'ff':\n    case 'fr':\n    case 'hy':\n    case 'kab':\n      if (i === 0 || i === 1) return Plural.One;\n      return Plural.Other;\n    case 'fil':\n      if (v === 0 && (i === 1 || i === 2 || i === 3) || v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) || !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9)) return Plural.One;\n      return Plural.Other;\n    case 'ga':\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n === Math.floor(n) && n >= 3 && n <= 6) return Plural.Few;\n      if (n === Math.floor(n) && n >= 7 && n <= 10) return Plural.Many;\n      return Plural.Other;\n    case 'gd':\n      if (n === 1 || n === 11) return Plural.One;\n      if (n === 2 || n === 12) return Plural.Two;\n      if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19)) return Plural.Few;\n      return Plural.Other;\n    case 'gv':\n      if (v === 0 && i % 10 === 1) return Plural.One;\n      if (v === 0 && i % 10 === 2) return Plural.Two;\n      if (v === 0 && (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80)) return Plural.Few;\n      if (!(v === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'he':\n      if (i === 1 && v === 0) return Plural.One;\n      if (i === 2 && v === 0) return Plural.Two;\n      if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0) return Plural.Many;\n      return Plural.Other;\n    case 'is':\n      if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0)) return Plural.One;\n      return Plural.Other;\n    case 'ksh':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      return Plural.Other;\n    case 'kw':\n    case 'naq':\n    case 'se':\n    case 'smn':\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      return Plural.Other;\n    case 'lag':\n      if (n === 0) return Plural.Zero;\n      if ((i === 0 || i === 1) && !(n === 0)) return Plural.One;\n      return Plural.Other;\n    case 'lt':\n      if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.One;\n      if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.Few;\n      if (!(f === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'lv':\n    case 'prg':\n      if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 || v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19) return Plural.Zero;\n      if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) || !(v === 2) && f % 10 === 1) return Plural.One;\n      return Plural.Other;\n    case 'mk':\n      if (v === 0 && i % 10 === 1 || f % 10 === 1) return Plural.One;\n      return Plural.Other;\n    case 'mt':\n      if (n === 1) return Plural.One;\n      if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10) return Plural.Few;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19) return Plural.Many;\n      return Plural.Other;\n    case 'pl':\n      if (i === 1 && v === 0) return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14)) return Plural.Few;\n      if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14) return Plural.Many;\n      return Plural.Other;\n    case 'pt':\n      if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2)) return Plural.One;\n      return Plural.Other;\n    case 'ro':\n      if (i === 1 && v === 0) return Plural.One;\n      if (!(v === 0) || n === 0 || !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19) return Plural.Few;\n      return Plural.Other;\n    case 'ru':\n    case 'uk':\n      if (v === 0 && i % 10 === 1 && !(i % 100 === 11)) return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 && !(i % 100 >= 12 && i % 100 <= 14)) return Plural.Few;\n      if (v === 0 && i % 10 === 0 || v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 || v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14) return Plural.Many;\n      return Plural.Other;\n    case 'shi':\n      if (i === 0 || n === 1) return Plural.One;\n      if (n === Math.floor(n) && n >= 2 && n <= 10) return Plural.Few;\n      return Plural.Other;\n    case 'si':\n      if (n === 0 || n === 1 || i === 0 && f === 1) return Plural.One;\n      return Plural.Other;\n    case 'sl':\n      if (v === 0 && i % 100 === 1) return Plural.One;\n      if (v === 0 && i % 100 === 2) return Plural.Two;\n      if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0)) return Plural.Few;\n      return Plural.Other;\n    case 'tzm':\n      if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99) return Plural.One;\n      return Plural.Other;\n    // When there is no specification, the default is always \"other\"\n    // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n    // > other (required—general plural form — also used if the language only has a single form)\n    default:\n      return Plural.Other;\n  }\n}\n/**\n * @param {?} value\n * @param {?} locale\n * @return {?}\n */\nfunction getPluralCategory(value, locale) {\n  /** @type {?} */\n  const plural = getPluralCase(locale, value);\n  switch (plural) {\n    case Plural.Zero:\n      return 'zero';\n    case Plural.One:\n      return 'one';\n    case Plural.Two:\n      return 'two';\n    case Plural.Few:\n      return 'few';\n    case Plural.Many:\n      return 'many';\n    default:\n      return 'other';\n  }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param {?} icuExpression\n * @param {?} bindingValue The value of the main binding used by this ICU expression\n * @return {?}\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n  /** @type {?} */\n  let index = icuExpression.cases.indexOf(bindingValue);\n  if (index === -1) {\n    switch (icuExpression.type) {\n      case 1 /* plural */:\n        {\n          // TODO(ocombe): replace this hard-coded value by the real LOCALE_ID value\n          /** @type {?} */\n          const locale = 'en-US';\n          /** @type {?} */\n          const resolvedCase = getPluralCategory(bindingValue, locale);\n          index = icuExpression.cases.indexOf(resolvedCase);\n          if (index === -1 && resolvedCase !== 'other') {\n            index = icuExpression.cases.indexOf('other');\n          }\n          break;\n        }\n      case 0 /* select */:\n        {\n          index = icuExpression.cases.indexOf('other');\n          break;\n        }\n    }\n  }\n  return index;\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param {?} tIcus\n * @param {?} icuExpression\n * @param {?} startIndex\n * @param {?} expandoStartIndex\n * @return {?}\n */\nfunction icuStart(tIcus, icuExpression, startIndex, expandoStartIndex) {\n  /** @type {?} */\n  const createCodes = [];\n  /** @type {?} */\n  const removeCodes = [];\n  /** @type {?} */\n  const updateCodes = [];\n  /** @type {?} */\n  const vars = [];\n  /** @type {?} */\n  const childIcus = [];\n  for (let i = 0; i < icuExpression.values.length; i++) {\n    // Each value is an array of strings & other ICU expressions\n    /** @type {?} */\n    const valueArr = icuExpression.values[i];\n    /** @type {?} */\n    const nestedIcus = [];\n    for (let j = 0; j < valueArr.length; j++) {\n      /** @type {?} */\n      const value = valueArr[j];\n      if (typeof value !== 'string') {\n        // It is an nested ICU expression\n        /** @type {?} */\n        const icuIndex = nestedIcus.push( /** @type {?} */value) - 1;\n        // Replace nested ICU expression by a comment node\n        valueArr[j] = `<!--�${icuIndex}�-->`;\n      }\n    }\n    /** @type {?} */\n    const icuCase = parseIcuCase(valueArr.join(''), startIndex, nestedIcus, tIcus, expandoStartIndex);\n    createCodes.push(icuCase.create);\n    removeCodes.push(icuCase.remove);\n    updateCodes.push(icuCase.update);\n    vars.push(icuCase.vars);\n    childIcus.push(icuCase.childIcus);\n  }\n  /** @type {?} */\n  const tIcu = {\n    type: icuExpression.type,\n    vars,\n    expandoStartIndex: expandoStartIndex + 1,\n    childIcus,\n    cases: icuExpression.cases,\n    create: createCodes,\n    remove: removeCodes,\n    update: updateCodes\n  };\n  tIcus.push(tIcu);\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const worstCaseSize = Math.max(...vars);\n  for (let i = 0; i < worstCaseSize; i++) {\n    allocExpando(lView);\n  }\n}\n/**\n * Transforms a string template into an HTML template and a list of instructions used to update\n * attributes or nodes that contain bindings.\n *\n * @param {?} unsafeHtml The string to parse\n * @param {?} parentIndex\n * @param {?} nestedIcus\n * @param {?} tIcus\n * @param {?} expandoStartIndex\n * @return {?}\n */\nfunction parseIcuCase(unsafeHtml, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n  /** @type {?} */\n  const inertBodyHelper = new InertBodyHelper(document);\n  /** @type {?} */\n  const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n  if (!inertBodyElement) {\n    throw new Error('Unable to generate inert body element');\n  }\n  /** @type {?} */\n  const wrapper = /** @type {?} */getTemplateContent( /** @type {?} */inertBodyElement) || inertBodyElement;\n  /** @type {?} */\n  const opCodes = {\n    vars: 0,\n    childIcus: [],\n    create: [],\n    remove: [],\n    update: []\n  };\n  parseNodes(wrapper.firstChild, opCodes, parentIndex, nestedIcus, tIcus, expandoStartIndex);\n  return opCodes;\n}\n/** @type {?} */\nconst NESTED_ICU = /�(\\d+)�/;\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n * @param {?} currentNode The first node to parse\n * @param {?} icuCase The data for the ICU expression case that contains those nodes\n * @param {?} parentIndex Index of the current node's parent\n * @param {?} nestedIcus Data for the nested ICU expressions that this case contains\n * @param {?} tIcus Data for all ICU expressions of the current message\n * @param {?} expandoStartIndex Expando start index for the current ICU expression\n * @return {?}\n */\nfunction parseNodes(currentNode, icuCase, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n  if (currentNode) {\n    /** @type {?} */\n    const nestedIcusToCreate = [];\n    while (currentNode) {\n      /** @type {?} */\n      const nextNode = currentNode.nextSibling;\n      /** @type {?} */\n      const newIndex = expandoStartIndex + ++icuCase.vars;\n      switch (currentNode.nodeType) {\n        case Node.ELEMENT_NODE:\n          /** @type {?} */\n          const element$$1 = /** @type {?} */currentNode;\n          /** @type {?} */\n          const tagName = element$$1.tagName.toLowerCase();\n          if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            // This isn't a valid element, we won't create an element for it\n            icuCase.vars--;\n          } else {\n            icuCase.create.push(ELEMENT_MARKER, tagName, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n            /** @type {?} */\n            const elAttrs = element$$1.attributes;\n            for (let i = 0; i < elAttrs.length; i++) {\n              /** @type {?} */\n              const attr = /** @type {?} */elAttrs.item(i);\n              /** @type {?} */\n              const lowerAttrName = attr.name.toLowerCase();\n              /** @type {?} */\n              const hasBinding = !!attr.value.match(BINDING_REGEXP);\n              // we assume the input string is safe, unless it's using a binding\n              if (hasBinding) {\n                if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                  if (URI_ATTRS[lowerAttrName]) {\n                    addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, _sanitizeUrl), icuCase.update);\n                  } else if (SRCSET_ATTRS[lowerAttrName]) {\n                    addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, sanitizeSrcset), icuCase.update);\n                  } else {\n                    addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name), icuCase.update);\n                  }\n                } else {\n                  ngDevMode && console.warn(`WARNING: ignoring unsafe attribute value ${lowerAttrName} on element ${tagName} (see http://g.co/ng/security#xss)`);\n                }\n              } else {\n                icuCase.create.push(newIndex << 3 /* SHIFT_REF */ | 4 /* Attr */, attr.name, attr.value);\n              }\n            }\n            // Parse the children of this node (if any)\n            parseNodes(currentNode.firstChild, icuCase, newIndex, nestedIcus, tIcus, expandoStartIndex);\n            // Remove the parent node after the children\n            icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n          }\n\n          break;\n        case Node.TEXT_NODE:\n          /** @type {?} */\n          const value = currentNode.textContent || '';\n          /** @type {?} */\n          const hasBinding = value.match(BINDING_REGEXP);\n          icuCase.create.push(hasBinding ? '' : value, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n          icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n          if (hasBinding) {\n            addAllToArray(generateBindingUpdateOpCodes(value, newIndex), icuCase.update);\n          }\n          break;\n        case Node.COMMENT_NODE:\n          // Check if the comment node is a placeholder for a nested ICU\n          /** @type {?} */\n          const match = NESTED_ICU.exec(currentNode.textContent || '');\n          if (match) {\n            /** @type {?} */\n            const nestedIcuIndex = parseInt(match[1], 10);\n            /** @type {?} */\n            const newLocal = ngDevMode ? `nested ICU ${nestedIcuIndex}` : '';\n            // Create the comment node that will anchor the ICU expression\n            icuCase.create.push(COMMENT_MARKER, newLocal, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n            /** @type {?} */\n            const nestedIcu = nestedIcus[nestedIcuIndex];\n            nestedIcusToCreate.push([nestedIcu, newIndex]);\n          } else {\n            // We do not handle any other type of comment\n            icuCase.vars--;\n          }\n          break;\n        default:\n          // We do not handle any other type of element\n          icuCase.vars--;\n      }\n      currentNode = /** @type {?} */nextNode;\n    }\n    for (let i = 0; i < nestedIcusToCreate.length; i++) {\n      /** @type {?} */\n      const nestedIcu = nestedIcusToCreate[i][0];\n      /** @type {?} */\n      const nestedIcuNodeIndex = nestedIcusToCreate[i][1];\n      icuStart(tIcus, nestedIcu, nestedIcuNodeIndex, expandoStartIndex + icuCase.vars);\n      // Since this is recursive, the last TIcu that was pushed is the one we want\n      /** @type {?} */\n      const nestTIcuIndex = tIcus.length - 1;\n      icuCase.vars += Math.max(...tIcus[nestTIcuIndex].vars);\n      icuCase.childIcus.push(nestTIcuIndex);\n      /** @type {?} */\n      const mask = getBindingMask(nestedIcu);\n      icuCase.update.push(toMaskBit(nestedIcu.mainBinding),\n      // mask of the main binding\n      3,\n      // skip 3 opCodes if not changed\n      -1 - nestedIcu.mainBinding, nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, nestTIcuIndex, mask,\n      // mask of all the bindings of this ICU expression\n      2,\n      // skip 2 opCodes if not changed\n      nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, nestTIcuIndex);\n      icuCase.remove.push(nestTIcuIndex << 3 /* SHIFT_REF */ | 6 /* RemoveNestedIcu */, nestedIcuNodeIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst COMPONENT_FACTORY_RESOLVER = {\n  provide: ComponentFactoryResolver,\n  useClass: ComponentFactoryResolver$1,\n  deps: [NgModuleRef]\n};\n/**\n * @template T\n */\nclass NgModuleRef$1 extends NgModuleRef {\n  /**\n   * @param {?} ngModuleType\n   * @param {?} _parent\n   */\n  constructor(ngModuleType, _parent) {\n    super();\n    this._parent = _parent;\n    // tslint:disable-next-line:require-internal-with-underscore\n    this._bootstrapComponents = [];\n    this.injector = this;\n    this.destroyCbs = [];\n    /** @type {?} */\n    /** @nocollapse */\n    const ngModuleDef = getNgModuleDef(ngModuleType);\n    ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n    this._bootstrapComponents = /** @type {?} */ngModuleDef.bootstrap;\n    /** @type {?} */\n    const additionalProviders = [{\n      provide: NgModuleRef,\n      useValue: this\n    }, COMPONENT_FACTORY_RESOLVER];\n    this._r3Injector = createInjector(ngModuleType, _parent, additionalProviders);\n    this.instance = this.get(ngModuleType);\n  }\n  /**\n   * @param {?} token\n   * @param {?=} notFoundValue\n   * @param {?=} injectFlags\n   * @return {?}\n   */\n  get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, injectFlags = InjectFlags.Default) {\n    if (token === Injector || token === NgModuleRef || token === INJECTOR$1) {\n      return this;\n    }\n    return this._r3Injector.get(token, notFoundValue, injectFlags);\n  }\n  /**\n   * @return {?}\n   */\n  get componentFactoryResolver() {\n    return this.get(ComponentFactoryResolver);\n  }\n  /**\n   * @return {?}\n   */\n  destroy() {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    /** @type {?} */this.destroyCbs.forEach(fn => fn());\n    this.destroyCbs = null;\n  }\n  /**\n   * @param {?} callback\n   * @return {?}\n   */\n  onDestroy(callback) {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    /** @type {?} */this.destroyCbs.push(callback);\n  }\n}\n/**\n * @template T\n */\nclass NgModuleFactory$1 extends NgModuleFactory {\n  /**\n   * @param {?} moduleType\n   */\n  constructor(moduleType) {\n    super();\n    this.moduleType = moduleType;\n  }\n  /**\n   * @param {?} parentInjector\n   * @return {?}\n   */\n  create(parentInjector) {\n    return new NgModuleRef$1(this.moduleType, parentInjector);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being\n * tree-shaken away during production builds.\n * @param {?} type\n * @param {?} decorators\n * @param {?} ctorParameters\n * @param {?} propDecorators\n * @return {?}\n */\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n  /** @type {?} */\n  const clazz = /** @type {?} */type;\n  if (decorators !== null) {\n    if (clazz.decorators !== undefined) {\n      clazz.decorators.push(...decorators);\n    } else {\n      clazz.decorators = decorators;\n    }\n  }\n  if (ctorParameters !== null) {\n    // Rather than merging, clobber the existing parameters. If other projects exist which use\n    // tsickle-style annotations and reflect over them in the same way, this could cause issues,\n    // but that is vanishingly unlikely.\n    clazz.ctorParameters = ctorParameters;\n  }\n  if (propDecorators !== null) {\n    // The property decorator objects are merged as it is possible different fields have different\n    // decorator types. Decorators on individual fields are not merged, as it's also incredibly\n    // unlikely that a field will be decorated both with an Angular decorator and a non-Angular\n    // decorator that's also been downleveled.\n    if (clazz.propDecorators !== undefined) {\n      clazz.propDecorators = Object.assign({}, clazz.propDecorators, propDecorators);\n    } else {\n      clazz.propDecorators = propDecorators;\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |------consts------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @template T\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns a value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} value\n */\nfunction pureFunction0(slotOffset, pureFn, thisArg) {\n  // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n  /** @type {?} */\n  const bindingIndex = getBindingRoot() + slotOffset;\n  /** @type {?} */\n  const lView = getLView();\n  return isCreationMode() ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns an updated value\n * @param {?} exp Updated expression value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction1(slotOffset, pureFn, exp, thisArg) {\n  // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const bindingIndex = getBindingRoot() + slotOffset;\n  return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getBinding(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n  // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n  /** @type {?} */\n  const bindingIndex = getBindingRoot() + slotOffset;\n  /** @type {?} */\n  const lView = getLView();\n  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getBinding(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n  // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n  /** @type {?} */\n  const bindingIndex = getBindingRoot() + slotOffset;\n  /** @type {?} */\n  const lView = getLView();\n  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getBinding(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n  // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n  /** @type {?} */\n  const bindingIndex = getBindingRoot() + slotOffset;\n  /** @type {?} */\n  const lView = getLView();\n  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getBinding(lView, bindingIndex + 4);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n  // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n  /** @type {?} */\n  const bindingIndex = getBindingRoot() + slotOffset;\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n  // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n  /** @type {?} */\n  const bindingIndex = getBindingRoot() + slotOffset;\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n  // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n  /** @type {?} */\n  const bindingIndex = getBindingRoot() + slotOffset;\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?} exp8\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n  // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n  /** @type {?} */\n  const bindingIndex = getBindingRoot() + slotOffset;\n  /** @type {?} */\n  const lView = getLView();\n  /** @type {?} */\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param {?} exps An array of binding values\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunctionV(slotOffset, pureFn, exps, thisArg) {\n  // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n  /** @type {?} */\n  let bindingIndex = getBindingRoot() + slotOffset;\n  /** @type {?} */\n  let different = false;\n  /** @type {?} */\n  const lView = getLView();\n  for (let i = 0; i < exps.length; i++) {\n    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n  }\n  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getBinding(lView, bindingIndex);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Create a pipe.\n *\n * @param {?} index Pipe index where the pipe will be stored.\n * @param {?} pipeName The name of the pipe\n * @return {?} T the instance of the pipe.\n */\nfunction pipe(index, pipeName) {\n  /** @type {?} */\n  const tView = getLView()[TVIEW];\n  /** @type {?} */\n  let pipeDef;\n  /** @type {?} */\n  const adjustedIndex = index + HEADER_OFFSET;\n  if (tView.firstTemplatePass) {\n    pipeDef = getPipeDef$1(pipeName, tView.pipeRegistry);\n    tView.data[adjustedIndex] = pipeDef;\n    if (pipeDef.onDestroy) {\n      (tView.pipeDestroyHooks || (tView.pipeDestroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n    }\n  } else {\n    pipeDef = /** @type {?} */tView.data[adjustedIndex];\n  }\n  /** @type {?} */\n  const pipeInstance = pipeDef.factory(null);\n  store(index, pipeInstance);\n  return pipeInstance;\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param {?} name Name of pipe to resolve\n * @param {?} registry Full list of available pipes\n * @return {?} Matching PipeDef\n */\nfunction getPipeDef$1(name, registry) {\n  if (registry) {\n    for (let i = registry.length - 1; i >= 0; i--) {\n      /** @type {?} */\n      const pipeDef = registry[i];\n      if (name === pipeDef.name) {\n        return pipeDef;\n      }\n    }\n  }\n  throw new Error(`The pipe '${name}' could not be found!`);\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nfunction pipeBind1(index, slotOffset, v1) {\n  /** @type {?} */\n  const pipeInstance = load(index);\n  return unwrapValue(isPure(index) ? pureFunction1(slotOffset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1));\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nfunction pipeBind2(index, slotOffset, v1, v2) {\n  /** @type {?} */\n  const pipeInstance = load(index);\n  return unwrapValue(isPure(index) ? pureFunction2(slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2));\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 4rd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nfunction pipeBind3(index, slotOffset, v1, v2, v3) {\n  /** @type {?} */\n  const pipeInstance = load(index);\n  return unwrapValue(isPure(index) ? pureFunction3(slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3));\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 3rd argument to {\\@link PipeTransform#transform}.\n * @param {?} v4 4th argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nfunction pipeBind4(index, slotOffset, v1, v2, v3, v4) {\n  /** @type {?} */\n  const pipeInstance = load(index);\n  return unwrapValue(isPure(index) ? pureFunction4(slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4));\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} values Array of arguments to pass to {\\@link PipeTransform#transform} method.\n * @return {?}\n */\nfunction pipeBindV(index, slotOffset, values) {\n  /** @type {?} */\n  const pipeInstance = load(index);\n  return unwrapValue(isPure(index) ? pureFunctionV(slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values));\n}\n/**\n * @param {?} index\n * @return {?}\n */\nfunction isPure(index) {\n  return (/** @type {?} */getLView()[TVIEW].data[index + HEADER_OFFSET].pure\n  );\n}\n/**\n * Unwrap the output of a pipe transformation.\n * In order to trick change detection into considering that the new value is always different from\n * the old one, the old value is overwritten by NO_CHANGE.\n *\n * @param {?} newValue the pipe transformation output.\n * @return {?}\n */\nfunction unwrapValue(newValue) {\n  if (WrappedValue.isWrapped(newValue)) {\n    newValue = WrappedValue.unwrap(newValue);\n    getLView()[getBindingRoot()] = NO_CHANGE;\n  }\n  return newValue;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * \\@publicApi\n * @template T\n */\nclass EventEmitter extends Subject {\n  // tslint:disable-line\n  /**\n   * Creates an instance of this class that can\n   * deliver events synchronously or asynchronously.\n   *\n   * @param {?=} isAsync When true, deliver events asynchronously.\n   *\n   */\n  constructor(isAsync = false) {\n    super();\n    this.__isAsync = isAsync;\n  }\n  /**\n   * Emits an event containing a given value.\n   * @param {?=} value The value to emit.\n   * @return {?}\n   */\n  emit(value) {\n    super.next(value);\n  }\n  /**\n   * Registers handlers for events emitted by this instance.\n   * @param {?=} generatorOrNext When supplied, a custom handler for emitted events.\n   * @param {?=} error When supplied, a custom handler for an error notification\n   * from this emitter.\n   * @param {?=} complete When supplied, a custom handler for a completion\n   * notification from this emitter.\n   * @return {?}\n   */\n  subscribe(generatorOrNext, error, complete) {\n    /** @type {?} */\n    let schedulerFn;\n    /** @type {?} */\n    let errorFn = err => null;\n    /** @type {?} */\n    let completeFn = () => null;\n    if (generatorOrNext && typeof generatorOrNext === 'object') {\n      schedulerFn = this.__isAsync ? value => {\n        setTimeout(() => generatorOrNext.next(value));\n      } : value => {\n        generatorOrNext.next(value);\n      };\n      if (generatorOrNext.error) {\n        errorFn = this.__isAsync ? err => {\n          setTimeout(() => generatorOrNext.error(err));\n        } : err => {\n          generatorOrNext.error(err);\n        };\n      }\n      if (generatorOrNext.complete) {\n        completeFn = this.__isAsync ? () => {\n          setTimeout(() => generatorOrNext.complete());\n        } : () => {\n          generatorOrNext.complete();\n        };\n      }\n    } else {\n      schedulerFn = this.__isAsync ? value => {\n        setTimeout(() => generatorOrNext(value));\n      } : value => {\n        generatorOrNext(value);\n      };\n      if (error) {\n        errorFn = this.__isAsync ? err => {\n          setTimeout(() => error(err));\n        } : err => {\n          error(err);\n        };\n      }\n      if (complete) {\n        completeFn = this.__isAsync ? () => {\n          setTimeout(() => complete());\n        } : () => {\n          complete();\n        };\n      }\n    }\n    /** @type {?} */\n    const sink = super.subscribe(schedulerFn, errorFn, completeFn);\n    if (generatorOrNext instanceof Subscription) {\n      generatorOrNext.add(sink);\n    }\n    return sink;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass TemplateRef {}\n/**\n * \\@internal\n */\nTemplateRef.__NG_ELEMENT_ID__ = () => SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef);\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = injectTemplateRef;\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LQueries_ {\n  /**\n   * @param {?} parent\n   * @param {?} shallow\n   * @param {?} deep\n   */\n  constructor(parent, shallow, deep) {\n    this.parent = parent;\n    this.shallow = shallow;\n    this.deep = deep;\n  }\n  /**\n   * @template T\n   * @param {?} queryList\n   * @param {?} predicate\n   * @param {?=} descend\n   * @param {?=} read\n   * @return {?}\n   */\n  track(queryList, predicate, descend, read) {\n    if (descend) {\n      this.deep = createQuery(this.deep, queryList, predicate, read != null ? read : null);\n    } else {\n      this.shallow = createQuery(this.shallow, queryList, predicate, read != null ? read : null);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  clone() {\n    return new LQueries_(this, null, this.deep);\n  }\n  /**\n   * @return {?}\n   */\n  container() {\n    /** @type {?} */\n    const shallowResults = copyQueriesToContainer(this.shallow);\n    /** @type {?} */\n    const deepResults = copyQueriesToContainer(this.deep);\n    return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n  }\n  /**\n   * @return {?}\n   */\n  createView() {\n    /** @type {?} */\n    const shallowResults = copyQueriesToView(this.shallow);\n    /** @type {?} */\n    const deepResults = copyQueriesToView(this.deep);\n    return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n  }\n  /**\n   * @param {?} index\n   * @return {?}\n   */\n  insertView(index) {\n    insertView$1(index, this.shallow);\n    insertView$1(index, this.deep);\n  }\n  /**\n   * @param {?} tNode\n   * @return {?}\n   */\n  addNode(tNode) {\n    add(this.deep, tNode);\n    if (isContentQueryHost(tNode)) {\n      add(this.shallow, tNode);\n      if (tNode.parent && isContentQueryHost(tNode.parent)) {\n        // if node has a content query and parent also has a content query\n        // both queries need to check this node for shallow matches\n        add( /** @type {?} */this.parent.shallow, tNode);\n      }\n      return this.parent;\n    }\n    isRootNodeOfQuery(tNode) && add(this.shallow, tNode);\n    return this;\n  }\n  /**\n   * @return {?}\n   */\n  removeView() {\n    removeView$1(this.shallow);\n    removeView$1(this.deep);\n  }\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isRootNodeOfQuery(tNode) {\n  return tNode.parent === null || isContentQueryHost(tNode.parent);\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToContainer(query) {\n  /** @type {?} */\n  let result = null;\n  while (query) {\n    /** @type {?} */\n    const containerValues = [];\n    query.values.push(containerValues);\n    /** @type {?} */\n    const clonedQuery = {\n      next: result,\n      list: query.list,\n      predicate: query.predicate,\n      values: containerValues,\n      containerValues: null\n    };\n    result = clonedQuery;\n    query = query.next;\n  }\n  return result;\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToView(query) {\n  /** @type {?} */\n  let result = null;\n  while (query) {\n    /** @type {?} */\n    const clonedQuery = {\n      next: result,\n      list: query.list,\n      predicate: query.predicate,\n      values: [],\n      containerValues: query.values\n    };\n    result = clonedQuery;\n    query = query.next;\n  }\n  return result;\n}\n/**\n * @param {?} index\n * @param {?} query\n * @return {?}\n */\nfunction insertView$1(index, query) {\n  while (query) {\n    ngDevMode && assertDefined(query.containerValues, 'View queries need to have a pointer to container values.');\n    /** @type {?} */query.containerValues.splice(index, 0, query.values);\n    query = query.next;\n  }\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction removeView$1(query) {\n  while (query) {\n    ngDevMode && assertDefined(query.containerValues, 'View queries need to have a pointer to container values.');\n    /** @type {?} */\n    const containerValues = /** @type {?} */query.containerValues;\n    /** @type {?} */\n    const viewValuesIdx = containerValues.indexOf(query.values);\n    /** @type {?} */\n    const removed = containerValues.splice(viewValuesIdx, 1);\n    // mark a query as dirty only when removed view had matching modes\n    ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n    if (removed[0].length) {\n      query.list.setDirty();\n    }\n    query = query.next;\n  }\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param {?} tNode static data of a node to check\n * @param {?} selector selector to match\n * @return {?} directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n  /** @type {?} */\n  const localNames = tNode.localNames;\n  if (localNames) {\n    for (let i = 0; i < localNames.length; i += 2) {\n      if (localNames[i] === selector) {\n        return (/** @type {?} */localNames[i + 1]\n        );\n      }\n    }\n  }\n  return null;\n}\n// TODO: \"read\" should be an AbstractType (FW-486)\n/**\n * @param {?} read\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction queryByReadToken(read, tNode, currentView) {\n  /** @type {?} */\n  const factoryFn = /** @type {?} */read[NG_ELEMENT_ID];\n  if (typeof factoryFn === 'function') {\n    return factoryFn();\n  } else {\n    /** @type {?} */\n    const matchingIdx = locateDirectiveOrProvider(tNode, currentView, /** @type {?} */read, false, false);\n    if (matchingIdx !== null) {\n      return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, /** @type {?} */tNode);\n    }\n  }\n  return null;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction queryByTNodeType(tNode, currentView) {\n  if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n    return createElementRef(ElementRef, tNode, currentView);\n  }\n  if (tNode.type === 0 /* Container */) {\n    return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n  }\n  return null;\n}\n/**\n * @param {?} templateRefToken\n * @param {?} tNode\n * @param {?} currentView\n * @param {?} read\n * @return {?}\n */\nfunction queryByTemplateRef(templateRefToken, tNode, currentView, read) {\n  /** @type {?} */\n  const templateRefResult = /** @type {?} */templateRefToken[NG_ELEMENT_ID]();\n  if (read) {\n    return templateRefResult ? queryByReadToken(read, tNode, currentView) : null;\n  }\n  return templateRefResult;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @param {?} read\n * @param {?} matchingIdx\n * @return {?}\n */\nfunction queryRead(tNode, currentView, read, matchingIdx) {\n  if (read) {\n    return queryByReadToken(read, tNode, currentView);\n  }\n  if (matchingIdx > -1) {\n    return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, /** @type {?} */tNode);\n  }\n  // if read token and / or strategy is not specified,\n  // detect it using appropriate tNode type\n  return queryByTNodeType(tNode, currentView);\n}\n/**\n * @param {?} query\n * @param {?} tNode\n * @return {?}\n */\nfunction add(query, tNode) {\n  /** @type {?} */\n  const currentView = getLView();\n  while (query) {\n    /** @type {?} */\n    const predicate = query.predicate;\n    /** @type {?} */\n    const type = /** @type {?} */predicate.type;\n    if (type) {\n      /** @type {?} */\n      let result = null;\n      if (type === TemplateRef) {\n        result = queryByTemplateRef(type, tNode, currentView, predicate.read);\n      } else {\n        /** @type {?} */\n        const matchingIdx = locateDirectiveOrProvider(tNode, currentView, type, false, false);\n        if (matchingIdx !== null) {\n          result = queryRead(tNode, currentView, predicate.read, matchingIdx);\n        }\n      }\n      if (result !== null) {\n        addMatch(query, result);\n      }\n    } else {\n      /** @type {?} */\n      const selector = /** @type {?} */predicate.selector;\n      for (let i = 0; i < selector.length; i++) {\n        /** @type {?} */\n        const matchingIdx = getIdxOfMatchingSelector(tNode, selector[i]);\n        if (matchingIdx !== null) {\n          /** @type {?} */\n          const result = queryRead(tNode, currentView, predicate.read, matchingIdx);\n          if (result !== null) {\n            addMatch(query, result);\n          }\n        }\n      }\n    }\n    query = query.next;\n  }\n}\n/**\n * @param {?} query\n * @param {?} matchingValue\n * @return {?}\n */\nfunction addMatch(query, matchingValue) {\n  query.values.push(matchingValue);\n  query.list.setDirty();\n}\n/**\n * @template T\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createPredicate(predicate, read) {\n  /** @type {?} */\n  const isArray = Array.isArray(predicate);\n  return {\n    type: isArray ? null : /** @type {?} */predicate,\n    selector: isArray ? /** @type {?} */predicate : null,\n    read: read\n  };\n}\n/**\n * @template T\n * @param {?} previous\n * @param {?} queryList\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createQuery(previous, queryList, predicate, read) {\n  return {\n    next: previous,\n    list: queryList,\n    predicate: createPredicate(predicate, read),\n    values: /** @type {?} */ /** @type {?} */queryList._valuesTree,\n    containerValues: null\n  };\n}\n/**\n * @template T\n */\nclass QueryList_ {\n  constructor() {\n    this.dirty = true;\n    this.changes = new EventEmitter();\n    this._values = [];\n    /**\n     * \\@internal\n     */\n    this._valuesTree = [];\n  }\n  /**\n   * @return {?}\n   */\n  get length() {\n    return this._values.length;\n  }\n  /**\n   * @return {?}\n   */\n  get first() {\n    /** @type {?} */\n    let values = this._values;\n    return values.length ? values[0] : null;\n  }\n  /**\n   * @return {?}\n   */\n  get last() {\n    /** @type {?} */\n    let values = this._values;\n    return values.length ? values[values.length - 1] : null;\n  }\n  /**\n   * See\n   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n   * @template U\n   * @param {?} fn\n   * @return {?}\n   */\n  map(fn) {\n    return this._values.map(fn);\n  }\n  /**\n   * See\n   * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n   * @param {?} fn\n   * @return {?}\n   */\n  filter(fn) {\n    return this._values.filter(fn);\n  }\n  /**\n   * See\n   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n   * @param {?} fn\n   * @return {?}\n   */\n  find(fn) {\n    return this._values.find(fn);\n  }\n  /**\n   * See\n   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n   * @template U\n   * @param {?} fn\n   * @param {?} init\n   * @return {?}\n   */\n  reduce(fn, init) {\n    return this._values.reduce(fn, init);\n  }\n  /**\n   * See\n   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n   * @param {?} fn\n   * @return {?}\n   */\n  forEach(fn) {\n    this._values.forEach(fn);\n  }\n  /**\n   * See\n   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n   * @param {?} fn\n   * @return {?}\n   */\n  some(fn) {\n    return this._values.some(fn);\n  }\n  /**\n   * @return {?}\n   */\n  toArray() {\n    return this._values.slice(0);\n  }\n  /**\n   * @return {?}\n   */\n  [getSymbolIterator()]() {\n    return (/** @type {?} */this._values[getSymbolIterator()]()\n    );\n  }\n  /**\n   * @return {?}\n   */\n  toString() {\n    return this._values.toString();\n  }\n  /**\n   * @param {?} res\n   * @return {?}\n   */\n  reset(res) {\n    this._values = flatten(res);\n    /** @type {?} */this.dirty = false;\n  }\n  /**\n   * @return {?}\n   */\n  notifyOnChanges() {\n    /** @type {?} */this.changes.emit(this);\n  }\n  /**\n   * @return {?}\n   */\n  setDirty() {\n    /** @type {?} */this.dirty = true;\n  }\n  /**\n   * @return {?}\n   */\n  destroy() {\n    /** @type {?} */this.changes.complete();\n    /** @type {?} */this.changes.unsubscribe();\n  }\n}\n/** @type {?} */\nconst QueryList = /** @type {?} */QueryList_;\n/**\n * Creates and returns a QueryList.\n *\n * @template T\n * @param {?} memoryIndex The index in memory where the QueryList should be saved. If null,\n * this is is a content query and the QueryList will be saved later through directiveCreate.\n * @param {?} predicate The type for which the query will search\n * @param {?=} descend Whether or not to descend into children\n * @param {?=} read What to save in the query\n * @return {?} QueryList<T>\n */\nfunction query(memoryIndex, predicate, descend,\n// TODO: \"read\" should be an AbstractType (FW-486)\nread) {\n  ngDevMode && assertPreviousIsParent(getIsParent());\n  /** @type {?} */\n  const queryList = new QueryList();\n  /** @type {?} */\n  const queries = getOrCreateCurrentQueries(LQueries_);\n  queries.track(queryList, predicate, descend, read);\n  storeCleanupWithContext(getLView(), queryList, queryList.destroy);\n  if (memoryIndex != null) {\n    store(memoryIndex, queryList);\n  }\n  return queryList;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n * Returns true if a query got dirty during change detection, false otherwise.\n * @param {?} queryList\n * @return {?}\n */\nfunction queryRefresh(queryList) {\n  /** @type {?} */\n  const queryListImpl = /** @type {?} */ /** @type {?} */queryList;\n  if (queryList.dirty) {\n    queryList.reset(queryListImpl._valuesTree);\n    queryList.notifyOnChanges();\n    return true;\n  }\n  return false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction templateRefExtractor(tNode, currentView) {\n  return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst BRAND = '__SANITIZER_TRUSTED_BRAND__';\n/**\n * @param {?} value\n * @param {?} type\n * @return {?}\n */\nfunction allowSanitizationBypass(value, type) {\n  return value instanceof String && /** @type {?} */value[BRAND] === type;\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link htmlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedHtml `html` string which needs to be implicitly trusted.\n * @return {?} a `html` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustHtml(trustedHtml) {\n  return bypassSanitizationTrustString(trustedHtml, \"Html\" /* Html */);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link styleSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedStyle `style` string which needs to be implicitly trusted.\n * @return {?} a `style` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustStyle(trustedStyle) {\n  return bypassSanitizationTrustString(trustedStyle, \"Style\" /* Style */);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link scriptSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedScript `script` string which needs to be implicitly trusted.\n * @return {?} a `script` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustScript(trustedScript) {\n  return bypassSanitizationTrustString(trustedScript, \"Script\" /* Script */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link urlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustUrl(trustedUrl) {\n  return bypassSanitizationTrustString(trustedUrl, \"Url\" /* Url */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n  return bypassSanitizationTrustString(trustedResourceUrl, \"ResourceUrl\" /* ResourceUrl */);\n}\n/**\n * @param {?} trustedString\n * @param {?} mode\n * @return {?}\n */\nfunction bypassSanitizationTrustString(trustedString, mode) {\n  /** @type {?} */\n  const trusted = /** @type {?} */new String(trustedString);\n  trusted[BRAND] = mode;\n  return trusted;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n * @type {?}\n */\nconst VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\n/** @type {?} */\nconst TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\n/** @type {?} */\nconst COLOR_FNS = '(?:rgb|hsl)a?';\n/** @type {?} */\nconst GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\n/** @type {?} */\nconst CSS3_FNS = '(?:calc|attr)';\n/** @type {?} */\nconst FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\n/** @type {?} */\nconst SAFE_STYLE_VALUE = new RegExp(`^(${VALUES}|` + `(?:${TRANSFORMATION_FNS}|${COLOR_FNS}|${GRADIENTS}|${CSS3_FNS})` + `${FN_ARGS})$`, 'g');\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n * @type {?}\n */\nconst URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value) {\n  /** @type {?} */\n  let outsideSingle = true;\n  /** @type {?} */\n  let outsideDouble = true;\n  for (let i = 0; i < value.length; i++) {\n    /** @type {?} */\n    const c = value.charAt(i);\n    if (c === '\\'' && outsideDouble) {\n      outsideSingle = !outsideSingle;\n    } else if (c === '\"' && outsideSingle) {\n      outsideDouble = !outsideDouble;\n    }\n  }\n  return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nfunction _sanitizeStyle(value) {\n  value = String(value).trim(); // Make sure it's actually a string.\n  if (!value) return '';\n  // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n  // reasoning behind this.\n  /** @type {?} */\n  const urlMatch = value.match(URL_RE);\n  if (urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1] || value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n    return value; // Safe style values.\n  }\n\n  if (isDevMode()) {\n    console.warn(`WARNING: sanitizing unsafe style value ${value} (see http://g.co/ng/security#xss).`);\n  }\n  return 'unsafe';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustHtml}.\n *\n * @param {?} unsafeHtml untrusted `html`, typically from the user.\n * @return {?} `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n */\nfunction sanitizeHtml(unsafeHtml) {\n  /** @type {?} */\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '';\n  }\n  if (allowSanitizationBypass(unsafeHtml, \"Html\" /* Html */)) {\n    return unsafeHtml.toString();\n  }\n  return _sanitizeHtml(document, stringify$1(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustStyle}.\n *\n * @param {?} unsafeStyle untrusted `style`, typically from the user.\n * @return {?} `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n */\nfunction sanitizeStyle(unsafeStyle) {\n  /** @type {?} */\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n  }\n  if (allowSanitizationBypass(unsafeStyle, \"Style\" /* Style */)) {\n    return unsafeStyle.toString();\n  }\n  return _sanitizeStyle(stringify$1(unsafeStyle));\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustUrl}.\n *\n * @param {?} unsafeUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n */\nfunction sanitizeUrl(unsafeUrl) {\n  /** @type {?} */\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n  }\n  if (allowSanitizationBypass(unsafeUrl, \"Url\" /* Url */)) {\n    return unsafeUrl.toString();\n  }\n  return _sanitizeUrl(stringify$1(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {\\@link bypassSanitizationTrustResourceUrl}.\n *\n * @param {?} unsafeResourceUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n */\nfunction sanitizeResourceUrl(unsafeResourceUrl) {\n  /** @type {?} */\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n  }\n  if (allowSanitizationBypass(unsafeResourceUrl, \"ResourceUrl\" /* ResourceUrl */)) {\n    return unsafeResourceUrl.toString();\n  }\n  throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {\\@link\n * bypassSanitizationTrustScript}.\n *\n * @param {?} unsafeScript untrusted `script`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n */\nfunction sanitizeScript(unsafeScript) {\n  /** @type {?} */\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '';\n  }\n  if (allowSanitizationBypass(unsafeScript, \"Script\" /* Script */)) {\n    return unsafeScript.toString();\n  }\n  throw new Error('unsafe value used in a script context');\n}\n/**\n * The default style sanitizer will handle sanitization for style properties by\n * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n * @type {?}\n */\nconst defaultStyleSanitizer = /** @type {?} */function (prop, value) {\n  if (value === undefined) {\n    return prop === 'background-image' || prop === 'background' || prop === 'border-image' || prop === 'filter' || prop === 'list-style' || prop === 'list-style-image';\n  }\n  return sanitizeStyle(value);\n};\n/**\n * @return {?}\n */\nfunction getSanitizer() {\n  /** @type {?} */\n  const lView = getLView();\n  return lView && lView[SANITIZER];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A mapping of the \\@angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of \\@angular/core.\n * @type {?}\n */\nconst angularCoreEnv = {\n  'ɵdefineBase': defineBase,\n  'ɵdefineComponent': defineComponent,\n  'ɵdefineDirective': defineDirective,\n  'defineInjectable': defineInjectable,\n  'defineInjector': defineInjector,\n  'ɵdefineNgModule': defineNgModule,\n  'ɵdefinePipe': definePipe,\n  'ɵdirectiveInject': directiveInject,\n  'ɵgetFactoryOf': getFactoryOf,\n  'ɵgetInheritedFactory': getInheritedFactory,\n  'inject': inject,\n  'ɵinjectAttribute': injectAttribute,\n  'ɵtemplateRefExtractor': templateRefExtractor,\n  'ɵNgOnChangesFeature': NgOnChangesFeature,\n  'ɵProvidersFeature': ProvidersFeature,\n  'ɵInheritDefinitionFeature': InheritDefinitionFeature,\n  'ɵelementAttribute': elementAttribute,\n  'ɵbind': bind,\n  'ɵcontainer': container,\n  'ɵnextContext': nextContext,\n  'ɵcontainerRefreshStart': containerRefreshStart,\n  'ɵcontainerRefreshEnd': containerRefreshEnd,\n  'ɵloadQueryList': loadQueryList,\n  'ɵnamespaceHTML': namespaceHTML,\n  'ɵnamespaceMathML': namespaceMathML,\n  'ɵnamespaceSVG': namespaceSVG,\n  'ɵenableBindings': enableBindings,\n  'ɵdisableBindings': disableBindings,\n  'ɵallocHostVars': allocHostVars,\n  'ɵelementStart': elementStart,\n  'ɵelementEnd': elementEnd,\n  'ɵelement': element,\n  'ɵelementContainerStart': elementContainerStart,\n  'ɵelementContainerEnd': elementContainerEnd,\n  'ɵpureFunction0': pureFunction0,\n  'ɵpureFunction1': pureFunction1,\n  'ɵpureFunction2': pureFunction2,\n  'ɵpureFunction3': pureFunction3,\n  'ɵpureFunction4': pureFunction4,\n  'ɵpureFunction5': pureFunction5,\n  'ɵpureFunction6': pureFunction6,\n  'ɵpureFunction7': pureFunction7,\n  'ɵpureFunction8': pureFunction8,\n  'ɵpureFunctionV': pureFunctionV,\n  'ɵgetCurrentView': getCurrentView,\n  'ɵrestoreView': restoreView,\n  'ɵinterpolation1': interpolation1,\n  'ɵinterpolation2': interpolation2,\n  'ɵinterpolation3': interpolation3,\n  'ɵinterpolation4': interpolation4,\n  'ɵinterpolation5': interpolation5,\n  'ɵinterpolation6': interpolation6,\n  'ɵinterpolation7': interpolation7,\n  'ɵinterpolation8': interpolation8,\n  'ɵinterpolationV': interpolationV,\n  'ɵelementClassProp': elementClassProp,\n  'ɵlistener': listener,\n  'ɵload': load,\n  'ɵprojection': projection,\n  'ɵelementProperty': elementProperty,\n  'ɵcomponentHostSyntheticProperty': componentHostSyntheticProperty,\n  'ɵpipeBind1': pipeBind1,\n  'ɵpipeBind2': pipeBind2,\n  'ɵpipeBind3': pipeBind3,\n  'ɵpipeBind4': pipeBind4,\n  'ɵpipeBindV': pipeBindV,\n  'ɵprojectionDef': projectionDef,\n  'ɵpipe': pipe,\n  'ɵquery': query,\n  'ɵqueryRefresh': queryRefresh,\n  'ɵregisterContentQuery': registerContentQuery,\n  'ɵreference': reference,\n  'ɵelementStyling': elementStyling,\n  'ɵelementHostAttrs': elementHostAttrs,\n  'ɵelementStylingMap': elementStylingMap,\n  'ɵelementStyleProp': elementStyleProp,\n  'ɵelementStylingApply': elementStylingApply,\n  'ɵtemplate': template,\n  'ɵtext': text,\n  'ɵtextBinding': textBinding,\n  'ɵembeddedViewStart': embeddedViewStart,\n  'ɵembeddedViewEnd': embeddedViewEnd,\n  'ɵi18n': i18n,\n  'ɵi18nAttributes': i18nAttributes,\n  'ɵi18nExp': i18nExp,\n  'ɵi18nStart': i18nStart,\n  'ɵi18nEnd': i18nEnd,\n  'ɵi18nApply': i18nApply,\n  'ɵi18nPostprocess': i18nPostprocess,\n  'ɵsanitizeHtml': sanitizeHtml,\n  'ɵsanitizeStyle': sanitizeStyle,\n  'ɵdefaultStyleSanitizer': defaultStyleSanitizer,\n  'ɵsanitizeResourceUrl': sanitizeResourceUrl,\n  'ɵsanitizeScript': sanitizeScript,\n  'ɵsanitizeUrl': sanitizeUrl\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to load ng module factories.\n *\n * \\@publicApi\n * @abstract\n */\nclass NgModuleFactoryLoader {}\n/**\n * Map of module-id to the corresponding NgModule.\n * - In pre Ivy we track NgModuleFactory,\n * - In post Ivy we track the NgModuleType\n * @type {?}\n */\nconst modules = new Map();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * \\@publicApi\n * @param {?} id\n * @param {?} factory\n * @return {?}\n */\nfunction registerModuleFactory(id, factory) {\n  /** @type {?} */\n  const existing = /** @type {?} */modules.get(id);\n  assertNotExisting(id, existing && existing.moduleType);\n  modules.set(id, factory);\n}\n/**\n * @param {?} id\n * @param {?} type\n * @return {?}\n */\nfunction assertNotExisting(id, type) {\n  if (type) {\n    throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n  }\n}\n/**\n * @param {?} id\n * @param {?} ngModuleType\n * @return {?}\n */\nfunction registerNgModuleType(id, ngModuleType) {\n  /** @type {?} */\n  const existing = /** @type {?} */modules.get(id);\n  assertNotExisting(id, existing);\n  modules.set(id, ngModuleType);\n}\n/**\n * @param {?} id\n * @return {?}\n */\nfunction getModuleFactory__PRE_R3__(id) {\n  /** @type {?} */\n  const factory = /** @type {?} */modules.get(id);\n  if (!factory) throw noModuleError(id);\n  return factory;\n}\n/**\n * @param {?} id\n * @return {?}\n */\nfunction getModuleFactory__POST_R3__(id) {\n  /** @type {?} */\n  const type = /** @type {?} */modules.get(id);\n  if (!type) throw noModuleError(id);\n  return new NgModuleFactory$1(type);\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * \\@publicApi\n * @type {?}\n */\nconst getModuleFactory = getModuleFactory__PRE_R3__;\n/**\n * @param {?} id\n * @return {?}\n */\nfunction noModuleError(id) {\n  return new Error(`No module with ID ${id} loaded`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n * \\@publicApi\n * @type {?}\n */\nconst Type = Function;\n/**\n * @param {?} v\n * @return {?}\n */\nfunction isType(v) {\n  return typeof v === 'function';\n}\n// WARNING: interface has both a type and a value, skipping emit\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Attention: These regex has to hold even if the code is minified!\n * @type {?}\n */\nconst DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\n/** @type {?} */\nconst INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/** @type {?} */\nconst INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\nclass ReflectionCapabilities {\n  /**\n   * @param {?=} reflect\n   */\n  constructor(reflect) {\n    this._reflect = reflect || _global['Reflect'];\n  }\n  /**\n   * @return {?}\n   */\n  isReflectionEnabled() {\n    return true;\n  }\n  /**\n   * @template T\n   * @param {?} t\n   * @return {?}\n   */\n  factory(t) {\n    return (...args) => new t(...args);\n  }\n  /**\n   * \\@internal\n   * @param {?} paramTypes\n   * @param {?} paramAnnotations\n   * @return {?}\n   */\n  _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n    /** @type {?} */\n    let result;\n    if (typeof paramTypes === 'undefined') {\n      result = new Array(paramAnnotations.length);\n    } else {\n      result = new Array(paramTypes.length);\n    }\n    for (let i = 0; i < result.length; i++) {\n      // TS outputs Object for parameters without types, while Traceur omits\n      // the annotations. For now we preserve the Traceur behavior to aid\n      // migration, but this can be revisited.\n      if (typeof paramTypes === 'undefined') {\n        result[i] = [];\n      } else if (paramTypes[i] != Object) {\n        result[i] = [paramTypes[i]];\n      } else {\n        result[i] = [];\n      }\n      if (paramAnnotations && paramAnnotations[i] != null) {\n        result[i] = result[i].concat(paramAnnotations[i]);\n      }\n    }\n    return result;\n  }\n  /**\n   * @private\n   * @param {?} type\n   * @param {?} parentCtor\n   * @return {?}\n   */\n  _ownParameters(type, parentCtor) {\n    /** @type {?} */\n    const typeStr = type.toString();\n    // If we have no decorators, we only have function.length as metadata.\n    // In that case, to detect whether a child class declared an own constructor or not,\n    // we need to look inside of that constructor to check whether it is\n    // just calling the parent.\n    // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n    // that sets 'design:paramtypes' to []\n    // if a class inherits from another class but has no ctor declared itself.\n    if (DELEGATE_CTOR.exec(typeStr) || INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr)) {\n      return null;\n    }\n    // Prefer the direct API.\n    if ( /** @type {?} */type.parameters && /** @type {?} */type.parameters !== parentCtor.parameters) {\n      return (/** @type {?} */type.parameters\n      );\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    /** @type {?} */\n    const tsickleCtorParams = /** @type {?} */type.ctorParameters;\n    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n      // Newer tsickle uses a function closure\n      // Retain the non-function case for compatibility with older tsickle\n      /** @type {?} */\n      const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n      /** @type {?} */\n      const paramTypes = ctorParameters.map(ctorParam => ctorParam && ctorParam.type);\n      /** @type {?} */\n      const paramAnnotations = ctorParameters.map(ctorParam => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n    // API for metadata created by invoking the decorators.\n    /** @type {?} */\n    const paramAnnotations = type.hasOwnProperty(PARAMETERS) && /** @type {?} */type[PARAMETERS];\n    /** @type {?} */\n    const paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata('design:paramtypes', type);\n    if (paramTypes || paramAnnotations) {\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n    // If a class has no decorators, at least create metadata\n    // based on function.length.\n    // Note: We know that this is a real constructor as we checked\n    // the content of the constructor above.\n    return new Array( /** @type {?} */type.length).fill(undefined);\n  }\n  /**\n   * @param {?} type\n   * @return {?}\n   */\n  parameters(type) {\n    // Note: only report metadata if we have at least one class decorator\n    // to stay in sync with the static reflector.\n    if (!isType(type)) {\n      return [];\n    }\n    /** @type {?} */\n    const parentCtor = getParentCtor(type);\n    /** @type {?} */\n    let parameters = this._ownParameters(type, parentCtor);\n    if (!parameters && parentCtor !== Object) {\n      parameters = this.parameters(parentCtor);\n    }\n    return parameters || [];\n  }\n  /**\n   * @private\n   * @param {?} typeOrFunc\n   * @param {?} parentCtor\n   * @return {?}\n   */\n  _ownAnnotations(typeOrFunc, parentCtor) {\n    // Prefer the direct API.\n    if ( /** @type {?} */typeOrFunc.annotations && /** @type {?} */typeOrFunc.annotations !== parentCtor.annotations) {\n      /** @type {?} */\n      let annotations = /** @type {?} */typeOrFunc.annotations;\n      if (typeof annotations === 'function' && annotations.annotations) {\n        annotations = annotations.annotations;\n      }\n      return annotations;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    if ( /** @type {?} */typeOrFunc.decorators && /** @type {?} */typeOrFunc.decorators !== parentCtor.decorators) {\n      return convertTsickleDecoratorIntoMetadata( /** @type {?} */typeOrFunc.decorators);\n    }\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n      return (/** @type {?} */typeOrFunc[ANNOTATIONS]\n      );\n    }\n    return null;\n  }\n  /**\n   * @param {?} typeOrFunc\n   * @return {?}\n   */\n  annotations(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return [];\n    }\n    /** @type {?} */\n    const parentCtor = getParentCtor(typeOrFunc);\n    /** @type {?} */\n    const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n    /** @type {?} */\n    const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n    return parentAnnotations.concat(ownAnnotations);\n  }\n  /**\n   * @private\n   * @param {?} typeOrFunc\n   * @param {?} parentCtor\n   * @return {?}\n   */\n  _ownPropMetadata(typeOrFunc, parentCtor) {\n    // Prefer the direct API.\n    if ( /** @type {?} */typeOrFunc.propMetadata && /** @type {?} */typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n      /** @type {?} */\n      let propMetadata = /** @type {?} */typeOrFunc.propMetadata;\n      if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n        propMetadata = propMetadata.propMetadata;\n      }\n      return propMetadata;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    if ( /** @type {?} */typeOrFunc.propDecorators && /** @type {?} */typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n      /** @type {?} */\n      const propDecorators = /** @type {?} */typeOrFunc.propDecorators;\n      /** @type {?} */\n      const propMetadata = /** @type {?} */{};\n      Object.keys(propDecorators).forEach(prop => {\n        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n      });\n      return propMetadata;\n    }\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n      return (/** @type {?} */typeOrFunc[PROP_METADATA]\n      );\n    }\n    return null;\n  }\n  /**\n   * @param {?} typeOrFunc\n   * @return {?}\n   */\n  propMetadata(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    /** @type {?} */\n    const parentCtor = getParentCtor(typeOrFunc);\n    /** @type {?} */\n    const propMetadata = {};\n    if (parentCtor !== Object) {\n      /** @type {?} */\n      const parentPropMetadata = this.propMetadata(parentCtor);\n      Object.keys(parentPropMetadata).forEach(propName => {\n        propMetadata[propName] = parentPropMetadata[propName];\n      });\n    }\n    /** @type {?} */\n    const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n    if (ownPropMetadata) {\n      Object.keys(ownPropMetadata).forEach(propName => {\n        /** @type {?} */\n        const decorators = [];\n        if (propMetadata.hasOwnProperty(propName)) {\n          decorators.push(...propMetadata[propName]);\n        }\n        decorators.push(...ownPropMetadata[propName]);\n        propMetadata[propName] = decorators;\n      });\n    }\n    return propMetadata;\n  }\n  /**\n   * @param {?} type\n   * @param {?} lcProperty\n   * @return {?}\n   */\n  hasLifecycleHook(type, lcProperty) {\n    return type instanceof Type && lcProperty in type.prototype;\n  }\n  /**\n   * @param {?} type\n   * @return {?}\n   */\n  guards(type) {\n    return {};\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n  getter(name) {\n    return (/** @type {?} */new Function('o', 'return o.' + name + ';')\n    );\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n  setter(name) {\n    return (/** @type {?} */new Function('o', 'v', 'return o.' + name + ' = v;')\n    );\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n  method(name) {\n    /** @type {?} */\n    const functionBody = `if (!o.${name}) throw new Error('\"${name}\" is undefined');\n        return o.${name}.apply(o, args);`;\n    return (/** @type {?} */new Function('o', 'args', functionBody)\n    );\n  }\n  // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n  /**\n   * @param {?} type\n   * @return {?}\n   */\n  importUri(type) {\n    // StaticSymbol\n    if (typeof type === 'object' && type['filePath']) {\n      return type['filePath'];\n    }\n    // Runtime type\n    return `./${stringify(type)}`;\n  }\n  /**\n   * @param {?} type\n   * @return {?}\n   */\n  resourceUri(type) {\n    return `./${stringify(type)}`;\n  }\n  /**\n   * @param {?} name\n   * @param {?} moduleUrl\n   * @param {?} members\n   * @param {?} runtime\n   * @return {?}\n   */\n  resolveIdentifier(name, moduleUrl, members, runtime) {\n    return runtime;\n  }\n  /**\n   * @param {?} enumIdentifier\n   * @param {?} name\n   * @return {?}\n   */\n  resolveEnum(enumIdentifier, name) {\n    return enumIdentifier[name];\n  }\n}\n/**\n * @param {?} decoratorInvocations\n * @return {?}\n */\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n  if (!decoratorInvocations) {\n    return [];\n  }\n  return decoratorInvocations.map(decoratorInvocation => {\n    /** @type {?} */\n    const decoratorType = decoratorInvocation.type;\n    /** @type {?} */\n    const annotationCls = decoratorType.annotationCls;\n    /** @type {?} */\n    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n    return new annotationCls(...annotationArgs);\n  });\n}\n/**\n * @param {?} ctor\n * @return {?}\n */\nfunction getParentCtor(ctor) {\n  /** @type {?} */\n  const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n  /** @type {?} */\n  const parentCtor = parentProto ? parentProto.constructor : null;\n  // Note: We always use `Object` as the null value\n  // to simplify checking later on.\n  return parentCtor || Object;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _reflect = null;\n/**\n * @return {?}\n */\nfunction getReflect() {\n  return _reflect = _reflect || new ReflectionCapabilities();\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction reflectDependencies(type) {\n  return convertDependencies(getReflect().parameters(type));\n}\n/**\n * @param {?} deps\n * @return {?}\n */\nfunction convertDependencies(deps) {\n  /** @type {?} */\n  const compiler = getCompilerFacade();\n  return deps.map(dep => reflectDependency(compiler, dep));\n}\n/**\n * @param {?} compiler\n * @param {?} dep\n * @return {?}\n */\nfunction reflectDependency(compiler, dep) {\n  /** @type {?} */\n  const meta = {\n    token: null,\n    host: false,\n    optional: false,\n    resolved: compiler.R3ResolvedDependencyType.Token,\n    self: false,\n    skipSelf: false\n  };\n  /**\n   * @param {?} token\n   * @return {?}\n   */\n  function setTokenAndResolvedType(token) {\n    meta.resolved = compiler.R3ResolvedDependencyType.Token;\n    meta.token = token;\n  }\n  if (Array.isArray(dep)) {\n    if (dep.length === 0) {\n      throw new Error('Dependency array must have arguments.');\n    }\n    for (let j = 0; j < dep.length; j++) {\n      /** @type {?} */\n      const param = dep[j];\n      if (param === undefined) {\n        // param may be undefined if type of dep is not set by ngtsc\n        continue;\n      } else if (param instanceof Optional || param.__proto__.ngMetadataName === 'Optional') {\n        meta.optional = true;\n      } else if (param instanceof SkipSelf || param.__proto__.ngMetadataName === 'SkipSelf') {\n        meta.skipSelf = true;\n      } else if (param instanceof Self || param.__proto__.ngMetadataName === 'Self') {\n        meta.self = true;\n      } else if (param instanceof Host || param.__proto__.ngMetadataName === 'Host') {\n        meta.host = true;\n      } else if (param instanceof Inject) {\n        meta.token = param.token;\n      } else if (param instanceof Attribute) {\n        if (param.attributeName === undefined) {\n          throw new Error(`Attribute name must be defined.`);\n        }\n        meta.token = param.attributeName;\n        meta.resolved = compiler.R3ResolvedDependencyType.Attribute;\n      } else {\n        setTokenAndResolvedType(param);\n      }\n    }\n  } else {\n    setTokenAndResolvedType(dep);\n  }\n  return meta;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EMPTY_ARRAY$2 = [];\n/** @type {?} */\nconst moduleQueue = [];\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n  moduleQueue.push({\n    moduleType,\n    ngModule\n  });\n}\n/** @type {?} */\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n * @return {?}\n */\nfunction flushModuleScopingQueueAsMuchAsPossible() {\n  if (!flushingModuleQueue) {\n    flushingModuleQueue = true;\n    try {\n      for (let i = moduleQueue.length - 1; i >= 0; i--) {\n        const {\n          moduleType,\n          ngModule\n        } = moduleQueue[i];\n        if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n          // dequeue\n          moduleQueue.splice(i, 1);\n          setScopeOnDeclaredComponents(moduleType, ngModule);\n        }\n      }\n    } finally {\n      flushingModuleQueue = false;\n    }\n  }\n}\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n * @param {?} declaration\n * @return {?}\n */\nfunction isResolvedDeclaration(declaration) {\n  if (Array.isArray(declaration)) {\n    return declaration.every(isResolvedDeclaration);\n  }\n  return !!resolveForwardRef(declaration);\n}\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `\\@NgModule` decorator.\n * @param {?} moduleType\n * @param {?=} ngModule\n * @return {?}\n */\nfunction compileNgModule(moduleType, ngModule = {}) {\n  compileNgModuleDefs( /** @type {?} */moduleType, ngModule);\n  // Because we don't know if all declarations have resolved yet at the moment the\n  // NgModule decorator is executing, we're enqueueing the setting of module scope\n  // on its declarations to be run at a later time when all declarations for the module,\n  // including forward refs, have resolved.\n  enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction compileNgModuleDefs(moduleType, ngModule) {\n  ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n  ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n  /** @type {?} */\n  const declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY$2);\n  /** @type {?} */\n  /** @nocollapse */\n  let ngModuleDef = null;\n  Object.defineProperty(moduleType, NG_MODULE_DEF, {\n    configurable: true,\n    get: () => {\n      if (ngModuleDef === null) {\n        ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, `ng://${moduleType.name}/ngModuleDef.js`, {\n          type: moduleType,\n          bootstrap: flatten$1(ngModule.bootstrap || EMPTY_ARRAY$2, resolveForwardRef),\n          declarations: declarations.map(resolveForwardRef),\n          imports: flatten$1(ngModule.imports || EMPTY_ARRAY$2, resolveForwardRef).map(expandModuleWithProviders),\n          exports: flatten$1(ngModule.exports || EMPTY_ARRAY$2, resolveForwardRef).map(expandModuleWithProviders),\n          emitInline: true\n        });\n      }\n      return ngModuleDef;\n    }\n  });\n  if (ngModule.id) {\n    registerNgModuleType(ngModule.id, moduleType);\n  }\n  /** @type {?} */\n  /** @nocollapse */\n  let ngInjectorDef = null;\n  Object.defineProperty(moduleType, NG_INJECTOR_DEF, {\n    get: () => {\n      if (ngInjectorDef === null) {\n        ngDevMode && verifySemanticsOfNgModuleDef( /** @type {?} */ /** @type {?} */moduleType);\n        /** @type {?} */\n        const meta = {\n          name: moduleType.name,\n          type: moduleType,\n          deps: reflectDependencies(moduleType),\n          providers: ngModule.providers || EMPTY_ARRAY$2,\n          imports: [(ngModule.imports || EMPTY_ARRAY$2).map(resolveForwardRef), (ngModule.exports || EMPTY_ARRAY$2).map(resolveForwardRef)]\n        };\n        ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, `ng://${moduleType.name}/ngInjectorDef.js`, meta);\n      }\n      return ngInjectorDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\n/**\n * @param {?} moduleType\n * @return {?}\n */\nfunction verifySemanticsOfNgModuleDef(moduleType) {\n  if (verifiedNgModule.get(moduleType)) return;\n  verifiedNgModule.set(moduleType, true);\n  moduleType = resolveForwardRef(moduleType);\n  /** @type {?} */\n  /** @nocollapse */\n  const ngModuleDef = getNgModuleDef(moduleType, true);\n  /** @type {?} */\n  const errors = [];\n  ngModuleDef.declarations.forEach(verifyDeclarationsHaveDefinitions);\n  /** @type {?} */\n  const combinedDeclarations = [...ngModuleDef.declarations.map(resolveForwardRef), ...flatten$1(ngModuleDef.imports.map(computeCombinedExports), resolveForwardRef)];\n  ngModuleDef.exports.forEach(verifyExportsAreDeclaredOrReExported);\n  ngModuleDef.declarations.forEach(verifyDeclarationIsUnique);\n  ngModuleDef.declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n  /** @type {?} */\n  const ngModule = getAnnotation(moduleType, 'NgModule');\n  if (ngModule) {\n    ngModule.imports && flatten$1(ngModule.imports, unwrapModuleWithProvidersImports).forEach(verifySemanticsOfNgModuleDef);\n    ngModule.bootstrap && ngModule.bootstrap.forEach(verifyComponentIsPartOfNgModule);\n    ngModule.entryComponents && ngModule.entryComponents.forEach(verifyComponentIsPartOfNgModule);\n  }\n  // Throw Error if any errors were detected.\n  if (errors.length) {\n    throw new Error(errors.join('\\n'));\n  }\n  ////////////////////////////////////////////////////////////////////////////////////////////////\n  /**\n   * @param {?} type\n   * @return {?}\n   */\n  function verifyDeclarationsHaveDefinitions(type) {\n    type = resolveForwardRef(type);\n    /** @type {?} */\n    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n    if (!def) {\n      errors.push(`Unexpected value '${stringify$1(type)}' declared by the module '${stringify$1(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n    }\n  }\n  /**\n   * @param {?} type\n   * @return {?}\n   */\n  function verifyExportsAreDeclaredOrReExported(type) {\n    type = resolveForwardRef(type);\n    /** @type {?} */\n    const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' || getPipeDef(type) && 'pipe';\n    if (kind) {\n      // only checked if we are declared as Component, Directive, or Pipe\n      // Modules don't need to be declared or imported.\n      if (combinedDeclarations.lastIndexOf(type) === -1) {\n        // We are exporting something which we don't explicitly declare or import.\n        errors.push(`Can't export ${kind} ${stringify$1(type)} from ${stringify$1(moduleType)} as it was neither declared nor imported!`);\n      }\n    }\n  }\n  /**\n   * @param {?} type\n   * @return {?}\n   */\n  function verifyDeclarationIsUnique(type) {\n    type = resolveForwardRef(type);\n    /** @type {?} */\n    const existingModule = ownerNgModule.get(type);\n    if (existingModule && existingModule !== moduleType) {\n      /** @type {?} */\n      const modules = [existingModule, moduleType].map(stringify$1).sort();\n      errors.push(`Type ${stringify$1(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` + `Please consider moving ${stringify$1(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` + `You can also create a new NgModule that exports and includes ${stringify$1(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n    } else {\n      // Mark type as having owner.\n      ownerNgModule.set(type, moduleType);\n    }\n  }\n  /**\n   * @param {?} type\n   * @return {?}\n   */\n  function verifyComponentIsPartOfNgModule(type) {\n    type = resolveForwardRef(type);\n    /** @type {?} */\n    const existingModule = ownerNgModule.get(type);\n    if (!existingModule) {\n      errors.push(`Component ${stringify$1(type)} is not part of any NgModule or the module has not been imported into your module.`);\n    }\n  }\n  /**\n   * @param {?} type\n   * @return {?}\n   */\n  function verifyComponentEntryComponentsIsPartOfNgModule(type) {\n    type = resolveForwardRef(type);\n    if (getComponentDef(type)) {\n      // We know we are component\n      /** @type {?} */\n      const component = getAnnotation(type, 'Component');\n      if (component && component.entryComponents) {\n        component.entryComponents.forEach(verifyComponentIsPartOfNgModule);\n      }\n    }\n  }\n}\n/**\n * @param {?} typeOrWithProviders\n * @return {?}\n */\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n  typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n  return (/** @type {?} */typeOrWithProviders.ngModule || typeOrWithProviders\n  );\n}\n/**\n * @template T\n * @param {?} type\n * @param {?} name\n * @return {?}\n */\nfunction getAnnotation(type, name) {\n  /** @type {?} */\n  let annotation = null;\n  collect(type.__annotations__);\n  collect(type.decorators);\n  return annotation;\n  /**\n   * @param {?} annotations\n   * @return {?}\n   */\n  function collect(annotations) {\n    if (annotations) {\n      annotations.forEach(readAnnotation);\n    }\n  }\n  /**\n   * @param {?} decorator\n   * @return {?}\n   */\n  function readAnnotation(decorator) {\n    if (!annotation) {\n      /** @type {?} */\n      const proto = Object.getPrototypeOf(decorator);\n      if (proto.ngMetadataName == name) {\n        annotation = /** @type {?} */decorator;\n      } else if (decorator.type) {\n        /** @type {?} */\n        const proto = Object.getPrototypeOf(decorator.type);\n        if (proto.ngMetadataName == name) {\n          annotation = decorator.args[0];\n        }\n      }\n    }\n  }\n}\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n * @type {?}\n */\nlet ownerNgModule = new Map();\n/** @type {?} */\nlet verifiedNgModule = new Map();\n/**\n * @return {?}\n */\nfunction resetCompiledComponents() {\n  ownerNgModule = new Map();\n  verifiedNgModule = new Map();\n  moduleQueue.length = 0;\n}\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited\n * by\n * traversing the exports of imported modules.\n * @param {?} type\n * @return {?}\n */\nfunction computeCombinedExports(type) {\n  type = resolveForwardRef(type);\n  /** @type {?} */\n  /** @nocollapse */\n  const ngModuleDef = getNgModuleDef(type, true);\n  return [...flatten$1(ngModuleDef.exports.map(type => {\n    /** @type {?} */\n    /** @nocollapse */const ngModuleDef = getNgModuleDef(type);\n    if (ngModuleDef) {\n      verifySemanticsOfNgModuleDef( /** @type {?} */ /** @type {?} */type);\n      return computeCombinedExports(type);\n    } else {\n      return type;\n    }\n  }))];\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ngComponentDef set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n  /** @type {?} */\n  const declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY$2);\n  /** @type {?} */\n  const transitiveScopes = transitiveScopesFor(moduleType);\n  declarations.forEach(declaration => {\n    if (declaration.hasOwnProperty(NG_COMPONENT_DEF)) {\n      // An `ngComponentDef` field exists - go ahead and patch the component directly.\n      /** @type {?} */\n      const component = /** @type {?} */declaration;\n      /** @type {?} */\n      const componentDef = /** @type {?} */getComponentDef(component);\n      patchComponentDefWithScope(componentDef, transitiveScopes);\n    } else if (!declaration.hasOwnProperty(NG_DIRECTIVE_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n      // Set `ngSelectorScope` for future reference when the component compilation finishes.\n      /** @type {?} */declaration.ngSelectorScope = moduleType;\n    }\n  });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n * @template C\n * @param {?} componentDef\n * @param {?} transitiveScopes\n * @return {?}\n */\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\n  componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives).map(dir => getDirectiveDef(dir) || /** @type {?} */getComponentDef(dir)).filter(def => !!def);\n  componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map(pipe => /** @type {?} */getPipeDef(pipe));\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. It can be called\n * on modules with components that have not fully compiled yet, but the result should not be used\n * until they have.\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\nfunction transitiveScopesFor(moduleType) {\n  if (!isNgModule(moduleType)) {\n    throw new Error(`${moduleType.name} does not have an ngModuleDef`);\n  }\n  /** @type {?} */\n  const def = /** @type {?} */getNgModuleDef(moduleType);\n  if (def.transitiveCompileScopes !== null) {\n    return def.transitiveCompileScopes;\n  }\n  /** @type {?} */\n  const scopes = {\n    compilation: {\n      directives: new Set(),\n      pipes: new Set()\n    },\n    exported: {\n      directives: new Set(),\n      pipes: new Set()\n    }\n  };\n  def.declarations.forEach(declared => {\n    /** @type {?} */\n    const declaredWithDefs = /** @type {?} */declared;\n    if (getPipeDef(declaredWithDefs)) {\n      scopes.compilation.pipes.add(declared);\n    } else {\n      // Either declared has an ngComponentDef or ngDirectiveDef, or it's a component which hasn't\n      // had its template compiled yet. In either case, it gets added to the compilation's\n      // directives.\n      scopes.compilation.directives.add(declared);\n    }\n  });\n  def.imports.forEach(imported => {\n    /** @type {?} */\n    const importedTyped = /** @type {?} */imported;\n    if (!isNgModule(importedTyped)) {\n      throw new Error(`Importing ${importedTyped.name} which does not have an ngModuleDef`);\n    }\n    // When this module imports another, the imported module's exported directives and pipes are\n    // added to the compilation scope of this module.\n    /** @type {?} */\n    const importedScope = transitiveScopesFor(importedTyped);\n    importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));\n    importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));\n  });\n  def.exports.forEach(exported => {\n    /** @type {?} */\n    const exportedTyped = /** @type {?} */exported;\n    // Either the type is a module, a pipe, or a component/directive (which may not have an\n    // ngComponentDef as it might be compiled asynchronously).\n    if (isNgModule(exportedTyped)) {\n      // When this module exports another, the exported module's exported directives and pipes are\n      // added to both the compilation and exported scopes of this module.\n      /** @type {?} */\n      const exportedScope = transitiveScopesFor(exportedTyped);\n      exportedScope.exported.directives.forEach(entry => {\n        scopes.compilation.directives.add(entry);\n        scopes.exported.directives.add(entry);\n      });\n      exportedScope.exported.pipes.forEach(entry => {\n        scopes.compilation.pipes.add(entry);\n        scopes.exported.pipes.add(entry);\n      });\n    } else if (getPipeDef(exportedTyped)) {\n      scopes.exported.pipes.add(exportedTyped);\n    } else {\n      scopes.exported.directives.add(exportedTyped);\n    }\n  });\n  def.transitiveCompileScopes = scopes;\n  return scopes;\n}\n/**\n * @template T\n * @param {?} values\n * @param {?=} mapFn\n * @return {?}\n */\nfunction flatten$1(values, mapFn) {\n  /** @type {?} */\n  const out = [];\n  values.forEach(value => {\n    if (Array.isArray(value)) {\n      out.push(...flatten$1(value, mapFn));\n    } else {\n      out.push(mapFn ? mapFn(value) : value);\n    }\n  });\n  return out;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction expandModuleWithProviders(value) {\n  if (isModuleWithProviders(value)) {\n    return value.ngModule;\n  }\n  return value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isModuleWithProviders(value) {\n  return (/** @type {?} */value.ngModule !== undefined\n  );\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isNgModule(value) {\n  return !!getNgModuleDef(value);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * ngComponentDef onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction compileComponent(type, metadata) {\n  /** @type {?} */\n  /** @nocollapse */let ngComponentDef = null;\n  // Metadata may have resources which need to be resolved.\n  maybeQueueResolutionOfComponentResources(metadata);\n  Object.defineProperty(type, NG_COMPONENT_DEF, {\n    get: () => {\n      /** @type {?} */\n      const compiler = getCompilerFacade();\n      if (ngComponentDef === null) {\n        if (componentNeedsResolution(metadata)) {\n          /** @type {?} */\n          const error = [`Component '${stringify$1(type)}' is not resolved:`];\n          if (metadata.templateUrl) {\n            error.push(` - templateUrl: ${stringify$1(metadata.templateUrl)}`);\n          }\n          if (metadata.styleUrls && metadata.styleUrls.length) {\n            error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);\n          }\n          error.push(`Did you run and wait for 'resolveComponentResources()'?`);\n          throw new Error(error.join('\\n'));\n        }\n        /** @type {?} */\n        const meta = Object.assign({}, directiveMetadata(type, metadata), {\n          template: metadata.template || '',\n          preserveWhitespaces: metadata.preserveWhitespaces || false,\n          styles: metadata.styles || EMPTY_ARRAY,\n          animations: metadata.animations,\n          viewQueries: extractQueriesMetadata(type, getReflect().propMetadata(type), isViewQuery),\n          directives: [],\n          changeDetection: metadata.changeDetection,\n          pipes: new Map(),\n          encapsulation: metadata.encapsulation || ViewEncapsulation.Emulated,\n          interpolation: metadata.interpolation,\n          viewProviders: metadata.viewProviders || null\n        });\n        ngComponentDef = compiler.compileComponent(angularCoreEnv, `ng://${stringify$1(type)}/template.html`, meta);\n        // When NgModule decorator executed, we enqueued the module definition such that\n        // it would only dequeue and add itself as module scope to all of its declarations,\n        // but only if  if all of its declarations had resolved. This call runs the check\n        // to see if any modules that are in the queue can be dequeued and add scope to\n        // their declarations.\n        flushModuleScopingQueueAsMuchAsPossible();\n        // If component compilation is async, then the @NgModule annotation which declares the\n        // component may execute and set an ngSelectorScope property on the component type. This\n        // allows the component to patch itself with directiveDefs from the module after it\n        // finishes compiling.\n        if (hasSelectorScope(type)) {\n          /** @type {?} */\n          const scopes = transitiveScopesFor(type.ngSelectorScope);\n          patchComponentDefWithScope(ngComponentDef, scopes);\n        }\n      }\n      return ngComponentDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nfunction hasSelectorScope(component) {\n  return (/** @type {?} */component.ngSelectorScope !== undefined\n  );\n}\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * ngDirectiveDef onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n * @param {?} type\n * @param {?} directive\n * @return {?}\n */\nfunction compileDirective(type, directive) {\n  /** @type {?} */\n  /** @nocollapse */let ngDirectiveDef = null;\n  Object.defineProperty(type, NG_DIRECTIVE_DEF, {\n    get: () => {\n      if (ngDirectiveDef === null) {\n        /** @type {?} */\n        const facade = directiveMetadata( /** @type {?} */type, directive);\n        ngDirectiveDef = getCompilerFacade().compileDirective(angularCoreEnv, `ng://${type && type.name}/ngDirectiveDef.js`, facade);\n      }\n      return ngDirectiveDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction extendsDirectlyFromObject(type) {\n  return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction directiveMetadata(type, metadata) {\n  // Reflect inputs and outputs.\n  /** @type {?} */\n  const propMetadata = getReflect().propMetadata(type);\n  return {\n    name: type.name,\n    type: type,\n    typeArgumentCount: 0,\n    selector: /** @type {?} */metadata.selector,\n    deps: reflectDependencies(type),\n    host: metadata.host || EMPTY_OBJ,\n    propMetadata: propMetadata,\n    inputs: metadata.inputs || EMPTY_ARRAY,\n    outputs: metadata.outputs || EMPTY_ARRAY,\n    queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n    lifecycle: {\n      usesOnChanges: type.prototype.ngOnChanges !== undefined\n    },\n    typeSourceSpan: /** @type {?} */null,\n    usesInheritance: !extendsDirectlyFromObject(type),\n    exportAs: metadata.exportAs || null,\n    providers: metadata.providers || null\n  };\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction convertToR3QueryPredicate(selector) {\n  return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n}\n/**\n * @param {?} propertyName\n * @param {?} ann\n * @return {?}\n */\nfunction convertToR3QueryMetadata(propertyName, ann) {\n  return {\n    propertyName: propertyName,\n    predicate: convertToR3QueryPredicate(ann.selector),\n    descendants: ann.descendants,\n    first: ann.first,\n    read: ann.read ? ann.read : null\n  };\n}\n/**\n * @param {?} type\n * @param {?} propMetadata\n * @param {?} isQueryAnn\n * @return {?}\n */\nfunction extractQueriesMetadata(type, propMetadata, isQueryAnn) {\n  /** @type {?} */\n  const queriesMeta = [];\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      propMetadata[field].forEach(ann => {\n        if (isQueryAnn(ann)) {\n          if (!ann.selector) {\n            throw new Error(`Can't construct a query for the property \"${field}\" of ` + `\"${stringify$1(type)}\" since the query selector wasn't defined.`);\n          }\n          queriesMeta.push(convertToR3QueryMetadata(field, ann));\n        }\n      });\n    }\n  }\n  return queriesMeta;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isContentQuery(value) {\n  /** @type {?} */\n  const name = value.ngMetadataName;\n  return name === 'ContentChild' || name === 'ContentChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isViewQuery(value) {\n  /** @type {?} */\n  const name = value.ngMetadataName;\n  return name === 'ViewChild' || name === 'ViewChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction splitByComma(value) {\n  return value.split(',').map(piece => piece.trim());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\nfunction compilePipe(type, meta) {\n  /** @type {?} */\n  /** @nocollapse */let ngPipeDef = null;\n  Object.defineProperty(type, NG_PIPE_DEF, {\n    get: () => {\n      if (ngPipeDef === null) {\n        ngPipeDef = getCompilerFacade().compilePipe(angularCoreEnv, `ng://${stringify$1(type)}/ngPipeDef.js`, {\n          type: type,\n          name: type.name,\n          deps: reflectDependencies(type),\n          pipeName: meta.name,\n          pure: meta.pure !== undefined ? meta.pure : true\n        });\n      }\n      return ngPipeDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Type of the Directive metadata.\n *\n * \\@publicApi\n * @type {?}\n */\nconst Directive = makeDecorator('Directive', (dir = {}) => dir, undefined, undefined, (type, meta) => SWITCH_COMPILE_DIRECTIVE(type, meta));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Component decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Component = makeDecorator('Component', (c = {}) => Object.assign({\n  changeDetection: ChangeDetectionStrategy.Default\n}, c), Directive, undefined, (type, meta) => SWITCH_COMPILE_COMPONENT(type, meta));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Pipe = makeDecorator('Pipe', p => Object.assign({\n  pure: true\n}, p), undefined, undefined, (type, meta) => SWITCH_COMPILE_PIPE(type, meta));\n// WARNING: interface has both a type and a value, skipping emit\n/** @type {?} */\nconst initializeBaseDef = target => {\n  /** @type {?} */\n  const constructor = target.constructor;\n  /** @nocollapse @type {?} */\n  const inheritedBaseDef = constructor.ngBaseDef;\n  /** @type {?} */\n  const baseDef = constructor.ngBaseDef = {\n    inputs: {},\n    outputs: {},\n    declaredInputs: {}\n  };\n  if (inheritedBaseDef) {\n    fillProperties(baseDef.inputs, inheritedBaseDef.inputs);\n    fillProperties(baseDef.outputs, inheritedBaseDef.outputs);\n    fillProperties(baseDef.declaredInputs, inheritedBaseDef.declaredInputs);\n  }\n};\n/**\n * Does the work of creating the `ngBaseDef` property for the `Input` and `Output` decorators.\n * \\@param key \"inputs\" or \"outputs\"\n * @type {?}\n */\nconst updateBaseDefFromIOProp = getProp => (target, name, ...args) => {\n  /** @type {?} */\n  const constructor = target.constructor;\n  if (!constructor.hasOwnProperty(NG_BASE_DEF)) {\n    initializeBaseDef(target);\n  }\n  /** @nocollapse @type {?} */\n  const baseDef = constructor.ngBaseDef;\n  /** @type {?} */\n  const defProp = getProp(baseDef);\n  defProp[name] = args[0];\n};\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Input = makePropDecorator('Input', bindingPropertyName => ({\n  bindingPropertyName\n}), undefined, updateBaseDefFromIOProp(baseDef => baseDef.inputs || {}));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Output = makePropDecorator('Output', bindingPropertyName => ({\n  bindingPropertyName\n}), undefined, updateBaseDefFromIOProp(baseDef => baseDef.outputs || {}));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst HostBinding = makePropDecorator('HostBinding', hostPropertyName => ({\n  hostPropertyName\n}));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Binds a CSS event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * \\@usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```\n * \\@Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n * \\@HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *  }\n * }\n *\n * \\@Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n * ```\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst HostListener = makePropDecorator('HostListener', (eventName, args) => ({\n  eventName,\n  args\n}));\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT__POST_R3__ = compileComponent;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE__POST_R3__ = compileDirective;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE__POST_R3__ = compilePipe;\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__PRE_R3__;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__PRE_R3__;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0$2 = getClosureSafeProperty;\n/** @type {?} */\nconst USE_VALUE$1 = getClosureSafeProperty({\n  provide: String,\n  useValue: ɵ0$2\n});\n/** @type {?} */\nconst EMPTY_ARRAY$3 = [];\n/**\n * @param {?} type\n * @param {?=} provider\n * @return {?}\n */\nfunction convertInjectableProviderToFactory(type, provider) {\n  if (!provider) {\n    /** @type {?} */\n    const reflectionCapabilities = new ReflectionCapabilities();\n    /** @type {?} */\n    const deps = reflectionCapabilities.parameters(type);\n    // TODO - convert to flags.\n    return () => new type(...injectArgs( /** @type {?} */deps));\n  }\n  if (USE_VALUE$1 in provider) {\n    /** @type {?} */\n    const valueProvider = /** @type {?} */provider;\n    return () => valueProvider.useValue;\n  } else if ( /** @type {?} */provider.useExisting) {\n    /** @type {?} */\n    const existingProvider = /** @type {?} */provider;\n    return () => inject(existingProvider.useExisting);\n  } else if ( /** @type {?} */provider.useFactory) {\n    /** @type {?} */\n    const factoryProvider = /** @type {?} */provider;\n    return () => factoryProvider.useFactory(...injectArgs(factoryProvider.deps || EMPTY_ARRAY$3));\n  } else if ( /** @type {?} */provider.useClass) {\n    /** @type {?} */\n    const classProvider = /** @type {?} */provider;\n    /** @type {?} */\n    let deps = /** @type {?} */provider.deps;\n    if (!deps) {\n      /** @type {?} */\n      const reflectionCapabilities = new ReflectionCapabilities();\n      deps = reflectionCapabilities.parameters(type);\n    }\n    return () => new classProvider.useClass(...injectArgs(deps));\n  } else {\n    /** @type {?} */\n    let deps = /** @type {?} */provider.deps;\n    if (!deps) {\n      /** @type {?} */\n      const reflectionCapabilities = new ReflectionCapabilities();\n      deps = reflectionCapabilities.parameters(type);\n    }\n    return () => new type(...injectArgs( /** @type {?} */deps));\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * \\@publicApi\n * @type {?}\n */\nconst CUSTOM_ELEMENTS_SCHEMA = {\n  name: 'custom-elements'\n};\n/**\n * Defines a schema that allows any property on any element.\n *\n * \\@publicApi\n * @type {?}\n */\nconst NO_ERRORS_SCHEMA = {\n  name: 'no-errors-schema'\n};\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst NgModule = makeDecorator('NgModule', ngModule => ngModule, undefined, undefined,\n/**\n * Decorator that marks the following class as an NgModule, and supplies\n * configuration metadata for it.\n *\n * * The `declarations` and `entryComponents` options configure the compiler\n * with information about what belongs to the NgModule.\n * * The `providers` options configures the NgModule's injector to provide\n * dependencies the NgModule members.\n * * The `imports` and `exports` options bring in members from other modules, and make\n * this module's members available to others.\n */\n(type, meta) => SWITCH_COMPILE_NGMODULE(type, meta));\n/**\n * @param {?} moduleType\n * @param {?} metadata\n * @return {?}\n */\nfunction preR3NgModuleCompile(moduleType, metadata) {\n  /** @type {?} */\n  let imports = metadata && metadata.imports || [];\n  if (metadata && metadata.exports) {\n    imports = [...imports, metadata.exports];\n  }\n  /** @nocollapse */\n  moduleType.ngInjectorDef = defineInjector({\n    factory: convertInjectableProviderToFactory(moduleType, {\n      useClass: moduleType\n    }),\n    providers: metadata && metadata.providers,\n    imports: imports\n  });\n}\n/** @type {?} */\nconst SWITCH_COMPILE_NGMODULE__POST_R3__ = compileNgModule;\n/** @type {?} */\nconst SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;\n/** @type {?} */\nconst SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * `ngInjectableDef` onto the injectable type.\n * @param {?} type\n * @param {?=} srcMeta\n * @return {?}\n */\nfunction compileInjectable(type, srcMeta) {\n  /** @type {?} */\n  let def = null;\n  // if NG_INJECTABLE_DEF is already defined on this class then don't overwrite it\n  if (type.hasOwnProperty(NG_INJECTABLE_DEF)) return;\n  Object.defineProperty(type, NG_INJECTABLE_DEF, {\n    get: () => {\n      if (def === null) {\n        // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n        /** @type {?} */\n        const meta = srcMeta || {\n          providedIn: null\n        };\n        /** @type {?} */\n        const hasAProvider = isUseClassProvider(meta) || isUseFactoryProvider(meta) || isUseValueProvider(meta) || isUseExistingProvider(meta);\n        /** @type {?} */\n        const compilerMeta = {\n          name: type.name,\n          type: type,\n          typeArgumentCount: 0,\n          providedIn: meta.providedIn,\n          ctorDeps: reflectDependencies(type),\n          userDeps: undefined\n        };\n        if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n          compilerMeta.userDeps = convertDependencies(meta.deps);\n        }\n        if (!hasAProvider) {\n          // In the case the user specifies a type provider, treat it as {provide: X, useClass: X}.\n          // The deps will have been reflected above, causing the factory to create the class by\n          // calling\n          // its constructor with injected deps.\n          compilerMeta.useClass = type;\n        } else if (isUseClassProvider(meta)) {\n          // The user explicitly specified useClass, and may or may not have provided deps.\n          compilerMeta.useClass = meta.useClass;\n        } else if (isUseValueProvider(meta)) {\n          // The user explicitly specified useValue.\n          compilerMeta.useValue = meta.useValue;\n        } else if (isUseFactoryProvider(meta)) {\n          // The user explicitly specified useFactory.\n          compilerMeta.useFactory = meta.useFactory;\n        } else if (isUseExistingProvider(meta)) {\n          // The user explicitly specified useExisting.\n          compilerMeta.useExisting = meta.useExisting;\n        } else {\n          // Can't happen - either hasAProvider will be false, or one of the providers will be set.\n          throw new Error(`Unreachable state.`);\n        }\n        def = getCompilerFacade().compileInjectable(angularCoreEnv, `ng://${type.name}/ngInjectableDef.js`, compilerMeta);\n      }\n      return def;\n    }\n  });\n}\nconst ɵ0$3 = getClosureSafeProperty;\n/** @type {?} */\nconst USE_VALUE$2 = getClosureSafeProperty({\n  provide: String,\n  useValue: ɵ0$3\n});\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseClassProvider(meta) {\n  return (/** @type {?} */meta.useClass !== undefined\n  );\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseValueProvider(meta) {\n  return USE_VALUE$2 in meta;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseFactoryProvider(meta) {\n  return (/** @type {?} */meta.useFactory !== undefined\n  );\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseExistingProvider(meta) {\n  return (/** @type {?} */meta.useExisting !== undefined\n  );\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Injectable decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (type, meta) => SWITCH_COMPILE_INJECTABLE( /** @type {?} */type, meta));\n/**\n * Supports \\@Injectable() in JIT mode for Render2.\n * @param {?} injectableType\n * @param {?} options\n * @return {?}\n */\nfunction render2CompileInjectable(injectableType, options) {\n  if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {\n    /** @nocollapse */injectableType.ngInjectableDef = defineInjectable({\n      providedIn: options.providedIn,\n      factory: convertInjectableProviderToFactory(injectableType, options)\n    });\n  }\n}\n/** @type {?} */\nconst SWITCH_COMPILE_INJECTABLE__POST_R3__ = compileInjectable;\n/** @type {?} */\nconst SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;\n/** @type {?} */\nconst SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ERROR_DEBUG_CONTEXT = 'ngDebugContext';\n/** @type {?} */\nconst ERROR_ORIGINAL_ERROR = 'ngOriginalError';\n/** @type {?} */\nconst ERROR_LOGGER = 'ngErrorLogger';\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getDebugContext(error) {\n  return (/** @type {?} */error[ERROR_DEBUG_CONTEXT]\n  );\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getOriginalError(error) {\n  return (/** @type {?} */error[ERROR_ORIGINAL_ERROR]\n  );\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getErrorLogger(error) {\n  return (/** @type {?} */error[ERROR_LOGGER] || defaultErrorLogger\n  );\n}\n/**\n * @param {?} console\n * @param {...?} values\n * @return {?}\n */\nfunction defaultErrorLogger(console, ...values) {\n  /** @type {?} */console.error(...values);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * \\@publicApi\n */\nclass ErrorHandler {\n  constructor() {\n    /**\n     * \\@internal\n     */\n    this._console = console;\n  }\n  /**\n   * @param {?} error\n   * @return {?}\n   */\n  handleError(error) {\n    /** @type {?} */\n    const originalError = this._findOriginalError(error);\n    /** @type {?} */\n    const context = this._findContext(error);\n    // Note: Browser consoles show the place from where console.error was called.\n    // We can use this to give users additional information about the error.\n    /** @type {?} */\n    const errorLogger = getErrorLogger(error);\n    errorLogger(this._console, `ERROR`, error);\n    if (originalError) {\n      errorLogger(this._console, `ORIGINAL ERROR`, originalError);\n    }\n    if (context) {\n      errorLogger(this._console, 'ERROR CONTEXT', context);\n    }\n  }\n  /**\n   * \\@internal\n   * @param {?} error\n   * @return {?}\n   */\n  _findContext(error) {\n    if (error) {\n      return getDebugContext(error) ? getDebugContext(error) : this._findContext(getOriginalError(error));\n    }\n    return null;\n  }\n  /**\n   * \\@internal\n   * @param {?} error\n   * @return {?}\n   */\n  _findOriginalError(error) {\n    /** @type {?} */\n    let e = getOriginalError(error);\n    while (e && getOriginalError(e)) {\n      e = getOriginalError(e);\n    }\n    return e;\n  }\n}\n/**\n * @param {?} message\n * @param {?} originalError\n * @return {?}\n */\nfunction wrappedError(message, originalError) {\n  /** @type {?} */\n  const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;\n  /** @type {?} */\n  const error = Error(msg);\n  /** @type {?} */error[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction findFirstClosedCycle(keys) {\n  /** @type {?} */\n  const res = [];\n  for (let i = 0; i < keys.length; ++i) {\n    if (res.indexOf(keys[i]) > -1) {\n      res.push(keys[i]);\n      return res;\n    }\n    res.push(keys[i]);\n  }\n  return res;\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction constructResolvingPath(keys) {\n  if (keys.length > 1) {\n    /** @type {?} */\n    const reversed = findFirstClosedCycle(keys.slice().reverse());\n    /** @type {?} */\n    const tokenStrs = reversed.map(k => stringify(k.token));\n    return ' (' + tokenStrs.join(' -> ') + ')';\n  }\n  return '';\n}\n/**\n * @param {?} injector\n * @param {?} key\n * @param {?} constructResolvingMessage\n * @param {?=} originalError\n * @return {?}\n */\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n  /** @type {?} */\n  const keys = [key];\n  /** @type {?} */\n  const errMsg = constructResolvingMessage(keys);\n  /** @type {?} */\n  const error = /** @type {?} */originalError ? wrappedError(errMsg, originalError) : Error(errMsg);\n  error.addKey = addKey;\n  error.keys = keys;\n  error.injectors = [injector];\n  error.constructResolvingMessage = constructResolvingMessage;\n  /** @type {?} */error[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n/**\n * @this {?}\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction addKey(injector, key) {\n  this.injectors.push(injector);\n  this.keys.push(key);\n  // Note: This updated message won't be reflected in the `.stack` property\n  this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction noProviderError(injector, key) {\n  return injectionError(injector, key, function (keys) {\n    /** @type {?} */\n    const first = stringify(keys[0].token);\n    return `No provider for ${first}!${constructResolvingPath(keys)}`;\n  });\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction cyclicDependencyError(injector, key) {\n  return injectionError(injector, key, function (keys) {\n    return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\n  });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n * @param {?} injector\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} key\n * @return {?}\n */\nfunction instantiationError(injector, originalException, originalStack, key) {\n  return injectionError(injector, key, function (keys) {\n    /** @type {?} */\n    const first = stringify(keys[0].token);\n    return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;\n  }, originalException);\n}\n/**\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n * creation.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n * @param {?} provider\n * @return {?}\n */\nfunction invalidProviderError(provider) {\n  return Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n * @param {?} typeOrFunc\n * @param {?} params\n * @return {?}\n */\nfunction noAnnotationError(typeOrFunc, params) {\n  /** @type {?} */\n  const signature = [];\n  for (let i = 0, ii = params.length; i < ii; i++) {\n    /** @type {?} */\n    const parameter = params[i];\n    if (!parameter || parameter.length == 0) {\n      signature.push('?');\n    } else {\n      signature.push(parameter.map(stringify).join(' '));\n    }\n  }\n  return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' + stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n * @param {?} index\n * @return {?}\n */\nfunction outOfBoundsError(index) {\n  return Error(`Index ${index} is out-of-bounds.`);\n}\n// TODO: add a working example after alpha38 is released\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n * @param {?} provider1\n * @param {?} provider2\n * @return {?}\n */\nfunction mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n  return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * \\@publicApi\n */\nclass ReflectiveKey {\n  /**\n   * Private\n   * @param {?} token\n   * @param {?} id\n   */\n  constructor(token, id) {\n    this.token = token;\n    this.id = id;\n    if (!token) {\n      throw new Error('Token must be defined!');\n    }\n    this.displayName = stringify(this.token);\n  }\n  /**\n   * Retrieves a `Key` for a token.\n   * @param {?} token\n   * @return {?}\n   */\n  static get(token) {\n    return _globalKeyRegistry.get(resolveForwardRef(token));\n  }\n  /**\n   * @return {?} the number of keys registered in the system.\n   */\n  static get numberOfKeys() {\n    return _globalKeyRegistry.numberOfKeys;\n  }\n}\nclass KeyRegistry {\n  constructor() {\n    this._allKeys = new Map();\n  }\n  /**\n   * @param {?} token\n   * @return {?}\n   */\n  get(token) {\n    if (token instanceof ReflectiveKey) return token;\n    if (this._allKeys.has(token)) {\n      return (/** @type {?} */this._allKeys.get(token)\n      );\n    }\n    /** @type {?} */\n    const newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n    this._allKeys.set(token, newKey);\n    return newKey;\n  }\n  /**\n   * @return {?}\n   */\n  get numberOfKeys() {\n    return this._allKeys.size;\n  }\n}\n/** @type {?} */\nconst _globalKeyRegistry = new KeyRegistry();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nclass Reflector {\n  /**\n   * @param {?} reflectionCapabilities\n   */\n  constructor(reflectionCapabilities) {\n    this.reflectionCapabilities = reflectionCapabilities;\n  }\n  /**\n   * @param {?} caps\n   * @return {?}\n   */\n  updateCapabilities(caps) {\n    this.reflectionCapabilities = caps;\n  }\n  /**\n   * @param {?} type\n   * @return {?}\n   */\n  factory(type) {\n    return this.reflectionCapabilities.factory(type);\n  }\n  /**\n   * @param {?} typeOrFunc\n   * @return {?}\n   */\n  parameters(typeOrFunc) {\n    return this.reflectionCapabilities.parameters(typeOrFunc);\n  }\n  /**\n   * @param {?} typeOrFunc\n   * @return {?}\n   */\n  annotations(typeOrFunc) {\n    return this.reflectionCapabilities.annotations(typeOrFunc);\n  }\n  /**\n   * @param {?} typeOrFunc\n   * @return {?}\n   */\n  propMetadata(typeOrFunc) {\n    return this.reflectionCapabilities.propMetadata(typeOrFunc);\n  }\n  /**\n   * @param {?} type\n   * @param {?} lcProperty\n   * @return {?}\n   */\n  hasLifecycleHook(type, lcProperty) {\n    return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n  getter(name) {\n    return this.reflectionCapabilities.getter(name);\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n  setter(name) {\n    return this.reflectionCapabilities.setter(name);\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n  method(name) {\n    return this.reflectionCapabilities.method(name);\n  }\n  /**\n   * @param {?} type\n   * @return {?}\n   */\n  importUri(type) {\n    return this.reflectionCapabilities.importUri(type);\n  }\n  /**\n   * @param {?} type\n   * @return {?}\n   */\n  resourceUri(type) {\n    return this.reflectionCapabilities.resourceUri(type);\n  }\n  /**\n   * @param {?} name\n   * @param {?} moduleUrl\n   * @param {?} members\n   * @param {?} runtime\n   * @return {?}\n   */\n  resolveIdentifier(name, moduleUrl, members, runtime) {\n    return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n  }\n  /**\n   * @param {?} identifier\n   * @param {?} name\n   * @return {?}\n   */\n  resolveEnum(identifier, name) {\n    return this.reflectionCapabilities.resolveEnum(identifier, name);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The {\\@link Reflector} used internally in Angular to access metadata\n * about symbols.\n * @type {?}\n */\nconst reflector = new Reflector(new ReflectionCapabilities());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nclass ReflectiveDependency {\n  /**\n   * @param {?} key\n   * @param {?} optional\n   * @param {?} visibility\n   */\n  constructor(key, optional, visibility) {\n    this.key = key;\n    this.optional = optional;\n    this.visibility = visibility;\n  }\n  /**\n   * @param {?} key\n   * @return {?}\n   */\n  static fromKey(key) {\n    return new ReflectiveDependency(key, false, null);\n  }\n}\n/** @type {?} */\nconst _EMPTY_LIST = [];\nclass ResolvedReflectiveProvider_ {\n  /**\n   * @param {?} key\n   * @param {?} resolvedFactories\n   * @param {?} multiProvider\n   */\n  constructor(key, resolvedFactories, multiProvider) {\n    this.key = key;\n    this.resolvedFactories = resolvedFactories;\n    this.multiProvider = multiProvider;\n    this.resolvedFactory = this.resolvedFactories[0];\n  }\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@publicApi\n */\nclass ResolvedReflectiveFactory {\n  /**\n   * @param {?} factory\n   * @param {?} dependencies\n   */\n  constructor(factory, dependencies) {\n    this.factory = factory;\n    this.dependencies = dependencies;\n  }\n}\n/**\n * Resolve a single provider.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveFactory(provider) {\n  /** @type {?} */\n  let factoryFn;\n  /** @type {?} */\n  let resolvedDeps;\n  if (provider.useClass) {\n    /** @type {?} */\n    const useClass = resolveForwardRef(provider.useClass);\n    factoryFn = reflector.factory(useClass);\n    resolvedDeps = _dependenciesFor(useClass);\n  } else if (provider.useExisting) {\n    factoryFn = aliasInstance => aliasInstance;\n    resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n  } else if (provider.useFactory) {\n    factoryFn = provider.useFactory;\n    resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n  } else {\n    factoryFn = () => provider.useValue;\n    resolvedDeps = _EMPTY_LIST;\n  }\n  return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveProvider(provider) {\n  return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n * @param {?} providers\n * @return {?}\n */\nfunction resolveReflectiveProviders(providers) {\n  /** @type {?} */\n  const normalized = _normalizeProviders(providers, []);\n  /** @type {?} */\n  const resolved = normalized.map(resolveReflectiveProvider);\n  /** @type {?} */\n  const resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n  return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n * @param {?} providers\n * @param {?} normalizedProvidersMap\n * @return {?}\n */\nfunction mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n  for (let i = 0; i < providers.length; i++) {\n    /** @type {?} */\n    const provider = providers[i];\n    /** @type {?} */\n    const existing = normalizedProvidersMap.get(provider.key.id);\n    if (existing) {\n      if (provider.multiProvider !== existing.multiProvider) {\n        throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n      }\n      if (provider.multiProvider) {\n        for (let j = 0; j < provider.resolvedFactories.length; j++) {\n          existing.resolvedFactories.push(provider.resolvedFactories[j]);\n        }\n      } else {\n        normalizedProvidersMap.set(provider.key.id, provider);\n      }\n    } else {\n      /** @type {?} */\n      let resolvedProvider;\n      if (provider.multiProvider) {\n        resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n      } else {\n        resolvedProvider = provider;\n      }\n      normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n    }\n  }\n  return normalizedProvidersMap;\n}\n/**\n * @param {?} providers\n * @param {?} res\n * @return {?}\n */\nfunction _normalizeProviders(providers, res) {\n  providers.forEach(b => {\n    if (b instanceof Type) {\n      res.push({\n        provide: b,\n        useClass: b\n      });\n    } else if (b && typeof b == 'object' && /** @type {?} */b.provide !== undefined) {\n      res.push( /** @type {?} */b);\n    } else if (b instanceof Array) {\n      _normalizeProviders(b, res);\n    } else {\n      throw invalidProviderError(b);\n    }\n  });\n  return res;\n}\n/**\n * @param {?} typeOrFunc\n * @param {?=} dependencies\n * @return {?}\n */\nfunction constructDependencies(typeOrFunc, dependencies) {\n  if (!dependencies) {\n    return _dependenciesFor(typeOrFunc);\n  } else {\n    /** @type {?} */\n    const params = dependencies.map(t => [t]);\n    return dependencies.map(t => _extractToken(typeOrFunc, t, params));\n  }\n}\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nfunction _dependenciesFor(typeOrFunc) {\n  /** @type {?} */\n  const params = reflector.parameters(typeOrFunc);\n  if (!params) return [];\n  if (params.some(p => p == null)) {\n    throw noAnnotationError(typeOrFunc, params);\n  }\n  return params.map(p => _extractToken(typeOrFunc, p, params));\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} metadata\n * @param {?} params\n * @return {?}\n */\nfunction _extractToken(typeOrFunc, metadata, params) {\n  /** @type {?} */\n  let token = null;\n  /** @type {?} */\n  let optional = false;\n  if (!Array.isArray(metadata)) {\n    if (metadata instanceof Inject) {\n      return _createDependency(metadata.token, optional, null);\n    } else {\n      return _createDependency(metadata, optional, null);\n    }\n  }\n  /** @type {?} */\n  let visibility = null;\n  for (let i = 0; i < metadata.length; ++i) {\n    /** @type {?} */\n    const paramMetadata = metadata[i];\n    if (paramMetadata instanceof Type) {\n      token = paramMetadata;\n    } else if (paramMetadata instanceof Inject) {\n      token = paramMetadata.token;\n    } else if (paramMetadata instanceof Optional) {\n      optional = true;\n    } else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n      visibility = paramMetadata;\n    } else if (paramMetadata instanceof InjectionToken) {\n      token = paramMetadata;\n    }\n  }\n  token = resolveForwardRef(token);\n  if (token != null) {\n    return _createDependency(token, optional, visibility);\n  } else {\n    throw noAnnotationError(typeOrFunc, params);\n  }\n}\n/**\n * @param {?} token\n * @param {?} optional\n * @param {?} visibility\n * @return {?}\n */\nfunction _createDependency(token, optional, visibility) {\n  return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Threshold for the dynamic version\n/** @type {?} */\nconst UNDEFINED = new Object();\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * \\@publicApi\n * @abstract\n */\nclass ReflectiveInjector {\n  /**\n   * Turns an array of provider definitions into an array of resolved providers.\n   *\n   * A resolution is a process of flattening multiple nested arrays and converting individual\n   * providers into an array of `ResolvedReflectiveProvider`s.\n   *\n   * \\@usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * \\@Injectable()\n   * class Engine {\n   * }\n   *  /\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n   *\n   * expect(providers.length).toEqual(2);\n   *\n   * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n   * expect(providers[0].key.displayName).toBe(\"Car\");\n   * expect(providers[0].dependencies.length).toEqual(1);\n   * expect(providers[0].factory).toBeDefined();\n   *\n   * expect(providers[1].key.displayName).toBe(\"Engine\");\n   * });\n   * ```\n   *\n   * @param {?} providers\n   * @return {?}\n   */\n  static resolve(providers) {\n    return resolveReflectiveProviders(providers);\n  }\n  /**\n   * Resolves an array of providers and creates an injector from those providers.\n   *\n   * The passed-in providers can be an array of `Type`, `Provider`,\n   * or a recursive array of more providers.\n   *\n   * \\@usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * \\@Injectable()\n   * class Engine {\n   * }\n   *  /\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n   * expect(injector.get(Car) instanceof Car).toBe(true);\n   * ```\n   * @param {?} providers\n   * @param {?=} parent\n   * @return {?}\n   */\n  static resolveAndCreate(providers, parent) {\n    /** @type {?} */\n    const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n    return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n  }\n  /**\n   * Creates an injector from previously resolved providers.\n   *\n   * This API is the recommended way to construct injectors in performance-sensitive parts.\n   *\n   * \\@usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * \\@Injectable()\n   * class Engine {\n   * }\n   *  /\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var providers = ReflectiveInjector.resolve([Car, Engine]);\n   * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n   * expect(injector.get(Car) instanceof Car).toBe(true);\n   * ```\n   * @param {?} providers\n   * @param {?=} parent\n   * @return {?}\n   */\n  static fromResolvedProviders(providers, parent) {\n    return new ReflectiveInjector_(providers, parent);\n  }\n}\nclass ReflectiveInjector_ {\n  /**\n   * Private\n   * @param {?} _providers\n   * @param {?=} _parent\n   */\n  constructor(_providers, _parent) {\n    /**\n     * \\@internal\n     */\n    this._constructionCounter = 0;\n    this._providers = _providers;\n    this.parent = _parent || null;\n    /** @type {?} */\n    const len = _providers.length;\n    this.keyIds = new Array(len);\n    this.objs = new Array(len);\n    for (let i = 0; i < len; i++) {\n      this.keyIds[i] = _providers[i].key.id;\n      this.objs[i] = UNDEFINED;\n    }\n  }\n  /**\n   * @param {?} token\n   * @param {?=} notFoundValue\n   * @return {?}\n   */\n  get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n    return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n  }\n  /**\n   * @param {?} providers\n   * @return {?}\n   */\n  resolveAndCreateChild(providers) {\n    /** @type {?} */\n    const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n    return this.createChildFromResolved(ResolvedReflectiveProviders);\n  }\n  /**\n   * @param {?} providers\n   * @return {?}\n   */\n  createChildFromResolved(providers) {\n    /** @type {?} */\n    const inj = new ReflectiveInjector_(providers);\n    /** @type {?} */inj.parent = this;\n    return inj;\n  }\n  /**\n   * @param {?} provider\n   * @return {?}\n   */\n  resolveAndInstantiate(provider) {\n    return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n  }\n  /**\n   * @param {?} provider\n   * @return {?}\n   */\n  instantiateResolved(provider) {\n    return this._instantiateProvider(provider);\n  }\n  /**\n   * @param {?} index\n   * @return {?}\n   */\n  getProviderAtIndex(index) {\n    if (index < 0 || index >= this._providers.length) {\n      throw outOfBoundsError(index);\n    }\n    return this._providers[index];\n  }\n  /**\n   * \\@internal\n   * @param {?} provider\n   * @return {?}\n   */\n  _new(provider) {\n    if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n      throw cyclicDependencyError(this, provider.key);\n    }\n    return this._instantiateProvider(provider);\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _getMaxNumberOfObjects() {\n    return this.objs.length;\n  }\n  /**\n   * @private\n   * @param {?} provider\n   * @return {?}\n   */\n  _instantiateProvider(provider) {\n    if (provider.multiProvider) {\n      /** @type {?} */\n      const res = new Array(provider.resolvedFactories.length);\n      for (let i = 0; i < provider.resolvedFactories.length; ++i) {\n        res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n      }\n      return res;\n    } else {\n      return this._instantiate(provider, provider.resolvedFactories[0]);\n    }\n  }\n  /**\n   * @private\n   * @param {?} provider\n   * @param {?} ResolvedReflectiveFactory\n   * @return {?}\n   */\n  _instantiate(provider, ResolvedReflectiveFactory$$1) {\n    /** @type {?} */\n    const factory = ResolvedReflectiveFactory$$1.factory;\n    /** @type {?} */\n    let deps;\n    try {\n      deps = ResolvedReflectiveFactory$$1.dependencies.map(dep => this._getByReflectiveDependency(dep));\n    } catch (e) {\n      if (e.addKey) {\n        e.addKey(this, provider.key);\n      }\n      throw e;\n    }\n    /** @type {?} */\n    let obj;\n    try {\n      obj = factory(...deps);\n    } catch (e) {\n      throw instantiationError(this, e, e.stack, provider.key);\n    }\n    return obj;\n  }\n  /**\n   * @private\n   * @param {?} dep\n   * @return {?}\n   */\n  _getByReflectiveDependency(dep) {\n    return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n  }\n  /**\n   * @private\n   * @param {?} key\n   * @param {?} visibility\n   * @param {?} notFoundValue\n   * @return {?}\n   */\n  _getByKey(key, visibility, notFoundValue) {\n    if (key === ReflectiveInjector_.INJECTOR_KEY) {\n      return this;\n    }\n    if (visibility instanceof Self) {\n      return this._getByKeySelf(key, notFoundValue);\n    } else {\n      return this._getByKeyDefault(key, notFoundValue, visibility);\n    }\n  }\n  /**\n   * @private\n   * @param {?} keyId\n   * @return {?}\n   */\n  _getObjByKeyId(keyId) {\n    for (let i = 0; i < this.keyIds.length; i++) {\n      if (this.keyIds[i] === keyId) {\n        if (this.objs[i] === UNDEFINED) {\n          this.objs[i] = this._new(this._providers[i]);\n        }\n        return this.objs[i];\n      }\n    }\n    return UNDEFINED;\n  }\n  /**\n   * \\@internal\n   * @param {?} key\n   * @param {?} notFoundValue\n   * @return {?}\n   */\n  _throwOrNull(key, notFoundValue) {\n    if (notFoundValue !== THROW_IF_NOT_FOUND) {\n      return notFoundValue;\n    } else {\n      throw noProviderError(this, key);\n    }\n  }\n  /**\n   * \\@internal\n   * @param {?} key\n   * @param {?} notFoundValue\n   * @return {?}\n   */\n  _getByKeySelf(key, notFoundValue) {\n    /** @type {?} */\n    const obj = this._getObjByKeyId(key.id);\n    return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);\n  }\n  /**\n   * \\@internal\n   * @param {?} key\n   * @param {?} notFoundValue\n   * @param {?} visibility\n   * @return {?}\n   */\n  _getByKeyDefault(key, notFoundValue, visibility) {\n    /** @type {?} */\n    let inj;\n    if (visibility instanceof SkipSelf) {\n      inj = this.parent;\n    } else {\n      inj = this;\n    }\n    while (inj instanceof ReflectiveInjector_) {\n      /** @type {?} */\n      const inj_ = /** @type {?} */inj;\n      /** @type {?} */\n      const obj = inj_._getObjByKeyId(key.id);\n      if (obj !== UNDEFINED) return obj;\n      inj = inj_.parent;\n    }\n    if (inj !== null) {\n      return inj.get(key.token, notFoundValue);\n    } else {\n      return this._throwOrNull(key, notFoundValue);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  get displayName() {\n    /** @type {?} */\n    const providers = _mapProviders(this, b => ' \"' + b.key.displayName + '\" ').join(', ');\n    return `ReflectiveInjector(providers: [${providers}])`;\n  }\n  /**\n   * @return {?}\n   */\n  toString() {\n    return this.displayName;\n  }\n}\nReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\n/**\n * @param {?} injector\n * @param {?} fn\n * @return {?}\n */\nfunction _mapProviders(injector, fn) {\n  /** @type {?} */\n  const res = new Array(injector._providers.length);\n  for (let i = 0; i < injector._providers.length; ++i) {\n    res[i] = fn(injector.getProviderAtIndex(i));\n  }\n  return res;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine if the argument is shaped like a Promise\n * @param {?} obj\n * @return {?}\n */\nfunction isPromise(obj) {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is an Observable\n * @param {?} obj\n * @return {?}\n */\nfunction isObservable(obj) {\n  // TODO: use isObservable once we update pass rxjs 6.1\n  // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03\n  return !!obj && typeof obj.subscribe === 'function';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A function that will be executed when an application is initialized.\n *\n * \\@publicApi\n * @type {?}\n */\nconst APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n *\n * \\@publicApi\n */\nclass ApplicationInitStatus {\n  /**\n   * @param {?} appInits\n   */\n  constructor(appInits) {\n    this.appInits = appInits;\n    this.initialized = false;\n    this.done = false;\n    this.donePromise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n  /**\n   * \\@internal\n   * @return {?}\n   */\n  runInitializers() {\n    if (this.initialized) {\n      return;\n    }\n    /** @type {?} */\n    const asyncInitPromises = [];\n    /** @type {?} */\n    const complete = () => {\n      /** @type {?} */this.done = true;\n      this.resolve();\n    };\n    if (this.appInits) {\n      for (let i = 0; i < this.appInits.length; i++) {\n        /** @type {?} */\n        const initResult = this.appInits[i]();\n        if (isPromise(initResult)) {\n          asyncInitPromises.push(initResult);\n        }\n      }\n    }\n    Promise.all(asyncInitPromises).then(() => {\n      complete();\n    }).catch(e => {\n      this.reject(e);\n    });\n    if (asyncInitPromises.length === 0) {\n      complete();\n    }\n    this.initialized = true;\n  }\n}\nApplicationInitStatus.ɵfac = function ApplicationInitStatus_Factory(t) {\n  return new (t || ApplicationInitStatus)(ɵɵinject(APP_INITIALIZER, 8));\n};\nApplicationInitStatus.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: ApplicationInitStatus,\n  factory: ApplicationInitStatus.ɵfac\n});\n/** @nocollapse */\nApplicationInitStatus.ctorParameters = () => [{\n  type: Array,\n  decorators: [{\n    type: Inject,\n    args: [APP_INITIALIZER]\n  }, {\n    type: Optional\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Array,\n      decorators: [{\n        type: Inject,\n        args: [APP_INITIALIZER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {\\@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\\@link Injector}\n * using this token.\n * \\@publicApi\n * @type {?}\n */\nconst APP_ID = new InjectionToken('AppId');\n/**\n * @return {?}\n */\nfunction _appIdRandomProviderFactory() {\n  return `${_randomChar()}${_randomChar()}${_randomChar()}`;\n}\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * \\@publicApi\n * @type {?}\n */\nconst APP_ID_RANDOM_PROVIDER = {\n  provide: APP_ID,\n  useFactory: _appIdRandomProviderFactory,\n  deps: /** @type {?} */[]\n};\n/**\n * @return {?}\n */\nfunction _randomChar() {\n  return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/**\n * A function that will be executed when a platform is initialized.\n * \\@publicApi\n * @type {?}\n */\nconst PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/**\n * A token that indicates an opaque platform id.\n * \\@publicApi\n * @type {?}\n */\nconst PLATFORM_ID = new InjectionToken('Platform ID');\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * \\@publicApi\n * @type {?}\n */\nconst APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n/**\n * A token which indicates the root directory of the application\n * \\@publicApi\n * @type {?}\n */\nconst PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass Console {\n  /**\n   * @param {?} message\n   * @return {?}\n   */\n  log(message) {\n    // tslint:disable-next-line:no-console\n    console.log(message);\n  }\n  // Note: for reporting errors use `DOM.logError()` as it is platform specific\n  /**\n   * @param {?} message\n   * @return {?}\n   */\n  warn(message) {\n    // tslint:disable-next-line:no-console\n    console.warn(message);\n  }\n}\nConsole.ɵfac = function Console_Factory(t) {\n  return new (t || Console)();\n};\nConsole.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: Console,\n  factory: Console.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Console, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@publicApi\n * @template T\n */\nclass ModuleWithComponentFactories {\n  /**\n   * @param {?} ngModuleFactory\n   * @param {?} componentFactories\n   */\n  constructor(ngModuleFactory, componentFactories) {\n    this.ngModuleFactory = ngModuleFactory;\n    this.componentFactories = componentFactories;\n  }\n}\n/**\n * @return {?}\n */\nfunction _throwError() {\n  throw new Error(`Runtime compiler is not loaded`);\n}\n/** @type {?} */\nconst Compiler_compileModuleSync__PRE_R3__ = /** @type {?} */_throwError;\n/** @type {?} */\nconst Compiler_compileModuleSync__POST_R3__ = function (moduleType) {\n  return new NgModuleFactory$1(moduleType);\n};\n/** @type {?} */\nconst Compiler_compileModuleSync = Compiler_compileModuleSync__PRE_R3__;\n/** @type {?} */\nconst Compiler_compileModuleAsync__PRE_R3__ = /** @type {?} */_throwError;\n/** @type {?} */\nconst Compiler_compileModuleAsync__POST_R3__ = function (moduleType) {\n  return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n};\n/** @type {?} */\nconst Compiler_compileModuleAsync = Compiler_compileModuleAsync__PRE_R3__;\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = /** @type {?} */_throwError;\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsSync__POST_R3__ = function (moduleType) {\n  return new ModuleWithComponentFactories(Compiler_compileModuleSync__POST_R3__(moduleType), []);\n};\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__PRE_R3__;\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = /** @type {?} */_throwError;\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = function (moduleType) {\n  return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n};\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__PRE_R3__;\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {\\@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `\\@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * \\@publicApi\n */\nclass Compiler {\n  constructor() {\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     */\n    this.compileModuleSync = Compiler_compileModuleSync;\n    /**\n     * Compiles the given NgModule and all of its components\n     */\n    this.compileModuleAsync = Compiler_compileModuleAsync;\n    /**\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n     */\n    this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;\n    /**\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     */\n    this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;\n  }\n  /**\n   * Clears all caches.\n   * @return {?}\n   */\n  clearCache() {}\n  /**\n   * Clears the cache for the given component/ngModule.\n   * @param {?} type\n   * @return {?}\n   */\n  clearCacheFor(type) {}\n  /**\n   * Returns the id for a given NgModule, if one is defined and known to the compiler.\n   * @param {?} moduleType\n   * @return {?}\n   */\n  getModuleId(moduleType) {\n    return undefined;\n  }\n}\nCompiler.ɵfac = function Compiler_Factory(t) {\n  return new (t || Compiler)();\n};\nCompiler.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: Compiler,\n  factory: Compiler.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Compiler, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * \\@publicApi\n * @type {?}\n */\nconst COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * \\@publicApi\n * @abstract\n */\nclass CompilerFactory {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet trace;\n/** @type {?} */\nlet events;\n/**\n * @return {?}\n */\nfunction detectWTF() {\n  /** @type {?} */\n  const wtf = /** @type {?} */_global['wtf'];\n  if (wtf) {\n    trace = wtf['trace'];\n    if (trace) {\n      events = trace['events'];\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * @param {?} signature\n * @param {?=} flags\n * @return {?}\n */\nfunction createScope(signature, flags = null) {\n  return events.createScope(signature, flags);\n}\n/**\n * @template T\n * @param {?} scope\n * @param {?=} returnValue\n * @return {?}\n */\nfunction leave(scope, returnValue) {\n  trace.leaveScope(scope, returnValue);\n  return returnValue;\n}\n/**\n * @param {?} rangeType\n * @param {?} action\n * @return {?}\n */\nfunction startTimeRange(rangeType, action) {\n  return trace.beginTimeRange(rangeType, action);\n}\n/**\n * @param {?} range\n * @return {?}\n */\nfunction endTimeRange(range) {\n  trace.endTimeRange(range);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * True if WTF is enabled.\n * @type {?}\n */\nconst wtfEnabled = detectWTF();\n/**\n * @param {?=} arg0\n * @param {?=} arg1\n * @return {?}\n */\nfunction noopScope(arg0, arg1) {\n  return null;\n}\n/**\n * Create trace scope.\n *\n * Scopes must be strictly nested and are analogous to stack frames, but\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\n * nesting. You may want to use\n * [Event\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n * as they are defined in WTF.\n *\n * Used to mark scope entry. The return value is used to leave the scope.\n *\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n *\n *     someMethod() {\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n *        // DO SOME WORK HERE\n *        return wtfLeave(s, 123); // Return value 123\n *     }\n *\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n * negatively impact the performance of your application. For this reason we recommend that\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n * an exception is expected during normal execution while profiling.\n *\n * \\@publicApi\n * @type {?}\n */\nconst wtfCreateScope = wtfEnabled ? createScope : (signature, flags) => noopScope;\n/**\n * Used to mark end of Scope.\n *\n * - `scope` to end.\n * - `returnValue` (optional) to be passed to the WTF.\n *\n * Returns the `returnValue for easy chaining.\n * \\@publicApi\n * @type {?}\n */\nconst wtfLeave = wtfEnabled ? leave : (s, r) => r;\n/**\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n * enabled.\n *\n *     someMethod() {\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n *        var future = new Future.delay(5).then((_) {\n *          wtfEndTimeRange(s);\n *        });\n *     }\n * \\@publicApi\n * @type {?}\n */\nconst wtfStartTimeRange = wtfEnabled ? startTimeRange : (rangeType, action) => null;\n/**\n * Ends a async time range operation.\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n * enabled.\n * \\@publicApi\n * @type {?}\n */\nconst wtfEndTimeRange = wtfEnabled ? endTimeRange : r => null;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nclass NgZone {\n  /**\n   * @param {?} __0\n   */\n  constructor({\n    enableLongStackTrace = false\n  }) {\n    this.hasPendingMicrotasks = false;\n    this.hasPendingMacrotasks = false;\n    /**\n     * Whether there are no outstanding microtasks or macrotasks.\n     */\n    this.isStable = true;\n    /**\n     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n     */\n    this.onUnstable = new EventEmitter(false);\n    /**\n     * Notifies when there is no more microtasks enqueued in the current VM Turn.\n     * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n     * For this reason this event can fire multiple times per VM Turn.\n     */\n    this.onMicrotaskEmpty = new EventEmitter(false);\n    /**\n     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n     * implies we are about to relinquish VM turn.\n     * This event gets called just once.\n     */\n    this.onStable = new EventEmitter(false);\n    /**\n     * Notifies that an error has been delivered.\n     */\n    this.onError = new EventEmitter(false);\n    if (typeof Zone == 'undefined') {\n      throw new Error(`In this configuration Angular requires Zone.js`);\n    }\n    Zone.assertZonePatched();\n    /** @type {?} */\n    const self = /** @type {?} */ /** @type {?} */this;\n    self._nesting = 0;\n    self._outer = self._inner = Zone.current;\n    if ( /** @type {?} */Zone['wtfZoneSpec']) {\n      self._inner = self._inner.fork( /** @type {?} */Zone['wtfZoneSpec']);\n    }\n    if ( /** @type {?} */Zone['TaskTrackingZoneSpec']) {\n      self._inner = self._inner.fork(new /** @type {?} */ /** @type {?} */Zone['TaskTrackingZoneSpec']());\n    }\n    if (enableLongStackTrace && /** @type {?} */Zone['longStackTraceZoneSpec']) {\n      self._inner = self._inner.fork( /** @type {?} */Zone['longStackTraceZoneSpec']);\n    }\n    forkInnerZoneWithAngularBehavior(self);\n  }\n  /**\n   * @return {?}\n   */\n  static isInAngularZone() {\n    return Zone.current.get('isAngularZone') === true;\n  }\n  /**\n   * @return {?}\n   */\n  static assertInAngularZone() {\n    if (!NgZone.isInAngularZone()) {\n      throw new Error('Expected to be in Angular Zone, but it is not!');\n    }\n  }\n  /**\n   * @return {?}\n   */\n  static assertNotInAngularZone() {\n    if (NgZone.isInAngularZone()) {\n      throw new Error('Expected to not be in Angular Zone, but it is!');\n    }\n  }\n  /**\n   * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n   * the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   * @template T\n   * @param {?} fn\n   * @param {?=} applyThis\n   * @param {?=} applyArgs\n   * @return {?}\n   */\n  run(fn, applyThis, applyArgs) {\n    return (/** @type {?} */ /** @type {?} */ /** @type {?} */this._inner.run(fn, applyThis, applyArgs)\n    );\n  }\n  /**\n   * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n   * returned by the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   * @template T\n   * @param {?} fn\n   * @param {?=} applyThis\n   * @param {?=} applyArgs\n   * @param {?=} name\n   * @return {?}\n   */\n  runTask(fn, applyThis, applyArgs, name) {\n    /** @type {?} */\n    const zone = /** @type {?} */ /** @type {?} */this._inner;\n    /** @type {?} */\n    const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop$1, noop$1);\n    try {\n      return (/** @type {?} */zone.runTask(task, applyThis, applyArgs)\n      );\n    } finally {\n      zone.cancelTask(task);\n    }\n  }\n  /**\n   * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n   * rethrown.\n   * @template T\n   * @param {?} fn\n   * @param {?=} applyThis\n   * @param {?=} applyArgs\n   * @return {?}\n   */\n  runGuarded(fn, applyThis, applyArgs) {\n    return (/** @type {?} */ /** @type {?} */ /** @type {?} */this._inner.runGuarded(fn, applyThis, applyArgs)\n    );\n  }\n  /**\n   * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n   * the function.\n   *\n   * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n   * work that\n   * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * outside of the Angular zone.\n   *\n   * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n   * @template T\n   * @param {?} fn\n   * @return {?}\n   */\n  runOutsideAngular(fn) {\n    return (/** @type {?} */ /** @type {?} */ /** @type {?} */this._outer.run(fn)\n    );\n  }\n}\n/**\n * @return {?}\n */\nfunction noop$1() {}\n/** @type {?} */\nconst EMPTY_PAYLOAD = {};\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction checkStable(zone) {\n  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n    try {\n      zone._nesting++;\n      zone.onMicrotaskEmpty.emit(null);\n    } finally {\n      zone._nesting--;\n      if (!zone.hasPendingMicrotasks) {\n        try {\n          zone.runOutsideAngular(() => zone.onStable.emit(null));\n        } finally {\n          zone.isStable = true;\n        }\n      }\n    }\n  }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction forkInnerZoneWithAngularBehavior(zone) {\n  zone._inner = zone._inner.fork({\n    name: 'angular',\n    properties: /** @type {?} */{\n      'isAngularZone': true\n    },\n    onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {\n      try {\n        onEnter(zone);\n        return delegate.invokeTask(target, task, applyThis, applyArgs);\n      } finally {\n        onLeave(zone);\n      }\n    },\n    onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {\n      try {\n        onEnter(zone);\n        return delegate.invoke(target, callback, applyThis, applyArgs, source);\n      } finally {\n        onLeave(zone);\n      }\n    },\n    onHasTask: (delegate, current, target, hasTaskState) => {\n      delegate.hasTask(target, hasTaskState);\n      if (current === target) {\n        // We are only interested in hasTask events which originate from our zone\n        // (A child hasTask event is not interesting to us)\n        if (hasTaskState.change == 'microTask') {\n          zone.hasPendingMicrotasks = hasTaskState.microTask;\n          checkStable(zone);\n        } else if (hasTaskState.change == 'macroTask') {\n          zone.hasPendingMacrotasks = hasTaskState.macroTask;\n        }\n      }\n    },\n    onHandleError: (delegate, current, target, error) => {\n      delegate.handleError(target, error);\n      zone.runOutsideAngular(() => zone.onError.emit(error));\n      return false;\n    }\n  });\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onEnter(zone) {\n  zone._nesting++;\n  if (zone.isStable) {\n    zone.isStable = false;\n    zone.onUnstable.emit(null);\n  }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onLeave(zone) {\n  zone._nesting--;\n  checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nclass NoopNgZone {\n  constructor() {\n    this.hasPendingMicrotasks = false;\n    this.hasPendingMacrotasks = false;\n    this.isStable = true;\n    this.onUnstable = new EventEmitter();\n    this.onMicrotaskEmpty = new EventEmitter();\n    this.onStable = new EventEmitter();\n    this.onError = new EventEmitter();\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  run(fn) {\n    return fn();\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  runGuarded(fn) {\n    return fn();\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  runOutsideAngular(fn) {\n    return fn();\n  }\n  /**\n   * @template T\n   * @param {?} fn\n   * @return {?}\n   */\n  runTask(fn) {\n    return fn();\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * \\@publicApi\n */\nclass Testability {\n  /**\n   * @param {?} _ngZone\n   */\n  constructor(_ngZone) {\n    this._ngZone = _ngZone;\n    this._pendingCount = 0;\n    this._isZoneStable = true;\n    /**\n     * Whether any work was done since the last 'whenStable' callback. This is\n     * useful to detect if this could have potentially destabilized another\n     * component while it is stabilizing.\n     * \\@internal\n     */\n    this._didWork = false;\n    this._callbacks = [];\n    this.taskTrackingZone = null;\n    this._watchAngularEvents();\n    _ngZone.run(() => {\n      this.taskTrackingZone = typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n    });\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _watchAngularEvents() {\n    this._ngZone.onUnstable.subscribe({\n      next: () => {\n        this._didWork = true;\n        this._isZoneStable = false;\n      }\n    });\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.subscribe({\n        next: () => {\n          NgZone.assertNotInAngularZone();\n          scheduleMicroTask(() => {\n            this._isZoneStable = true;\n            this._runCallbacksIfReady();\n          });\n        }\n      });\n    });\n  }\n  /**\n   * Increases the number of pending request\n   * @deprecated pending requests are now tracked with zones.\n   * @return {?}\n   */\n  increasePendingRequestCount() {\n    this._pendingCount += 1;\n    this._didWork = true;\n    return this._pendingCount;\n  }\n  /**\n   * Decreases the number of pending request\n   * @deprecated pending requests are now tracked with zones\n   * @return {?}\n   */\n  decreasePendingRequestCount() {\n    this._pendingCount -= 1;\n    if (this._pendingCount < 0) {\n      throw new Error('pending async requests below zero');\n    }\n    this._runCallbacksIfReady();\n    return this._pendingCount;\n  }\n  /**\n   * Whether an associated application is stable\n   * @return {?}\n   */\n  isStable() {\n    return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _runCallbacksIfReady() {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      scheduleMicroTask(() => {\n        while (this._callbacks.length !== 0) {\n          /** @type {?} */\n          let cb = /** @type {?} */this._callbacks.pop();\n          clearTimeout(cb.timeoutId);\n          cb.doneCb(this._didWork);\n        }\n        this._didWork = false;\n      });\n    } else {\n      // Still not stable, send updates.\n      /** @type {?} */\n      let pending = this.getPendingTasks();\n      this._callbacks = this._callbacks.filter(cb => {\n        if (cb.updateCb && cb.updateCb(pending)) {\n          clearTimeout(cb.timeoutId);\n          return false;\n        }\n        return true;\n      });\n      this._didWork = true;\n    }\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  getPendingTasks() {\n    if (!this.taskTrackingZone) {\n      return [];\n    }\n    // Copy the tasks data so that we don't leak tasks.\n    return this.taskTrackingZone.macroTasks.map(t => {\n      return {\n        source: t.source,\n        // From TaskTrackingZone:\n        // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n        creationLocation: /** @type {?} */ /** @type {?} */t.creationLocation,\n        data: t.data\n      };\n    });\n  }\n  /**\n   * @private\n   * @param {?} cb\n   * @param {?=} timeout\n   * @param {?=} updateCb\n   * @return {?}\n   */\n  addCallback(cb, timeout, updateCb) {\n    /** @type {?} */\n    let timeoutId = -1;\n    if (timeout && timeout > 0) {\n      timeoutId = setTimeout(() => {\n        this._callbacks = this._callbacks.filter(cb => cb.timeoutId !== timeoutId);\n        cb(this._didWork, this.getPendingTasks());\n      }, timeout);\n    }\n    this._callbacks.push( /** @type {?} */{\n      doneCb: cb,\n      timeoutId: timeoutId,\n      updateCb: updateCb\n    });\n  }\n  /**\n   * Wait for the application to be stable with a timeout. If the timeout is reached before that\n   * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n   *\n   * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\n   *    whichever comes first.\n   * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\n   *    specified, whenStable() will wait forever.\n   * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\n   *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n   *    and no further updates will be issued.\n   * @return {?}\n   */\n  whenStable(doneCb, timeout, updateCb) {\n    if (updateCb && !this.taskTrackingZone) {\n      throw new Error('Task tracking zone is required when passing an update callback to ' + 'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n    }\n    // These arguments are 'Function' above to keep the public API simple.\n    this.addCallback( /** @type {?} */doneCb, timeout, /** @type {?} */updateCb);\n    this._runCallbacksIfReady();\n  }\n  /**\n   * Get the number of pending requests\n   * @deprecated pending requests are now tracked with zones\n   * @return {?}\n   */\n  getPendingRequestCount() {\n    return this._pendingCount;\n  }\n  /**\n   * Find providers by name\n   * @param {?} using The root element to search from\n   * @param {?} provider The name of binding variable\n   * @param {?} exactMatch Whether using exactMatch\n   * @return {?}\n   */\n  findProviders(using, provider, exactMatch) {\n    // TODO(juliemr): implement.\n    return [];\n  }\n}\nTestability.ɵfac = function Testability_Factory(t) {\n  return new (t || Testability)(ɵɵinject(NgZone));\n};\nTestability.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: Testability,\n  factory: Testability.ɵfac\n});\n/** @nocollapse */\nTestability.ctorParameters = () => [{\n  type: NgZone\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Testability, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: NgZone\n    }];\n  }, null);\n})();\n/**\n * A global registry of {\\@link Testability} instances for specific elements.\n * \\@publicApi\n */\nclass TestabilityRegistry {\n  constructor() {\n    /**\n     * \\@internal\n     */\n    this._applications = new Map();\n    _testabilityGetter.addToWindow(this);\n  }\n  /**\n   * Registers an application with a testability hook so that it can be tracked\n   * @param {?} token token of application, root element\n   * @param {?} testability Testability hook\n   * @return {?}\n   */\n  registerApplication(token, testability) {\n    this._applications.set(token, testability);\n  }\n  /**\n   * Unregisters an application.\n   * @param {?} token token of application, root element\n   * @return {?}\n   */\n  unregisterApplication(token) {\n    this._applications.delete(token);\n  }\n  /**\n   * Unregisters all applications\n   * @return {?}\n   */\n  unregisterAllApplications() {\n    this._applications.clear();\n  }\n  /**\n   * Get a testability hook associated with the application\n   * @param {?} elem root element\n   * @return {?}\n   */\n  getTestability(elem) {\n    return this._applications.get(elem) || null;\n  }\n  /**\n   * Get all registered testabilities\n   * @return {?}\n   */\n  getAllTestabilities() {\n    return Array.from(this._applications.values());\n  }\n  /**\n   * Get all registered applications(root elements)\n   * @return {?}\n   */\n  getAllRootElements() {\n    return Array.from(this._applications.keys());\n  }\n  /**\n   * Find testability of a node in the Tree\n   * @param {?} elem node\n   * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n   * current node\n   * @return {?}\n   */\n  findTestabilityInTree(elem, findInAncestors = true) {\n    return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n  }\n}\nTestabilityRegistry.ɵfac = function TestabilityRegistry_Factory(t) {\n  return new (t || TestabilityRegistry)();\n};\nTestabilityRegistry.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: TestabilityRegistry,\n  factory: TestabilityRegistry.ɵfac\n});\n/** @nocollapse */\nTestabilityRegistry.ctorParameters = () => [];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\nclass _NoopGetTestability {\n  /**\n   * @param {?} registry\n   * @return {?}\n   */\n  addToWindow(registry) {}\n  /**\n   * @param {?} registry\n   * @param {?} elem\n   * @param {?} findInAncestors\n   * @return {?}\n   */\n  findTestabilityInTree(registry, elem, findInAncestors) {\n    return null;\n  }\n}\n/**\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n * \\@publicApi\n * @param {?} getter\n * @return {?}\n */\nfunction setTestabilityGetter(getter) {\n  _testabilityGetter = getter;\n}\n/** @type {?} */\nlet _testabilityGetter = new _NoopGetTestability();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _platform;\n/** @type {?} */\nlet compileNgModuleFactory = compileNgModuleFactory__PRE_R3__;\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nfunction compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {\n  /** @type {?} */\n  const compilerFactory = injector.get(CompilerFactory);\n  /** @type {?} */\n  const compiler = compilerFactory.createCompiler([options]);\n  return compiler.compileModuleAsync(moduleType);\n}\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nfunction compileNgModuleFactory__POST_R3__(injector, options, moduleType) {\n  ngDevMode && assertNgModuleType(moduleType);\n  return Promise.resolve(new NgModuleFactory$1(moduleType));\n}\n/** @type {?} */\nconst ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@publicApi\n */\nclass NgProbeToken {\n  /**\n   * @param {?} name\n   * @param {?} token\n   */\n  constructor(name, token) {\n    this.name = name;\n    this.token = token;\n  }\n}\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * \\@publicApi\n * @param {?} injector\n * @return {?}\n */\nfunction createPlatform(injector) {\n  if (_platform && !_platform.destroyed && !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n    throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  _platform = injector.get(PlatformRef);\n  /** @type {?} */\n  const inits = injector.get(PLATFORM_INITIALIZER, null);\n  if (inits) inits.forEach(init => init());\n  return _platform;\n}\n/**\n * Creates a factory for a platform\n *\n * \\@publicApi\n * @param {?} parentPlatformFactory\n * @param {?} name\n * @param {?=} providers\n * @return {?}\n */\nfunction createPlatformFactory(parentPlatformFactory, name, providers = []) {\n  /** @type {?} */\n  const desc = `Platform: ${name}`;\n  /** @type {?} */\n  const marker = new InjectionToken(desc);\n  return (extraProviders = []) => {\n    /** @type {?} */\n    let platform = getPlatform();\n    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n      if (parentPlatformFactory) {\n        parentPlatformFactory(providers.concat(extraProviders).concat({\n          provide: marker,\n          useValue: true\n        }));\n      } else {\n        /** @type {?} */\n        const injectedProviders = providers.concat(extraProviders).concat({\n          provide: marker,\n          useValue: true\n        });\n        createPlatform(Injector.create({\n          providers: injectedProviders,\n          name: desc\n        }));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * \\@publicApi\n * @param {?} requiredToken\n * @return {?}\n */\nfunction assertPlatform(requiredToken) {\n  /** @type {?} */\n  const platform = getPlatform();\n  if (!platform) {\n    throw new Error('No platform exists!');\n  }\n  if (!platform.injector.get(requiredToken, null)) {\n    throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n  }\n  return platform;\n}\n/**\n * Destroy the existing platform.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction destroyPlatform() {\n  if (_platform && !_platform.destroyed) {\n    _platform.destroy();\n  }\n}\n/**\n * Returns the current platform.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction getPlatform() {\n  return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\n *\n * \\@publicApi\n */\nclass PlatformRef {\n  /**\n   * \\@internal\n   * @param {?} _injector\n   */\n  constructor(_injector) {\n    this._injector = _injector;\n    this._modules = [];\n    this._destroyListeners = [];\n    this._destroyed = false;\n  }\n  /**\n   * Creates an instance of an `\\@NgModule` for the given platform\n   * for offline compilation.\n   *\n   * \\@usageNotes\n   * ### Simple Example\n   *\n   * ```typescript\n   * my_module.ts:\n   *\n   * \\@NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * main.ts:\n   * import {MyModuleNgFactory} from './my_module.ngfactory';\n   * import {platformBrowser} from '\\@angular/platform-browser';\n   *\n   * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n   * ```\n   * @template M\n   * @param {?} moduleFactory\n   * @param {?=} options\n   * @return {?}\n   */\n  bootstrapModuleFactory(moduleFactory, options) {\n    // Note: We need to create the NgZone _before_ we instantiate the module,\n    // as instantiating the module creates some providers eagerly.\n    // So we create a mini parent injector that just contains the new NgZone and\n    // pass that as parent to the NgModuleFactory.\n    /** @type {?} */\n    const ngZoneOption = options ? options.ngZone : undefined;\n    /** @type {?} */\n    const ngZone = getNgZone(ngZoneOption);\n    /** @type {?} */\n    const providers = [{\n      provide: NgZone,\n      useValue: ngZone\n    }];\n    // Attention: Don't use ApplicationRef.run here,\n    // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n    return ngZone.run(() => {\n      /** @type {?} */\n      const ngZoneInjector = Injector.create({\n        providers: providers,\n        parent: this.injector,\n        name: moduleFactory.moduleType.name\n      });\n      /** @type {?} */\n      const moduleRef = /** @type {?} */moduleFactory.create(ngZoneInjector);\n      /** @type {?} */\n      const exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n      if (!exceptionHandler) {\n        throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n      }\n      moduleRef.onDestroy(() => remove(this._modules, moduleRef));\n      /** @type {?} */ngZone.runOutsideAngular(() => /** @type {?} */ngZone.onError.subscribe({\n        next: error => {\n          exceptionHandler.handleError(error);\n        }\n      }));\n      return _callAndReportToErrorHandler(exceptionHandler, /** @type {?} */ngZone, () => {\n        /** @type {?} */\n        const initStatus = moduleRef.injector.get(ApplicationInitStatus);\n        initStatus.runInitializers();\n        return initStatus.donePromise.then(() => {\n          this._moduleDoBootstrap(moduleRef);\n          return moduleRef;\n        });\n      });\n    });\n  }\n  /**\n   * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n   *\n   * \\@usageNotes\n   * ### Simple Example\n   *\n   * ```typescript\n   * \\@NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n   * ```\n   *\n   * @template M\n   * @param {?} moduleType\n   * @param {?=} compilerOptions\n   * @return {?}\n   */\n  bootstrapModule(moduleType, compilerOptions = []) {\n    /** @type {?} */\n    const options = optionsReducer({}, compilerOptions);\n    return compileNgModuleFactory(this.injector, options, moduleType).then(moduleFactory => this.bootstrapModuleFactory(moduleFactory, options));\n  }\n  /**\n   * @private\n   * @param {?} moduleRef\n   * @return {?}\n   */\n  _moduleDoBootstrap(moduleRef) {\n    /** @type {?} */\n    const appRef = /** @type {?} */moduleRef.injector.get(ApplicationRef);\n    if (moduleRef._bootstrapComponents.length > 0) {\n      moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n    } else if (moduleRef.instance.ngDoBootstrap) {\n      moduleRef.instance.ngDoBootstrap(appRef);\n    } else {\n      throw new Error(`The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` + `Please define one of these.`);\n    }\n    this._modules.push(moduleRef);\n  }\n  /**\n   * Register a listener to be called when the platform is disposed.\n   * @param {?} callback\n   * @return {?}\n   */\n  onDestroy(callback) {\n    this._destroyListeners.push(callback);\n  }\n  /**\n   * Retrieve the platform {\\@link Injector}, which is the parent injector for\n   * every Angular application on the page and provides singleton providers.\n   * @return {?}\n   */\n  get injector() {\n    return this._injector;\n  }\n  /**\n   * Destroy the Angular platform and all Angular applications on the page.\n   * @return {?}\n   */\n  destroy() {\n    if (this._destroyed) {\n      throw new Error('The platform has already been destroyed!');\n    }\n    this._modules.slice().forEach(module => module.destroy());\n    this._destroyListeners.forEach(listener => listener());\n    this._destroyed = true;\n  }\n  /**\n   * @return {?}\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n}\nPlatformRef.ɵfac = function PlatformRef_Factory(t) {\n  return new (t || PlatformRef)(ɵɵinject(Injector));\n};\nPlatformRef.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: PlatformRef,\n  factory: PlatformRef.ɵfac\n});\n/** @nocollapse */\nPlatformRef.ctorParameters = () => [{\n  type: Injector\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(PlatformRef, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Injector\n    }];\n  }, null);\n})();\n/**\n * @param {?=} ngZoneOption\n * @return {?}\n */\nfunction getNgZone(ngZoneOption) {\n  /** @type {?} */\n  let ngZone;\n  if (ngZoneOption === 'noop') {\n    ngZone = new NoopNgZone();\n  } else {\n    ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) || new NgZone({\n      enableLongStackTrace: isDevMode()\n    });\n  }\n  return ngZone;\n}\n/**\n * @param {?} errorHandler\n * @param {?} ngZone\n * @param {?} callback\n * @return {?}\n */\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n  try {\n    /** @type {?} */\n    const result = callback();\n    if (isPromise(result)) {\n      return result.catch(e => {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n    return result;\n  } catch (e) {\n    ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\n/**\n * @template T\n * @param {?} dst\n * @param {?} objs\n * @return {?}\n */\nfunction optionsReducer(dst, objs) {\n  if (Array.isArray(objs)) {\n    dst = objs.reduce(optionsReducer, dst);\n  } else {\n    dst = Object.assign({}, dst, /** @type {?} */objs);\n  }\n  return dst;\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * \\@usageNotes\n *\n * {\\@a is-stable-examples}\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * \\@publicApi\n */\nclass ApplicationRef {\n  /**\n   * \\@internal\n   * @param {?} _zone\n   * @param {?} _console\n   * @param {?} _injector\n   * @param {?} _exceptionHandler\n   * @param {?} _componentFactoryResolver\n   * @param {?} _initStatus\n   */\n  constructor(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n    this._zone = _zone;\n    this._console = _console;\n    this._injector = _injector;\n    this._exceptionHandler = _exceptionHandler;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._initStatus = _initStatus;\n    this._bootstrapListeners = [];\n    this._views = [];\n    this._runningTick = false;\n    this._enforceNoNewChanges = false;\n    this._stable = true;\n    /**\n     * Get a list of component types registered to this application.\n     * This list is populated even before the component is created.\n     */\n    this.componentTypes = [];\n    /**\n     * Get a list of components registered to this application.\n     */\n    this.components = [];\n    this._enforceNoNewChanges = isDevMode();\n    this._zone.onMicrotaskEmpty.subscribe({\n      next: () => {\n        this._zone.run(() => {\n          this.tick();\n        });\n      }\n    });\n    /** @type {?} */\n    const isCurrentlyStable = new Observable(observer => {\n      this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks && !this._zone.hasPendingMicrotasks;\n      this._zone.runOutsideAngular(() => {\n        observer.next(this._stable);\n        observer.complete();\n      });\n    });\n    /** @type {?} */\n    const isStable = new Observable(observer => {\n      // Create the subscription to onStable outside the Angular Zone so that\n      // the callback is run outside the Angular Zone.\n      /** @type {?} */\n      let stableSub;\n      this._zone.runOutsideAngular(() => {\n        stableSub = this._zone.onStable.subscribe(() => {\n          NgZone.assertNotInAngularZone();\n          // Check whether there are no pending macro/micro tasks in the next tick\n          // to allow for NgZone to update the state.\n          scheduleMicroTask(() => {\n            if (!this._stable && !this._zone.hasPendingMacrotasks && !this._zone.hasPendingMicrotasks) {\n              this._stable = true;\n              observer.next(true);\n            }\n          });\n        });\n      });\n      /** @type {?} */\n      const unstableSub = this._zone.onUnstable.subscribe(() => {\n        NgZone.assertInAngularZone();\n        if (this._stable) {\n          this._stable = false;\n          this._zone.runOutsideAngular(() => {\n            observer.next(false);\n          });\n        }\n      });\n      return () => {\n        stableSub.unsubscribe();\n        unstableSub.unsubscribe();\n      };\n    });\n    /** @type {?} */this.isStable = merge(isCurrentlyStable, isStable.pipe(share()));\n  }\n  /**\n   * Bootstrap a new component at the root level of the application.\n   *\n   * \\@usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a new root component into an application, Angular mounts the\n   * specified application component onto DOM elements identified by the componentType's\n   * selector and kicks off automatic change detection to finish initializing the component.\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * componentType's selector.\n   *\n   * ### Example\n   * {\\@example core/ts/platform/platform.ts region='longform'}\n   * @template C\n   * @param {?} componentOrFactory\n   * @param {?=} rootSelectorOrNode\n   * @return {?}\n   */\n  bootstrap(componentOrFactory, rootSelectorOrNode) {\n    if (!this._initStatus.done) {\n      throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n    }\n    /** @type {?} */\n    let componentFactory;\n    if (componentOrFactory instanceof ComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      componentFactory = /** @type {?} */this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n    }\n    this.componentTypes.push(componentFactory.componentType);\n    // Create a factory associated with the current module if it's not bound to some other\n    /** @type {?} */\n    const ngModule = componentFactory instanceof ComponentFactoryBoundToModule ? null : this._injector.get(NgModuleRef);\n    /** @type {?} */\n    const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n    /** @type {?} */\n    const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n    compRef.onDestroy(() => {\n      this._unloadComponent(compRef);\n    });\n    /** @type {?} */\n    const testability = compRef.injector.get(Testability, null);\n    if (testability) {\n      compRef.injector.get(TestabilityRegistry).registerApplication(compRef.location.nativeElement, testability);\n    }\n    this._loadComponent(compRef);\n    if (isDevMode()) {\n      this._console.log(`Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);\n    }\n    return compRef;\n  }\n  /**\n   * Invoke this method to explicitly process change detection and its side-effects.\n   *\n   * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n   * further changes are detected. If additional changes are picked up during this second cycle,\n   * bindings in the app have side-effects that cannot be resolved in a single change detection\n   * pass.\n   * In this case, Angular throws an error, since an Angular application can only have one change\n   * detection pass during which all change detection must complete.\n   * @return {?}\n   */\n  tick() {\n    if (this._runningTick) {\n      throw new Error('ApplicationRef.tick is called recursively');\n    }\n    /** @type {?} */\n    const scope = ApplicationRef._tickScope();\n    try {\n      this._runningTick = true;\n      this._views.forEach(view => view.detectChanges());\n      if (this._enforceNoNewChanges) {\n        this._views.forEach(view => view.checkNoChanges());\n      }\n    } catch (e) {\n      // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n      this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\n    } finally {\n      this._runningTick = false;\n      wtfLeave(scope);\n    }\n  }\n  /**\n   * Attaches a view so that it will be dirty checked.\n   * The view will be automatically detached when it is destroyed.\n   * This will throw if the view is already attached to a ViewContainer.\n   * @param {?} viewRef\n   * @return {?}\n   */\n  attachView(viewRef) {\n    /** @type {?} */\n    const view = /** @type {?} */viewRef;\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n  /**\n   * Detaches a view from dirty checking again.\n   * @param {?} viewRef\n   * @return {?}\n   */\n  detachView(viewRef) {\n    /** @type {?} */\n    const view = /** @type {?} */viewRef;\n    remove(this._views, view);\n    view.detachFromAppRef();\n  }\n  /**\n   * @private\n   * @param {?} componentRef\n   * @return {?}\n   */\n  _loadComponent(componentRef) {\n    this.attachView(componentRef.hostView);\n    this.tick();\n    this.components.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    /** @type {?} */\n    const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n    listeners.forEach(listener => listener(componentRef));\n  }\n  /**\n   * @private\n   * @param {?} componentRef\n   * @return {?}\n   */\n  _unloadComponent(componentRef) {\n    this.detachView(componentRef.hostView);\n    remove(this.components, componentRef);\n  }\n  /**\n   * \\@internal\n   * @return {?}\n   */\n  ngOnDestroy() {\n    // TODO(alxhub): Dispose of the NgZone.\n    this._views.slice().forEach(view => view.destroy());\n  }\n  /**\n   * Returns the number of attached views.\n   * @return {?}\n   */\n  get viewCount() {\n    return this._views.length;\n  }\n}\nApplicationRef.ɵfac = function ApplicationRef_Factory(t) {\n  return new (t || ApplicationRef)(ɵɵinject(NgZone), ɵɵinject(Console), ɵɵinject(Injector), ɵɵinject(ErrorHandler), ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationInitStatus));\n};\nApplicationRef.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: ApplicationRef,\n  factory: ApplicationRef.ɵfac\n});\n/**\n * \\@internal\n */\nApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\n/** @nocollapse */\nApplicationRef.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Console\n}, {\n  type: Injector\n}, {\n  type: ErrorHandler\n}, {\n  type: ComponentFactoryResolver\n}, {\n  type: ApplicationInitStatus\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationRef, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: NgZone\n    }, {\n      type: Console\n    }, {\n      type: Injector\n    }, {\n      type: ErrorHandler\n    }, {\n      type: ComponentFactoryResolver\n    }, {\n      type: ApplicationInitStatus\n    }];\n  }, null);\n})();\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n  /** @type {?} */\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * \\@publicApi\n * @template T\n */\nclass QueryList$1 {\n  constructor() {\n    this.dirty = true;\n    this._results = [];\n    this.changes = new EventEmitter();\n    this.length = 0;\n  }\n  /**\n   * See\n   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n   * @template U\n   * @param {?} fn\n   * @return {?}\n   */\n  map(fn) {\n    return this._results.map(fn);\n  }\n  /**\n   * See\n   * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n   * @param {?} fn\n   * @return {?}\n   */\n  filter(fn) {\n    return this._results.filter(fn);\n  }\n  /**\n   * See\n   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n   * @param {?} fn\n   * @return {?}\n   */\n  find(fn) {\n    return this._results.find(fn);\n  }\n  /**\n   * See\n   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n   * @template U\n   * @param {?} fn\n   * @param {?} init\n   * @return {?}\n   */\n  reduce(fn, init) {\n    return this._results.reduce(fn, init);\n  }\n  /**\n   * See\n   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n   * @param {?} fn\n   * @return {?}\n   */\n  forEach(fn) {\n    this._results.forEach(fn);\n  }\n  /**\n   * See\n   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n   * @param {?} fn\n   * @return {?}\n   */\n  some(fn) {\n    return this._results.some(fn);\n  }\n  /**\n   * @return {?}\n   */\n  toArray() {\n    return this._results.slice();\n  }\n  /**\n   * @return {?}\n   */\n  [getSymbolIterator()]() {\n    return (/** @type {?} */this._results[getSymbolIterator()]()\n    );\n  }\n  /**\n   * @return {?}\n   */\n  toString() {\n    return this._results.toString();\n  }\n  /**\n   * @param {?} res\n   * @return {?}\n   */\n  reset(res) {\n    this._results = flatten$2(res);\n    /** @type {?} */this.dirty = false;\n    /** @type {?} */this.length = this._results.length;\n    /** @type {?} */this.last = this._results[this.length - 1];\n    /** @type {?} */this.first = this._results[0];\n  }\n  /**\n   * @return {?}\n   */\n  notifyOnChanges() {\n    /** @type {?} */this.changes.emit(this);\n  }\n  /**\n   * internal\n   * @return {?}\n   */\n  setDirty() {\n    /** @type {?} */this.dirty = true;\n  }\n  /**\n   * internal\n   * @return {?}\n   */\n  destroy() {\n    /** @type {?} */this.changes.complete();\n    /** @type {?} */this.changes.unsubscribe();\n  }\n}\n/**\n * @template T\n * @param {?} list\n * @return {?}\n */\nfunction flatten$2(list) {\n  return list.reduce((flat, item) => {\n    /** @type {?} */\n    const flatItem = Array.isArray(item) ? flatten$2(item) : item;\n    return (/** @type {?} */flat.concat(flatItem)\n    );\n  }, []);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _SEPARATOR = '#';\n/** @type {?} */\nconst FACTORY_CLASS_SUFFIX = 'NgFactory';\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@publicApi\n * @abstract\n */\nclass SystemJsNgModuleLoaderConfig {}\n/** @type {?} */\nconst DEFAULT_CONFIG = {\n  factoryPathPrefix: '',\n  factoryPathSuffix: '.ngfactory'\n};\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * \\@publicApi\n */\nclass SystemJsNgModuleLoader {\n  /**\n   * @param {?} _compiler\n   * @param {?=} config\n   */\n  constructor(_compiler, config) {\n    this._compiler = _compiler;\n    this._config = config || DEFAULT_CONFIG;\n  }\n  /**\n   * @param {?} path\n   * @return {?}\n   */\n  load(path) {\n    /** @type {?} */\n    const offlineMode = this._compiler instanceof Compiler;\n    return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n  }\n  /**\n   * @private\n   * @param {?} path\n   * @return {?}\n   */\n  loadAndCompile(path) {\n    let [module, exportName] = path.split(_SEPARATOR);\n    if (exportName === undefined) {\n      exportName = 'default';\n    }\n    return System.import(module).then(module => module[exportName]).then(type => checkNotEmpty(type, module, exportName)).then(type => this._compiler.compileModuleAsync(type));\n  }\n  /**\n   * @private\n   * @param {?} path\n   * @return {?}\n   */\n  loadFactory(path) {\n    let [module, exportName] = path.split(_SEPARATOR);\n    /** @type {?} */\n    let factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n    if (exportName === undefined) {\n      exportName = 'default';\n      factoryClassSuffix = '';\n    }\n    return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix).then(module => module[exportName + factoryClassSuffix]).then(factory => checkNotEmpty(factory, module, exportName));\n  }\n}\nSystemJsNgModuleLoader.ɵfac = function SystemJsNgModuleLoader_Factory(t) {\n  return new (t || SystemJsNgModuleLoader)(ɵɵinject(Compiler), ɵɵinject(SystemJsNgModuleLoaderConfig, 8));\n};\nSystemJsNgModuleLoader.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: SystemJsNgModuleLoader,\n  factory: SystemJsNgModuleLoader.ɵfac\n});\n/** @nocollapse */\nSystemJsNgModuleLoader.ctorParameters = () => [{\n  type: Compiler\n}, {\n  type: SystemJsNgModuleLoaderConfig,\n  decorators: [{\n    type: Optional\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(SystemJsNgModuleLoader, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Compiler\n    }, {\n      type: SystemJsNgModuleLoaderConfig,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @param {?} value\n * @param {?} modulePath\n * @param {?} exportName\n * @return {?}\n */\nfunction checkNotEmpty(value, modulePath, exportName) {\n  if (!value) {\n    throw new Error(`Cannot find '${exportName}' in '${modulePath}'`);\n  }\n  return value;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nclass ViewContainerRef {}\n/**\n * \\@internal\n */\nViewContainerRef.__NG_ELEMENT_ID__ = () => SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef);\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = injectViewContainerRef;\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base class for Angular Views, provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n *\n * \\@usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * \\@publicApi\n * @abstract\n */\nclass ChangeDetectorRef {}\n/**\n * \\@internal\n */\nChangeDetectorRef.__NG_ELEMENT_ID__ = () => SWITCH_CHANGE_DETECTOR_REF_FACTORY();\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = injectChangeDetectorRef;\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = (...args) => {};\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nclass ViewRef$1 extends ChangeDetectorRef {}\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * \\@usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass EmbeddedViewRef extends ViewRef$1 {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass EventListener {\n  /**\n   * @param {?} name\n   * @param {?} callback\n   */\n  constructor(name, callback) {\n    this.name = name;\n    this.callback = callback;\n  }\n}\n// WARNING: interface has both a type and a value, skipping emit\nclass DebugNode__PRE_R3__ {\n  /**\n   * @param {?} nativeNode\n   * @param {?} parent\n   * @param {?} _debugContext\n   */\n  constructor(nativeNode, parent, _debugContext) {\n    this.listeners = [];\n    this.parent = null;\n    this._debugContext = _debugContext;\n    this.nativeNode = nativeNode;\n    if (parent && parent instanceof DebugElement__PRE_R3__) {\n      parent.addChild(this);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  get injector() {\n    return this._debugContext.injector;\n  }\n  /**\n   * @return {?}\n   */\n  get componentInstance() {\n    return this._debugContext.component;\n  }\n  /**\n   * @return {?}\n   */\n  get context() {\n    return this._debugContext.context;\n  }\n  /**\n   * @return {?}\n   */\n  get references() {\n    return this._debugContext.references;\n  }\n  /**\n   * @return {?}\n   */\n  get providerTokens() {\n    return this._debugContext.providerTokens;\n  }\n}\n// WARNING: interface has both a type and a value, skipping emit\nclass DebugElement__PRE_R3__ extends DebugNode__PRE_R3__ {\n  /**\n   * @param {?} nativeNode\n   * @param {?} parent\n   * @param {?} _debugContext\n   */\n  constructor(nativeNode, parent, _debugContext) {\n    super(nativeNode, parent, _debugContext);\n    this.properties = {};\n    this.attributes = {};\n    this.classes = {};\n    this.styles = {};\n    this.childNodes = [];\n    this.nativeElement = nativeNode;\n  }\n  /**\n   * @param {?} child\n   * @return {?}\n   */\n  addChild(child) {\n    if (child) {\n      this.childNodes.push(child);\n      /** @type {?} */child.parent = this;\n    }\n  }\n  /**\n   * @param {?} child\n   * @return {?}\n   */\n  removeChild(child) {\n    /** @type {?} */\n    const childIndex = this.childNodes.indexOf(child);\n    if (childIndex !== -1) {\n      /** @type {?} */child.parent = null;\n      this.childNodes.splice(childIndex, 1);\n    }\n  }\n  /**\n   * @param {?} child\n   * @param {?} newChildren\n   * @return {?}\n   */\n  insertChildrenAfter(child, newChildren) {\n    /** @type {?} */\n    const siblingIndex = this.childNodes.indexOf(child);\n    if (siblingIndex !== -1) {\n      this.childNodes.splice(siblingIndex + 1, 0, ...newChildren);\n      newChildren.forEach(c => {\n        if (c.parent) {\n          /** @type {?} */c.parent.removeChild(c);\n        }\n        /** @type {?} */child.parent = this;\n      });\n    }\n  }\n  /**\n   * @param {?} refChild\n   * @param {?} newChild\n   * @return {?}\n   */\n  insertBefore(refChild, newChild) {\n    /** @type {?} */\n    const refIndex = this.childNodes.indexOf(refChild);\n    if (refIndex === -1) {\n      this.addChild(newChild);\n    } else {\n      if (newChild.parent) {\n        /** @type {?} */newChild.parent.removeChild(newChild);\n      }\n      /** @type {?} */newChild.parent = this;\n      this.childNodes.splice(refIndex, 0, newChild);\n    }\n  }\n  /**\n   * @param {?} predicate\n   * @return {?}\n   */\n  query(predicate) {\n    /** @type {?} */\n    const results = this.queryAll(predicate);\n    return results[0] || null;\n  }\n  /**\n   * @param {?} predicate\n   * @return {?}\n   */\n  queryAll(predicate) {\n    /** @type {?} */\n    const matches = [];\n    _queryElementChildren(this, predicate, matches);\n    return matches;\n  }\n  /**\n   * @param {?} predicate\n   * @return {?}\n   */\n  queryAllNodes(predicate) {\n    /** @type {?} */\n    const matches = [];\n    _queryNodeChildren(this, predicate, matches);\n    return matches;\n  }\n  /**\n   * @return {?}\n   */\n  get children() {\n    return (/** @type {?} */this.childNodes //\n      .filter(node => node instanceof DebugElement__PRE_R3__)\n    );\n  }\n  /**\n   * @param {?} eventName\n   * @param {?} eventObj\n   * @return {?}\n   */\n  triggerEventHandler(eventName, eventObj) {\n    this.listeners.forEach(listener => {\n      if (listener.name == eventName) {\n        listener.callback(eventObj);\n      }\n    });\n  }\n}\n/**\n * \\@publicApi\n * @param {?} debugEls\n * @return {?}\n */\nfunction asNativeElements(debugEls) {\n  return debugEls.map(el => el.nativeElement);\n}\n/**\n * @param {?} element\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryElementChildren(element, predicate, matches) {\n  element.childNodes.forEach(node => {\n    if (node instanceof DebugElement__PRE_R3__) {\n      if (predicate(node)) {\n        matches.push(node);\n      }\n      _queryElementChildren(node, predicate, matches);\n    }\n  });\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryNodeChildren(parentNode, predicate, matches) {\n  if (parentNode instanceof DebugElement__PRE_R3__) {\n    parentNode.childNodes.forEach(node => {\n      if (predicate(node)) {\n        matches.push(node);\n      }\n      if (node instanceof DebugElement__PRE_R3__) {\n        _queryNodeChildren(node, predicate, matches);\n      }\n    });\n  }\n}\nclass DebugNode__POST_R3__ {\n  /**\n   * @param {?} nativeNode\n   */\n  constructor(nativeNode) {\n    this.nativeNode = nativeNode;\n  }\n  /**\n   * @return {?}\n   */\n  get parent() {\n    /** @type {?} */\n    const parent = /** @type {?} */this.nativeNode.parentNode;\n    return parent ? new DebugElement__POST_R3__(parent) : null;\n  }\n  /**\n   * @return {?}\n   */\n  get injector() {\n    return getInjector(this.nativeNode);\n  }\n  /**\n   * @return {?}\n   */\n  get componentInstance() {\n    /** @type {?} */\n    const nativeElement = this.nativeNode;\n    return nativeElement && getComponent( /** @type {?} */nativeElement);\n  }\n  /**\n   * @return {?}\n   */\n  get context() {\n    return getContext( /** @type {?} */this.nativeNode);\n  }\n  /**\n   * @return {?}\n   */\n  get listeners() {\n    return getListeners( /** @type {?} */this.nativeNode).filter(isBrowserEvents);\n  }\n  /**\n   * @return {?}\n   */\n  get references() {\n    return getLocalRefs(this.nativeNode);\n  }\n  /**\n   * @return {?}\n   */\n  get providerTokens() {\n    return getInjectionTokens( /** @type {?} */this.nativeNode);\n  }\n}\nclass DebugElement__POST_R3__ extends DebugNode__POST_R3__ {\n  /**\n   * @param {?} nativeNode\n   */\n  constructor(nativeNode) {\n    ngDevMode && assertDomNode(nativeNode);\n    super(nativeNode);\n  }\n  /**\n   * @return {?}\n   */\n  get nativeElement() {\n    return this.nativeNode.nodeType == Node.ELEMENT_NODE ? /** @type {?} */this.nativeNode : null;\n  }\n  /**\n   * @return {?}\n   */\n  get name() {\n    return (/** @type {?} */this.nativeElement.nodeName\n    );\n  }\n  /**\n   * @return {?}\n   */\n  get properties() {\n    /** @type {?} */\n    const context = /** @type {?} */loadLContext(this.nativeNode);\n    /** @type {?} */\n    const lView = context.lView;\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const tNode = /** @type {?} */tView.data[context.nodeIndex];\n    /** @type {?} */\n    const properties = {};\n    // TODO: https://angular-team.atlassian.net/browse/FW-681\n    // Missing implementation here...\n    return properties;\n  }\n  /**\n   * @return {?}\n   */\n  get attributes() {\n    /** @type {?} */\n    const attributes = {};\n    /** @type {?} */\n    const element = this.nativeElement;\n    if (element) {\n      /** @type {?} */\n      const eAttrs = element.attributes;\n      for (let i = 0; i < eAttrs.length; i++) {\n        /** @type {?} */\n        const attr = eAttrs[i];\n        attributes[attr.name] = attr.value;\n      }\n    }\n    return attributes;\n  }\n  /**\n   * @return {?}\n   */\n  get classes() {\n    /** @type {?} */\n    const classes = {};\n    /** @type {?} */\n    const element = this.nativeElement;\n    if (element) {\n      /** @type {?} */\n      const lContext = loadLContextFromNode(element);\n      /** @type {?} */\n      const lNode = lContext.lView[lContext.nodeIndex];\n      /** @type {?} */\n      const stylingContext = getStylingContext(lContext.nodeIndex, lContext.lView);\n      if (stylingContext) {\n        for (let i = 9 /* SingleStylesStartPosition */; i < lNode.length; i += 4 /* Size */) {\n          if (isClassBasedValue(lNode, i)) {\n            /** @type {?} */\n            const className = getProp(lNode, i);\n            /** @type {?} */\n            const value = getValue(lNode, i);\n            if (typeof value == 'boolean') {\n              // we want to ignore `null` since those don't overwrite the values.\n              classes[className] = value;\n            }\n          }\n        }\n      } else {\n        // Fallback, just read DOM.\n        /** @type {?} */\n        const eClasses = element.classList;\n        for (let i = 0; i < eClasses.length; i++) {\n          classes[eClasses[i]] = true;\n        }\n      }\n    }\n    return classes;\n  }\n  /**\n   * @return {?}\n   */\n  get styles() {\n    /** @type {?} */\n    const styles = {};\n    /** @type {?} */\n    const element = this.nativeElement;\n    if (element) {\n      /** @type {?} */\n      const lContext = loadLContextFromNode(element);\n      /** @type {?} */\n      const lNode = lContext.lView[lContext.nodeIndex];\n      /** @type {?} */\n      const stylingContext = getStylingContext(lContext.nodeIndex, lContext.lView);\n      if (stylingContext) {\n        for (let i = 9 /* SingleStylesStartPosition */; i < lNode.length; i += 4 /* Size */) {\n          if (!isClassBasedValue(lNode, i)) {\n            /** @type {?} */\n            const styleName = getProp(lNode, i);\n            /** @type {?} */\n            const value = /** @type {?} */getValue(lNode, i);\n            if (value !== null) {\n              // we want to ignore `null` since those don't overwrite the values.\n              styles[styleName] = value;\n            }\n          }\n        }\n      } else {\n        // Fallback, just read DOM.\n        /** @type {?} */\n        const eStyles = /** @type {?} */element.style;\n        for (let i = 0; i < eStyles.length; i++) {\n          /** @type {?} */\n          const name = eStyles.item(i);\n          styles[name] = eStyles.getPropertyValue(name);\n        }\n      }\n    }\n    return styles;\n  }\n  /**\n   * @return {?}\n   */\n  get childNodes() {\n    /** @type {?} */\n    const childNodes = this.nativeNode.childNodes;\n    /** @type {?} */\n    const children = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      /** @type {?} */\n      const element = childNodes[i];\n      children.push(getDebugNode__POST_R3__(element));\n    }\n    return children;\n  }\n  /**\n   * @return {?}\n   */\n  get children() {\n    /** @type {?} */\n    const nativeElement = this.nativeElement;\n    if (!nativeElement) return [];\n    /** @type {?} */\n    const childNodes = nativeElement.children;\n    /** @type {?} */\n    const children = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      /** @type {?} */\n      const element = childNodes[i];\n      children.push(getDebugNode__POST_R3__(element));\n    }\n    return children;\n  }\n  /**\n   * @param {?} predicate\n   * @return {?}\n   */\n  query(predicate) {\n    /** @type {?} */\n    const results = this.queryAll(predicate);\n    return results[0] || null;\n  }\n  /**\n   * @param {?} predicate\n   * @return {?}\n   */\n  queryAll(predicate) {\n    /** @type {?} */\n    const matches = [];\n    _queryNodeChildrenR3(this, predicate, matches, true);\n    return matches;\n  }\n  /**\n   * @param {?} predicate\n   * @return {?}\n   */\n  queryAllNodes(predicate) {\n    /** @type {?} */\n    const matches = [];\n    _queryNodeChildrenR3(this, predicate, matches, false);\n    return matches;\n  }\n  /**\n   * @param {?} eventName\n   * @param {?} eventObj\n   * @return {?}\n   */\n  triggerEventHandler(eventName, eventObj) {\n    this.listeners.forEach(listener => {\n      if (listener.name === eventName) {\n        listener.callback(eventObj);\n      }\n    });\n  }\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @param {?} elementsOnly\n * @return {?}\n */\nfunction _queryNodeChildrenR3(parentNode, predicate, matches, elementsOnly) {\n  if (parentNode instanceof DebugElement__POST_R3__) {\n    parentNode.childNodes.forEach(node => {\n      if (predicate(node)) {\n        matches.push(node);\n      }\n      if (node instanceof DebugElement__POST_R3__) {\n        if (elementsOnly ? node.nativeElement : true) {\n          _queryNodeChildrenR3(node, predicate, matches, elementsOnly);\n        }\n      }\n    });\n  }\n}\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\n/** @type {?} */\nconst _nativeNodeToDebugNode = new Map();\n/**\n * @param {?} nativeNode\n * @return {?}\n */\nfunction getDebugNode__PRE_R3__(nativeNode) {\n  return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n/**\n * @param {?} nativeNode\n * @return {?}\n */\nfunction getDebugNode__POST_R3__(nativeNode) {\n  if (nativeNode instanceof Node) {\n    return nativeNode.nodeType == Node.ELEMENT_NODE ? new DebugElement__POST_R3__( /** @type {?} */nativeNode) : new DebugNode__POST_R3__(nativeNode);\n  }\n  return null;\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst getDebugNode = getDebugNode__PRE_R3__;\n/**\n * @param {?} node\n * @return {?}\n */\nfunction indexDebugNode(node) {\n  _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction removeDebugNodeFromIndex(node) {\n  _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst DebugNode = /** @type {?} */DebugNode__PRE_R3__;\n/**\n * \\@publicApi\n * @type {?}\n */\nconst DebugElement = /** @type {?} */DebugElement__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DefaultIterableDifferFactory {\n  constructor() {}\n  /**\n   * @param {?} obj\n   * @return {?}\n   */\n  supports(obj) {\n    return isListLikeIterable(obj);\n  }\n  /**\n   * @template V\n   * @param {?=} trackByFn\n   * @return {?}\n   */\n  create(trackByFn) {\n    return new DefaultIterableDiffer(trackByFn);\n  }\n}\n/** @type {?} */\nconst trackByIdentity = (index, item) => item;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * \\@publicApi\n * @template V\n */\nclass DefaultIterableDiffer {\n  /**\n   * @param {?=} trackByFn\n   */\n  constructor(trackByFn) {\n    this.length = 0;\n    // Keeps track of the used records at any point in time (during & across `_check()` calls)\n    this._linkedRecords = null;\n    // Keeps track of the removed records at any point in time during `_check()` calls.\n    this._unlinkedRecords = null;\n    this._previousItHead = null;\n    this._itHead = null;\n    this._itTail = null;\n    this._additionsHead = null;\n    this._additionsTail = null;\n    this._movesHead = null;\n    this._movesTail = null;\n    this._removalsHead = null;\n    this._removalsTail = null;\n    // Keeps track of records where custom track by is the same, but item identity has changed\n    this._identityChangesHead = null;\n    this._identityChangesTail = null;\n    this._trackByFn = trackByFn || trackByIdentity;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  forEachItem(fn) {\n    /** @type {?} */\n    let record;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  forEachOperation(fn) {\n    /** @type {?} */\n    let nextIt = this._itHead;\n    /** @type {?} */\n    let nextRemove = this._removalsHead;\n    /** @type {?} */\n    let addRemoveOffset = 0;\n    /** @type {?} */\n    let moveOffsets = null;\n    while (nextIt || nextRemove) {\n      // Figure out which is the next record to process\n      // Order: remove, add, move\n      /** @type {?} */\n      const record = !nextRemove || nextIt && /** @type {?} */nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? /** @type {?} */nextIt : nextRemove;\n      /** @type {?} */\n      const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n      /** @type {?} */\n      const currentIndex = record.currentIndex;\n      // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n      if (record === nextRemove) {\n        addRemoveOffset--;\n        nextRemove = nextRemove._nextRemoved;\n      } else {\n        nextIt = /** @type {?} */nextIt._next;\n        if (record.previousIndex == null) {\n          addRemoveOffset++;\n        } else {\n          // INVARIANT:  currentIndex < previousIndex\n          if (!moveOffsets) moveOffsets = [];\n          /** @type {?} */\n          const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n          /** @type {?} */\n          const localCurrentIndex = /** @type {?} */currentIndex - addRemoveOffset;\n          if (localMovePreviousIndex != localCurrentIndex) {\n            for (let i = 0; i < localMovePreviousIndex; i++) {\n              /** @type {?} */\n              const offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;\n              /** @type {?} */\n              const index = offset + i;\n              if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                moveOffsets[i] = offset + 1;\n              }\n            }\n            /** @type {?} */\n            const previousIndex = record.previousIndex;\n            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n          }\n        }\n      }\n      if (adjPreviousIndex !== currentIndex) {\n        fn(record, adjPreviousIndex, currentIndex);\n      }\n    }\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  forEachPreviousItem(fn) {\n    /** @type {?} */\n    let record;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  forEachAddedItem(fn) {\n    /** @type {?} */\n    let record;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  forEachMovedItem(fn) {\n    /** @type {?} */\n    let record;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  forEachRemovedItem(fn) {\n    /** @type {?} */\n    let record;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  forEachIdentityChange(fn) {\n    /** @type {?} */\n    let record;\n    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n      fn(record);\n    }\n  }\n  /**\n   * @param {?} collection\n   * @return {?}\n   */\n  diff(collection) {\n    if (collection == null) collection = [];\n    if (!isListLikeIterable(collection)) {\n      throw new Error(`Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\n    }\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  onDestroy() {}\n  /**\n   * @param {?} collection\n   * @return {?}\n   */\n  check(collection) {\n    this._reset();\n    /** @type {?} */\n    let record = this._itHead;\n    /** @type {?} */\n    let mayBeDirty = false;\n    /** @type {?} */\n    let index;\n    /** @type {?} */\n    let item;\n    /** @type {?} */\n    let itemTrackBy;\n    if (Array.isArray(collection)) {\n      /** @type {?} */this.length = collection.length;\n      for (let index = 0; index < this.length; index++) {\n        item = collection[index];\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, item => {\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n        index++;\n      });\n      /** @type {?} */this.length = index;\n    }\n    this._truncate(record);\n    /** @type {?} */this.collection = collection;\n    return this.isDirty;\n  }\n  /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n     * changes.\n     */\n  /**\n   * @return {?}\n   */\n  get isDirty() {\n    return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;\n  }\n  /**\n   * Reset the state of the change objects to show no changes. This means set previousKey to\n   * currentKey, and clear all of the queues (additions, moves, removals).\n   * Set the previousIndexes of moved and added items to their currentIndexes\n   * Reset the list of additions, moves and removals\n   *\n   * \\@internal\n   * @return {?}\n   */\n  _reset() {\n    if (this.isDirty) {\n      /** @type {?} */\n      let record;\n      /** @type {?} */\n      let nextRecord;\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n      for (record = this._movesHead; record !== null; record = nextRecord) {\n        record.previousIndex = record.currentIndex;\n        nextRecord = record._nextMoved;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n      this._identityChangesHead = this._identityChangesTail = null;\n      // TODO(vicb): when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n  /**\n   * This is the core function which handles differences between collections.\n   *\n   * - `record` is the record which we saw at this position last time. If null then it is a new\n   *   item.\n   * - `item` is the current item in the collection\n   * - `index` is the position of the item in the collection\n   *\n   * \\@internal\n   * @param {?} record\n   * @param {?} item\n   * @param {?} itemTrackBy\n   * @param {?} index\n   * @return {?}\n   */\n  _mismatch(record, item, itemTrackBy, index) {\n    // The previous record after which we will append the current one.\n    /** @type {?} */\n    let previousRecord;\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n    // Attempt to see if we have seen the item before.\n    record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n    if (record !== null) {\n      // We have seen this before, we need to move it forward in the collection.\n      // But first we need to check if identity changed, so we can update in view if necessary\n      if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n      this._moveAfter(record, previousRecord, index);\n    } else {\n      // Never seen it, check evicted list.\n      record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n      if (record !== null) {\n        // It is an item which we have evicted earlier: reinsert it back into the list.\n        // But first we need to check if identity changed, so we can update in view if necessary\n        if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        this._reinsertAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n      }\n    }\n    return record;\n  }\n  /**\n   * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n   *\n   * Use case: `[a, a]` => `[b, a, a]`\n   *\n   * If we did not have this check then the insertion of `b` would:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) leave `a` at index `1` as is. <-- this is wrong!\n   *   3) reinsert `a` at index 2. <-- this is wrong!\n   *\n   * The correct behavior is:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) reinsert `a` at index 1.\n   *   3) move `a` at from `1` to `2`.\n   *\n   *\n   * Double check that we have not evicted a duplicate item. We need to check if the item type may\n   * have already been removed:\n   * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n   * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n   * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n   * at the end.\n   *\n   * \\@internal\n   * @param {?} record\n   * @param {?} item\n   * @param {?} itemTrackBy\n   * @param {?} index\n   * @return {?}\n   */\n  _verifyReinsertion(record, item, itemTrackBy, index) {\n    /** @type {?} */\n    let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, /** @type {?} */record._prev, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n  /**\n   * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n   *\n   * - `record` The first excess {\\@link IterableChangeRecord_}.\n   *\n   * \\@internal\n   * @param {?} record\n   * @return {?}\n   */\n  _truncate(record) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      /** @type {?} */\n      const nextRecord = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n    if (this._identityChangesTail !== null) {\n      this._identityChangesTail._nextIdentityChange = null;\n    }\n  }\n  /**\n   * \\@internal\n   * @param {?} record\n   * @param {?} prevRecord\n   * @param {?} index\n   * @return {?}\n   */\n  _reinsertAfter(record, prevRecord, index) {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    /** @type {?} */\n    const prev = record._prevRemoved;\n    /** @type {?} */\n    const next = record._nextRemoved;\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n  /**\n   * \\@internal\n   * @param {?} record\n   * @param {?} prevRecord\n   * @param {?} index\n   * @return {?}\n   */\n  _moveAfter(record, prevRecord, index) {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n  /**\n   * \\@internal\n   * @param {?} record\n   * @param {?} prevRecord\n   * @param {?} index\n   * @return {?}\n   */\n  _addAfter(record, prevRecord, index) {\n    this._insertAfter(record, prevRecord, index);\n    if (this._additionsTail === null) {\n      // TODO(vicb):\n      // assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_additionsTail._nextAdded === null);\n      // assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n  /**\n   * \\@internal\n   * @param {?} record\n   * @param {?} prevRecord\n   * @param {?} index\n   * @return {?}\n   */\n  _insertAfter(record, prevRecord, index) {\n    // TODO(vicb):\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n    // TODO(vicb):\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n    /** @type {?} */\n    const next = prevRecord === null ? this._itHead : prevRecord._next;\n    // TODO(vicb):\n    // assert(next != record);\n    // assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap();\n    }\n    this._linkedRecords.put(record);\n    record.currentIndex = index;\n    return record;\n  }\n  /**\n   * \\@internal\n   * @param {?} record\n   * @return {?}\n   */\n  _remove(record) {\n    return this._addToRemovals(this._unlink(record));\n  }\n  /**\n   * \\@internal\n   * @param {?} record\n   * @return {?}\n   */\n  _unlink(record) {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n    /** @type {?} */\n    const prev = record._prev;\n    /** @type {?} */\n    const next = record._next;\n    // TODO(vicb):\n    // assert((record._prev = null) === null);\n    // assert((record._next = null) === null);\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n    return record;\n  }\n  /**\n   * \\@internal\n   * @param {?} record\n   * @param {?} toIndex\n   * @return {?}\n   */\n  _addToMoves(record, toIndex) {\n    // TODO(vicb):\n    // assert(record._nextMoved === null);\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n    if (this._movesTail === null) {\n      // TODO(vicb):\n      // assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n    return record;\n  }\n  /**\n   * @private\n   * @param {?} record\n   * @return {?}\n   */\n  _addToRemovals(record) {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n    if (this._removalsTail === null) {\n      // TODO(vicb):\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // TODO(vicb):\n      // assert(_removalsTail._nextRemoved === null);\n      // assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n  /**\n   * \\@internal\n   * @param {?} record\n   * @param {?} item\n   * @return {?}\n   */\n  _addIdentityChange(record, item) {\n    record.item = item;\n    if (this._identityChangesTail === null) {\n      this._identityChangesTail = this._identityChangesHead = record;\n    } else {\n      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n    }\n    return record;\n  }\n}\n/**\n * @template V\n */\nclass IterableChangeRecord_ {\n  /**\n   * @param {?} item\n   * @param {?} trackById\n   */\n  constructor(item, trackById) {\n    this.item = item;\n    this.trackById = trackById;\n    this.currentIndex = null;\n    this.previousIndex = null;\n    /**\n     * \\@internal\n     */\n    this._nextPrevious = null;\n    /**\n     * \\@internal\n     */\n    this._prev = null;\n    /**\n     * \\@internal\n     */\n    this._next = null;\n    /**\n     * \\@internal\n     */\n    this._prevDup = null;\n    /**\n     * \\@internal\n     */\n    this._nextDup = null;\n    /**\n     * \\@internal\n     */\n    this._prevRemoved = null;\n    /**\n     * \\@internal\n     */\n    this._nextRemoved = null;\n    /**\n     * \\@internal\n     */\n    this._nextAdded = null;\n    /**\n     * \\@internal\n     */\n    this._nextMoved = null;\n    /**\n     * \\@internal\n     */\n    this._nextIdentityChange = null;\n  }\n}\n// A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item\n/**\n * @template V\n */\nclass _DuplicateItemRecordList {\n  constructor() {\n    /**\n     * \\@internal\n     */\n    this._head = null;\n    /**\n     * \\@internal\n     */\n    this._tail = null;\n  }\n  /**\n   * Append the record to the list of duplicates.\n   *\n   * Note: by design all records in the list of duplicates hold the same value in record.item.\n   * @param {?} record\n   * @return {?}\n   */\n  add(record) {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else {\n      // TODO(vicb):\n      // assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      /** @type {?} */this._tail._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n  // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n  // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n  /**\n   * @param {?} trackById\n   * @param {?} atOrAfterIndex\n   * @return {?}\n   */\n  get(trackById, atOrAfterIndex) {\n    /** @type {?} */\n    let record;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if ((atOrAfterIndex === null || atOrAfterIndex <= /** @type {?} */record.currentIndex) && looseIdentical(record.trackById, trackById)) {\n        return record;\n      }\n    }\n    return null;\n  }\n  /**\n   * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * Returns whether the list of duplicates is empty.\n   * @param {?} record\n   * @return {?}\n   */\n  remove(record) {\n    // TODO(vicb):\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n    // TODO(vicb):\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n    /** @type {?} */\n    const prev = record._prevDup;\n    /** @type {?} */\n    const next = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n}\n/**\n * @template V\n */\nclass _DuplicateMap {\n  constructor() {\n    this.map = new Map();\n  }\n  /**\n   * @param {?} record\n   * @return {?}\n   */\n  put(record) {\n    /** @type {?} */\n    const key = record.trackById;\n    /** @type {?} */\n    let duplicates = this.map.get(key);\n    if (!duplicates) {\n      duplicates = new _DuplicateItemRecordList();\n      this.map.set(key, duplicates);\n    }\n    duplicates.add(record);\n  }\n  /**\n   * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n   * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n   *\n   * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n   * have any more `a`s needs to return the second `a`.\n   * @param {?} trackById\n   * @param {?} atOrAfterIndex\n   * @return {?}\n   */\n  get(trackById, atOrAfterIndex) {\n    /** @type {?} */\n    const key = trackById;\n    /** @type {?} */\n    const recordList = this.map.get(key);\n    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n  }\n  /**\n   * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * The list of duplicates also is removed from the map if it gets empty.\n   * @param {?} record\n   * @return {?}\n   */\n  remove(record) {\n    /** @type {?} */\n    const key = record.trackById;\n    /** @type {?} */\n    const recordList = /** @type {?} */this.map.get(key);\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      this.map.delete(key);\n    }\n    return record;\n  }\n  /**\n   * @return {?}\n   */\n  get isEmpty() {\n    return this.map.size === 0;\n  }\n  /**\n   * @return {?}\n   */\n  clear() {\n    this.map.clear();\n  }\n}\n/**\n * @param {?} item\n * @param {?} addRemoveOffset\n * @param {?} moveOffsets\n * @return {?}\n */\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n  /** @type {?} */\n  const previousIndex = item.previousIndex;\n  if (previousIndex === null) return previousIndex;\n  /** @type {?} */\n  let moveOffset = 0;\n  if (moveOffsets && previousIndex < moveOffsets.length) {\n    moveOffset = moveOffsets[previousIndex];\n  }\n  return previousIndex + addRemoveOffset + moveOffset;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template K, V\n */\nclass DefaultKeyValueDifferFactory {\n  constructor() {}\n  /**\n   * @param {?} obj\n   * @return {?}\n   */\n  supports(obj) {\n    return obj instanceof Map || isJsObject(obj);\n  }\n  /**\n   * @template K, V\n   * @return {?}\n   */\n  create() {\n    return new DefaultKeyValueDiffer();\n  }\n}\n/**\n * @template K, V\n */\nclass DefaultKeyValueDiffer {\n  constructor() {\n    this._records = new Map();\n    this._mapHead = null;\n    // _appendAfter is used in the check loop\n    this._appendAfter = null;\n    this._previousMapHead = null;\n    this._changesHead = null;\n    this._changesTail = null;\n    this._additionsHead = null;\n    this._additionsTail = null;\n    this._removalsHead = null;\n    this._removalsTail = null;\n  }\n  /**\n   * @return {?}\n   */\n  get isDirty() {\n    return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  forEachItem(fn) {\n    /** @type {?} */\n    let record;\n    for (record = this._mapHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  forEachPreviousItem(fn) {\n    /** @type {?} */\n    let record;\n    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  forEachChangedItem(fn) {\n    /** @type {?} */\n    let record;\n    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n      fn(record);\n    }\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  forEachAddedItem(fn) {\n    /** @type {?} */\n    let record;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  forEachRemovedItem(fn) {\n    /** @type {?} */\n    let record;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n  /**\n   * @param {?=} map\n   * @return {?}\n   */\n  diff(map) {\n    if (!map) {\n      map = new Map();\n    } else if (!(map instanceof Map || isJsObject(map))) {\n      throw new Error(`Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\n    }\n    return this.check(map) ? this : null;\n  }\n  /**\n   * @return {?}\n   */\n  onDestroy() {}\n  /**\n   * Check the current state of the map vs the previous.\n   * The algorithm is optimised for when the keys do no change.\n   * @param {?} map\n   * @return {?}\n   */\n  check(map) {\n    this._reset();\n    /** @type {?} */\n    let insertBefore = this._mapHead;\n    this._appendAfter = null;\n    this._forEach(map, (value, key) => {\n      if (insertBefore && insertBefore.key === key) {\n        this._maybeAddToChanges(insertBefore, value);\n        this._appendAfter = insertBefore;\n        insertBefore = insertBefore._next;\n      } else {\n        /** @type {?} */\n        const record = this._getOrCreateRecordForKey(key, value);\n        insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n      }\n    });\n    // Items remaining at the end of the list have been deleted\n    if (insertBefore) {\n      if (insertBefore._prev) {\n        insertBefore._prev._next = null;\n      }\n      this._removalsHead = insertBefore;\n      for (let record = insertBefore; record !== null; record = record._nextRemoved) {\n        if (record === this._mapHead) {\n          this._mapHead = null;\n        }\n        this._records.delete(record.key);\n        record._nextRemoved = record._next;\n        record.previousValue = record.currentValue;\n        record.currentValue = null;\n        record._prev = null;\n        record._next = null;\n      }\n    }\n    // Make sure tails have no next records from previous runs\n    if (this._changesTail) this._changesTail._nextChanged = null;\n    if (this._additionsTail) this._additionsTail._nextAdded = null;\n    return this.isDirty;\n  }\n  /**\n   * Inserts a record before `before` or append at the end of the list when `before` is null.\n   *\n   * Notes:\n   * - This method appends at `this._appendAfter`,\n   * - This method updates `this._appendAfter`,\n   * - The return value is the new value for the insertion pointer.\n   * @private\n   * @param {?} before\n   * @param {?} record\n   * @return {?}\n   */\n  _insertBeforeOrAppend(before, record) {\n    if (before) {\n      /** @type {?} */\n      const prev = before._prev;\n      record._next = before;\n      record._prev = prev;\n      before._prev = record;\n      if (prev) {\n        prev._next = record;\n      }\n      if (before === this._mapHead) {\n        this._mapHead = record;\n      }\n      this._appendAfter = before;\n      return before;\n    }\n    if (this._appendAfter) {\n      this._appendAfter._next = record;\n      record._prev = this._appendAfter;\n    } else {\n      this._mapHead = record;\n    }\n    this._appendAfter = record;\n    return null;\n  }\n  /**\n   * @private\n   * @param {?} key\n   * @param {?} value\n   * @return {?}\n   */\n  _getOrCreateRecordForKey(key, value) {\n    if (this._records.has(key)) {\n      /** @type {?} */\n      const record = /** @type {?} */this._records.get(key);\n      this._maybeAddToChanges(record, value);\n      /** @type {?} */\n      const prev = record._prev;\n      /** @type {?} */\n      const next = record._next;\n      if (prev) {\n        prev._next = next;\n      }\n      if (next) {\n        next._prev = prev;\n      }\n      record._next = null;\n      record._prev = null;\n      return record;\n    }\n    /** @type {?} */\n    const record = new KeyValueChangeRecord_(key);\n    this._records.set(key, record);\n    record.currentValue = value;\n    this._addToAdditions(record);\n    return record;\n  }\n  /**\n   * \\@internal\n   * @return {?}\n   */\n  _reset() {\n    if (this.isDirty) {\n      /** @type {?} */\n      let record;\n      // let `_previousMapHead` contain the state of the map before the changes\n      this._previousMapHead = this._mapHead;\n      for (record = this._previousMapHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n      // Update `record.previousValue` with the value of the item before the changes\n      // We need to update all changed items (that's those which have been added and changed)\n      for (record = this._changesHead; record !== null; record = record._nextChanged) {\n        record.previousValue = record.currentValue;\n      }\n      for (record = this._additionsHead; record != null; record = record._nextAdded) {\n        record.previousValue = record.currentValue;\n      }\n      this._changesHead = this._changesTail = null;\n      this._additionsHead = this._additionsTail = null;\n      this._removalsHead = null;\n    }\n  }\n  // Add the record or a given key to the list of changes only when the value has actually changed\n  /**\n   * @private\n   * @param {?} record\n   * @param {?} newValue\n   * @return {?}\n   */\n  _maybeAddToChanges(record, newValue) {\n    if (!looseIdentical(newValue, record.currentValue)) {\n      record.previousValue = record.currentValue;\n      record.currentValue = newValue;\n      this._addToChanges(record);\n    }\n  }\n  /**\n   * @private\n   * @param {?} record\n   * @return {?}\n   */\n  _addToAdditions(record) {\n    if (this._additionsHead === null) {\n      this._additionsHead = this._additionsTail = record;\n    } else {\n      /** @type {?} */this._additionsTail._nextAdded = record;\n      this._additionsTail = record;\n    }\n  }\n  /**\n   * @private\n   * @param {?} record\n   * @return {?}\n   */\n  _addToChanges(record) {\n    if (this._changesHead === null) {\n      this._changesHead = this._changesTail = record;\n    } else {\n      /** @type {?} */this._changesTail._nextChanged = record;\n      this._changesTail = record;\n    }\n  }\n  /**\n   * \\@internal\n   * @private\n   * @template K, V\n   * @param {?} obj\n   * @param {?} fn\n   * @return {?}\n   */\n  _forEach(obj, fn) {\n    if (obj instanceof Map) {\n      obj.forEach(fn);\n    } else {\n      Object.keys(obj).forEach(k => fn(obj[k], k));\n    }\n  }\n}\n/**\n * @template K, V\n */\nclass KeyValueChangeRecord_ {\n  /**\n   * @param {?} key\n   */\n  constructor(key) {\n    this.key = key;\n    this.previousValue = null;\n    this.currentValue = null;\n    /**\n     * \\@internal\n     */\n    this._nextPrevious = null;\n    /**\n     * \\@internal\n     */\n    this._next = null;\n    /**\n     * \\@internal\n     */\n    this._prev = null;\n    /**\n     * \\@internal\n     */\n    this._nextAdded = null;\n    /**\n     * \\@internal\n     */\n    this._nextRemoved = null;\n    /**\n     * \\@internal\n     */\n    this._nextChanged = null;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * \\@publicApi\n */\nclass IterableDiffers {\n  /**\n   * @param {?} factories\n   */\n  constructor(factories) {\n    this.factories = factories;\n  }\n  /**\n   * @param {?} factories\n   * @param {?=} parent\n   * @return {?}\n   */\n  static create(factories, parent) {\n    if (parent != null) {\n      /** @type {?} */\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n    return new IterableDiffers(factories);\n  }\n  /**\n   * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n   * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n   * {\\@link IterableDiffers} instance.\n   *\n   * \\@usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {\\@link IterableDiffer} available.\n   *\n   * ```\n   * \\@Component({\n   *   viewProviders: [\n   *     IterableDiffers.extend([new ImmutableListDiffer()])\n   *   ]\n   * })\n   * ```\n   * @param {?} factories\n   * @return {?}\n   */\n  static extend(factories) {\n    return {\n      provide: IterableDiffers,\n      useFactory: parent => {\n        if (!parent) {\n          // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n          // to\n          // bootstrap(), which would override default pipes instead of extending them.\n          throw new Error('Cannot extend IterableDiffers without a parent injector');\n        }\n        return IterableDiffers.create(factories, parent);\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n  /**\n   * @param {?} iterable\n   * @return {?}\n   */\n  find(iterable) {\n    /** @type {?} */\n    const factory = this.factories.find(f => f.supports(iterable));\n    if (factory != null) {\n      return factory;\n    } else {\n      throw new Error(`Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);\n    }\n  }\n}\n/** @nocollapse */\n/** @nocollapse */\nIterableDiffers.ngInjectableDef = defineInjectable({\n  providedIn: 'root',\n  factory: () => new IterableDiffers([new DefaultIterableDifferFactory()])\n});\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getTypeNameForDebugging(type) {\n  return type['name'] || typeof type;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * \\@publicApi\n */\nclass KeyValueDiffers {\n  /**\n   * @param {?} factories\n   */\n  constructor(factories) {\n    this.factories = factories;\n  }\n  /**\n   * @template S\n   * @param {?} factories\n   * @param {?=} parent\n   * @return {?}\n   */\n  static create(factories, parent) {\n    if (parent) {\n      /** @type {?} */\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n    return new KeyValueDiffers(factories);\n  }\n  /**\n   * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n   * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n   * {\\@link KeyValueDiffers} instance.\n   *\n   * \\@usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n   *\n   * ```\n   * \\@Component({\n   *   viewProviders: [\n   *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n   *   ]\n   * })\n   * ```\n   * @template S\n   * @param {?} factories\n   * @return {?}\n   */\n  static extend(factories) {\n    return {\n      provide: KeyValueDiffers,\n      useFactory: parent => {\n        if (!parent) {\n          // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n          // to bootstrap(), which would override default pipes instead of extending them.\n          throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n        }\n        return KeyValueDiffers.create(factories, parent);\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n  /**\n   * @param {?} kv\n   * @return {?}\n   */\n  find(kv) {\n    /** @type {?} */\n    const factory = this.factories.find(f => f.supports(kv));\n    if (factory) {\n      return factory;\n    }\n    throw new Error(`Cannot find a differ supporting object '${kv}'`);\n  }\n}\n/** @nocollapse */\n/** @nocollapse */\nKeyValueDiffers.ngInjectableDef = defineInjectable({\n  providedIn: 'root',\n  factory: () => new KeyValueDiffers([new DefaultKeyValueDifferFactory()])\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Structural diffing for `Object`s and `Map`s.\n * @type {?}\n */\nconst keyValDiff = [new DefaultKeyValueDifferFactory()];\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n * @type {?}\n */\nconst iterableDiff = [new DefaultIterableDifferFactory()];\n/** @type {?} */\nconst defaultIterableDiffers = new IterableDiffers(iterableDiff);\n/** @type {?} */\nconst defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _CORE_PLATFORM_PROVIDERS = [\n// Set a default platform name for platforms that don't set it explicitly.\n{\n  provide: PLATFORM_ID,\n  useValue: 'unknown'\n}, {\n  provide: PlatformRef,\n  deps: [Injector]\n}, {\n  provide: TestabilityRegistry,\n  deps: []\n}, {\n  provide: Console,\n  deps: []\n}];\n/**\n * This platform has to be included in any other platform\n *\n * \\@publicApi\n * @type {?}\n */\nconst platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst LOCALE_ID = new InjectionToken('LocaleId');\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst TRANSLATIONS = new InjectionToken('Translations');\n/**\n * Provide this token at bootstrap to set the format of your {\\@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/** @enum {number} */\nconst MissingTranslationStrategy = {\n  Error: 0,\n  Warning: 1,\n  Ignore: 2\n};\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = 'Error';\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = 'Warning';\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = 'Ignore';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction _iterableDiffersFactory() {\n  return defaultIterableDiffers;\n}\n/**\n * @return {?}\n */\nfunction _keyValueDiffersFactory() {\n  return defaultKeyValueDiffers;\n}\n/**\n * @param {?=} locale\n * @return {?}\n */\nfunction _localeFactory(locale) {\n  return locale || 'en-US';\n}\n/**\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n * @type {?}\n */\nconst APPLICATION_MODULE_PROVIDERS = [{\n  provide: ApplicationRef,\n  useClass: ApplicationRef,\n  deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n}, {\n  provide: ApplicationInitStatus,\n  useClass: ApplicationInitStatus,\n  deps: [[new Optional(), APP_INITIALIZER]]\n}, {\n  provide: Compiler,\n  useClass: Compiler,\n  deps: []\n}, APP_ID_RANDOM_PROVIDER, {\n  provide: IterableDiffers,\n  useFactory: _iterableDiffersFactory,\n  deps: []\n}, {\n  provide: KeyValueDiffers,\n  useFactory: _keyValueDiffersFactory,\n  deps: []\n}, {\n  provide: LOCALE_ID,\n  useFactory: _localeFactory,\n  deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n}];\n/**\n * Configures the root injector for an app with\n * providers of `\\@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * \\@publicApi\n */\nclass ApplicationModule {\n  // Inject ApplicationRef to make it eager...\n  /**\n   * @param {?} appRef\n   */\n  constructor(appRef) {}\n}\nApplicationModule.ɵfac = function ApplicationModule_Factory(t) {\n  return new (t || ApplicationModule)(ɵɵinject(ApplicationRef));\n};\nApplicationModule.ɵmod = /*@__PURE__*/ɵɵdefineNgModule({\n  type: ApplicationModule\n});\nApplicationModule.ɵinj = /*@__PURE__*/ɵɵdefineInjector({\n  providers: APPLICATION_MODULE_PROVIDERS\n});\n/** @nocollapse */\nApplicationModule.ctorParameters = () => [{\n  type: ApplicationRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationModule, [{\n    type: NgModule,\n    args: [{\n      providers: APPLICATION_MODULE_PROVIDERS\n    }]\n  }], function () {\n    return [{\n      type: ApplicationRef\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst SWITCH_IVY_ENABLED__POST_R3__ = true;\n/** @type {?} */\nconst SWITCH_IVY_ENABLED__PRE_R3__ = false;\n/** @type {?} */\nconst ivyEnabled = SWITCH_IVY_ENABLED__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Called before each cycle of a view's check to detect whether this is in the\n// initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit\n// lifecycle methods. Returns true if this check cycle should call lifecycle\n// methods.\n/**\n * @param {?} view\n * @param {?} priorInitState\n * @param {?} newInitState\n * @return {?}\n */\nfunction shiftInitState(view, priorInitState, newInitState) {\n  // Only update the InitState if we are currently in the prior state.\n  // For example, only move into CallingInit if we are in BeforeInit. Only\n  // move into CallingContentInit if we are in CallingInit. Normally this will\n  // always be true because of how checkCycle is called in checkAndUpdateView.\n  // However, if checkAndUpdateView is called recursively or if an exception is\n  // thrown while checkAndUpdateView is running, checkAndUpdateView starts over\n  // from the beginning. This ensures the state is monotonically increasing,\n  // terminating in the AfterInit state, which ensures the Init methods are called\n  // at least once and only once.\n  /** @type {?} */\n  const state = view.state;\n  /** @type {?} */\n  const initState = state & 1792 /* InitState_Mask */;\n  if (initState === priorInitState) {\n    view.state = state & ~1792 /* InitState_Mask */ | newInitState;\n    view.initIndex = -1;\n    return true;\n  }\n  return initState === newInitState;\n}\n// Returns true if the lifecycle init method should be called for the node with\n// the given init index.\n/**\n * @param {?} view\n * @param {?} initState\n * @param {?} index\n * @return {?}\n */\nfunction shouldCallLifecycleInitHook(view, initState, index) {\n  if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n    view.initIndex = index + 1;\n    return true;\n  }\n  return false;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asTextData(view, index) {\n  return (/** @type {?} */view.nodes[index]\n  );\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asElementData(view, index) {\n  return (/** @type {?} */view.nodes[index]\n  );\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asProviderData(view, index) {\n  return (/** @type {?} */view.nodes[index]\n  );\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asPureExpressionData(view, index) {\n  return (/** @type {?} */view.nodes[index]\n  );\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asQueryList(view, index) {\n  return (/** @type {?} */view.nodes[index]\n  );\n}\n/**\n * @abstract\n */\nclass DebugContext {}\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n * @type {?}\n */\nconst Services = {\n  setCurrentNode: /** @type {?} */undefined,\n  createRootView: /** @type {?} */undefined,\n  createEmbeddedView: /** @type {?} */undefined,\n  createComponentView: /** @type {?} */undefined,\n  createNgModuleRef: /** @type {?} */undefined,\n  overrideProvider: /** @type {?} */undefined,\n  overrideComponentView: /** @type {?} */undefined,\n  clearOverrides: /** @type {?} */undefined,\n  checkAndUpdateView: /** @type {?} */undefined,\n  checkNoChangesView: /** @type {?} */undefined,\n  destroyView: /** @type {?} */undefined,\n  resolveDep: /** @type {?} */undefined,\n  createDebugContext: /** @type {?} */undefined,\n  handleEvent: /** @type {?} */undefined,\n  updateDirectives: /** @type {?} */undefined,\n  updateRenderer: /** @type {?} */undefined,\n  dirtyParentQueries: /** @type {?} */undefined\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} context\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} isFirstCheck\n * @return {?}\n */\nfunction expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n  /** @type {?} */\n  let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n  if (isFirstCheck) {\n    msg += ` It seems like the view has been created after its parent and its children have been dirty checked.` + ` Has it been created in a change detection hook ?`;\n  }\n  return viewDebugError(msg, context);\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction viewWrappedDebugError(err, context) {\n  if (!(err instanceof Error)) {\n    // errors that are not Error instances don't have a stack,\n    // so it is ok to wrap them into a new Error object...\n    err = new Error(err.toString());\n  }\n  _addDebugContext(err, context);\n  return err;\n}\n/**\n * @param {?} msg\n * @param {?} context\n * @return {?}\n */\nfunction viewDebugError(msg, context) {\n  /** @type {?} */\n  const err = new Error(msg);\n  _addDebugContext(err, context);\n  return err;\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction _addDebugContext(err, context) {\n  /** @type {?} */err[ERROR_DEBUG_CONTEXT] = context;\n  /** @type {?} */err[ERROR_LOGGER] = context.logError.bind(context);\n}\n/**\n * @param {?} err\n * @return {?}\n */\nfunction isViewDebugError(err) {\n  return !!getDebugContext(err);\n}\n/**\n * @param {?} action\n * @return {?}\n */\nfunction viewDestroyedError(action) {\n  return new Error(`ViewDestroyedError: Attempt to use a destroyed view: ${action}`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NOOP = () => {};\n/** @type {?} */\nconst _tokenKeyCache = new Map();\n/**\n * @param {?} token\n * @return {?}\n */\nfunction tokenKey(token) {\n  /** @type {?} */\n  let key = _tokenKeyCache.get(token);\n  if (!key) {\n    key = stringify(token) + '_' + _tokenKeyCache.size;\n    _tokenKeyCache.set(token, key);\n  }\n  return key;\n}\n/**\n * @param {?} view\n * @param {?} nodeIdx\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction unwrapValue$1(view, nodeIdx, bindingIdx, value) {\n  if (WrappedValue.isWrapped(value)) {\n    value = WrappedValue.unwrap(value);\n    /** @type {?} */\n    const globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n    /** @type {?} */\n    const oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n    view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n  }\n  return value;\n}\n/** @type {?} */\nconst UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\n/** @type {?} */\nconst EMPTY_RENDERER_TYPE_ID = '$$empty';\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} values\n * @return {?}\n */\nfunction createRendererType2(values) {\n  return {\n    id: UNDEFINED_RENDERER_TYPE_ID,\n    styles: values.styles,\n    encapsulation: values.encapsulation,\n    data: values.data\n  };\n}\n/** @type {?} */\nlet _renderCompCount$1 = 0;\n/**\n * @param {?=} type\n * @return {?}\n */\nfunction resolveRendererType2(type) {\n  if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n    // first time we see this RendererType2. Initialize it...\n    /** @type {?} */\n    const isFilled = type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None || type.styles.length || Object.keys(type.data).length;\n    if (isFilled) {\n      type.id = `c${_renderCompCount$1++}`;\n    } else {\n      type.id = EMPTY_RENDERER_TYPE_ID;\n    }\n  }\n  if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n    type = null;\n  }\n  return type || null;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkBinding(view, def, bindingIdx, value) {\n  /** @type {?} */\n  const oldValues = view.oldValues;\n  if (view.state & 2 /* FirstCheck */ || !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n    return true;\n  }\n  return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateBinding(view, def, bindingIdx, value) {\n  if (checkBinding(view, def, bindingIdx, value)) {\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return true;\n  }\n  return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkBindingNoChanges(view, def, bindingIdx, value) {\n  /** @type {?} */\n  const oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n  if (view.state & 1 /* BeforeFirstCheck */ || !devModeEqual(oldValue, value)) {\n    /** @type {?} */\n    const bindingName = def.bindings[bindingIdx].name;\n    throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), `${bindingName}: ${oldValue}`, `${bindingName}: ${value}`, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n  }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markParentViewsForCheck(view) {\n  /** @type {?} */\n  let currView = view;\n  while (currView) {\n    if (currView.def.flags & 2 /* OnPush */) {\n      currView.state |= 8 /* ChecksEnabled */;\n    }\n\n    currView = currView.viewContainerParent || currView.parent;\n  }\n}\n/**\n * @param {?} view\n * @param {?} endView\n * @return {?}\n */\nfunction markParentViewsForCheckProjectedViews(view, endView) {\n  /** @type {?} */\n  let currView = view;\n  while (currView && currView !== endView) {\n    currView.state |= 64 /* CheckProjectedViews */;\n    currView = currView.viewContainerParent || currView.parent;\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction dispatchEvent(view, nodeIndex, eventName, event) {\n  try {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[nodeIndex];\n    /** @type {?} */\n    const startView = nodeDef.flags & 33554432 /* ComponentView */ ? asElementData(view, nodeIndex).componentView : view;\n    markParentViewsForCheck(startView);\n    return Services.handleEvent(view, nodeIndex, eventName, event);\n  } catch (e) {\n    // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n    view.root.errorHandler.handleError(e);\n  }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction declaredViewContainer(view) {\n  if (view.parent) {\n    /** @type {?} */\n    const parentView = view.parent;\n    return asElementData(parentView, /** @type {?} */view.parentNodeDef.nodeIndex);\n  }\n  return null;\n}\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n * @param {?} view\n * @return {?}\n */\nfunction viewParentEl(view) {\n  /** @type {?} */\n  const parentView = view.parent;\n  if (parentView) {\n    return (/** @type {?} */view.parentNodeDef.parent\n    );\n  } else {\n    return null;\n  }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction renderNode(view, def) {\n  switch (def.flags & 201347067 /* Types */) {\n    case 1 /* TypeElement */:\n      return asElementData(view, def.nodeIndex).renderElement;\n    case 2 /* TypeText */:\n      return asTextData(view, def.nodeIndex).renderText;\n  }\n}\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\nfunction elementEventFullName(target, name) {\n  return target ? `${target}:${name}` : name;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction isComponentView(view) {\n  return !!view.parent && !!( /** @type {?} */view.parentNodeDef.flags & 32768 /* Component */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction isEmbeddedView(view) {\n  return !!view.parent && !( /** @type {?} */view.parentNodeDef.flags & 32768 /* Component */);\n}\n/**\n * @param {?} queryId\n * @return {?}\n */\nfunction filterQueryId(queryId) {\n  return 1 << queryId % 32;\n}\n/**\n * @param {?} matchedQueriesDsl\n * @return {?}\n */\nfunction splitMatchedQueriesDsl(matchedQueriesDsl) {\n  /** @type {?} */\n  const matchedQueries = {};\n  /** @type {?} */\n  let matchedQueryIds = 0;\n  /** @type {?} */\n  const references = {};\n  if (matchedQueriesDsl) {\n    matchedQueriesDsl.forEach(([queryId, valueType]) => {\n      if (typeof queryId === 'number') {\n        matchedQueries[queryId] = valueType;\n        matchedQueryIds |= filterQueryId(queryId);\n      } else {\n        references[queryId] = valueType;\n      }\n    });\n  }\n  return {\n    matchedQueries,\n    references,\n    matchedQueryIds\n  };\n}\n/**\n * @param {?} deps\n * @param {?=} sourceName\n * @return {?}\n */\nfunction splitDepsDsl(deps, sourceName) {\n  return deps.map(value => {\n    /** @type {?} */\n    let token;\n    /** @type {?} */\n    let flags;\n    if (Array.isArray(value)) {\n      [flags, token] = value;\n    } else {\n      flags = 0 /* None */;\n      token = value;\n    }\n    if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n      Object.defineProperty(token, SOURCE, {\n        value: sourceName,\n        configurable: true\n      });\n    }\n    return {\n      flags,\n      token,\n      tokenKey: tokenKey(token)\n    };\n  });\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction getParentRenderElement(view, renderHost, def) {\n  /** @type {?} */\n  let renderParent = def.renderParent;\n  if (renderParent) {\n    if ((renderParent.flags & 1 /* TypeElement */) === 0 || (renderParent.flags & 33554432 /* ComponentView */) === 0 || /** @type {?} */renderParent.element.componentRendererType && /** @type {?} */ /** @type {?} */renderParent.element.componentRendererType.encapsulation === ViewEncapsulation.Native) {\n      // only children of non components, or children of components with native encapsulation should\n      // be attached.\n      return asElementData(view, /** @type {?} */def.renderParent.nodeIndex).renderElement;\n    }\n  } else {\n    return renderHost;\n  }\n}\n/** @type {?} */\nconst DEFINITION_CACHE = new WeakMap();\n/**\n * @template D\n * @param {?} factory\n * @return {?}\n */\nfunction resolveDefinition(factory) {\n  /** @type {?} */\n  let value = /** @type {?} */ /** @type {?} */DEFINITION_CACHE.get(factory);\n  if (!value) {\n    value = factory(() => NOOP);\n    value.factory = factory;\n    DEFINITION_CACHE.set(factory, value);\n  }\n  return value;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction rootRenderNodes(view) {\n  /** @type {?} */\n  const renderNodes = [];\n  visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n  return renderNodes;\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n  // We need to re-compute the parent node in case the nodes have been moved around manually\n  if (action === 3 /* RemoveChild */) {\n    parentNode = view.renderer.parentNode(renderNode(view, /** @type {?} */view.def.lastRenderRootNode));\n  }\n  visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n  for (let i = startIndex; i <= endIndex; i++) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[i];\n    if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n      visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n    }\n    // jump to next sibling\n    i += nodeDef.childCount;\n  }\n}\n/**\n * @param {?} view\n * @param {?} ngContentIndex\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n  /** @type {?} */\n  let compView = view;\n  while (compView && !isComponentView(compView)) {\n    compView = compView.parent;\n  }\n  /** @type {?} */\n  const hostView = /** @type {?} */compView.parent;\n  /** @type {?} */\n  const hostElDef = viewParentEl( /** @type {?} */compView);\n  /** @type {?} */\n  const startIndex = /** @type {?} */hostElDef.nodeIndex + 1;\n  /** @type {?} */\n  const endIndex = /** @type {?} */hostElDef.nodeIndex + /** @type {?} */hostElDef.childCount;\n  for (let i = startIndex; i <= endIndex; i++) {\n    /** @type {?} */\n    const nodeDef = /** @type {?} */hostView.def.nodes[i];\n    if (nodeDef.ngContentIndex === ngContentIndex) {\n      visitRenderNode( /** @type {?} */hostView, nodeDef, action, parentNode, nextSibling, target);\n    }\n    // jump to next sibling\n    i += nodeDef.childCount;\n  }\n  if (! /** @type {?} */hostView.parent) {\n    // a root view\n    /** @type {?} */\n    const projectedNodes = view.root.projectableNodes[ngContentIndex];\n    if (projectedNodes) {\n      for (let i = 0; i < projectedNodes.length; i++) {\n        execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n      }\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n  if (nodeDef.flags & 8 /* TypeNgContent */) {\n    visitProjectedRenderNodes(view, /** @type {?} */nodeDef.ngContent.index, action, parentNode, nextSibling, target);\n  } else {\n    /** @type {?} */\n    const rn = renderNode(view, nodeDef);\n    if (action === 3 /* RemoveChild */ && nodeDef.flags & 33554432 /* ComponentView */ && nodeDef.bindingFlags & 48 /* CatSyntheticProperty */) {\n      // Note: we might need to do both actions.\n      if (nodeDef.bindingFlags & 16 /* SyntheticProperty */) {\n        execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n      }\n      if (nodeDef.bindingFlags & 32 /* SyntheticHostProperty */) {\n        /** @type {?} */\n        const compView = asElementData(view, nodeDef.nodeIndex).componentView;\n        execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n      }\n    } else {\n      execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n    }\n    if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n      /** @type {?} */\n      const embeddedViews = /** @type {?} */asElementData(view, nodeDef.nodeIndex).viewContainer._embeddedViews;\n      for (let k = 0; k < embeddedViews.length; k++) {\n        visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n      }\n    }\n    if (nodeDef.flags & 1 /* TypeElement */ && ! /** @type {?} */nodeDef.element.name) {\n      visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n  /** @type {?} */\n  const renderer = view.renderer;\n  switch (action) {\n    case 1 /* AppendChild */:\n      renderer.appendChild(parentNode, renderNode);\n      break;\n    case 2 /* InsertBefore */:\n      renderer.insertBefore(parentNode, renderNode, nextSibling);\n      break;\n    case 3 /* RemoveChild */:\n      renderer.removeChild(parentNode, renderNode);\n      break;\n    case 0 /* Collect */:\n      /** @type {?} */target.push(renderNode);\n      break;\n  }\n}\n/** @type {?} */\nconst NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n/**\n * @param {?} name\n * @return {?}\n */\nfunction splitNamespace(name) {\n  if (name[0] === ':') {\n    /** @type {?} */\n    const match = /** @type {?} */name.match(NS_PREFIX_RE);\n    return [match[1], match[2]];\n  }\n  return ['', name];\n}\n/**\n * @param {?} bindings\n * @return {?}\n */\nfunction calcBindingFlags(bindings) {\n  /** @type {?} */\n  let flags = 0;\n  for (let i = 0; i < bindings.length; i++) {\n    flags |= bindings[i].flags;\n  }\n  return flags;\n}\n/**\n * @param {?} valueCount\n * @param {?} constAndInterp\n * @return {?}\n */\nfunction interpolate(valueCount, constAndInterp) {\n  /** @type {?} */\n  let result = '';\n  for (let i = 0; i < valueCount * 2; i = i + 2) {\n    result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n  }\n  return result + constAndInterp[valueCount * 2];\n}\n/**\n * @param {?} valueCount\n * @param {?} c0\n * @param {?} a1\n * @param {?} c1\n * @param {?=} a2\n * @param {?=} c2\n * @param {?=} a3\n * @param {?=} c3\n * @param {?=} a4\n * @param {?=} c4\n * @param {?=} a5\n * @param {?=} c5\n * @param {?=} a6\n * @param {?=} c6\n * @param {?=} a7\n * @param {?=} c7\n * @param {?=} a8\n * @param {?=} c8\n * @param {?=} a9\n * @param {?=} c9\n * @return {?}\n */\nfunction inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n  switch (valueCount) {\n    case 1:\n      return c0 + _toStringWithNull(a1) + c1;\n    case 2:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n    case 3:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3;\n    case 4:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4;\n    case 5:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n    case 6:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n    case 7:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7;\n    case 8:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n    case 9:\n      return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) + c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n    default:\n      throw new Error(`Does not support more than 9 expressions`);\n  }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction _toStringWithNull(v) {\n  return v != null ? v.toString() : '';\n}\n/** @type {?} */\nconst EMPTY_ARRAY$4 = [];\n/** @type {?} */\nconst EMPTY_MAP = {};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?=} handleEvent\n * @param {?=} templateFactory\n * @return {?}\n */\nfunction anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n  flags |= 1 /* TypeElement */;\n  const {\n    matchedQueries,\n    references,\n    matchedQueryIds\n  } = splitMatchedQueriesDsl(matchedQueriesDsl);\n  /** @type {?} */\n  const template = templateFactory ? resolveDefinition(templateFactory) : null;\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    flags,\n    checkIndex: -1,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0,\n    matchedQueries,\n    matchedQueryIds,\n    references,\n    ngContentIndex,\n    childCount,\n    bindings: [],\n    bindingFlags: 0,\n    outputs: [],\n    element: {\n      ns: null,\n      name: null,\n      attrs: null,\n      template,\n      componentProvider: null,\n      componentView: null,\n      componentRendererType: null,\n      publicProviders: null,\n      allProviders: null,\n      handleEvent: handleEvent || NOOP\n    },\n    provider: null,\n    text: null,\n    query: null,\n    ngContent: null\n  };\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?} namespaceAndName\n * @param {?=} fixedAttrs\n * @param {?=} bindings\n * @param {?=} outputs\n * @param {?=} handleEvent\n * @param {?=} componentView\n * @param {?=} componentRendererType\n * @return {?}\n */\nfunction elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs = [], bindings, outputs, handleEvent, componentView, componentRendererType) {\n  if (!handleEvent) {\n    handleEvent = NOOP;\n  }\n  const {\n    matchedQueries,\n    references,\n    matchedQueryIds\n  } = splitMatchedQueriesDsl(matchedQueriesDsl);\n  /** @type {?} */\n  let ns = /** @type {?} */null;\n  /** @type {?} */\n  let name = /** @type {?} */null;\n  if (namespaceAndName) {\n    [ns, name] = splitNamespace(namespaceAndName);\n  }\n  bindings = bindings || [];\n  /** @type {?} */\n  const bindingDefs = new Array(bindings.length);\n  for (let i = 0; i < bindings.length; i++) {\n    const [bindingFlags, namespaceAndName, suffixOrSecurityContext] = bindings[i];\n    const [ns, name] = splitNamespace(namespaceAndName);\n    /** @type {?} */\n    let securityContext = /** @type {?} */undefined;\n    /** @type {?} */\n    let suffix = /** @type {?} */undefined;\n    switch (bindingFlags & 15 /* Types */) {\n      case 4 /* TypeElementStyle */:\n        suffix = /** @type {?} */suffixOrSecurityContext;\n        break;\n      case 1 /* TypeElementAttribute */:\n      case 8 /* TypeProperty */:\n        securityContext = /** @type {?} */suffixOrSecurityContext;\n        break;\n    }\n    bindingDefs[i] = {\n      flags: bindingFlags,\n      ns,\n      name,\n      nonMinifiedName: name,\n      securityContext,\n      suffix\n    };\n  }\n  outputs = outputs || [];\n  /** @type {?} */\n  const outputDefs = new Array(outputs.length);\n  for (let i = 0; i < outputs.length; i++) {\n    const [target, eventName] = outputs[i];\n    outputDefs[i] = {\n      type: 0 /* ElementOutput */,\n      target: /** @type {?} */target,\n      eventName,\n      propName: null\n    };\n  }\n  fixedAttrs = fixedAttrs || [];\n  /** @type {?} */\n  const attrs = /** @type {?} */fixedAttrs.map(([namespaceAndName, value]) => {\n    const [ns, name] = splitNamespace(namespaceAndName);\n    return [ns, name, value];\n  });\n  componentRendererType = resolveRendererType2(componentRendererType);\n  if (componentView) {\n    flags |= 33554432 /* ComponentView */;\n  }\n\n  flags |= 1 /* TypeElement */;\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    checkIndex,\n    flags,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0,\n    matchedQueries,\n    matchedQueryIds,\n    references,\n    ngContentIndex,\n    childCount,\n    bindings: bindingDefs,\n    bindingFlags: calcBindingFlags(bindingDefs),\n    outputs: outputDefs,\n    element: {\n      ns,\n      name,\n      attrs,\n      template: null,\n      // will bet set by the view definition\n      componentProvider: null,\n      componentView: componentView || null,\n      componentRendererType: componentRendererType,\n      publicProviders: null,\n      allProviders: null,\n      handleEvent: handleEvent || NOOP\n    },\n    provider: null,\n    text: null,\n    query: null,\n    ngContent: null\n  };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction createElement(view, renderHost, def) {\n  /** @type {?} */\n  const elDef = /** @type {?} */def.element;\n  /** @type {?} */\n  const rootSelectorOrNode = view.root.selectorOrNode;\n  /** @type {?} */\n  const renderer = view.renderer;\n  /** @type {?} */\n  let el;\n  if (view.parent || !rootSelectorOrNode) {\n    if (elDef.name) {\n      el = renderer.createElement(elDef.name, elDef.ns);\n    } else {\n      el = renderer.createComment('');\n    }\n    /** @type {?} */\n    const parentEl = getParentRenderElement(view, renderHost, def);\n    if (parentEl) {\n      renderer.appendChild(parentEl, el);\n    }\n  } else {\n    // when using native Shadow DOM, do not clear the root element contents to allow slot projection\n    /** @type {?} */\n    const preserveContent = !!elDef.componentRendererType && elDef.componentRendererType.encapsulation === ViewEncapsulation.ShadowDom;\n    el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);\n  }\n  if (elDef.attrs) {\n    for (let i = 0; i < elDef.attrs.length; i++) {\n      const [ns, name, value] = elDef.attrs[i];\n      renderer.setAttribute(el, name, value, ns);\n    }\n  }\n  return el;\n}\n/**\n * @param {?} view\n * @param {?} compView\n * @param {?} def\n * @param {?} el\n * @return {?}\n */\nfunction listenToElementOutputs(view, compView, def, el) {\n  for (let i = 0; i < def.outputs.length; i++) {\n    /** @type {?} */\n    const output = def.outputs[i];\n    /** @type {?} */\n    const handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n    /** @type {?} */\n    let listenTarget = output.target;\n    /** @type {?} */\n    let listenerView = view;\n    if (output.target === 'component') {\n      listenTarget = null;\n      listenerView = compView;\n    }\n    /** @type {?} */\n    const disposable = /** @type {?} */listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure);\n    /** @type {?} */view.disposables[def.outputIndex + i] = disposable;\n  }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction renderEventHandlerClosure(view, index, eventName) {\n  return event => dispatchEvent(view, index, eventName, event);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n  /** @type {?} */\n  const bindLen = def.bindings.length;\n  /** @type {?} */\n  let changed = false;\n  if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0)) changed = true;\n  if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1)) changed = true;\n  if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2)) changed = true;\n  if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3)) changed = true;\n  if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4)) changed = true;\n  if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5)) changed = true;\n  if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6)) changed = true;\n  if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7)) changed = true;\n  if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8)) changed = true;\n  if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9)) changed = true;\n  return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateElementDynamic(view, def, values) {\n  /** @type {?} */\n  let changed = false;\n  for (let i = 0; i < values.length; i++) {\n    if (checkAndUpdateElementValue(view, def, i, values[i])) changed = true;\n  }\n  return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\n  if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n    return false;\n  }\n  /** @type {?} */\n  const binding = def.bindings[bindingIdx];\n  /** @type {?} */\n  const elData = asElementData(view, def.nodeIndex);\n  /** @type {?} */\n  const renderNode$$1 = elData.renderElement;\n  /** @type {?} */\n  const name = /** @type {?} */binding.name;\n  switch (binding.flags & 15 /* Types */) {\n    case 1 /* TypeElementAttribute */:\n      setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);\n      break;\n    case 2 /* TypeElementClass */:\n      setElementClass(view, renderNode$$1, name, value);\n      break;\n    case 4 /* TypeElementStyle */:\n      setElementStyle(view, binding, renderNode$$1, name, value);\n      break;\n    case 8 /* TypeProperty */:\n      /** @type {?} */\n      const bindView = def.flags & 33554432 /* ComponentView */ && binding.flags & 32 /* SyntheticHostProperty */ ? elData.componentView : view;\n      setElementProperty(bindView, binding, renderNode$$1, name, value);\n      break;\n  }\n  return true;\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementAttribute(view, binding, renderNode$$1, ns, name, value) {\n  /** @type {?} */\n  const securityContext = binding.securityContext;\n  /** @type {?} */\n  let renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n  renderValue = renderValue != null ? renderValue.toString() : null;\n  /** @type {?} */\n  const renderer = view.renderer;\n  if (value != null) {\n    renderer.setAttribute(renderNode$$1, name, renderValue, ns);\n  } else {\n    renderer.removeAttribute(renderNode$$1, name, ns);\n  }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementClass(view, renderNode$$1, name, value) {\n  /** @type {?} */\n  const renderer = view.renderer;\n  if (value) {\n    renderer.addClass(renderNode$$1, name);\n  } else {\n    renderer.removeClass(renderNode$$1, name);\n  }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementStyle(view, binding, renderNode$$1, name, value) {\n  /** @type {?} */\n  let renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, /** @type {?} */value);\n  if (renderValue != null) {\n    renderValue = renderValue.toString();\n    /** @type {?} */\n    const unit = binding.suffix;\n    if (unit != null) {\n      renderValue = renderValue + unit;\n    }\n  } else {\n    renderValue = null;\n  }\n  /** @type {?} */\n  const renderer = view.renderer;\n  if (renderValue != null) {\n    renderer.setStyle(renderNode$$1, name, renderValue);\n  } else {\n    renderer.removeStyle(renderNode$$1, name);\n  }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementProperty(view, binding, renderNode$$1, name, value) {\n  /** @type {?} */\n  const securityContext = binding.securityContext;\n  /** @type {?} */\n  let renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n  view.renderer.setProperty(renderNode$$1, name, renderValue);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst UNDEFINED_VALUE = new Object();\n/** @type {?} */\nconst InjectorRefTokenKey = tokenKey(Injector);\n/** @type {?} */\nconst INJECTORRefTokenKey = tokenKey(INJECTOR$1);\n/** @type {?} */\nconst NgModuleRefTokenKey = tokenKey(NgModuleRef);\n/**\n * @param {?} flags\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nfunction moduleProvideDef(flags, token, value, deps) {\n  // Need to resolve forwardRefs as e.g. for `useValue` we\n  // lowered the expression and then stopped evaluating it,\n  // i.e. also didn't unwrap it.\n  value = resolveForwardRef(value);\n  /** @type {?} */\n  const depDefs = splitDepsDsl(deps, stringify(token));\n  return {\n    // will bet set by the module definition\n    index: -1,\n    deps: depDefs,\n    flags,\n    token,\n    value\n  };\n}\n/**\n * @param {?} providers\n * @return {?}\n */\nfunction moduleDef(providers) {\n  /** @type {?} */\n  const providersByKey = {};\n  /** @type {?} */\n  const modules = [];\n  /** @type {?} */\n  let isRoot = false;\n  for (let i = 0; i < providers.length; i++) {\n    /** @type {?} */\n    const provider = providers[i];\n    if (provider.token === APP_ROOT && provider.value === true) {\n      isRoot = true;\n    }\n    if (provider.flags & 1073741824 /* TypeNgModule */) {\n      modules.push(provider.token);\n    }\n    provider.index = i;\n    providersByKey[tokenKey(provider.token)] = provider;\n  }\n  return {\n    // Will be filled later...\n    factory: null,\n    providersByKey,\n    providers,\n    modules,\n    isRoot\n  };\n}\n/**\n * @param {?} data\n * @return {?}\n */\nfunction initNgModule(data) {\n  /** @type {?} */\n  const def = data._def;\n  /** @type {?} */\n  const providers = data._providers = new Array(def.providers.length);\n  for (let i = 0; i < def.providers.length; i++) {\n    /** @type {?} */\n    const provDef = def.providers[i];\n    if (!(provDef.flags & 4096 /* LazyProvider */)) {\n      // Make sure the provider has not been already initialized outside this loop.\n      if (providers[i] === undefined) {\n        providers[i] = _createProviderInstance(data, provDef);\n      }\n    }\n  }\n}\n/**\n * @param {?} data\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nfunction resolveNgModuleDep(data, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n  /** @type {?} */\n  const former = setCurrentInjector(data);\n  try {\n    if (depDef.flags & 8 /* Value */) {\n      return depDef.token;\n    }\n    if (depDef.flags & 2 /* Optional */) {\n      notFoundValue = null;\n    }\n    if (depDef.flags & 1 /* SkipSelf */) {\n      return data._parent.get(depDef.token, notFoundValue);\n    }\n    /** @type {?} */\n    const tokenKey$$1 = depDef.tokenKey;\n    switch (tokenKey$$1) {\n      case InjectorRefTokenKey:\n      case INJECTORRefTokenKey:\n      case NgModuleRefTokenKey:\n        return data;\n    }\n    /** @type {?} */\n    const providerDef = data._def.providersByKey[tokenKey$$1];\n    /** @type {?} */\n    let injectableDef;\n    if (providerDef) {\n      /** @type {?} */\n      let providerInstance = data._providers[providerDef.index];\n      if (providerInstance === undefined) {\n        providerInstance = data._providers[providerDef.index] = _createProviderInstance(data, providerDef);\n      }\n      return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n    } else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {\n      /** @type {?} */\n      const index = data._providers.length;\n      data._def.providersByKey[depDef.tokenKey] = {\n        flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n        value: injectableDef.factory,\n        deps: [],\n        index,\n        token: depDef.token\n      };\n      data._providers[index] = UNDEFINED_VALUE;\n      return data._providers[index] = _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]);\n    } else if (depDef.flags & 4 /* Self */) {\n      return notFoundValue;\n    }\n    return data._parent.get(depDef.token, notFoundValue);\n  } finally {\n    setCurrentInjector(former);\n  }\n}\n/**\n * @param {?} ngModule\n * @param {?} scope\n * @return {?}\n */\nfunction moduleTransitivelyPresent(ngModule, scope) {\n  return ngModule._def.modules.indexOf(scope) > -1;\n}\n/**\n * @param {?} ngModule\n * @param {?} def\n * @return {?}\n */\nfunction targetsModule(ngModule, def) {\n  return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) || def.providedIn === 'root' && ngModule._def.isRoot);\n}\n/**\n * @param {?} ngModule\n * @param {?} providerDef\n * @return {?}\n */\nfunction _createProviderInstance(ngModule, providerDef) {\n  /** @type {?} */\n  let injectable;\n  switch (providerDef.flags & 201347067 /* Types */) {\n    case 512 /* TypeClassProvider */:\n      injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n      break;\n    case 1024 /* TypeFactoryProvider */:\n      injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n      break;\n    case 2048 /* TypeUseExistingProvider */:\n      injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n      break;\n    case 256 /* TypeValueProvider */:\n      injectable = providerDef.value;\n      break;\n  }\n  // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\n  // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\n  // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\n  // set (ngOnDestroy was detected statically).\n  if (injectable !== UNDEFINED_VALUE && injectable != null && typeof injectable === 'object' && !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\n    providerDef.flags |= 131072 /* OnDestroy */;\n  }\n\n  return injectable === undefined ? UNDEFINED_VALUE : injectable;\n}\n/**\n * @param {?} ngModule\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction _createClass(ngModule, ctor, deps) {\n  /** @type {?} */\n  const len = deps.length;\n  switch (len) {\n    case 0:\n      return new ctor();\n    case 1:\n      return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n    case 2:\n      return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n    case 3:\n      return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n    default:\n      /** @type {?} */\n      const depValues = new Array(len);\n      for (let i = 0; i < len; i++) {\n        depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n      }\n      return new ctor(...depValues);\n  }\n}\n/**\n * @param {?} ngModule\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction _callFactory(ngModule, factory, deps) {\n  /** @type {?} */\n  const len = deps.length;\n  switch (len) {\n    case 0:\n      return factory();\n    case 1:\n      return factory(resolveNgModuleDep(ngModule, deps[0]));\n    case 2:\n      return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n    case 3:\n      return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n    default:\n      /** @type {?} */\n      const depValues = Array(len);\n      for (let i = 0; i < len; i++) {\n        depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n      }\n      return factory(...depValues);\n  }\n}\n/**\n * @param {?} ngModule\n * @param {?} lifecycles\n * @return {?}\n */\nfunction callNgModuleLifecycle(ngModule, lifecycles) {\n  /** @type {?} */\n  const def = ngModule._def;\n  /** @type {?} */\n  const destroyed = new Set();\n  for (let i = 0; i < def.providers.length; i++) {\n    /** @type {?} */\n    const provDef = def.providers[i];\n    if (provDef.flags & 131072 /* OnDestroy */) {\n      /** @type {?} */\n      const instance = ngModule._providers[i];\n      if (instance && instance !== UNDEFINED_VALUE) {\n        /** @type {?} */\n        const onDestroy = instance.ngOnDestroy;\n        if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\n          onDestroy.apply(instance);\n          destroyed.add(instance);\n        }\n      }\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} parentView\n * @param {?} elementData\n * @param {?} viewIndex\n * @param {?} view\n * @return {?}\n */\nfunction attachEmbeddedView(parentView, elementData, viewIndex, view) {\n  /** @type {?} */\n  let embeddedViews = /** @type {?} */elementData.viewContainer._embeddedViews;\n  if (viewIndex === null || viewIndex === undefined) {\n    viewIndex = embeddedViews.length;\n  }\n  view.viewContainerParent = parentView;\n  addToArray(embeddedViews, /** @type {?} */viewIndex, view);\n  attachProjectedView(elementData, view);\n  Services.dirtyParentQueries(view);\n  /** @type {?} */\n  const prevView = /** @type {?} */viewIndex > 0 ? embeddedViews[/** @type {?} */viewIndex - 1] : null;\n  renderAttachEmbeddedView(elementData, prevView, view);\n}\n/**\n * @param {?} vcElementData\n * @param {?} view\n * @return {?}\n */\nfunction attachProjectedView(vcElementData, view) {\n  /** @type {?} */\n  const dvcElementData = declaredViewContainer(view);\n  if (!dvcElementData || dvcElementData === vcElementData || view.state & 16 /* IsProjectedView */) {\n    return;\n  }\n  // Note: For performance reasons, we\n  // - add a view to template._projectedViews only 1x throughout its lifetime,\n  //   and remove it not until the view is destroyed.\n  //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n  //    nested projected views as well, even across component boundaries).\n  // - don't track the insertion order of views in the projected views array\n  //   (hard, as when the views of the same template are inserted different view containers)\n  view.state |= 16 /* IsProjectedView */;\n  /** @type {?} */\n  let projectedViews = dvcElementData.template._projectedViews;\n  if (!projectedViews) {\n    projectedViews = dvcElementData.template._projectedViews = [];\n  }\n  projectedViews.push(view);\n  // Note: we are changing the NodeDef here as we cannot calculate\n  // the fact whether a template is used for projection during compilation.\n  markNodeAsProjectedTemplate( /** @type {?} */view.parent.def, /** @type {?} */view.parentNodeDef);\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeDef\n * @return {?}\n */\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\n  if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n    return;\n  }\n  viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n  nodeDef.flags |= 4 /* ProjectedTemplate */;\n  /** @type {?} */\n  let parentNodeDef = nodeDef.parent;\n  while (parentNodeDef) {\n    parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n    parentNodeDef = parentNodeDef.parent;\n  }\n}\n/**\n * @param {?} elementData\n * @param {?=} viewIndex\n * @return {?}\n */\nfunction detachEmbeddedView(elementData, viewIndex) {\n  /** @type {?} */\n  const embeddedViews = /** @type {?} */elementData.viewContainer._embeddedViews;\n  if (viewIndex == null || viewIndex >= embeddedViews.length) {\n    viewIndex = embeddedViews.length - 1;\n  }\n  if (viewIndex < 0) {\n    return null;\n  }\n  /** @type {?} */\n  const view = embeddedViews[viewIndex];\n  view.viewContainerParent = null;\n  removeFromArray(embeddedViews, viewIndex);\n  // See attachProjectedView for why we don't update projectedViews here.\n  Services.dirtyParentQueries(view);\n  renderDetachView(view);\n  return view;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction detachProjectedView(view) {\n  if (!(view.state & 16 /* IsProjectedView */)) {\n    return;\n  }\n  /** @type {?} */\n  const dvcElementData = declaredViewContainer(view);\n  if (dvcElementData) {\n    /** @type {?} */\n    const projectedViews = dvcElementData.template._projectedViews;\n    if (projectedViews) {\n      removeFromArray(projectedViews, projectedViews.indexOf(view));\n      Services.dirtyParentQueries(view);\n    }\n  }\n}\n/**\n * @param {?} elementData\n * @param {?} oldViewIndex\n * @param {?} newViewIndex\n * @return {?}\n */\nfunction moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n  /** @type {?} */\n  const embeddedViews = /** @type {?} */elementData.viewContainer._embeddedViews;\n  /** @type {?} */\n  const view = embeddedViews[oldViewIndex];\n  removeFromArray(embeddedViews, oldViewIndex);\n  if (newViewIndex == null) {\n    newViewIndex = embeddedViews.length;\n  }\n  addToArray(embeddedViews, newViewIndex, view);\n  // Note: Don't need to change projectedViews as the order in there\n  // as always invalid...\n  Services.dirtyParentQueries(view);\n  renderDetachView(view);\n  /** @type {?} */\n  const prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n  renderAttachEmbeddedView(elementData, prevView, view);\n  return view;\n}\n/**\n * @param {?} elementData\n * @param {?} prevView\n * @param {?} view\n * @return {?}\n */\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\n  /** @type {?} */\n  const prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */prevView.def.lastRenderRootNode) : elementData.renderElement;\n  /** @type {?} */\n  const parentNode = view.renderer.parentNode(prevRenderNode);\n  /** @type {?} */\n  const nextSibling = view.renderer.nextSibling(prevRenderNode);\n  // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n  // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n  visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction renderDetachView(view) {\n  visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction addToArray(arr, index, value) {\n  // perf: array.push is faster than array.splice!\n  if (index >= arr.length) {\n    arr.push(value);\n  } else {\n    arr.splice(index, 0, value);\n  }\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction removeFromArray(arr, index) {\n  // perf: array.pop is faster than array.splice!\n  if (index >= arr.length - 1) {\n    arr.pop();\n  } else {\n    arr.splice(index, 1);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EMPTY_CONTEXT = new Object();\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} selector\n * @param {?} componentType\n * @param {?} viewDefFactory\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} ngContentSelectors\n * @return {?}\n */\nfunction createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n  return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n}\n/**\n * @param {?} componentFactory\n * @return {?}\n */\nfunction getComponentViewDefinitionFactory(componentFactory) {\n  return (/** @type {?} */componentFactory.viewDefFactory\n  );\n}\nclass ComponentFactory_ extends ComponentFactory {\n  /**\n   * @param {?} selector\n   * @param {?} componentType\n   * @param {?} viewDefFactory\n   * @param {?} _inputs\n   * @param {?} _outputs\n   * @param {?} ngContentSelectors\n   */\n  constructor(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n    // Attention: this ctor is called as top level function.\n    // Putting any logic in here will destroy closure tree shaking!\n    super();\n    this.selector = selector;\n    this.componentType = componentType;\n    this._inputs = _inputs;\n    this._outputs = _outputs;\n    this.ngContentSelectors = ngContentSelectors;\n    this.viewDefFactory = viewDefFactory;\n  }\n  /**\n   * @return {?}\n   */\n  get inputs() {\n    /** @type {?} */\n    const inputsArr = [];\n    /** @type {?} */\n    const inputs = /** @type {?} */this._inputs;\n    for (let propName in inputs) {\n      /** @type {?} */\n      const templateName = inputs[propName];\n      inputsArr.push({\n        propName,\n        templateName\n      });\n    }\n    return inputsArr;\n  }\n  /**\n   * @return {?}\n   */\n  get outputs() {\n    /** @type {?} */\n    const outputsArr = [];\n    for (let propName in this._outputs) {\n      /** @type {?} */\n      const templateName = this._outputs[propName];\n      outputsArr.push({\n        propName,\n        templateName\n      });\n    }\n    return outputsArr;\n  }\n  /**\n   * Creates a new component.\n   * @param {?} injector\n   * @param {?=} projectableNodes\n   * @param {?=} rootSelectorOrNode\n   * @param {?=} ngModule\n   * @return {?}\n   */\n  create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n    if (!ngModule) {\n      throw new Error('ngModule should be provided');\n    }\n    /** @type {?} */\n    const viewDef = resolveDefinition(this.viewDefFactory);\n    /** @type {?} */\n    const componentNodeIndex = /** @type {?} */ /** @type {?} */viewDef.nodes[0].element.componentProvider.nodeIndex;\n    /** @type {?} */\n    const view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n    /** @type {?} */\n    const component = asProviderData(view, componentNodeIndex).instance;\n    if (rootSelectorOrNode) {\n      view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n    }\n    return new ComponentRef_(view, new ViewRef_(view), component);\n  }\n}\nclass ComponentRef_ extends ComponentRef {\n  /**\n   * @param {?} _view\n   * @param {?} _viewRef\n   * @param {?} _component\n   */\n  constructor(_view, _viewRef, _component) {\n    super();\n    this._view = _view;\n    this._viewRef = _viewRef;\n    this._component = _component;\n    this._elDef = this._view.def.nodes[0];\n    this.hostView = _viewRef;\n    this.changeDetectorRef = _viewRef;\n    this.instance = _component;\n  }\n  /**\n   * @return {?}\n   */\n  get location() {\n    return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n  }\n  /**\n   * @return {?}\n   */\n  get injector() {\n    return new Injector_(this._view, this._elDef);\n  }\n  /**\n   * @return {?}\n   */\n  get componentType() {\n    return (/** @type {?} */this._component.constructor\n    );\n  }\n  /**\n   * @return {?}\n   */\n  destroy() {\n    this._viewRef.destroy();\n  }\n  /**\n   * @param {?} callback\n   * @return {?}\n   */\n  onDestroy(callback) {\n    this._viewRef.onDestroy(callback);\n  }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} elData\n * @return {?}\n */\nfunction createViewContainerData(view, elDef, elData) {\n  return new ViewContainerRef_(view, elDef, elData);\n}\nclass ViewContainerRef_ {\n  /**\n   * @param {?} _view\n   * @param {?} _elDef\n   * @param {?} _data\n   */\n  constructor(_view, _elDef, _data) {\n    this._view = _view;\n    this._elDef = _elDef;\n    this._data = _data;\n    /**\n     * \\@internal\n     */\n    this._embeddedViews = [];\n  }\n  /**\n   * @return {?}\n   */\n  get element() {\n    return new ElementRef(this._data.renderElement);\n  }\n  /**\n   * @return {?}\n   */\n  get injector() {\n    return new Injector_(this._view, this._elDef);\n  }\n  /**\n   * @deprecated No replacement\n   * @return {?}\n   */\n  get parentInjector() {\n    /** @type {?} */\n    let view = this._view;\n    /** @type {?} */\n    let elDef = this._elDef.parent;\n    while (!elDef && view) {\n      elDef = viewParentEl(view);\n      view = /** @type {?} */view.parent;\n    }\n    return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n  }\n  /**\n   * @return {?}\n   */\n  clear() {\n    /** @type {?} */\n    const len = this._embeddedViews.length;\n    for (let i = len - 1; i >= 0; i--) {\n      /** @type {?} */\n      const view = /** @type {?} */detachEmbeddedView(this._data, i);\n      Services.destroyView(view);\n    }\n  }\n  /**\n   * @param {?} index\n   * @return {?}\n   */\n  get(index) {\n    /** @type {?} */\n    const view = this._embeddedViews[index];\n    if (view) {\n      /** @type {?} */\n      const ref = new ViewRef_(view);\n      ref.attachToViewContainerRef(this);\n      return ref;\n    }\n    return null;\n  }\n  /**\n   * @return {?}\n   */\n  get length() {\n    return this._embeddedViews.length;\n  }\n  /**\n   * @template C\n   * @param {?} templateRef\n   * @param {?=} context\n   * @param {?=} index\n   * @return {?}\n   */\n  createEmbeddedView(templateRef, context, index) {\n    /** @type {?} */\n    const viewRef = templateRef.createEmbeddedView(context || /** @type {?} */{});\n    this.insert(viewRef, index);\n    return viewRef;\n  }\n  /**\n   * @template C\n   * @param {?} componentFactory\n   * @param {?=} index\n   * @param {?=} injector\n   * @param {?=} projectableNodes\n   * @param {?=} ngModuleRef\n   * @return {?}\n   */\n  createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {\n    /** @type {?} */\n    const contextInjector = injector || this.parentInjector;\n    if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n      ngModuleRef = contextInjector.get(NgModuleRef);\n    }\n    /** @type {?} */\n    const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n    this.insert(componentRef.hostView, index);\n    return componentRef;\n  }\n  /**\n   * @param {?} viewRef\n   * @param {?=} index\n   * @return {?}\n   */\n  insert(viewRef, index) {\n    if (viewRef.destroyed) {\n      throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n    }\n    /** @type {?} */\n    const viewRef_ = /** @type {?} */viewRef;\n    /** @type {?} */\n    const viewData = viewRef_._view;\n    attachEmbeddedView(this._view, this._data, index, viewData);\n    viewRef_.attachToViewContainerRef(this);\n    return viewRef;\n  }\n  /**\n   * @param {?} viewRef\n   * @param {?} currentIndex\n   * @return {?}\n   */\n  move(viewRef, currentIndex) {\n    if (viewRef.destroyed) {\n      throw new Error('Cannot move a destroyed View in a ViewContainer!');\n    }\n    /** @type {?} */\n    const previousIndex = this._embeddedViews.indexOf(viewRef._view);\n    moveEmbeddedView(this._data, previousIndex, currentIndex);\n    return viewRef;\n  }\n  /**\n   * @param {?} viewRef\n   * @return {?}\n   */\n  indexOf(viewRef) {\n    return this._embeddedViews.indexOf( /** @type {?} */viewRef._view);\n  }\n  /**\n   * @param {?=} index\n   * @return {?}\n   */\n  remove(index) {\n    /** @type {?} */\n    const viewData = detachEmbeddedView(this._data, index);\n    if (viewData) {\n      Services.destroyView(viewData);\n    }\n  }\n  /**\n   * @param {?=} index\n   * @return {?}\n   */\n  detach(index) {\n    /** @type {?} */\n    const view = detachEmbeddedView(this._data, index);\n    return view ? new ViewRef_(view) : null;\n  }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createChangeDetectorRef(view) {\n  return new ViewRef_(view);\n}\nclass ViewRef_ {\n  /**\n   * @param {?} _view\n   */\n  constructor(_view) {\n    this._view = _view;\n    this._viewContainerRef = null;\n    this._appRef = null;\n  }\n  /**\n   * @return {?}\n   */\n  get rootNodes() {\n    return rootRenderNodes(this._view);\n  }\n  /**\n   * @return {?}\n   */\n  get context() {\n    return this._view.context;\n  }\n  /**\n   * @return {?}\n   */\n  get destroyed() {\n    return (this._view.state & 128 /* Destroyed */) !== 0;\n  }\n  /**\n   * @return {?}\n   */\n  markForCheck() {\n    markParentViewsForCheck(this._view);\n  }\n  /**\n   * @return {?}\n   */\n  detach() {\n    this._view.state &= ~4 /* Attached */;\n  }\n  /**\n   * @return {?}\n   */\n  detectChanges() {\n    /** @type {?} */\n    const fs = this._view.root.rendererFactory;\n    if (fs.begin) {\n      fs.begin();\n    }\n    try {\n      Services.checkAndUpdateView(this._view);\n    } finally {\n      if (fs.end) {\n        fs.end();\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  checkNoChanges() {\n    Services.checkNoChangesView(this._view);\n  }\n  /**\n   * @return {?}\n   */\n  reattach() {\n    this._view.state |= 4 /* Attached */;\n  }\n  /**\n   * @param {?} callback\n   * @return {?}\n   */\n  onDestroy(callback) {\n    if (!this._view.disposables) {\n      this._view.disposables = [];\n    }\n    this._view.disposables.push( /** @type {?} */callback);\n  }\n  /**\n   * @return {?}\n   */\n  destroy() {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._viewContainerRef) {\n      this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n    }\n    Services.destroyView(this._view);\n  }\n  /**\n   * @return {?}\n   */\n  detachFromAppRef() {\n    this._appRef = null;\n    renderDetachView(this._view);\n    Services.dirtyParentQueries(this._view);\n  }\n  /**\n   * @param {?} appRef\n   * @return {?}\n   */\n  attachToAppRef(appRef) {\n    if (this._viewContainerRef) {\n      throw new Error('This view is already attached to a ViewContainer!');\n    }\n    this._appRef = appRef;\n  }\n  /**\n   * @param {?} vcRef\n   * @return {?}\n   */\n  attachToViewContainerRef(vcRef) {\n    if (this._appRef) {\n      throw new Error('This view is already attached directly to the ApplicationRef!');\n    }\n    this._viewContainerRef = vcRef;\n  }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createTemplateData(view, def) {\n  return new TemplateRef_(view, def);\n}\nclass TemplateRef_ extends TemplateRef {\n  /**\n   * @param {?} _parentView\n   * @param {?} _def\n   */\n  constructor(_parentView, _def) {\n    super();\n    this._parentView = _parentView;\n    this._def = _def;\n  }\n  /**\n   * @param {?} context\n   * @return {?}\n   */\n  createEmbeddedView(context) {\n    return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, /** @type {?} */ /** @type {?} */this._def.element.template, context));\n  }\n  /**\n   * @return {?}\n   */\n  get elementRef() {\n    return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n  }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @return {?}\n */\nfunction createInjector$1(view, elDef) {\n  return new Injector_(view, elDef);\n}\nclass Injector_ {\n  /**\n   * @param {?} view\n   * @param {?} elDef\n   */\n  constructor(view, elDef) {\n    this.view = view;\n    this.elDef = elDef;\n  }\n  /**\n   * @param {?} token\n   * @param {?=} notFoundValue\n   * @return {?}\n   */\n  get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n    /** @type {?} */\n    const allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n    return Services.resolveDep(this.view, this.elDef, allowPrivateServices, {\n      flags: 0 /* None */,\n      token,\n      tokenKey: tokenKey(token)\n    }, notFoundValue);\n  }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction nodeValue(view, index) {\n  /** @type {?} */\n  const def = view.def.nodes[index];\n  if (def.flags & 1 /* TypeElement */) {\n    /** @type {?} */\n    const elData = asElementData(view, def.nodeIndex);\n    return (/** @type {?} */def.element.template ? elData.template : elData.renderElement\n    );\n  } else if (def.flags & 2 /* TypeText */) {\n    return asTextData(view, def.nodeIndex).renderText;\n  } else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n    return asProviderData(view, def.nodeIndex).instance;\n  }\n  throw new Error(`Illegal state: read nodeValue for node index ${index}`);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createRendererV1(view) {\n  return new RendererAdapter(view.renderer);\n}\nclass RendererAdapter {\n  /**\n   * @param {?} delegate\n   */\n  constructor(delegate) {\n    this.delegate = delegate;\n  }\n  /**\n   * @param {?} selectorOrNode\n   * @return {?}\n   */\n  selectRootElement(selectorOrNode) {\n    return this.delegate.selectRootElement(selectorOrNode);\n  }\n  /**\n   * @param {?} parent\n   * @param {?} namespaceAndName\n   * @return {?}\n   */\n  createElement(parent, namespaceAndName) {\n    const [ns, name] = splitNamespace(namespaceAndName);\n    /** @type {?} */\n    const el = this.delegate.createElement(name, ns);\n    if (parent) {\n      this.delegate.appendChild(parent, el);\n    }\n    return el;\n  }\n  /**\n   * @param {?} hostElement\n   * @return {?}\n   */\n  createViewRoot(hostElement) {\n    return hostElement;\n  }\n  /**\n   * @param {?} parentElement\n   * @return {?}\n   */\n  createTemplateAnchor(parentElement) {\n    /** @type {?} */\n    const comment = this.delegate.createComment('');\n    if (parentElement) {\n      this.delegate.appendChild(parentElement, comment);\n    }\n    return comment;\n  }\n  /**\n   * @param {?} parentElement\n   * @param {?} value\n   * @return {?}\n   */\n  createText(parentElement, value) {\n    /** @type {?} */\n    const node = this.delegate.createText(value);\n    if (parentElement) {\n      this.delegate.appendChild(parentElement, node);\n    }\n    return node;\n  }\n  /**\n   * @param {?} parentElement\n   * @param {?} nodes\n   * @return {?}\n   */\n  projectNodes(parentElement, nodes) {\n    for (let i = 0; i < nodes.length; i++) {\n      this.delegate.appendChild(parentElement, nodes[i]);\n    }\n  }\n  /**\n   * @param {?} node\n   * @param {?} viewRootNodes\n   * @return {?}\n   */\n  attachViewAfter(node, viewRootNodes) {\n    /** @type {?} */\n    const parentElement = this.delegate.parentNode(node);\n    /** @type {?} */\n    const nextSibling = this.delegate.nextSibling(node);\n    for (let i = 0; i < viewRootNodes.length; i++) {\n      this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n    }\n  }\n  /**\n   * @param {?} viewRootNodes\n   * @return {?}\n   */\n  detachView(viewRootNodes) {\n    for (let i = 0; i < viewRootNodes.length; i++) {\n      /** @type {?} */\n      const node = viewRootNodes[i];\n      /** @type {?} */\n      const parentElement = this.delegate.parentNode(node);\n      this.delegate.removeChild(parentElement, node);\n    }\n  }\n  /**\n   * @param {?} hostElement\n   * @param {?} viewAllNodes\n   * @return {?}\n   */\n  destroyView(hostElement, viewAllNodes) {\n    for (let i = 0; i < viewAllNodes.length; i++) {\n      /** @type {?} */this.delegate.destroyNode(viewAllNodes[i]);\n    }\n  }\n  /**\n   * @param {?} renderElement\n   * @param {?} name\n   * @param {?} callback\n   * @return {?}\n   */\n  listen(renderElement, name, callback) {\n    return this.delegate.listen(renderElement, name, /** @type {?} */callback);\n  }\n  /**\n   * @param {?} target\n   * @param {?} name\n   * @param {?} callback\n   * @return {?}\n   */\n  listenGlobal(target, name, callback) {\n    return this.delegate.listen(target, name, /** @type {?} */callback);\n  }\n  /**\n   * @param {?} renderElement\n   * @param {?} propertyName\n   * @param {?} propertyValue\n   * @return {?}\n   */\n  setElementProperty(renderElement, propertyName, propertyValue) {\n    this.delegate.setProperty(renderElement, propertyName, propertyValue);\n  }\n  /**\n   * @param {?} renderElement\n   * @param {?} namespaceAndName\n   * @param {?=} attributeValue\n   * @return {?}\n   */\n  setElementAttribute(renderElement, namespaceAndName, attributeValue) {\n    const [ns, name] = splitNamespace(namespaceAndName);\n    if (attributeValue != null) {\n      this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n    } else {\n      this.delegate.removeAttribute(renderElement, name, ns);\n    }\n  }\n  /**\n   * @param {?} renderElement\n   * @param {?} propertyName\n   * @param {?} propertyValue\n   * @return {?}\n   */\n  setBindingDebugInfo(renderElement, propertyName, propertyValue) {}\n  /**\n   * @param {?} renderElement\n   * @param {?} className\n   * @param {?} isAdd\n   * @return {?}\n   */\n  setElementClass(renderElement, className, isAdd) {\n    if (isAdd) {\n      this.delegate.addClass(renderElement, className);\n    } else {\n      this.delegate.removeClass(renderElement, className);\n    }\n  }\n  /**\n   * @param {?} renderElement\n   * @param {?} styleName\n   * @param {?=} styleValue\n   * @return {?}\n   */\n  setElementStyle(renderElement, styleName, styleValue) {\n    if (styleValue != null) {\n      this.delegate.setStyle(renderElement, styleName, styleValue);\n    } else {\n      this.delegate.removeStyle(renderElement, styleName);\n    }\n  }\n  /**\n   * @param {?} renderElement\n   * @param {?} methodName\n   * @param {?} args\n   * @return {?}\n   */\n  invokeElementMethod(renderElement, methodName, args) {\n    /** @type {?} */renderElement[methodName].apply(renderElement, args);\n  }\n  /**\n   * @param {?} renderNode\n   * @param {?} text\n   * @return {?}\n   */\n  setText(renderNode$$1, text) {\n    this.delegate.setValue(renderNode$$1, text);\n  }\n  /**\n   * @return {?}\n   */\n  animate() {\n    throw new Error('Renderer.animate is no longer supported!');\n  }\n}\n/**\n * @param {?} moduleType\n * @param {?} parent\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n  return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n}\nclass NgModuleRef_ {\n  /**\n   * @param {?} _moduleType\n   * @param {?} _parent\n   * @param {?} _bootstrapComponents\n   * @param {?} _def\n   */\n  constructor(_moduleType, _parent, _bootstrapComponents, _def) {\n    this._moduleType = _moduleType;\n    this._parent = _parent;\n    this._bootstrapComponents = _bootstrapComponents;\n    this._def = _def;\n    this._destroyListeners = [];\n    this._destroyed = false;\n    this.injector = this;\n    initNgModule(this);\n  }\n  /**\n   * @param {?} token\n   * @param {?=} notFoundValue\n   * @param {?=} injectFlags\n   * @return {?}\n   */\n  get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, injectFlags = InjectFlags.Default) {\n    /** @type {?} */\n    let flags = 0 /* None */;\n    if (injectFlags & InjectFlags.SkipSelf) {\n      flags |= 1 /* SkipSelf */;\n    } else if (injectFlags & InjectFlags.Self) {\n      flags |= 4 /* Self */;\n    }\n\n    return resolveNgModuleDep(this, {\n      token: token,\n      tokenKey: tokenKey(token),\n      flags: flags\n    }, notFoundValue);\n  }\n  /**\n   * @return {?}\n   */\n  get instance() {\n    return this.get(this._moduleType);\n  }\n  /**\n   * @return {?}\n   */\n  get componentFactoryResolver() {\n    return this.get(ComponentFactoryResolver);\n  }\n  /**\n   * @return {?}\n   */\n  destroy() {\n    if (this._destroyed) {\n      throw new Error(`The ng module ${stringify(this.instance.constructor)} has already been destroyed.`);\n    }\n    this._destroyed = true;\n    callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n    this._destroyListeners.forEach(listener => listener());\n  }\n  /**\n   * @param {?} callback\n   * @return {?}\n   */\n  onDestroy(callback) {\n    this._destroyListeners.push(callback);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RendererV1TokenKey = tokenKey(Renderer);\n/** @type {?} */\nconst Renderer2TokenKey = tokenKey(Renderer2);\n/** @type {?} */\nconst ElementRefTokenKey = tokenKey(ElementRef);\n/** @type {?} */\nconst ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n/** @type {?} */\nconst TemplateRefTokenKey = tokenKey(TemplateRef);\n/** @type {?} */\nconst ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\n/** @type {?} */\nconst InjectorRefTokenKey$1 = tokenKey(Injector);\n/** @type {?} */\nconst INJECTORRefTokenKey$1 = tokenKey(INJECTOR$1);\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} childCount\n * @param {?} ctor\n * @param {?} deps\n * @param {?=} props\n * @param {?=} outputs\n * @return {?}\n */\nfunction directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n  /** @type {?} */\n  const bindings = [];\n  if (props) {\n    for (let prop in props) {\n      const [bindingIndex, nonMinifiedName] = props[prop];\n      bindings[bindingIndex] = {\n        flags: 8 /* TypeProperty */,\n        name: prop,\n        nonMinifiedName,\n        ns: null,\n        securityContext: null,\n        suffix: null\n      };\n    }\n  }\n  /** @type {?} */\n  const outputDefs = [];\n  if (outputs) {\n    for (let propName in outputs) {\n      outputDefs.push({\n        type: 1 /* DirectiveOutput */,\n        propName,\n        target: null,\n        eventName: outputs[propName]\n      });\n    }\n  }\n  flags |= 16384 /* TypeDirective */;\n  return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\n/**\n * @param {?} flags\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction pipeDef(flags, ctor, deps) {\n  flags |= 16 /* TypePipe */;\n  return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\n/**\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nfunction providerDef(flags, matchedQueries, token, value, deps) {\n  return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} childCount\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @param {?=} bindings\n * @param {?=} outputs\n * @return {?}\n */\nfunction _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n  const {\n    matchedQueries,\n    references,\n    matchedQueryIds\n  } = splitMatchedQueriesDsl(matchedQueriesDsl);\n  if (!outputs) {\n    outputs = [];\n  }\n  if (!bindings) {\n    bindings = [];\n  }\n  // Need to resolve forwardRefs as e.g. for `useValue` we\n  // lowered the expression and then stopped evaluating it,\n  // i.e. also didn't unwrap it.\n  value = resolveForwardRef(value);\n  /** @type {?} */\n  const depDefs = splitDepsDsl(deps, stringify(token));\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    checkIndex,\n    flags,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0,\n    matchedQueries,\n    matchedQueryIds,\n    references,\n    ngContentIndex: -1,\n    childCount,\n    bindings,\n    bindingFlags: calcBindingFlags(bindings),\n    outputs,\n    element: null,\n    provider: {\n      token,\n      value,\n      deps: depDefs\n    },\n    text: null,\n    query: null,\n    ngContent: null\n  };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createProviderInstance(view, def) {\n  return _createProviderInstance$1(view, def);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createPipeInstance(view, def) {\n  // deps are looked up from component.\n  /** @type {?} */\n  let compView = view;\n  while (compView.parent && !isComponentView(compView)) {\n    compView = compView.parent;\n  }\n  // pipes can see the private services of the component\n  /** @type {?} */\n  const allowPrivateServices = true;\n  // pipes are always eager and classes!\n  return createClass( /** @type {?} */compView.parent, /** @type {?} */viewParentEl(compView), allowPrivateServices, /** @type {?} */def.provider.value, /** @type {?} */def.provider.deps);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createDirectiveInstance(view, def) {\n  // components can see other private services, other directives can't.\n  /** @type {?} */\n  const allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n  // directives are always eager and classes!\n  /** @type {?} */\n  const instance = createClass(view, /** @type {?} */def.parent, allowPrivateServices, /** @type {?} */def.provider.value, /** @type {?} */def.provider.deps);\n  if (def.outputs.length) {\n    for (let i = 0; i < def.outputs.length; i++) {\n      /** @type {?} */\n      const output = def.outputs[i];\n      /** @type {?} */\n      const outputObservable = instance[/** @type {?} */output.propName];\n      if (isObservable(outputObservable)) {\n        /** @type {?} */\n        const subscription = outputObservable.subscribe(eventHandlerClosure(view, /** @type {?} */def.parent.nodeIndex, output.eventName));\n        /** @type {?} */view.disposables[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n      } else {\n        throw new Error(`@Output ${output.propName} not initialized in '${instance.constructor.name}'.`);\n      }\n    }\n  }\n  return instance;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction eventHandlerClosure(view, index, eventName) {\n  return event => dispatchEvent(view, index, eventName, event);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n  /** @type {?} */\n  const providerData = asProviderData(view, def.nodeIndex);\n  /** @type {?} */\n  const directive = providerData.instance;\n  /** @type {?} */\n  let changed = false;\n  /** @type {?} */\n  let changes = /** @type {?} */undefined;\n  /** @type {?} */\n  const bindLen = def.bindings.length;\n  if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 0, v0, changes);\n  }\n  if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 1, v1, changes);\n  }\n  if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 2, v2, changes);\n  }\n  if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 3, v3, changes);\n  }\n  if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 4, v4, changes);\n  }\n  if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 5, v5, changes);\n  }\n  if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 6, v6, changes);\n  }\n  if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 7, v7, changes);\n  }\n  if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 8, v8, changes);\n  }\n  if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n    changed = true;\n    changes = updateProp(view, providerData, def, 9, v9, changes);\n  }\n  if (changes) {\n    directive.ngOnChanges(changes);\n  }\n  if (def.flags & 65536 /* OnInit */ && shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n    directive.ngOnInit();\n  }\n  if (def.flags & 262144 /* DoCheck */) {\n    directive.ngDoCheck();\n  }\n  return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateDirectiveDynamic(view, def, values) {\n  /** @type {?} */\n  const providerData = asProviderData(view, def.nodeIndex);\n  /** @type {?} */\n  const directive = providerData.instance;\n  /** @type {?} */\n  let changed = false;\n  /** @type {?} */\n  let changes = /** @type {?} */undefined;\n  for (let i = 0; i < values.length; i++) {\n    if (checkBinding(view, def, i, values[i])) {\n      changed = true;\n      changes = updateProp(view, providerData, def, i, values[i], changes);\n    }\n  }\n  if (changes) {\n    directive.ngOnChanges(changes);\n  }\n  if (def.flags & 65536 /* OnInit */ && shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n    directive.ngOnInit();\n  }\n  if (def.flags & 262144 /* DoCheck */) {\n    directive.ngDoCheck();\n  }\n  return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction _createProviderInstance$1(view, def) {\n  // private services can see other private services\n  /** @type {?} */\n  const allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n  /** @type {?} */\n  const providerDef = def.provider;\n  switch (def.flags & 201347067 /* Types */) {\n    case 512 /* TypeClassProvider */:\n      return createClass(view, /** @type {?} */def.parent, allowPrivateServices, /** @type {?} */providerDef.value, /** @type {?} */providerDef.deps);\n    case 1024 /* TypeFactoryProvider */:\n      return callFactory(view, /** @type {?} */def.parent, allowPrivateServices, /** @type {?} */providerDef.value, /** @type {?} */providerDef.deps);\n    case 2048 /* TypeUseExistingProvider */:\n      return resolveDep(view, /** @type {?} */def.parent, allowPrivateServices, /** @type {?} */providerDef.deps[0]);\n    case 256 /* TypeValueProvider */:\n      return (/** @type {?} */providerDef.value\n      );\n  }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n  /** @type {?} */\n  const len = deps.length;\n  switch (len) {\n    case 0:\n      return new ctor();\n    case 1:\n      return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n    case 2:\n      return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n    case 3:\n      return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n    default:\n      /** @type {?} */\n      const depValues = new Array(len);\n      for (let i = 0; i < len; i++) {\n        depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n      }\n      return new ctor(...depValues);\n  }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n  /** @type {?} */\n  const len = deps.length;\n  switch (len) {\n    case 0:\n      return factory();\n    case 1:\n      return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n    case 2:\n      return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n    case 3:\n      return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n    default:\n      /** @type {?} */\n      const depValues = Array(len);\n      for (let i = 0; i < len; i++) {\n        depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n      }\n      return factory(...depValues);\n  }\n}\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\n/** @type {?} */\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1 = {};\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nfunction resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n  if (depDef.flags & 8 /* Value */) {\n    return depDef.token;\n  }\n  /** @type {?} */\n  const startView = view;\n  if (depDef.flags & 2 /* Optional */) {\n    notFoundValue = null;\n  }\n  /** @type {?} */\n  const tokenKey$$1 = depDef.tokenKey;\n  if (tokenKey$$1 === ChangeDetectorRefTokenKey) {\n    // directives on the same element as a component should be able to control the change detector\n    // of that component as well.\n    allowPrivateServices = !!(elDef && /** @type {?} */elDef.element.componentView);\n  }\n  if (elDef && depDef.flags & 1 /* SkipSelf */) {\n    allowPrivateServices = false;\n    elDef = /** @type {?} */elDef.parent;\n  }\n  /** @type {?} */\n  let searchView = view;\n  while (searchView) {\n    if (elDef) {\n      switch (tokenKey$$1) {\n        case RendererV1TokenKey:\n          {\n            /** @type {?} */\n            const compView = findCompView(searchView, elDef, allowPrivateServices);\n            return createRendererV1(compView);\n          }\n        case Renderer2TokenKey:\n          {\n            /** @type {?} */\n            const compView = findCompView(searchView, elDef, allowPrivateServices);\n            return compView.renderer;\n          }\n        case ElementRefTokenKey:\n          return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n        case ViewContainerRefTokenKey:\n          return asElementData(searchView, elDef.nodeIndex).viewContainer;\n        case TemplateRefTokenKey:\n          {\n            if ( /** @type {?} */elDef.element.template) {\n              return asElementData(searchView, elDef.nodeIndex).template;\n            }\n            break;\n          }\n        case ChangeDetectorRefTokenKey:\n          {\n            /** @type {?} */\n            let cdView = findCompView(searchView, elDef, allowPrivateServices);\n            return createChangeDetectorRef(cdView);\n          }\n        case InjectorRefTokenKey$1:\n        case INJECTORRefTokenKey$1:\n          return createInjector$1(searchView, elDef);\n        default:\n          /** @type {?} */\n          const providerDef = ( /** @type {?} */allowPrivateServices ? /** @type {?} */elDef.element.allProviders : /** @type {?} */elDef.element.publicProviders)[tokenKey$$1];\n          if (providerDef) {\n            /** @type {?} */\n            let providerData = asProviderData(searchView, providerDef.nodeIndex);\n            if (!providerData) {\n              providerData = {\n                instance: _createProviderInstance$1(searchView, providerDef)\n              };\n              searchView.nodes[providerDef.nodeIndex] = /** @type {?} */providerData;\n            }\n            return providerData.instance;\n          }\n      }\n    }\n    allowPrivateServices = isComponentView(searchView);\n    elDef = /** @type {?} */viewParentEl(searchView);\n    searchView = /** @type {?} */searchView.parent;\n    if (depDef.flags & 4 /* Self */) {\n      searchView = null;\n    }\n  }\n  /** @type {?} */\n  const value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1);\n  if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1 || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1) {\n    // Return the value from the root element injector when\n    // - it provides it\n    //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n    // - the module injector should not be checked\n    //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n    return value;\n  }\n  return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @return {?}\n */\nfunction findCompView(view, elDef, allowPrivateServices) {\n  /** @type {?} */\n  let compView;\n  if (allowPrivateServices) {\n    compView = asElementData(view, elDef.nodeIndex).componentView;\n  } else {\n    compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n      compView = compView.parent;\n    }\n  }\n  return compView;\n}\n/**\n * @param {?} view\n * @param {?} providerData\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @param {?} changes\n * @return {?}\n */\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n  if (def.flags & 32768 /* Component */) {\n    /** @type {?} */\n    const compView = asElementData(view, /** @type {?} */def.parent.nodeIndex).componentView;\n    if (compView.def.flags & 2 /* OnPush */) {\n      compView.state |= 8 /* ChecksEnabled */;\n    }\n  }\n  /** @type {?} */\n  const binding = def.bindings[bindingIdx];\n  /** @type {?} */\n  const propName = /** @type {?} */binding.name;\n  // Note: This is still safe with Closure Compiler as\n  // the user passed in the property name as an object has to `providerDef`,\n  // so Closure Compiler will have renamed the property correctly already.\n  providerData.instance[propName] = value;\n  if (def.flags & 524288 /* OnChanges */) {\n    changes = changes || {};\n    /** @type {?} */\n    const oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n    /** @type {?} */\n    const binding = def.bindings[bindingIdx];\n    changes[/** @type {?} */binding.nonMinifiedName] = new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n  }\n  view.oldValues[def.bindingIndex + bindingIdx] = value;\n  return changes;\n}\n// This function calls the ngAfterContentCheck, ngAfterContentInit,\n// ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node\n// flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are\n// called during a pre-order traversal of the view tree (that is calling the\n// parent hooks before the child hooks) these events are sent in using a\n// post-order traversal of the tree (children before parents). This changes the\n// meaning of initIndex in the view state. For ngOnInit, initIndex tracks the\n// expected nodeIndex which a ngOnInit should be called. When sending\n// ngAfterContentInit and ngAfterViewInit it is the expected count of\n// ngAfterContentInit or ngAfterViewInit methods that have been called. This\n// ensure that despite being called recursively or after picking up after an\n// exception, the ngAfterContentInit or ngAfterViewInit will be called on the\n// correct nodes. Consider for example, the following (where E is an element\n// and D is a directive)\n//  Tree:       pre-order index  post-order index\n//    E1        0                6\n//      E2      1                1\n//       D3     2                0\n//      E4      3                5\n//       E5     4                4\n//        E6    5                2\n//        E7    6                3\n// As can be seen, the post-order index has an unclear relationship to the\n// pre-order index (postOrderIndex === preOrderIndex - parentCount +\n// childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit\n// are stable (will be the same for the same view regardless of exceptions or\n// recursion) we just need to count them which will roughly correspond to the\n// post-order index (it skips elements and directives that do not have\n// lifecycle hooks).\n//\n// For example, if an exception is raised in the E6.onAfterViewInit() the\n// initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to\n// initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will\n// not have their ngAfterViewInit() called but, starting with E7, the rest of\n// the view will begin getting ngAfterViewInit() called until a check and\n// pass is complete.\n//\n// This algorthim also handles recursion. Consider if E4's ngAfterViewInit()\n// indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected\n// initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.\n// D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.\n// When the recursion returns the initIndex will be 7 so E1 is skipped as it\n// has already been called in the recursively called checkAnUpdateView().\n/**\n * @param {?} view\n * @param {?} lifecycles\n * @return {?}\n */\nfunction callLifecycleHooksChildrenFirst(view, lifecycles) {\n  if (!(view.def.nodeFlags & lifecycles)) {\n    return;\n  }\n  /** @type {?} */\n  const nodes = view.def.nodes;\n  /** @type {?} */\n  let initIndex = 0;\n  for (let i = 0; i < nodes.length; i++) {\n    /** @type {?} */\n    const nodeDef = nodes[i];\n    /** @type {?} */\n    let parent = nodeDef.parent;\n    if (!parent && nodeDef.flags & lifecycles) {\n      // matching root node (e.g. a pipe)\n      callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n    }\n    if ((nodeDef.childFlags & lifecycles) === 0) {\n      // no child matches one of the lifecycles\n      i += nodeDef.childCount;\n    }\n    while (parent && parent.flags & 1 /* TypeElement */ && i === parent.nodeIndex + parent.childCount) {\n      // last child of an element\n      if (parent.directChildFlags & lifecycles) {\n        initIndex = callElementProvidersLifecycles(view, parent, lifecycles, initIndex);\n      }\n      parent = parent.parent;\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n  for (let i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[i];\n    if (nodeDef.flags & lifecycles) {\n      callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n    }\n    // only visit direct children\n    i += nodeDef.childCount;\n  }\n  return initIndex;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\n  /** @type {?} */\n  const providerData = asProviderData(view, index);\n  if (!providerData) {\n    return;\n  }\n  /** @type {?} */\n  const provider = providerData.instance;\n  if (!provider) {\n    return;\n  }\n  Services.setCurrentNode(view, index);\n  if (lifecycles & 1048576 /* AfterContentInit */ && shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n    provider.ngAfterContentInit();\n  }\n  if (lifecycles & 2097152 /* AfterContentChecked */) {\n    provider.ngAfterContentChecked();\n  }\n  if (lifecycles & 4194304 /* AfterViewInit */ && shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n    provider.ngAfterViewInit();\n  }\n  if (lifecycles & 8388608 /* AfterViewChecked */) {\n    provider.ngAfterViewChecked();\n  }\n  if (lifecycles & 131072 /* OnDestroy */) {\n    provider.ngOnDestroy();\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} flags\n * @param {?} id\n * @param {?} bindings\n * @return {?}\n */\nfunction queryDef(flags, id, bindings) {\n  /** @type {?} */\n  let bindingDefs = [];\n  for (let propName in bindings) {\n    /** @type {?} */\n    const bindingType = bindings[propName];\n    bindingDefs.push({\n      propName,\n      bindingType\n    });\n  }\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    // TODO(vicb): check\n    checkIndex: -1,\n    flags,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0,\n    ngContentIndex: -1,\n    matchedQueries: {},\n    matchedQueryIds: 0,\n    references: {},\n    childCount: 0,\n    bindings: [],\n    bindingFlags: 0,\n    outputs: [],\n    element: null,\n    provider: null,\n    text: null,\n    query: {\n      id,\n      filterId: filterQueryId(id),\n      bindings: bindingDefs\n    },\n    ngContent: null\n  };\n}\n/**\n * @return {?}\n */\nfunction createQuery$1() {\n  return new QueryList$1();\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction dirtyParentQueries(view) {\n  /** @type {?} */\n  const queryIds = view.def.nodeMatchedQueries;\n  while (view.parent && isEmbeddedView(view)) {\n    /** @type {?} */\n    let tplDef = /** @type {?} */view.parentNodeDef;\n    view = view.parent;\n    // content queries\n    /** @type {?} */\n    const end = tplDef.nodeIndex + tplDef.childCount;\n    for (let i = 0; i <= end; i++) {\n      /** @type {?} */\n      const nodeDef = view.def.nodes[i];\n      if (nodeDef.flags & 67108864 /* TypeContentQuery */ && nodeDef.flags & 536870912 /* DynamicQuery */ && ( /** @type {?} */nodeDef.query.filterId & queryIds) === /** @type {?} */nodeDef.query.filterId) {\n        asQueryList(view, i).setDirty();\n      }\n      if (nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex || !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) || !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n        // skip elements that don't contain the template element or no query.\n        i += nodeDef.childCount;\n      }\n    }\n  }\n  // view queries\n  if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n    for (let i = 0; i < view.def.nodes.length; i++) {\n      /** @type {?} */\n      const nodeDef = view.def.nodes[i];\n      if (nodeDef.flags & 134217728 /* TypeViewQuery */ && nodeDef.flags & 536870912 /* DynamicQuery */) {\n        asQueryList(view, i).setDirty();\n      }\n      // only visit the root nodes\n      i += nodeDef.childCount;\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkAndUpdateQuery(view, nodeDef) {\n  /** @type {?} */\n  const queryList = asQueryList(view, nodeDef.nodeIndex);\n  if (!queryList.dirty) {\n    return;\n  }\n  /** @type {?} */\n  let directiveInstance;\n  /** @type {?} */\n  let newValues = /** @type {?} */undefined;\n  if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n    /** @type {?} */\n    const elementDef = /** @type {?} */ /** @type {?} */nodeDef.parent.parent;\n    newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, /** @type {?} */nodeDef.query, []);\n    directiveInstance = asProviderData(view, /** @type {?} */nodeDef.parent.nodeIndex).instance;\n  } else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n    newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */nodeDef.query, []);\n    directiveInstance = view.component;\n  }\n  queryList.reset(newValues);\n  /** @type {?} */\n  const bindings = /** @type {?} */nodeDef.query.bindings;\n  /** @type {?} */\n  let notify = false;\n  for (let i = 0; i < bindings.length; i++) {\n    /** @type {?} */\n    const binding = bindings[i];\n    /** @type {?} */\n    let boundValue;\n    switch (binding.bindingType) {\n      case 0 /* First */:\n        boundValue = queryList.first;\n        break;\n      case 1 /* All */:\n        boundValue = queryList;\n        notify = true;\n        break;\n    }\n    directiveInstance[binding.propName] = boundValue;\n  }\n  if (notify) {\n    queryList.notifyOnChanges();\n  }\n}\n/**\n * @param {?} view\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} queryDef\n * @param {?} values\n * @return {?}\n */\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n  for (let i = startIndex; i <= endIndex; i++) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[i];\n    /** @type {?} */\n    const valueType = nodeDef.matchedQueries[queryDef.id];\n    if (valueType != null) {\n      values.push(getQueryValue(view, nodeDef, valueType));\n    }\n    if (nodeDef.flags & 1 /* TypeElement */ && /** @type {?} */nodeDef.element.template && ( /** @type {?} */ /** @type {?} */nodeDef.element.template.nodeMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n      /** @type {?} */\n      const elementData = asElementData(view, i);\n      // check embedded views that were attached at the place of their template,\n      // but process child nodes first if some match the query (see issue #16568)\n      if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n        calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n        i += nodeDef.childCount;\n      }\n      if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n        /** @type {?} */\n        const embeddedViews = /** @type {?} */elementData.viewContainer._embeddedViews;\n        for (let k = 0; k < embeddedViews.length; k++) {\n          /** @type {?} */\n          const embeddedView = embeddedViews[k];\n          /** @type {?} */\n          const dvc = declaredViewContainer(embeddedView);\n          if (dvc && dvc === elementData) {\n            calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n          }\n        }\n      }\n      /** @type {?} */\n      const projectedViews = elementData.template._projectedViews;\n      if (projectedViews) {\n        for (let k = 0; k < projectedViews.length; k++) {\n          /** @type {?} */\n          const projectedView = projectedViews[k];\n          calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n        }\n      }\n    }\n    if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n      // if no child matches the query, skip the children.\n      i += nodeDef.childCount;\n    }\n  }\n  return values;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} queryValueType\n * @return {?}\n */\nfunction getQueryValue(view, nodeDef, queryValueType) {\n  if (queryValueType != null) {\n    // a match\n    switch (queryValueType) {\n      case 1 /* RenderElement */:\n        return asElementData(view, nodeDef.nodeIndex).renderElement;\n      case 0 /* ElementRef */:\n        return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n      case 2 /* TemplateRef */:\n        return asElementData(view, nodeDef.nodeIndex).template;\n      case 3 /* ViewContainerRef */:\n        return asElementData(view, nodeDef.nodeIndex).viewContainer;\n      case 4 /* Provider */:\n        return asProviderData(view, nodeDef.nodeIndex).instance;\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} ngContentIndex\n * @param {?} index\n * @return {?}\n */\nfunction ngContentDef(ngContentIndex, index) {\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    checkIndex: -1,\n    flags: 8 /* TypeNgContent */,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0,\n    matchedQueries: {},\n    matchedQueryIds: 0,\n    references: {},\n    ngContentIndex,\n    childCount: 0,\n    bindings: [],\n    bindingFlags: 0,\n    outputs: [],\n    element: null,\n    provider: null,\n    text: null,\n    query: null,\n    ngContent: {\n      index\n    }\n  };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction appendNgContent(view, renderHost, def) {\n  /** @type {?} */\n  const parentEl = getParentRenderElement(view, renderHost, def);\n  if (!parentEl) {\n    // Nothing to do if there is no parent element.\n    return;\n  }\n  /** @type {?} */\n  const ngContentIndex = /** @type {?} */def.ngContent.index;\n  visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nfunction purePipeDef(checkIndex, argCount) {\n  // argCount + 1 to include the pipe as first arg\n  return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n}\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nfunction pureArrayDef(checkIndex, argCount) {\n  return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n}\n/**\n * @param {?} checkIndex\n * @param {?} propToIndex\n * @return {?}\n */\nfunction pureObjectDef(checkIndex, propToIndex) {\n  /** @type {?} */\n  const keys = Object.keys(propToIndex);\n  /** @type {?} */\n  const nbKeys = keys.length;\n  /** @type {?} */\n  const propertyNames = new Array(nbKeys);\n  for (let i = 0; i < nbKeys; i++) {\n    /** @type {?} */\n    const key = keys[i];\n    /** @type {?} */\n    const index = propToIndex[key];\n    propertyNames[index] = key;\n  }\n  return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n}\n/**\n * @param {?} flags\n * @param {?} checkIndex\n * @param {?} propertyNames\n * @return {?}\n */\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\n  /** @type {?} */\n  const bindings = new Array(propertyNames.length);\n  for (let i = 0; i < propertyNames.length; i++) {\n    /** @type {?} */\n    const prop = propertyNames[i];\n    bindings[i] = {\n      flags: 8 /* TypeProperty */,\n      name: prop,\n      ns: null,\n      nonMinifiedName: prop,\n      securityContext: null,\n      suffix: null\n    };\n  }\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    checkIndex,\n    flags,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0,\n    matchedQueries: {},\n    matchedQueryIds: 0,\n    references: {},\n    ngContentIndex: -1,\n    childCount: 0,\n    bindings,\n    bindingFlags: calcBindingFlags(bindings),\n    outputs: [],\n    element: null,\n    provider: null,\n    text: null,\n    query: null,\n    ngContent: null\n  };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createPureExpression(view, def) {\n  return {\n    value: undefined\n  };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n  /** @type {?} */\n  const bindings = def.bindings;\n  /** @type {?} */\n  let changed = false;\n  /** @type {?} */\n  const bindLen = bindings.length;\n  if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;\n  if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;\n  if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;\n  if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;\n  if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;\n  if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;\n  if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;\n  if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;\n  if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;\n  if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;\n  if (changed) {\n    /** @type {?} */\n    const data = asPureExpressionData(view, def.nodeIndex);\n    /** @type {?} */\n    let value;\n    switch (def.flags & 201347067 /* Types */) {\n      case 32 /* TypePureArray */:\n        value = new Array(bindings.length);\n        if (bindLen > 0) value[0] = v0;\n        if (bindLen > 1) value[1] = v1;\n        if (bindLen > 2) value[2] = v2;\n        if (bindLen > 3) value[3] = v3;\n        if (bindLen > 4) value[4] = v4;\n        if (bindLen > 5) value[5] = v5;\n        if (bindLen > 6) value[6] = v6;\n        if (bindLen > 7) value[7] = v7;\n        if (bindLen > 8) value[8] = v8;\n        if (bindLen > 9) value[9] = v9;\n        break;\n      case 64 /* TypePureObject */:\n        value = {};\n        if (bindLen > 0) value[/** @type {?} */bindings[0].name] = v0;\n        if (bindLen > 1) value[/** @type {?} */bindings[1].name] = v1;\n        if (bindLen > 2) value[/** @type {?} */bindings[2].name] = v2;\n        if (bindLen > 3) value[/** @type {?} */bindings[3].name] = v3;\n        if (bindLen > 4) value[/** @type {?} */bindings[4].name] = v4;\n        if (bindLen > 5) value[/** @type {?} */bindings[5].name] = v5;\n        if (bindLen > 6) value[/** @type {?} */bindings[6].name] = v6;\n        if (bindLen > 7) value[/** @type {?} */bindings[7].name] = v7;\n        if (bindLen > 8) value[/** @type {?} */bindings[8].name] = v8;\n        if (bindLen > 9) value[/** @type {?} */bindings[9].name] = v9;\n        break;\n      case 128 /* TypePurePipe */:\n        /** @type {?} */\n        const pipe = v0;\n        switch (bindLen) {\n          case 1:\n            value = pipe.transform(v0);\n            break;\n          case 2:\n            value = pipe.transform(v1);\n            break;\n          case 3:\n            value = pipe.transform(v1, v2);\n            break;\n          case 4:\n            value = pipe.transform(v1, v2, v3);\n            break;\n          case 5:\n            value = pipe.transform(v1, v2, v3, v4);\n            break;\n          case 6:\n            value = pipe.transform(v1, v2, v3, v4, v5);\n            break;\n          case 7:\n            value = pipe.transform(v1, v2, v3, v4, v5, v6);\n            break;\n          case 8:\n            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n            break;\n          case 9:\n            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n            break;\n          case 10:\n            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n            break;\n        }\n        break;\n    }\n    data.value = value;\n  }\n  return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdatePureExpressionDynamic(view, def, values) {\n  /** @type {?} */\n  const bindings = def.bindings;\n  /** @type {?} */\n  let changed = false;\n  for (let i = 0; i < values.length; i++) {\n    // Note: We need to loop over all values, so that\n    // the old values are updates as well!\n    if (checkAndUpdateBinding(view, def, i, values[i])) {\n      changed = true;\n    }\n  }\n  if (changed) {\n    /** @type {?} */\n    const data = asPureExpressionData(view, def.nodeIndex);\n    /** @type {?} */\n    let value;\n    switch (def.flags & 201347067 /* Types */) {\n      case 32 /* TypePureArray */:\n        value = values;\n        break;\n      case 64 /* TypePureObject */:\n        value = {};\n        for (let i = 0; i < values.length; i++) {\n          value[/** @type {?} */bindings[i].name] = values[i];\n        }\n        break;\n      case 128 /* TypePurePipe */:\n        /** @type {?} */\n        const pipe = values[0];\n        /** @type {?} */\n        const params = values.slice(1);\n        value = /** @type {?} */pipe.transform(...params);\n        break;\n    }\n    data.value = value;\n  }\n  return changed;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} checkIndex\n * @param {?} ngContentIndex\n * @param {?} staticText\n * @return {?}\n */\nfunction textDef(checkIndex, ngContentIndex, staticText) {\n  /** @type {?} */\n  const bindings = new Array(staticText.length - 1);\n  for (let i = 1; i < staticText.length; i++) {\n    bindings[i - 1] = {\n      flags: 8 /* TypeProperty */,\n      name: null,\n      ns: null,\n      nonMinifiedName: null,\n      securityContext: null,\n      suffix: staticText[i]\n    };\n  }\n  return {\n    // will bet set by the view definition\n    nodeIndex: -1,\n    parent: null,\n    renderParent: null,\n    bindingIndex: -1,\n    outputIndex: -1,\n    // regular values\n    checkIndex,\n    flags: 2 /* TypeText */,\n    childFlags: 0,\n    directChildFlags: 0,\n    childMatchedQueries: 0,\n    matchedQueries: {},\n    matchedQueryIds: 0,\n    references: {},\n    ngContentIndex,\n    childCount: 0,\n    bindings,\n    bindingFlags: 8 /* TypeProperty */,\n    outputs: [],\n    element: null,\n    provider: null,\n    text: {\n      prefix: staticText[0]\n    },\n    query: null,\n    ngContent: null\n  };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction createText(view, renderHost, def) {\n  /** @type {?} */\n  let renderNode$$1;\n  /** @type {?} */\n  const renderer = view.renderer;\n  renderNode$$1 = renderer.createText( /** @type {?} */def.text.prefix);\n  /** @type {?} */\n  const parentEl = getParentRenderElement(view, renderHost, def);\n  if (parentEl) {\n    renderer.appendChild(parentEl, renderNode$$1);\n  }\n  return {\n    renderText: renderNode$$1\n  };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n  /** @type {?} */\n  let changed = false;\n  /** @type {?} */\n  const bindings = def.bindings;\n  /** @type {?} */\n  const bindLen = bindings.length;\n  if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0)) changed = true;\n  if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1)) changed = true;\n  if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2)) changed = true;\n  if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3)) changed = true;\n  if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4)) changed = true;\n  if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5)) changed = true;\n  if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6)) changed = true;\n  if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7)) changed = true;\n  if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8)) changed = true;\n  if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9)) changed = true;\n  if (changed) {\n    /** @type {?} */\n    let value = /** @type {?} */def.text.prefix;\n    if (bindLen > 0) value += _addInterpolationPart(v0, bindings[0]);\n    if (bindLen > 1) value += _addInterpolationPart(v1, bindings[1]);\n    if (bindLen > 2) value += _addInterpolationPart(v2, bindings[2]);\n    if (bindLen > 3) value += _addInterpolationPart(v3, bindings[3]);\n    if (bindLen > 4) value += _addInterpolationPart(v4, bindings[4]);\n    if (bindLen > 5) value += _addInterpolationPart(v5, bindings[5]);\n    if (bindLen > 6) value += _addInterpolationPart(v6, bindings[6]);\n    if (bindLen > 7) value += _addInterpolationPart(v7, bindings[7]);\n    if (bindLen > 8) value += _addInterpolationPart(v8, bindings[8]);\n    if (bindLen > 9) value += _addInterpolationPart(v9, bindings[9]);\n    /** @type {?} */\n    const renderNode$$1 = asTextData(view, def.nodeIndex).renderText;\n    view.renderer.setValue(renderNode$$1, value);\n  }\n  return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateTextDynamic(view, def, values) {\n  /** @type {?} */\n  const bindings = def.bindings;\n  /** @type {?} */\n  let changed = false;\n  for (let i = 0; i < values.length; i++) {\n    // Note: We need to loop over all values, so that\n    // the old values are updates as well!\n    if (checkAndUpdateBinding(view, def, i, values[i])) {\n      changed = true;\n    }\n  }\n  if (changed) {\n    /** @type {?} */\n    let value = '';\n    for (let i = 0; i < values.length; i++) {\n      value = value + _addInterpolationPart(values[i], bindings[i]);\n    }\n    value = /** @type {?} */def.text.prefix + value;\n    /** @type {?} */\n    const renderNode$$1 = asTextData(view, def.nodeIndex).renderText;\n    view.renderer.setValue(renderNode$$1, value);\n  }\n  return changed;\n}\n/**\n * @param {?} value\n * @param {?} binding\n * @return {?}\n */\nfunction _addInterpolationPart(value, binding) {\n  /** @type {?} */\n  const valueStr = value != null ? value.toString() : '';\n  return valueStr + binding.suffix;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} flags\n * @param {?} nodes\n * @param {?=} updateDirectives\n * @param {?=} updateRenderer\n * @return {?}\n */\nfunction viewDef(flags, nodes, updateDirectives, updateRenderer) {\n  // clone nodes and set auto calculated values\n  /** @type {?} */\n  let viewBindingCount = 0;\n  /** @type {?} */\n  let viewDisposableCount = 0;\n  /** @type {?} */\n  let viewNodeFlags = 0;\n  /** @type {?} */\n  let viewRootNodeFlags = 0;\n  /** @type {?} */\n  let viewMatchedQueries = 0;\n  /** @type {?} */\n  let currentParent = null;\n  /** @type {?} */\n  let currentRenderParent = null;\n  /** @type {?} */\n  let currentElementHasPublicProviders = false;\n  /** @type {?} */\n  let currentElementHasPrivateProviders = false;\n  /** @type {?} */\n  let lastRenderRootNode = null;\n  for (let i = 0; i < nodes.length; i++) {\n    /** @type {?} */\n    const node = nodes[i];\n    node.nodeIndex = i;\n    node.parent = currentParent;\n    node.bindingIndex = viewBindingCount;\n    node.outputIndex = viewDisposableCount;\n    node.renderParent = currentRenderParent;\n    viewNodeFlags |= node.flags;\n    viewMatchedQueries |= node.matchedQueryIds;\n    if (node.element) {\n      /** @type {?} */\n      const elDef = node.element;\n      elDef.publicProviders = currentParent ? /** @type {?} */currentParent.element.publicProviders : Object.create(null);\n      elDef.allProviders = elDef.publicProviders;\n      // Note: We assume that all providers of an element are before any child element!\n      currentElementHasPublicProviders = false;\n      currentElementHasPrivateProviders = false;\n      if (node.element.template) {\n        viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n      }\n    }\n    validateNode(currentParent, node, nodes.length);\n    viewBindingCount += node.bindings.length;\n    viewDisposableCount += node.outputs.length;\n    if (!currentRenderParent && node.flags & 3 /* CatRenderNode */) {\n      lastRenderRootNode = node;\n    }\n    if (node.flags & 20224 /* CatProvider */) {\n      if (!currentElementHasPublicProviders) {\n        currentElementHasPublicProviders = true;\n        // Use prototypical inheritance to not get O(n^2) complexity...\n        /** @type {?} */ /** @type {?} */currentParent.element.publicProviders = Object.create( /** @type {?} */ /** @type {?} */currentParent.element.publicProviders);\n        /** @type {?} */ /** @type {?} */currentParent.element.allProviders = /** @type {?} */ /** @type {?} */currentParent.element.publicProviders;\n      }\n      /** @type {?} */\n      const isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n      /** @type {?} */\n      const isComponent = (node.flags & 32768 /* Component */) !== 0;\n      if (!isPrivateService || isComponent) {\n        /** @type {?} */ /** @type {?} */ /** @type {?} */currentParent.element.publicProviders[tokenKey( /** @type {?} */node.provider.token)] = node;\n      } else {\n        if (!currentElementHasPrivateProviders) {\n          currentElementHasPrivateProviders = true;\n          // Use prototypical inheritance to not get O(n^2) complexity...\n          /** @type {?} */ /** @type {?} */currentParent.element.allProviders = Object.create( /** @type {?} */ /** @type {?} */currentParent.element.publicProviders);\n        }\n        /** @type {?} */ /** @type {?} */ /** @type {?} */currentParent.element.allProviders[tokenKey( /** @type {?} */node.provider.token)] = node;\n      }\n      if (isComponent) {\n        /** @type {?} */ /** @type {?} */currentParent.element.componentProvider = node;\n      }\n    }\n    if (currentParent) {\n      currentParent.childFlags |= node.flags;\n      currentParent.directChildFlags |= node.flags;\n      currentParent.childMatchedQueries |= node.matchedQueryIds;\n      if (node.element && node.element.template) {\n        currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n      }\n    } else {\n      viewRootNodeFlags |= node.flags;\n    }\n    if (node.childCount > 0) {\n      currentParent = node;\n      if (!isNgContainer(node)) {\n        currentRenderParent = node;\n      }\n    } else {\n      // When the current node has no children, check if it is the last children of its parent.\n      // When it is, propagate the flags up.\n      // The loop is required because an element could be the last transitive children of several\n      // elements. We loop to either the root or the highest opened element (= with remaining\n      // children)\n      while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n        /** @type {?} */\n        const newParent = currentParent.parent;\n        if (newParent) {\n          newParent.childFlags |= currentParent.childFlags;\n          newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n        }\n        currentParent = newParent;\n        // We also need to update the render parent & account for ng-container\n        if (currentParent && isNgContainer(currentParent)) {\n          currentRenderParent = currentParent.renderParent;\n        } else {\n          currentRenderParent = currentParent;\n        }\n      }\n    }\n  }\n  /** @type {?} */\n  const handleEvent = (view, nodeIndex, eventName, event) => /** @type {?} */ /** @type {?} */nodes[nodeIndex].element.handleEvent(view, eventName, event);\n  return {\n    // Will be filled later...\n    factory: null,\n    nodeFlags: viewNodeFlags,\n    rootNodeFlags: viewRootNodeFlags,\n    nodeMatchedQueries: viewMatchedQueries,\n    flags,\n    nodes: nodes,\n    updateDirectives: updateDirectives || NOOP,\n    updateRenderer: updateRenderer || NOOP,\n    handleEvent,\n    bindingCount: viewBindingCount,\n    outputCount: viewDisposableCount,\n    lastRenderRootNode\n  };\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isNgContainer(node) {\n  return (node.flags & 1 /* TypeElement */) !== 0 && /** @type {?} */node.element.name === null;\n}\n/**\n * @param {?} parent\n * @param {?} node\n * @param {?} nodeCount\n * @return {?}\n */\nfunction validateNode(parent, node, nodeCount) {\n  /** @type {?} */\n  const template = node.element && node.element.template;\n  if (template) {\n    if (!template.lastRenderRootNode) {\n      throw new Error(`Illegal State: Embedded templates without nodes are not allowed!`);\n    }\n    if (template.lastRenderRootNode && template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n      throw new Error(`Illegal State: Last root node of a template can't have embedded views, at index ${node.nodeIndex}!`);\n    }\n  }\n  if (node.flags & 20224 /* CatProvider */) {\n    /** @type {?} */\n    const parentFlags = parent ? parent.flags : 0;\n    if ((parentFlags & 1 /* TypeElement */) === 0) {\n      throw new Error(`Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index ${node.nodeIndex}!`);\n    }\n  }\n  if (node.query) {\n    if (node.flags & 67108864 /* TypeContentQuery */ && (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n      throw new Error(`Illegal State: Content Query nodes need to be children of directives, at index ${node.nodeIndex}!`);\n    }\n    if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n      throw new Error(`Illegal State: View Query nodes have to be top level nodes, at index ${node.nodeIndex}!`);\n    }\n  }\n  if (node.childCount) {\n    /** @type {?} */\n    const parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n    if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n      throw new Error(`Illegal State: childCount of node leads outside of parent, at index ${node.nodeIndex}!`);\n    }\n  }\n}\n/**\n * @param {?} parent\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction createEmbeddedView(parent, anchorDef$$1, viewDef, context) {\n  // embedded views are seen as siblings to the anchor, so we need\n  // to get the parent of the anchor and use it as parentIndex.\n  /** @type {?} */\n  const view = createView(parent.root, parent.renderer, parent, anchorDef$$1, viewDef);\n  initView(view, parent.component, context);\n  createViewNodes(view);\n  return view;\n}\n/**\n * @param {?} root\n * @param {?} def\n * @param {?=} context\n * @return {?}\n */\nfunction createRootView(root, def, context) {\n  /** @type {?} */\n  const view = createView(root, root.renderer, null, null, def);\n  initView(view, context, context);\n  createViewNodes(view);\n  return view;\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction createComponentView(parentView, nodeDef, viewDef, hostElement) {\n  /** @type {?} */\n  const rendererType = /** @type {?} */nodeDef.element.componentRendererType;\n  /** @type {?} */\n  let compRenderer;\n  if (!rendererType) {\n    compRenderer = parentView.root.renderer;\n  } else {\n    compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n  }\n  return createView(parentView.root, compRenderer, parentView, /** @type {?} */nodeDef.element.componentProvider, viewDef);\n}\n/**\n * @param {?} root\n * @param {?} renderer\n * @param {?} parent\n * @param {?} parentNodeDef\n * @param {?} def\n * @return {?}\n */\nfunction createView(root, renderer, parent, parentNodeDef, def) {\n  /** @type {?} */\n  const nodes = new Array(def.nodes.length);\n  /** @type {?} */\n  const disposables = def.outputCount ? new Array(def.outputCount) : null;\n  /** @type {?} */\n  const view = {\n    def,\n    parent,\n    viewContainerParent: null,\n    parentNodeDef,\n    context: null,\n    component: null,\n    nodes,\n    state: 13 /* CatInit */,\n    root,\n    renderer,\n    oldValues: new Array(def.bindingCount),\n    disposables,\n    initIndex: -1\n  };\n  return view;\n}\n/**\n * @param {?} view\n * @param {?} component\n * @param {?} context\n * @return {?}\n */\nfunction initView(view, component, context) {\n  view.component = component;\n  view.context = context;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createViewNodes(view) {\n  /** @type {?} */\n  let renderHost;\n  if (isComponentView(view)) {\n    /** @type {?} */\n    const hostDef = view.parentNodeDef;\n    renderHost = asElementData( /** @type {?} */view.parent, /** @type {?} */ /** @type {?} */hostDef.parent.nodeIndex).renderElement;\n  }\n  /** @type {?} */\n  const def = view.def;\n  /** @type {?} */\n  const nodes = view.nodes;\n  for (let i = 0; i < def.nodes.length; i++) {\n    /** @type {?} */\n    const nodeDef = def.nodes[i];\n    Services.setCurrentNode(view, i);\n    /** @type {?} */\n    let nodeData;\n    switch (nodeDef.flags & 201347067 /* Types */) {\n      case 1 /* TypeElement */:\n        /** @type {?} */\n        const el = /** @type {?} */createElement(view, renderHost, nodeDef);\n        /** @type {?} */\n        let componentView = /** @type {?} */undefined;\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\n          /** @type {?} */\n          const compViewDef = resolveDefinition( /** @type {?} */ /** @type {?} */nodeDef.element.componentView);\n          componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n        }\n        listenToElementOutputs(view, componentView, nodeDef, el);\n        nodeData = /** @type {?} */{\n          renderElement: el,\n          componentView,\n          viewContainer: null,\n          template: /** @type {?} */nodeDef.element.template ? createTemplateData(view, nodeDef) : undefined\n        };\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n          nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n        }\n        break;\n      case 2 /* TypeText */:\n        nodeData = /** @type {?} */createText(view, renderHost, nodeDef);\n        break;\n      case 512 /* TypeClassProvider */:\n      case 1024 /* TypeFactoryProvider */:\n      case 2048 /* TypeUseExistingProvider */:\n      case 256 /* TypeValueProvider */:\n        {\n          nodeData = nodes[i];\n          if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n            /** @type {?} */\n            const instance = createProviderInstance(view, nodeDef);\n            nodeData = /** @type {?} */{\n              instance\n            };\n          }\n          break;\n        }\n      case 16 /* TypePipe */:\n        {\n          /** @type {?} */\n          const instance = createPipeInstance(view, nodeDef);\n          nodeData = /** @type {?} */{\n            instance\n          };\n          break;\n        }\n      case 16384 /* TypeDirective */:\n        {\n          nodeData = nodes[i];\n          if (!nodeData) {\n            /** @type {?} */\n            const instance = createDirectiveInstance(view, nodeDef);\n            nodeData = /** @type {?} */{\n              instance\n            };\n          }\n          if (nodeDef.flags & 32768 /* Component */) {\n            /** @type {?} */\n            const compView = asElementData(view, /** @type {?} */nodeDef.parent.nodeIndex).componentView;\n            initView(compView, nodeData.instance, nodeData.instance);\n          }\n          break;\n        }\n      case 32 /* TypePureArray */:\n      case 64 /* TypePureObject */:\n      case 128 /* TypePurePipe */:\n        nodeData = /** @type {?} */createPureExpression(view, nodeDef);\n        break;\n      case 67108864 /* TypeContentQuery */:\n      case 134217728 /* TypeViewQuery */:\n        nodeData = /** @type {?} */createQuery$1();\n        break;\n      case 8 /* TypeNgContent */:\n        appendNgContent(view, renderHost, nodeDef);\n        // no runtime data needed for NgContent...\n        nodeData = undefined;\n        break;\n    }\n    nodes[i] = nodeData;\n  }\n  // Create the ViewData.nodes of component views after we created everything else,\n  // so that e.g. ng-content works\n  execComponentViewsAction(view, ViewAction.CreateViewNodes);\n  // fill static content and view queries\n  execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction checkNoChangesView(view) {\n  markProjectedViewsForCheck(view);\n  Services.updateDirectives(view, 1 /* CheckNoChanges */);\n  execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n  Services.updateRenderer(view, 1 /* CheckNoChanges */);\n  execComponentViewsAction(view, ViewAction.CheckNoChanges);\n  // Note: We don't check queries for changes as we didn't do this in v2.x.\n  // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n  view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction checkAndUpdateView(view) {\n  if (view.state & 1 /* BeforeFirstCheck */) {\n    view.state &= ~1 /* BeforeFirstCheck */;\n    view.state |= 2 /* FirstCheck */;\n  } else {\n    view.state &= ~2 /* FirstCheck */;\n  }\n\n  shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n  markProjectedViewsForCheck(view);\n  Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n  execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n  execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n  /** @type {?} */\n  let callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n  callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n  Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n  execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n  execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n  callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n  callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n  if (view.def.flags & 2 /* OnPush */) {\n    view.state &= ~8 /* ChecksEnabled */;\n  }\n\n  view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n  shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n  if (argStyle === 0 /* Inline */) {\n    return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n  } else {\n    return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n  }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markProjectedViewsForCheck(view) {\n  /** @type {?} */\n  const def = view.def;\n  if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n    return;\n  }\n  for (let i = 0; i < def.nodes.length; i++) {\n    /** @type {?} */\n    const nodeDef = def.nodes[i];\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n      /** @type {?} */\n      const projectedViews = asElementData(view, i).template._projectedViews;\n      if (projectedViews) {\n        for (let i = 0; i < projectedViews.length; i++) {\n          /** @type {?} */\n          const projectedView = projectedViews[i];\n          projectedView.state |= 32 /* CheckProjectedView */;\n          markParentViewsForCheckProjectedViews(projectedView, view);\n        }\n      }\n    } else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n      // a parent with leafs\n      // no child is a component,\n      // then skip the children\n      i += nodeDef.childCount;\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n  switch (nodeDef.flags & 201347067 /* Types */) {\n    case 1 /* TypeElement */:\n      return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    case 2 /* TypeText */:\n      return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    case 16384 /* TypeDirective */:\n      return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    case 32 /* TypePureArray */:\n    case 64 /* TypePureObject */:\n    case 128 /* TypePurePipe */:\n      return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    default:\n      throw 'unreachable';\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\n  switch (nodeDef.flags & 201347067 /* Types */) {\n    case 1 /* TypeElement */:\n      return checkAndUpdateElementDynamic(view, nodeDef, values);\n    case 2 /* TypeText */:\n      return checkAndUpdateTextDynamic(view, nodeDef, values);\n    case 16384 /* TypeDirective */:\n      return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n    case 32 /* TypePureArray */:\n    case 64 /* TypePureObject */:\n    case 128 /* TypePurePipe */:\n      return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n    default:\n      throw 'unreachable';\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n  if (argStyle === 0 /* Inline */) {\n    checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n  } else {\n    checkNoChangesNodeDynamic(view, nodeDef, v0);\n  }\n  // Returning false is ok here as we would have thrown in case of a change.\n  return false;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n  /** @type {?} */\n  const bindLen = nodeDef.bindings.length;\n  if (bindLen > 0) checkBindingNoChanges(view, nodeDef, 0, v0);\n  if (bindLen > 1) checkBindingNoChanges(view, nodeDef, 1, v1);\n  if (bindLen > 2) checkBindingNoChanges(view, nodeDef, 2, v2);\n  if (bindLen > 3) checkBindingNoChanges(view, nodeDef, 3, v3);\n  if (bindLen > 4) checkBindingNoChanges(view, nodeDef, 4, v4);\n  if (bindLen > 5) checkBindingNoChanges(view, nodeDef, 5, v5);\n  if (bindLen > 6) checkBindingNoChanges(view, nodeDef, 6, v6);\n  if (bindLen > 7) checkBindingNoChanges(view, nodeDef, 7, v7);\n  if (bindLen > 8) checkBindingNoChanges(view, nodeDef, 8, v8);\n  if (bindLen > 9) checkBindingNoChanges(view, nodeDef, 9, v9);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\n  for (let i = 0; i < values.length; i++) {\n    checkBindingNoChanges(view, nodeDef, i, values[i]);\n  }\n}\n/**\n * Workaround https://github.com/angular/tsickle/issues/497\n * @suppress {misplacedTypeAnnotation}\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkNoChangesQuery(view, nodeDef) {\n  /** @type {?} */\n  const queryList = asQueryList(view, nodeDef.nodeIndex);\n  if (queryList.dirty) {\n    throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), `Query ${/** @type {?} */nodeDef.query.id} not dirty`, `Query ${/** @type {?} */nodeDef.query.id} dirty`, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n  }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyView(view) {\n  if (view.state & 128 /* Destroyed */) {\n    return;\n  }\n  execEmbeddedViewsAction(view, ViewAction.Destroy);\n  execComponentViewsAction(view, ViewAction.Destroy);\n  callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n  if (view.disposables) {\n    for (let i = 0; i < view.disposables.length; i++) {\n      view.disposables[i]();\n    }\n  }\n  detachProjectedView(view);\n  if (view.renderer.destroyNode) {\n    destroyViewNodes(view);\n  }\n  if (isComponentView(view)) {\n    view.renderer.destroy();\n  }\n  view.state |= 128 /* Destroyed */;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyViewNodes(view) {\n  /** @type {?} */\n  const len = view.def.nodes.length;\n  for (let i = 0; i < len; i++) {\n    /** @type {?} */\n    const def = view.def.nodes[i];\n    if (def.flags & 1 /* TypeElement */) {\n      /** @type {?} */view.renderer.destroyNode(asElementData(view, i).renderElement);\n    } else if (def.flags & 2 /* TypeText */) {\n      /** @type {?} */view.renderer.destroyNode(asTextData(view, i).renderText);\n    } else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n      asQueryList(view, i).destroy();\n    }\n  }\n}\n/** @enum {number} */\nconst ViewAction = {\n  CreateViewNodes: 0,\n  CheckNoChanges: 1,\n  CheckNoChangesProjectedViews: 2,\n  CheckAndUpdate: 3,\n  CheckAndUpdateProjectedViews: 4,\n  Destroy: 5\n};\nViewAction[ViewAction.CreateViewNodes] = 'CreateViewNodes';\nViewAction[ViewAction.CheckNoChanges] = 'CheckNoChanges';\nViewAction[ViewAction.CheckNoChangesProjectedViews] = 'CheckNoChangesProjectedViews';\nViewAction[ViewAction.CheckAndUpdate] = 'CheckAndUpdate';\nViewAction[ViewAction.CheckAndUpdateProjectedViews] = 'CheckAndUpdateProjectedViews';\nViewAction[ViewAction.Destroy] = 'Destroy';\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execComponentViewsAction(view, action) {\n  /** @type {?} */\n  const def = view.def;\n  if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n    return;\n  }\n  for (let i = 0; i < def.nodes.length; i++) {\n    /** @type {?} */\n    const nodeDef = def.nodes[i];\n    if (nodeDef.flags & 33554432 /* ComponentView */) {\n      // a leaf\n      callViewAction(asElementData(view, i).componentView, action);\n    } else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n      // a parent with leafs\n      // no child is a component,\n      // then skip the children\n      i += nodeDef.childCount;\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execEmbeddedViewsAction(view, action) {\n  /** @type {?} */\n  const def = view.def;\n  if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n    return;\n  }\n  for (let i = 0; i < def.nodes.length; i++) {\n    /** @type {?} */\n    const nodeDef = def.nodes[i];\n    if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n      // a leaf\n      /** @type {?} */\n      const embeddedViews = /** @type {?} */asElementData(view, i).viewContainer._embeddedViews;\n      for (let k = 0; k < embeddedViews.length; k++) {\n        callViewAction(embeddedViews[k], action);\n      }\n    } else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n      // a parent with leafs\n      // no child is a component,\n      // then skip the children\n      i += nodeDef.childCount;\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction callViewAction(view, action) {\n  /** @type {?} */\n  const viewState = view.state;\n  switch (action) {\n    case ViewAction.CheckNoChanges:\n      if ((viewState & 128 /* Destroyed */) === 0) {\n        if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n          checkNoChangesView(view);\n        } else if (viewState & 64 /* CheckProjectedViews */) {\n          execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n        }\n      }\n      break;\n    case ViewAction.CheckNoChangesProjectedViews:\n      if ((viewState & 128 /* Destroyed */) === 0) {\n        if (viewState & 32 /* CheckProjectedView */) {\n          checkNoChangesView(view);\n        } else if (viewState & 64 /* CheckProjectedViews */) {\n          execProjectedViewsAction(view, action);\n        }\n      }\n      break;\n    case ViewAction.CheckAndUpdate:\n      if ((viewState & 128 /* Destroyed */) === 0) {\n        if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n          checkAndUpdateView(view);\n        } else if (viewState & 64 /* CheckProjectedViews */) {\n          execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n        }\n      }\n      break;\n    case ViewAction.CheckAndUpdateProjectedViews:\n      if ((viewState & 128 /* Destroyed */) === 0) {\n        if (viewState & 32 /* CheckProjectedView */) {\n          checkAndUpdateView(view);\n        } else if (viewState & 64 /* CheckProjectedViews */) {\n          execProjectedViewsAction(view, action);\n        }\n      }\n      break;\n    case ViewAction.Destroy:\n      // Note: destroyView recurses over all views,\n      // so we don't need to special case projected views here.\n      destroyView(view);\n      break;\n    case ViewAction.CreateViewNodes:\n      createViewNodes(view);\n      break;\n  }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execProjectedViewsAction(view, action) {\n  execEmbeddedViewsAction(view, action);\n  execComponentViewsAction(view, action);\n}\n/**\n * @param {?} view\n * @param {?} queryFlags\n * @param {?} staticDynamicQueryFlag\n * @param {?} checkType\n * @return {?}\n */\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n  if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n    return;\n  }\n  /** @type {?} */\n  const nodeCount = view.def.nodes.length;\n  for (let i = 0; i < nodeCount; i++) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[i];\n    if (nodeDef.flags & queryFlags && nodeDef.flags & staticDynamicQueryFlag) {\n      Services.setCurrentNode(view, nodeDef.nodeIndex);\n      switch (checkType) {\n        case 0 /* CheckAndUpdate */:\n          checkAndUpdateQuery(view, nodeDef);\n          break;\n        case 1 /* CheckNoChanges */:\n          checkNoChangesQuery(view, nodeDef);\n          break;\n      }\n    }\n    if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n      // no child has a matching query\n      // then skip the children\n      i += nodeDef.childCount;\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet initialized = false;\n/**\n * @return {?}\n */\nfunction initServicesIfNeeded() {\n  if (initialized) {\n    return;\n  }\n  initialized = true;\n  /** @type {?} */\n  const services = isDevMode() ? createDebugServices() : createProdServices();\n  Services.setCurrentNode = services.setCurrentNode;\n  Services.createRootView = services.createRootView;\n  Services.createEmbeddedView = services.createEmbeddedView;\n  Services.createComponentView = services.createComponentView;\n  Services.createNgModuleRef = services.createNgModuleRef;\n  Services.overrideProvider = services.overrideProvider;\n  Services.overrideComponentView = services.overrideComponentView;\n  Services.clearOverrides = services.clearOverrides;\n  Services.checkAndUpdateView = services.checkAndUpdateView;\n  Services.checkNoChangesView = services.checkNoChangesView;\n  Services.destroyView = services.destroyView;\n  Services.resolveDep = resolveDep;\n  Services.createDebugContext = services.createDebugContext;\n  Services.handleEvent = services.handleEvent;\n  Services.updateDirectives = services.updateDirectives;\n  Services.updateRenderer = services.updateRenderer;\n  Services.dirtyParentQueries = dirtyParentQueries;\n}\n/**\n * @return {?}\n */\nfunction createProdServices() {\n  return {\n    setCurrentNode: () => {},\n    createRootView: createProdRootView,\n    createEmbeddedView: createEmbeddedView,\n    createComponentView: createComponentView,\n    createNgModuleRef: createNgModuleRef,\n    overrideProvider: NOOP,\n    overrideComponentView: NOOP,\n    clearOverrides: NOOP,\n    checkAndUpdateView: checkAndUpdateView,\n    checkNoChangesView: checkNoChangesView,\n    destroyView: destroyView,\n    createDebugContext: (view, nodeIndex) => new DebugContext_(view, nodeIndex),\n    handleEvent: (view, nodeIndex, eventName, event) => view.def.handleEvent(view, nodeIndex, eventName, event),\n    updateDirectives: (view, checkType) => view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view),\n    updateRenderer: (view, checkType) => view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode : prodCheckNoChangesNode, view)\n  };\n}\n/**\n * @return {?}\n */\nfunction createDebugServices() {\n  return {\n    setCurrentNode: debugSetCurrentNode,\n    createRootView: debugCreateRootView,\n    createEmbeddedView: debugCreateEmbeddedView,\n    createComponentView: debugCreateComponentView,\n    createNgModuleRef: debugCreateNgModuleRef,\n    overrideProvider: debugOverrideProvider,\n    overrideComponentView: debugOverrideComponentView,\n    clearOverrides: debugClearOverrides,\n    checkAndUpdateView: debugCheckAndUpdateView,\n    checkNoChangesView: debugCheckNoChangesView,\n    destroyView: debugDestroyView,\n    createDebugContext: (view, nodeIndex) => new DebugContext_(view, nodeIndex),\n    handleEvent: debugHandleEvent,\n    updateDirectives: debugUpdateDirectives,\n    updateRenderer: debugUpdateRenderer\n  };\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n  /** @type {?} */\n  const rendererFactory = ngModule.injector.get(RendererFactory2);\n  return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n  /** @type {?} */\n  const rendererFactory = ngModule.injector.get(RendererFactory2);\n  /** @type {?} */\n  const root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n  /** @type {?} */\n  const defWithOverride = applyProviderOverridesToView(def);\n  return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n}\n/**\n * @param {?} elInjector\n * @param {?} ngModule\n * @param {?} rendererFactory\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @return {?}\n */\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n  /** @type {?} */\n  const sanitizer = ngModule.injector.get(Sanitizer);\n  /** @type {?} */\n  const errorHandler = ngModule.injector.get(ErrorHandler);\n  /** @type {?} */\n  const renderer = rendererFactory.createRenderer(null, null);\n  return {\n    ngModule,\n    injector: elInjector,\n    projectableNodes,\n    selectorOrNode: rootSelectorOrNode,\n    sanitizer,\n    rendererFactory,\n    renderer,\n    errorHandler\n  };\n}\n/**\n * @param {?} parentView\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef$$1, context) {\n  /** @type {?} */\n  const defWithOverride = applyProviderOverridesToView(viewDef$$1);\n  return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction debugCreateComponentView(parentView, nodeDef, viewDef$$1, hostElement) {\n  /** @type {?} */\n  const overrideComponentView = viewDefOverrides.get( /** @type {?} */ /** @type {?} */ /** @type {?} */nodeDef.element.componentProvider.provider.token);\n  if (overrideComponentView) {\n    viewDef$$1 = overrideComponentView;\n  } else {\n    viewDef$$1 = applyProviderOverridesToView(viewDef$$1);\n  }\n  return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef$$1, hostElement]);\n}\n/**\n * @param {?} moduleType\n * @param {?} parentInjector\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n  /** @type {?} */\n  const defWithOverride = applyProviderOverridesToNgModule(def);\n  return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n}\n/** @type {?} */\nconst providerOverrides = new Map();\n/** @type {?} */\nconst providerOverridesWithScope = new Map();\n/** @type {?} */\nconst viewDefOverrides = new Map();\n/**\n * @param {?} override\n * @return {?}\n */\nfunction debugOverrideProvider(override) {\n  providerOverrides.set(override.token, override);\n  /** @type {?} */\n  let injectableDef;\n  if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) && typeof injectableDef.providedIn === 'function') {\n    providerOverridesWithScope.set( /** @type {?} */override.token, override);\n  }\n}\n/**\n * @param {?} comp\n * @param {?} compFactory\n * @return {?}\n */\nfunction debugOverrideComponentView(comp, compFactory) {\n  /** @type {?} */\n  const hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n  /** @type {?} */\n  const compViewDef = resolveDefinition( /** @type {?} */ /** @type {?} */hostViewDef.nodes[0].element.componentView);\n  viewDefOverrides.set(comp, compViewDef);\n}\n/**\n * @return {?}\n */\nfunction debugClearOverrides() {\n  providerOverrides.clear();\n  providerOverridesWithScope.clear();\n  viewDefOverrides.clear();\n}\n// Notes about the algorithm:\n// 1) Locate the providers of an element and check if one of them was overwritten\n// 2) Change the providers of that element\n//\n// We only create new datastructures if we need to, to keep perf impact\n// reasonable.\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToView(def) {\n  if (providerOverrides.size === 0) {\n    return def;\n  }\n  /** @type {?} */\n  const elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n  if (elementIndicesWithOverwrittenProviders.length === 0) {\n    return def;\n  }\n  // clone the whole view definition,\n  // as it maintains references between the nodes that are hard to update.\n  def = /** @type {?} */def.factory(() => NOOP);\n  for (let i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n    applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n  }\n  return def;\n  /**\n   * @param {?} def\n   * @return {?}\n   */\n  function findElementIndicesWithOverwrittenProviders(def) {\n    /** @type {?} */\n    const elIndicesWithOverwrittenProviders = [];\n    /** @type {?} */\n    let lastElementDef = null;\n    for (let i = 0; i < def.nodes.length; i++) {\n      /** @type {?} */\n      const nodeDef = def.nodes[i];\n      if (nodeDef.flags & 1 /* TypeElement */) {\n        lastElementDef = nodeDef;\n      }\n      if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ && providerOverrides.has( /** @type {?} */nodeDef.provider.token)) {\n        elIndicesWithOverwrittenProviders.push( /** @type {?} */lastElementDef.nodeIndex);\n        lastElementDef = null;\n      }\n    }\n    return elIndicesWithOverwrittenProviders;\n  }\n  /**\n   * @param {?} viewDef\n   * @param {?} elIndex\n   * @return {?}\n   */\n  function applyProviderOverridesToElement(viewDef$$1, elIndex) {\n    for (let i = elIndex + 1; i < viewDef$$1.nodes.length; i++) {\n      /** @type {?} */\n      const nodeDef = viewDef$$1.nodes[i];\n      if (nodeDef.flags & 1 /* TypeElement */) {\n        // stop at the next element\n        return;\n      }\n      if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n        /** @type {?} */\n        const provider = /** @type {?} */nodeDef.provider;\n        /** @type {?} */\n        const override = providerOverrides.get(provider.token);\n        if (override) {\n          nodeDef.flags = nodeDef.flags & ~3840 /* CatProviderNoDirective */ | override.flags;\n          provider.deps = splitDepsDsl(override.deps);\n          provider.value = override.value;\n        }\n      }\n    }\n  }\n}\n// Notes about the algorithm:\n// We only create new datastructures if we need to, to keep perf impact\n// reasonable.\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToNgModule(def) {\n  const {\n    hasOverrides,\n    hasDeprecatedOverrides\n  } = calcHasOverrides(def);\n  if (!hasOverrides) {\n    return def;\n  }\n  // clone the whole view definition,\n  // as it maintains references between the nodes that are hard to update.\n  def = /** @type {?} */def.factory(() => NOOP);\n  applyProviderOverrides(def);\n  return def;\n  /**\n   * @param {?} def\n   * @return {?}\n   */\n  function calcHasOverrides(def) {\n    /** @type {?} */\n    let hasOverrides = false;\n    /** @type {?} */\n    let hasDeprecatedOverrides = false;\n    if (providerOverrides.size === 0) {\n      return {\n        hasOverrides,\n        hasDeprecatedOverrides\n      };\n    }\n    def.providers.forEach(node => {\n      /** @type {?} */\n      const override = providerOverrides.get(node.token);\n      if (node.flags & 3840 /* CatProviderNoDirective */ && override) {\n        hasOverrides = true;\n        hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n      }\n    });\n    def.modules.forEach(module => {\n      providerOverridesWithScope.forEach((override, token) => {\n        if ( /** @type {?} */getInjectableDef(token).providedIn === module) {\n          hasOverrides = true;\n          hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n        }\n      });\n    });\n    return {\n      hasOverrides,\n      hasDeprecatedOverrides\n    };\n  }\n  /**\n   * @param {?} def\n   * @return {?}\n   */\n  function applyProviderOverrides(def) {\n    for (let i = 0; i < def.providers.length; i++) {\n      /** @type {?} */\n      const provider = def.providers[i];\n      if (hasDeprecatedOverrides) {\n        // We had a bug where me made\n        // all providers lazy. Keep this logic behind a flag\n        // for migrating existing users.\n        provider.flags |= 4096 /* LazyProvider */;\n      }\n      /** @type {?} */\n      const override = providerOverrides.get(provider.token);\n      if (override) {\n        provider.flags = provider.flags & ~3840 /* CatProviderNoDirective */ | override.flags;\n        provider.deps = splitDepsDsl(override.deps);\n        provider.value = override.value;\n      }\n    }\n    if (providerOverridesWithScope.size > 0) {\n      /** @type {?} */\n      let moduleSet = new Set(def.modules);\n      providerOverridesWithScope.forEach((override, token) => {\n        if (moduleSet.has( /** @type {?} */getInjectableDef(token).providedIn)) {\n          /** @type {?} */\n          let provider = {\n            token: token,\n            flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\n            deps: splitDepsDsl(override.deps),\n            value: override.value,\n            index: def.providers.length\n          };\n          def.providers.push(provider);\n          def.providersByKey[tokenKey(token)] = provider;\n        }\n      });\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n  /** @type {?} */\n  const nodeDef = view.def.nodes[checkIndex];\n  checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n  return nodeDef.flags & 224 /* CatPureExpression */ ? asPureExpressionData(view, checkIndex).value : undefined;\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n  /** @type {?} */\n  const nodeDef = view.def.nodes[checkIndex];\n  checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n  return nodeDef.flags & 224 /* CatPureExpression */ ? asPureExpressionData(view, checkIndex).value : undefined;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckAndUpdateView(view) {\n  return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckNoChangesView(view) {\n  return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugDestroyView(view) {\n  return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n}\n/** @enum {number} */\nconst DebugAction = {\n  create: 0,\n  detectChanges: 1,\n  checkNoChanges: 2,\n  destroy: 3,\n  handleEvent: 4\n};\nDebugAction[DebugAction.create] = 'create';\nDebugAction[DebugAction.detectChanges] = 'detectChanges';\nDebugAction[DebugAction.checkNoChanges] = 'checkNoChanges';\nDebugAction[DebugAction.destroy] = 'destroy';\nDebugAction[DebugAction.handleEvent] = 'handleEvent';\n/** @type {?} */\nlet _currentAction;\n/** @type {?} */\nlet _currentView;\n/** @type {?} */\nlet _currentNodeIndex;\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction debugSetCurrentNode(view, nodeIndex) {\n  _currentView = view;\n  _currentNodeIndex = nodeIndex;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\n  debugSetCurrentNode(view, nodeIndex);\n  return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateDirectives(view, checkType) {\n  if (view.state & 128 /* Destroyed */) {\n    throw viewDestroyedError(DebugAction[_currentAction]);\n  }\n  debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n  return view.def.updateDirectives(debugCheckDirectivesFn, view);\n  /**\n   * @param {?} view\n   * @param {?} nodeIndex\n   * @param {?} argStyle\n   * @param {...?} values\n   * @return {?}\n   */\n  function debugCheckDirectivesFn(view, nodeIndex, argStyle, ...values) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[nodeIndex];\n    if (checkType === 0 /* CheckAndUpdate */) {\n      debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n    } else {\n      debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n    }\n    if (nodeDef.flags & 16384 /* TypeDirective */) {\n      debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n    }\n    return nodeDef.flags & 224 /* CatPureExpression */ ? asPureExpressionData(view, nodeDef.nodeIndex).value : undefined;\n  }\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateRenderer(view, checkType) {\n  if (view.state & 128 /* Destroyed */) {\n    throw viewDestroyedError(DebugAction[_currentAction]);\n  }\n  debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n  return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n  /**\n   * @param {?} view\n   * @param {?} nodeIndex\n   * @param {?} argStyle\n   * @param {...?} values\n   * @return {?}\n   */\n  function debugCheckRenderNodeFn(view, nodeIndex, argStyle, ...values) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[nodeIndex];\n    if (checkType === 0 /* CheckAndUpdate */) {\n      debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n    } else {\n      debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n    }\n    if (nodeDef.flags & 3 /* CatRenderNode */) {\n      debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n    }\n    return nodeDef.flags & 224 /* CatPureExpression */ ? asPureExpressionData(view, nodeDef.nodeIndex).value : undefined;\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} givenValues\n * @return {?}\n */\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n  /** @type {?} */\n  const changed = /** @type {?} */checkAndUpdateNode(view, nodeDef, argStyle, ...givenValues);\n  if (changed) {\n    /** @type {?} */\n    const values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n    if (nodeDef.flags & 16384 /* TypeDirective */) {\n      /** @type {?} */\n      const bindingValues = {};\n      for (let i = 0; i < nodeDef.bindings.length; i++) {\n        /** @type {?} */\n        const binding = nodeDef.bindings[i];\n        /** @type {?} */\n        const value = values[i];\n        if (binding.flags & 8 /* TypeProperty */) {\n          bindingValues[normalizeDebugBindingName( /** @type {?} */binding.nonMinifiedName)] = normalizeDebugBindingValue(value);\n        }\n      }\n      /** @type {?} */\n      const elDef = /** @type {?} */nodeDef.parent;\n      /** @type {?} */\n      const el = asElementData(view, elDef.nodeIndex).renderElement;\n      if (! /** @type {?} */elDef.element.name) {\n        // a comment.\n        view.renderer.setValue(el, `bindings=${JSON.stringify(bindingValues, null, 2)}`);\n      } else {\n        // a regular element.\n        for (let attr in bindingValues) {\n          /** @type {?} */\n          const value = bindingValues[attr];\n          if (value != null) {\n            view.renderer.setAttribute(el, attr, value);\n          } else {\n            view.renderer.removeAttribute(el, attr);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} values\n * @return {?}\n */\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n  /** @type {?} */checkNoChangesNode(view, nodeDef, argStyle, ...values);\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextDirectiveWithBinding(view, nodeIndex) {\n  for (let i = nodeIndex; i < view.def.nodes.length; i++) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[i];\n    if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n      return i;\n    }\n  }\n  return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\n  for (let i = nodeIndex; i < view.def.nodes.length; i++) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[i];\n    if (nodeDef.flags & 3 /* CatRenderNode */ && nodeDef.bindings && nodeDef.bindings.length) {\n      return i;\n    }\n  }\n  return null;\n}\nclass DebugContext_ {\n  /**\n   * @param {?} view\n   * @param {?} nodeIndex\n   */\n  constructor(view, nodeIndex) {\n    this.view = view;\n    this.nodeIndex = nodeIndex;\n    if (nodeIndex == null) {\n      this.nodeIndex = nodeIndex = 0;\n    }\n    this.nodeDef = view.def.nodes[nodeIndex];\n    /** @type {?} */\n    let elDef = this.nodeDef;\n    /** @type {?} */\n    let elView = view;\n    while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n      elDef = /** @type {?} */elDef.parent;\n    }\n    if (!elDef) {\n      while (!elDef && elView) {\n        elDef = /** @type {?} */viewParentEl(elView);\n        elView = /** @type {?} */elView.parent;\n      }\n    }\n    this.elDef = elDef;\n    this.elView = elView;\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  get elOrCompView() {\n    // Has to be done lazily as we use the DebugContext also during creation of elements...\n    return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n  }\n  /**\n   * @return {?}\n   */\n  get injector() {\n    return createInjector$1(this.elView, this.elDef);\n  }\n  /**\n   * @return {?}\n   */\n  get component() {\n    return this.elOrCompView.component;\n  }\n  /**\n   * @return {?}\n   */\n  get context() {\n    return this.elOrCompView.context;\n  }\n  /**\n   * @return {?}\n   */\n  get providerTokens() {\n    /** @type {?} */\n    const tokens = [];\n    if (this.elDef) {\n      for (let i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n        /** @type {?} */\n        const childDef = this.elView.def.nodes[i];\n        if (childDef.flags & 20224 /* CatProvider */) {\n          tokens.push( /** @type {?} */childDef.provider.token);\n        }\n        i += childDef.childCount;\n      }\n    }\n    return tokens;\n  }\n  /**\n   * @return {?}\n   */\n  get references() {\n    /** @type {?} */\n    const references = {};\n    if (this.elDef) {\n      collectReferences(this.elView, this.elDef, references);\n      for (let i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n        /** @type {?} */\n        const childDef = this.elView.def.nodes[i];\n        if (childDef.flags & 20224 /* CatProvider */) {\n          collectReferences(this.elView, childDef, references);\n        }\n        i += childDef.childCount;\n      }\n    }\n    return references;\n  }\n  /**\n   * @return {?}\n   */\n  get componentRenderElement() {\n    /** @type {?} */\n    const elData = findHostElement(this.elOrCompView);\n    return elData ? elData.renderElement : undefined;\n  }\n  /**\n   * @return {?}\n   */\n  get renderNode() {\n    return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) : renderNode(this.elView, this.elDef);\n  }\n  /**\n   * @param {?} console\n   * @param {...?} values\n   * @return {?}\n   */\n  logError(console, ...values) {\n    /** @type {?} */\n    let logViewDef;\n    /** @type {?} */\n    let logNodeIndex;\n    if (this.nodeDef.flags & 2 /* TypeText */) {\n      logViewDef = this.view.def;\n      logNodeIndex = this.nodeDef.nodeIndex;\n    } else {\n      logViewDef = this.elView.def;\n      logNodeIndex = this.elDef.nodeIndex;\n    }\n    // Note: we only generate a log function for text and element nodes\n    // to make the generated code as small as possible.\n    /** @type {?} */\n    const renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n    /** @type {?} */\n    let currRenderNodeIndex = -1;\n    /** @type {?} */\n    let nodeLogger = () => {\n      currRenderNodeIndex++;\n      if (currRenderNodeIndex === renderNodeIndex) {\n        return console.error.bind(console, ...values);\n      } else {\n        return NOOP;\n      }\n    };\n    /** @type {?} */logViewDef.factory(nodeLogger);\n    if (currRenderNodeIndex < renderNodeIndex) {\n      console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n      /** @type {?} */console.error(...values);\n    }\n  }\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction getRenderNodeIndex(viewDef$$1, nodeIndex) {\n  /** @type {?} */\n  let renderNodeIndex = -1;\n  for (let i = 0; i <= nodeIndex; i++) {\n    /** @type {?} */\n    const nodeDef = viewDef$$1.nodes[i];\n    if (nodeDef.flags & 3 /* CatRenderNode */) {\n      renderNodeIndex++;\n    }\n  }\n  return renderNodeIndex;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction findHostElement(view) {\n  while (view && !isComponentView(view)) {\n    view = /** @type {?} */view.parent;\n  }\n  if (view.parent) {\n    return asElementData(view.parent, /** @type {?} */viewParentEl(view).nodeIndex);\n  }\n  return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} references\n * @return {?}\n */\nfunction collectReferences(view, nodeDef, references) {\n  for (let refName in nodeDef.references) {\n    references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n  }\n}\n/**\n * @param {?} action\n * @param {?} fn\n * @param {?} self\n * @param {?} args\n * @return {?}\n */\nfunction callWithDebugContext(action, fn, self, args) {\n  /** @type {?} */\n  const oldAction = _currentAction;\n  /** @type {?} */\n  const oldView = _currentView;\n  /** @type {?} */\n  const oldNodeIndex = _currentNodeIndex;\n  try {\n    _currentAction = action;\n    /** @type {?} */\n    const result = fn.apply(self, args);\n    _currentView = oldView;\n    _currentNodeIndex = oldNodeIndex;\n    _currentAction = oldAction;\n    return result;\n  } catch (e) {\n    if (isViewDebugError(e) || !_currentView) {\n      throw e;\n    }\n    throw viewWrappedDebugError(e, /** @type {?} */getCurrentDebugContext());\n  }\n}\n/**\n * @return {?}\n */\nfunction getCurrentDebugContext() {\n  return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n}\nclass DebugRendererFactory2 {\n  /**\n   * @param {?} delegate\n   */\n  constructor(delegate) {\n    this.delegate = delegate;\n  }\n  /**\n   * @param {?} element\n   * @param {?} renderData\n   * @return {?}\n   */\n  createRenderer(element, renderData) {\n    return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n  }\n  /**\n   * @return {?}\n   */\n  begin() {\n    if (this.delegate.begin) {\n      this.delegate.begin();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  end() {\n    if (this.delegate.end) {\n      this.delegate.end();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  whenRenderingDone() {\n    if (this.delegate.whenRenderingDone) {\n      return this.delegate.whenRenderingDone();\n    }\n    return Promise.resolve(null);\n  }\n}\nclass DebugRenderer2 {\n  /**\n   * @param {?} delegate\n   */\n  constructor(delegate) {\n    this.delegate = delegate;\n    /**\n     * Factory function used to create a `DebugContext` when a node is created.\n     *\n     * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n     *\n     * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n     * or a Render context.\n     */\n    this.debugContextFactory = getCurrentDebugContext;\n    this.data = this.delegate.data;\n  }\n  /**\n   * @private\n   * @param {?} nativeElement\n   * @return {?}\n   */\n  createDebugContext(nativeElement) {\n    return this.debugContextFactory(nativeElement);\n  }\n  /**\n   * @param {?} node\n   * @return {?}\n   */\n  destroyNode(node) {\n    removeDebugNodeFromIndex( /** @type {?} */getDebugNode(node));\n    if (this.delegate.destroyNode) {\n      this.delegate.destroyNode(node);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  destroy() {\n    this.delegate.destroy();\n  }\n  /**\n   * @param {?} name\n   * @param {?=} namespace\n   * @return {?}\n   */\n  createElement(name, namespace) {\n    /** @type {?} */\n    const el = this.delegate.createElement(name, namespace);\n    /** @type {?} */\n    const debugCtx = this.createDebugContext(el);\n    if (debugCtx) {\n      /** @type {?} */\n      const debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);\n      /** @type {?} */debugEl.name = name;\n      indexDebugNode(debugEl);\n    }\n    return el;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  createComment(value) {\n    /** @type {?} */\n    const comment = this.delegate.createComment(value);\n    /** @type {?} */\n    const debugCtx = this.createDebugContext(comment);\n    if (debugCtx) {\n      indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));\n    }\n    return comment;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  createText(value) {\n    /** @type {?} */\n    const text = this.delegate.createText(value);\n    /** @type {?} */\n    const debugCtx = this.createDebugContext(text);\n    if (debugCtx) {\n      indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));\n    }\n    return text;\n  }\n  /**\n   * @param {?} parent\n   * @param {?} newChild\n   * @return {?}\n   */\n  appendChild(parent, newChild) {\n    /** @type {?} */\n    const debugEl = getDebugNode(parent);\n    /** @type {?} */\n    const debugChildEl = getDebugNode(newChild);\n    if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n      debugEl.addChild(debugChildEl);\n    }\n    this.delegate.appendChild(parent, newChild);\n  }\n  /**\n   * @param {?} parent\n   * @param {?} newChild\n   * @param {?} refChild\n   * @return {?}\n   */\n  insertBefore(parent, newChild, refChild) {\n    /** @type {?} */\n    const debugEl = getDebugNode(parent);\n    /** @type {?} */\n    const debugChildEl = getDebugNode(newChild);\n    /** @type {?} */\n    const debugRefEl = /** @type {?} */getDebugNode(refChild);\n    if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n      debugEl.insertBefore(debugRefEl, debugChildEl);\n    }\n    this.delegate.insertBefore(parent, newChild, refChild);\n  }\n  /**\n   * @param {?} parent\n   * @param {?} oldChild\n   * @return {?}\n   */\n  removeChild(parent, oldChild) {\n    /** @type {?} */\n    const debugEl = getDebugNode(parent);\n    /** @type {?} */\n    const debugChildEl = getDebugNode(oldChild);\n    if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n      debugEl.removeChild(debugChildEl);\n    }\n    this.delegate.removeChild(parent, oldChild);\n  }\n  /**\n   * @param {?} selectorOrNode\n   * @param {?=} preserveContent\n   * @return {?}\n   */\n  selectRootElement(selectorOrNode, preserveContent) {\n    /** @type {?} */\n    const el = this.delegate.selectRootElement(selectorOrNode, preserveContent);\n    /** @type {?} */\n    const debugCtx = getCurrentDebugContext();\n    if (debugCtx) {\n      indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));\n    }\n    return el;\n  }\n  /**\n   * @param {?} el\n   * @param {?} name\n   * @param {?} value\n   * @param {?=} namespace\n   * @return {?}\n   */\n  setAttribute(el, name, value, namespace) {\n    /** @type {?} */\n    const debugEl = getDebugNode(el);\n    if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n      /** @type {?} */\n      const fullName = namespace ? namespace + ':' + name : name;\n      debugEl.attributes[fullName] = value;\n    }\n    this.delegate.setAttribute(el, name, value, namespace);\n  }\n  /**\n   * @param {?} el\n   * @param {?} name\n   * @param {?=} namespace\n   * @return {?}\n   */\n  removeAttribute(el, name, namespace) {\n    /** @type {?} */\n    const debugEl = getDebugNode(el);\n    if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n      /** @type {?} */\n      const fullName = namespace ? namespace + ':' + name : name;\n      debugEl.attributes[fullName] = null;\n    }\n    this.delegate.removeAttribute(el, name, namespace);\n  }\n  /**\n   * @param {?} el\n   * @param {?} name\n   * @return {?}\n   */\n  addClass(el, name) {\n    /** @type {?} */\n    const debugEl = getDebugNode(el);\n    if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n      debugEl.classes[name] = true;\n    }\n    this.delegate.addClass(el, name);\n  }\n  /**\n   * @param {?} el\n   * @param {?} name\n   * @return {?}\n   */\n  removeClass(el, name) {\n    /** @type {?} */\n    const debugEl = getDebugNode(el);\n    if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n      debugEl.classes[name] = false;\n    }\n    this.delegate.removeClass(el, name);\n  }\n  /**\n   * @param {?} el\n   * @param {?} style\n   * @param {?} value\n   * @param {?} flags\n   * @return {?}\n   */\n  setStyle(el, style, value, flags) {\n    /** @type {?} */\n    const debugEl = getDebugNode(el);\n    if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n      debugEl.styles[style] = value;\n    }\n    this.delegate.setStyle(el, style, value, flags);\n  }\n  /**\n   * @param {?} el\n   * @param {?} style\n   * @param {?} flags\n   * @return {?}\n   */\n  removeStyle(el, style, flags) {\n    /** @type {?} */\n    const debugEl = getDebugNode(el);\n    if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n      debugEl.styles[style] = null;\n    }\n    this.delegate.removeStyle(el, style, flags);\n  }\n  /**\n   * @param {?} el\n   * @param {?} name\n   * @param {?} value\n   * @return {?}\n   */\n  setProperty(el, name, value) {\n    /** @type {?} */\n    const debugEl = getDebugNode(el);\n    if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n      debugEl.properties[name] = value;\n    }\n    this.delegate.setProperty(el, name, value);\n  }\n  /**\n   * @param {?} target\n   * @param {?} eventName\n   * @param {?} callback\n   * @return {?}\n   */\n  listen(target, eventName, callback) {\n    if (typeof target !== 'string') {\n      /** @type {?} */\n      const debugEl = getDebugNode(target);\n      if (debugEl) {\n        debugEl.listeners.push(new EventListener(eventName, callback));\n      }\n    }\n    return this.delegate.listen(target, eventName, callback);\n  }\n  /**\n   * @param {?} node\n   * @return {?}\n   */\n  parentNode(node) {\n    return this.delegate.parentNode(node);\n  }\n  /**\n   * @param {?} node\n   * @return {?}\n   */\n  nextSibling(node) {\n    return this.delegate.nextSibling(node);\n  }\n  /**\n   * @param {?} node\n   * @param {?} value\n   * @return {?}\n   */\n  setValue(node, value) {\n    return this.delegate.setValue(node, value);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} override\n * @return {?}\n */\nfunction overrideProvider(override) {\n  initServicesIfNeeded();\n  return Services.overrideProvider(override);\n}\n/**\n * @param {?} comp\n * @param {?} componentFactory\n * @return {?}\n */\nfunction overrideComponentView(comp, componentFactory) {\n  initServicesIfNeeded();\n  return Services.overrideComponentView(comp, componentFactory);\n}\n/**\n * @return {?}\n */\nfunction clearOverrides() {\n  initServicesIfNeeded();\n  return Services.clearOverrides();\n}\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} ngModuleType\n * @param {?} bootstrapComponents\n * @param {?} defFactory\n * @return {?}\n */\nfunction createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n  return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction cloneNgModuleDefinition(def) {\n  /** @type {?} */\n  const providers = Array.from(def.providers);\n  /** @type {?} */\n  const modules = Array.from(def.modules);\n  /** @type {?} */\n  const providersByKey = {};\n  for (const key in def.providersByKey) {\n    providersByKey[key] = def.providersByKey[key];\n  }\n  return {\n    factory: def.factory,\n    isRoot: def.isRoot,\n    providers,\n    modules,\n    providersByKey\n  };\n}\nclass NgModuleFactory_ extends NgModuleFactory {\n  /**\n   * @param {?} moduleType\n   * @param {?} _bootstrapComponents\n   * @param {?} _ngModuleDefFactory\n   */\n  constructor(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n    // Attention: this ctor is called as top level function.\n    // Putting any logic in here will destroy closure tree shaking!\n    super();\n    this.moduleType = moduleType;\n    this._bootstrapComponents = _bootstrapComponents;\n    this._ngModuleDefFactory = _ngModuleDefFactory;\n  }\n  /**\n   * @param {?} parentInjector\n   * @return {?}\n   */\n  create(parentInjector) {\n    initServicesIfNeeded();\n    // Clone the NgModuleDefinition so that any tree shakeable provider definition\n    // added to this instance of the NgModuleRef doesn't affect the cached copy.\n    // See https://github.com/angular/angular/issues/25018.\n    /** @type {?} */\n    const def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));\n    return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APPLICATION_MODULE_PROVIDERS as ɵangular_packages_core_core_t, _iterableDiffersFactory as ɵangular_packages_core_core_q, _keyValueDiffersFactory as ɵangular_packages_core_core_r, _localeFactory as ɵangular_packages_core_core_s, _appIdRandomProviderFactory as ɵangular_packages_core_core_h, DefaultIterableDifferFactory as ɵangular_packages_core_core_o, DefaultKeyValueDifferFactory as ɵangular_packages_core_core_p, DebugElement__PRE_R3__ as ɵangular_packages_core_core_n, DebugNode__PRE_R3__ as ɵangular_packages_core_core_m, NullInjector as ɵangular_packages_core_core_c, injectInjectorOnly as ɵangular_packages_core_core_d, ReflectiveInjector_ as ɵangular_packages_core_core_e, ReflectiveDependency as ɵangular_packages_core_core_f, resolveReflectiveProviders as ɵangular_packages_core_core_g, getModuleFactory__PRE_R3__ as ɵangular_packages_core_core_l, wtfEnabled as ɵangular_packages_core_core_u, createScope as ɵangular_packages_core_core_w, detectWTF as ɵangular_packages_core_core_v, endTimeRange as ɵangular_packages_core_core_z, leave as ɵangular_packages_core_core_x, startTimeRange as ɵangular_packages_core_core_y, injectAttributeImpl as ɵangular_packages_core_core_bc, NG_INJECTABLE_DEF as ɵangular_packages_core_core_bj, getLView as ɵangular_packages_core_core_bd, getPreviousOrParentTNode as ɵangular_packages_core_core_be, nextContextImpl as ɵangular_packages_core_core_bf, BoundPlayerFactory as ɵangular_packages_core_core_bi, loadInternal as ɵangular_packages_core_core_bm, createElementRef as ɵangular_packages_core_core_i, createTemplateRef as ɵangular_packages_core_core_j, createViewRef as ɵangular_packages_core_core_k, makeParamDecorator as ɵangular_packages_core_core_a, makePropDecorator as ɵangular_packages_core_core_b, getClosureSafeProperty as ɵangular_packages_core_core_bk, _def as ɵangular_packages_core_core_ba, DebugContext as ɵangular_packages_core_core_bb, createPlatform, assertPlatform, destroyPlatform, getPlatform, PlatformRef, ApplicationRef, createPlatformFactory, NgProbeToken, enableProdMode, isDevMode, APP_ID, PACKAGE_ROOT_URL, PLATFORM_INITIALIZER, PLATFORM_ID, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationInitStatus, DebugElement, DebugNode, asNativeElements, getDebugNode, Testability, TestabilityRegistry, setTestabilityGetter, TRANSLATIONS, TRANSLATIONS_FORMAT, LOCALE_ID, MissingTranslationStrategy, ApplicationModule, wtfCreateScope, wtfLeave, wtfStartTimeRange, wtfEndTimeRange, Type, EventEmitter, ErrorHandler, Sanitizer, SecurityContext, ANALYZE_FOR_ENTRY_COMPONENTS, Attribute, ContentChild, ContentChildren, Query, ViewChild, ViewChildren, Component, Directive, HostBinding, HostListener, Input, Output, Pipe, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, NgModule, ViewEncapsulation, Version, VERSION, defineInjectable, defineInjector, forwardRef, resolveForwardRef, Injectable, INJECTOR$1 as INJECTOR, Injector, inject, inject as ɵinject, InjectFlags, ReflectiveInjector, createInjector, ResolvedReflectiveFactory, ReflectiveKey, InjectionToken, Inject, Optional, Self, SkipSelf, Host, NgZone, NoopNgZone as ɵNoopNgZone, RenderComponentType, Renderer, Renderer2, RendererFactory2, RendererStyleFlags2, RootRenderer, COMPILER_OPTIONS, Compiler, CompilerFactory, ModuleWithComponentFactories, ComponentFactory, ComponentFactory as ɵComponentFactory, ComponentRef, ComponentFactoryResolver, ElementRef, NgModuleFactory, NgModuleRef, NgModuleFactoryLoader, getModuleFactory, QueryList$1 as QueryList, SystemJsNgModuleLoader, SystemJsNgModuleLoaderConfig, TemplateRef, ViewContainerRef, EmbeddedViewRef, ViewRef$1 as ViewRef, ChangeDetectionStrategy, ChangeDetectorRef, DefaultIterableDiffer, IterableDiffers, KeyValueDiffers, SimpleChange, WrappedValue, platformCore, ALLOW_MULTIPLE_PLATFORMS as ɵALLOW_MULTIPLE_PLATFORMS, APP_ID_RANDOM_PROVIDER as ɵAPP_ID_RANDOM_PROVIDER, defaultIterableDiffers as ɵdefaultIterableDiffers, defaultKeyValueDiffers as ɵdefaultKeyValueDiffers, devModeEqual as ɵdevModeEqual, isListLikeIterable as ɵisListLikeIterable, ChangeDetectorStatus as ɵChangeDetectorStatus, isDefaultChangeDetectionStrategy as ɵisDefaultChangeDetectionStrategy, Console as ɵConsole, getInjectableDef as ɵgetInjectableDef, setCurrentInjector as ɵsetCurrentInjector, APP_ROOT as ɵAPP_ROOT, ivyEnabled as ɵivyEnabled, CodegenComponentFactoryResolver as ɵCodegenComponentFactoryResolver, resolveComponentResources as ɵresolveComponentResources, ReflectionCapabilities as ɵReflectionCapabilities, RenderDebugInfo as ɵRenderDebugInfo, _sanitizeHtml as ɵ_sanitizeHtml, _sanitizeStyle as ɵ_sanitizeStyle, _sanitizeUrl as ɵ_sanitizeUrl, _global as ɵglobal, looseIdentical as ɵlooseIdentical, stringify as ɵstringify, makeDecorator as ɵmakeDecorator, isObservable as ɵisObservable, isPromise as ɵisPromise, clearOverrides as ɵclearOverrides, initServicesIfNeeded as ɵinitServicesIfNeeded, overrideComponentView as ɵoverrideComponentView, overrideProvider as ɵoverrideProvider, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1 as ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, defineBase as ɵdefineBase, defineComponent as ɵdefineComponent, defineDirective as ɵdefineDirective, definePipe as ɵdefinePipe, defineNgModule as ɵdefineNgModule, detectChanges as ɵdetectChanges, renderComponent as ɵrenderComponent, ComponentFactory$1 as ɵRender3ComponentFactory, ComponentRef$1 as ɵRender3ComponentRef, directiveInject as ɵdirectiveInject, injectAttribute as ɵinjectAttribute, getFactoryOf as ɵgetFactoryOf, getInheritedFactory as ɵgetInheritedFactory, templateRefExtractor as ɵtemplateRefExtractor, ProvidersFeature as ɵProvidersFeature, InheritDefinitionFeature as ɵInheritDefinitionFeature, NgOnChangesFeature as ɵNgOnChangesFeature, LifecycleHooksFeature as ɵLifecycleHooksFeature, NgModuleRef$1 as ɵRender3NgModuleRef, markDirty as ɵmarkDirty, NgModuleFactory$1 as ɵNgModuleFactory, NO_CHANGE as ɵNO_CHANGE, container as ɵcontainer, nextContext as ɵnextContext, elementStart as ɵelementStart, namespaceHTML as ɵnamespaceHTML, namespaceMathML as ɵnamespaceMathML, namespaceSVG as ɵnamespaceSVG, element as ɵelement, listener as ɵlistener, text as ɵtext, embeddedViewStart as ɵembeddedViewStart, query as ɵquery, registerContentQuery as ɵregisterContentQuery, projection as ɵprojection, bind as ɵbind, interpolation1 as ɵinterpolation1, interpolation2 as ɵinterpolation2, interpolation3 as ɵinterpolation3, interpolation4 as ɵinterpolation4, interpolation5 as ɵinterpolation5, interpolation6 as ɵinterpolation6, interpolation7 as ɵinterpolation7, interpolation8 as ɵinterpolation8, interpolationV as ɵinterpolationV, pipeBind1 as ɵpipeBind1, pipeBind2 as ɵpipeBind2, pipeBind3 as ɵpipeBind3, pipeBind4 as ɵpipeBind4, pipeBindV as ɵpipeBindV, pureFunction0 as ɵpureFunction0, pureFunction1 as ɵpureFunction1, pureFunction2 as ɵpureFunction2, pureFunction3 as ɵpureFunction3, pureFunction4 as ɵpureFunction4, pureFunction5 as ɵpureFunction5, pureFunction6 as ɵpureFunction6, pureFunction7 as ɵpureFunction7, pureFunction8 as ɵpureFunction8, pureFunctionV as ɵpureFunctionV, getCurrentView as ɵgetCurrentView, getHostElement as ɵgetHostElement, restoreView as ɵrestoreView, containerRefreshStart as ɵcontainerRefreshStart, containerRefreshEnd as ɵcontainerRefreshEnd, queryRefresh as ɵqueryRefresh, loadQueryList as ɵloadQueryList, elementEnd as ɵelementEnd, elementProperty as ɵelementProperty, componentHostSyntheticProperty as ɵcomponentHostSyntheticProperty, projectionDef as ɵprojectionDef, reference as ɵreference, enableBindings as ɵenableBindings, disableBindings as ɵdisableBindings, allocHostVars as ɵallocHostVars, elementAttribute as ɵelementAttribute, elementContainerStart as ɵelementContainerStart, elementContainerEnd as ɵelementContainerEnd, elementStyling as ɵelementStyling, elementHostAttrs as ɵelementHostAttrs, elementStylingMap as ɵelementStylingMap, elementStyleProp as ɵelementStyleProp, elementStylingApply as ɵelementStylingApply, elementClassProp as ɵelementClassProp, textBinding as ɵtextBinding, template as ɵtemplate, embeddedViewEnd as ɵembeddedViewEnd, store as ɵstore, load as ɵload, pipe as ɵpipe, whenRendered as ɵwhenRendered, i18n as ɵi18n, i18nAttributes as ɵi18nAttributes, i18nExp as ɵi18nExp, i18nStart as ɵi18nStart, i18nEnd as ɵi18nEnd, i18nApply as ɵi18nApply, i18nPostprocess as ɵi18nPostprocess, setClassMetadata as ɵsetClassMetadata, compileComponent as ɵcompileComponent, compileDirective as ɵcompileDirective, compileNgModule as ɵcompileNgModule, compileNgModuleDefs as ɵcompileNgModuleDefs, patchComponentDefWithScope as ɵpatchComponentDefWithScope, resetCompiledComponents as ɵresetCompiledComponents, compilePipe as ɵcompilePipe, sanitizeHtml as ɵsanitizeHtml, sanitizeStyle as ɵsanitizeStyle, defaultStyleSanitizer as ɵdefaultStyleSanitizer, sanitizeScript as ɵsanitizeScript, sanitizeUrl as ɵsanitizeUrl, sanitizeResourceUrl as ɵsanitizeResourceUrl, bypassSanitizationTrustHtml as ɵbypassSanitizationTrustHtml, bypassSanitizationTrustStyle as ɵbypassSanitizationTrustStyle, bypassSanitizationTrustScript as ɵbypassSanitizationTrustScript, bypassSanitizationTrustUrl as ɵbypassSanitizationTrustUrl, bypassSanitizationTrustResourceUrl as ɵbypassSanitizationTrustResourceUrl, getLContext as ɵgetLContext, bindPlayerFactory as ɵbindPlayerFactory, addPlayer as ɵaddPlayer, getPlayers as ɵgetPlayers, compileNgModuleFactory__POST_R3__ as ɵcompileNgModuleFactory__POST_R3__, SWITCH_COMPILE_COMPONENT__POST_R3__ as ɵSWITCH_COMPILE_COMPONENT__POST_R3__, SWITCH_COMPILE_DIRECTIVE__POST_R3__ as ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__, SWITCH_COMPILE_PIPE__POST_R3__ as ɵSWITCH_COMPILE_PIPE__POST_R3__, SWITCH_COMPILE_NGMODULE__POST_R3__ as ɵSWITCH_COMPILE_NGMODULE__POST_R3__, getDebugNode__POST_R3__ as ɵgetDebugNode__POST_R3__, SWITCH_COMPILE_INJECTABLE__POST_R3__ as ɵSWITCH_COMPILE_INJECTABLE__POST_R3__, SWITCH_IVY_ENABLED__POST_R3__ as ɵSWITCH_IVY_ENABLED__POST_R3__, SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ as ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__, Compiler_compileModuleSync__POST_R3__ as ɵCompiler_compileModuleSync__POST_R3__, Compiler_compileModuleAsync__POST_R3__ as ɵCompiler_compileModuleAsync__POST_R3__, Compiler_compileModuleAndAllComponentsSync__POST_R3__ as ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__, Compiler_compileModuleAndAllComponentsAsync__POST_R3__ as ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__, SWITCH_ELEMENT_REF_FACTORY__POST_R3__ as ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__, SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ as ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__, SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ as ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__, SWITCH_RENDERER2_FACTORY__POST_R3__ as ɵSWITCH_RENDERER2_FACTORY__POST_R3__, getModuleFactory__POST_R3__ as ɵgetModuleFactory__POST_R3__, publishGlobalUtil as ɵpublishGlobalUtil, publishDefaultGlobalUtils as ɵpublishDefaultGlobalUtils, SWITCH_INJECTOR_FACTORY__POST_R3__ as ɵSWITCH_INJECTOR_FACTORY__POST_R3__, registerModuleFactory as ɵregisterModuleFactory, EMPTY_ARRAY$4 as ɵEMPTY_ARRAY, EMPTY_MAP as ɵEMPTY_MAP, anchorDef as ɵand, createComponentFactory as ɵccf, createNgModuleFactory as ɵcmf, createRendererType2 as ɵcrt, directiveDef as ɵdid, elementDef as ɵeld, elementEventFullName as ɵelementEventFullName, getComponentViewDefinitionFactory as ɵgetComponentViewDefinitionFactory, inlineInterpolate as ɵinlineInterpolate, interpolate as ɵinterpolate, moduleDef as ɵmod, moduleProvideDef as ɵmpd, ngContentDef as ɵncd, nodeValue as ɵnov, pipeDef as ɵpid, providerDef as ɵprd, pureArrayDef as ɵpad, pureObjectDef as ɵpod, purePipeDef as ɵppd, queryDef as ɵqud, textDef as ɵted, unwrapValue$1 as ɵunv, viewDef as ɵvid };","map":{"version":3,"names":["Subject","Subscription","Observable","merge","share","getClosureSafeProperty","objWithPropertyToExtract","key","Error","fillProperties","target","source","hasOwnProperty","NG_COMPONENT_DEF","ngComponentDef","NG_DIRECTIVE_DEF","ngDirectiveDef","NG_INJECTABLE_DEF","ngInjectableDef","NG_INJECTOR_DEF","ngInjectorDef","NG_PIPE_DEF","ngPipeDef","NG_MODULE_DEF","ngModuleDef","NG_BASE_DEF","ngBaseDef","NG_ELEMENT_ID","__NG_ELEMENT_ID__","defineInjectable","opts","providedIn","factory","value","undefined","defineInjector","options","providers","imports","getInjectableDef","type","getInjectorDef","InjectionToken","constructor","_desc","ngMetadataName","toString","ANNOTATIONS","PARAMETERS","PROP_METADATA","makeDecorator","name","props","parentClass","additionalProcessing","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","args","call","annotationInstance","TypeDecorator","cls","annotations","Object","defineProperty","push","prototype","create","annotationCls","ctor","values","propName","makeParamDecorator","ParamDecoratorFactory","apply","ParamDecorator","annotation","unusedKey","index","parameters","length","makePropDecorator","PropDecoratorFactory","decoratorInstance","PropDecorator","meta","unshift","ANALYZE_FOR_ENTRY_COMPONENTS","Attribute","attributeName","Query","ContentChildren","selector","data","assign","first","isViewQuery","descendants","ContentChild","ViewChildren","ViewChild","ChangeDetectionStrategy","OnPush","Default","ChangeDetectorStatus","CheckOnce","Checked","CheckAlways","Detached","Errored","Destroyed","isDefaultChangeDetectionStrategy","changeDetectionStrategy","__window","window","__self","self","WorkerGlobalScope","__global","global","_global","promise","Promise","resolve","_symbolIterator","getSymbolIterator","Symbol","iterator","keys","getOwnPropertyNames","Map","i","scheduleMicroTask","fn","Zone","then","current","looseIdentical","a","b","isNaN","stringify","token","Array","map","join","overriddenName","res","newLineIndex","indexOf","substring","noSideEffects","__forward_ref__","forwardRef","forwardRefFn","resolveForwardRef","resolveComponentResources","resourceResolver","urlFetches","urlMap","cachedResourceResolve","url","get","resp","set","unwrapResponse","componentResourceResolutionQueue","forEach","component","templateUrl","template","styleUrls","styles","styleOffset","styleUrl","style","splice","clear","all","Set","maybeQueueResolutionOfComponentResources","metadata","componentNeedsResolution","add","response","text","ViewEncapsulation","Emulated","Native","None","ShadowDom","ngDevModeResetPerfCounters","newCounters","firstTemplatePass","tNode","tView","rendererCreateTextNode","rendererSetText","rendererCreateElement","rendererAddEventListener","rendererSetAttribute","rendererRemoveAttribute","rendererSetProperty","rendererSetClassName","rendererAddClass","rendererRemoveClass","rendererSetStyle","rendererRemoveStyle","rendererDestroy","rendererDestroyNode","rendererMoveNode","rendererRemoveNode","rendererCreateComment","ngDevMode","EMPTY_OBJ","EMPTY_ARRAY","freeze","_renderCompCount","defineComponent","componentDefinition","typePrototype","declaredInputs","def","providersResolver","consts","vars","hostBindings","contentQueries","contentQueriesRefresh","attributes","inputs","outputs","exportAs","onInit","ngOnInit","doCheck","ngDoCheck","afterContentInit","ngAfterContentInit","afterContentChecked","ngAfterContentChecked","afterViewInit","ngAfterViewInit","afterViewChecked","ngAfterViewChecked","onDestroy","ngOnDestroy","onPush","changeDetection","directiveDefs","pipeDefs","selectors","viewQuery","features","encapsulation","id","_","directiveTypes","directives","feature","pipeTypes","pipes","invertObject","extractDirectiveDef","extractPipeDef","getComponentDef","getDirectiveDef","getPipeDef","defineNgModule","bootstrap","declarations","exports","transitiveCompileScopes","obj","secondary","newLookup","minifiedKey","publicName","declaredName","isArray","defineBase","baseDefinition","defineDirective","definePipe","pipeDef","pure","getNgModuleDef","throwNotFound","assertEqual","actual","expected","msg","throwError","assertNotEqual","assertLessThan","assertGreaterThan","assertDefined","assertComponentType","assertNgModuleType","assertDomNode","node","Node","assertPreviousIsParent","isParent","assertHasParent","parent","assertDataInRange","arr","TVIEW","FLAGS","PARENT","NEXT","QUERIES","HOST","HOST_NODE","BINDING_INDEX","CLEANUP","CONTEXT","INJECTOR","RENDERER_FACTORY","RENDERER","SANITIZER","TAIL","CONTAINER_INDEX","CONTENT_QUERIES","DECLARATION_VIEW","HEADER_OFFSET","ACTIVE_INDEX","VIEWS","NATIVE","RENDER_PARENT","LCONTAINER_LENGTH","MONKEY_PATCH_KEY_NAME","TNODE","PARENT_INJECTOR","INJECTOR_BLOOM_PARENT_SIZE","NO_PARENT_INJECTOR","NodeInjectorFactory","isViewProvider","injectImplementation","resolving","canSeeViewProviders","injectImpl","FactoryPrototype","isFactory","getPrototypeOf","isDifferent","stringify$1","flatten","list","result","item","concat","slice","loadInternal","view","readElementValue","getNativeByIndex","lView","getNativeByTNode","hostView","getTNode","getComponentViewByIndex","nodeIndex","slotValue","isContentQueryHost","flags","isComponent","isComponentDef","isLContainer","isRootView","getRootView","readPatchedLView","getRootContext","viewOrComponent","rootView","readPatchedData","hasParentInjector","parentLocation","getParentInjectorIndex","getParentInjectorViewOffset","getParentInjectorView","location","startView","viewOffset","parentView","getParentInjectorTNode","startTNode","injectorIndex","parentTNode","defaultScheduler","requestAnimationFrame","setTimeout","bind","addAllToArray","items","findComponentView","rootTNode","getCompilerFacade","globalNg","ɵcompilerFacade","Inject","Optional","Self","SkipSelf","Host","InjectFlags","_currentInjector","setCurrentInjector","injector","former","_injectImplementation","setInjectImplementation","impl","previous","injectInjectorOnly","injectRootLimpMode","inject","notFoundValue","injectableDef","injectArgs","types","arg","j","assertNodeType","typeName","assertNodeOfPossibleTypes","found","some","queueInitHooks","initHooks","checkHooks","queueLifecycleHooks","directiveStart","end","directiveEnd","queueContentHooks","queueViewHooks","queueDestroyHooks","contentHooks","contentCheckHooks","viewHooks","viewCheckHooks","destroyHooks","executeInitHooks","currentView","checkNoChangesMode","executeHooks","allHooks","hooksToCall","callHooks","elementDepthCount","getElementDepthCount","increaseElementDepthCount","decreaseElementDepthCount","currentDirectiveDef","getCurrentDirectiveDef","setCurrentDirectiveDef","bindingsEnabled","getBindingsEnabled","enableBindings","disableBindings","getLView","restoreView","viewToRestore","contextLView","previousOrParentTNode","getPreviousOrParentTNode","setPreviousOrParentTNode","setTNodeAndViewData","getIsParent","setIsParent","getOrCreateCurrentQueries","QueryType","currentQueries","clone","isCreationMode","getContextLView","getCheckNoChangesMode","setCheckNoChangesMode","mode","getFirstTemplatePass","setFirstTemplatePass","bindingRootIndex","getBindingRoot","setBindingRoot","enterView","newView","hostTNode","oldView","bindingStartIndex","nextContextImpl","level","walkUpViews","nestingLevel","resetComponentState","leaveView","includeViewProviders","setIncludeViewProviders","v","oldValue","BLOOM_SIZE","BLOOM_MASK","nextNgElementId","bloomAdd","charCodeAt","bloomBit","mask","b7","b6","b5","tData","getOrCreateNodeInjectorForNode","existingInjectorIndex","getInjectorIndex","insertBloom","blueprint","parentLoc","getParentInjectorLocation","parentIndex","parentLView","parentData","footer","diPublicInInjector","injectAttributeImpl","attrNameToInject","attrs","attrName","getOrCreateInjectable","bloomHash","bloomHashBitOrFactory","savePreviousOrParentTNode","saveLView","previousTView","hostTElementNode","shouldSearchParent","bloomHasToken","instance","searchTokensOnInjector","NOT_FOUND","moduleInjector","currentTView","canAccessViewProviders","isHostSpecialCase","injectableIdx","locateDirectiveOrProvider","getNodeInjectable","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","cptViewProvidersCount","startingIndex","endIndex","providerTokenOrDef","dirDef","lData","previousIncludeViewProviders","previousInjectImplementation","tokenId","injectorView","isFirstHostTNode","injectInjector","NodeInjector","_tNode","_lView","getFactoryOf","typeAny","getInheritedFactory","proto","t","getLContext","mpValue","isComponentInstance","findViaComponent","isDirectiveInstance","findViaDirective","getDirectivesAtNodeIndex","findViaNativeElement","native","existingCtx","context","createLContext","attachPatchData","rElement","parentNode","parentContext","localRefs","getComponentViewByInstance","componentInstance","firstChild","traverseNextElement","child","next","componentIndices","components","elementComponentIndex","componentView","rootComponentView","rootComponent","directiveInstance","directiveIndexStart","directiveIndexEnd","includeComponents","directiveStartIndex","directiveEndIndex","getComponentAtNodeIndex","discoverLocalRefs","localNames","localRefName","directiveIndex","getComponent","element","loadLContextFromNode","getContext","getViewComponent","loadLContext","getRootContext$1","lViewData","rootLView","getRootView$1","getRootComponents","getInjector","getInjectionTokens","providerTokens","startIndex","isDirectiveDefHack","getDirectives","throwOnNotFound","componentOrView","getLocalRefs","getHostElement","directive","isBrowserEvents","listener","useCapture","getListeners","lContext","lCleanup","tCleanup","cleanup","listeners","firstParam","secondParam","listenerElement","callback","useCaptureOrIndx","sort","sortListeners","normalizeDebugBindingName","camelCaseToDashCase","replace","CAMEL_CASE_REGEXP","input","m","toLowerCase","normalizeDebugBindingValue","e","devModeEqual","isListLikeIterableA","isListLikeIterable","isListLikeIterableB","areIterablesEqual","isAObject","isBObject","WrappedValue","wrapped","wrap","unwrap","isWrapped","SimpleChange","previousValue","currentValue","firstChange","isFirstChange","isJsObject","comparator","iterator1","iterator2","item1","item2","done","iterateListLike","o","throwMultipleComponentError","tagName","throwErrorIfNoChangesMode","creationMode","currValue","NO_CHANGE","updateBinding","bindingIndex","getBinding","bindingUpdated","bindingUpdated2","exp1","exp2","different","bindingUpdated3","exp3","bindingUpdated4","exp4","NG_PROJECT_AS_ATTR_NAME","RendererStyleFlags3","Important","DashCase","isProceduralRenderer","renderer","listen","domRendererFactory3","createRenderer","hostElement","rendererType","document","getParentNative","getHostNative","getFirstParentNative","getLContainer","embeddedView","containerHostIndex","getContainerRenderParent","tViewNode","container","projectionNodeStack","walkTNodeTree","viewToWalk","action","renderParent","beforeNode","projectionNodeIndex","nextTNode","executeNodeAction","nodeOrContainer","lContainer","componentHost","head","projection","insertBefore","removeChild","destroyNode","createTextNode","createText","addRemoveViewFromContainer","insertMode","destroyViewTree","childIndex","cleanUpView","viewOrContainer","getLViewChild","getParentState","insertView","containerIndex","views","detachView","removeIndex","detached","viewToDetach","removeView","containerHost","destroyLView","state","executeOnDestroys","executePipeOnDestroys","removeListeners","destroy","idx","useCaptureOrSubIdx","removeEventListener","unsubscribe","cleanupFn","pipeDestroyHooks","getRenderParent","canInsertNativeNode","nativeParentNode","tNodeParent","getHighestElementContainer","canInsertNativeChildOfElement","canInsertNativeChildOfView","viewTNode","currentNode","nativeInsertBefore","nativeNextSibling","nextSibling","appendChild","childEl","childTNode","parentEl","getBeforeNodeForView","icuAnchorNode","ngContainer","containerNative","parentNative","appendProjectedNode","projectedTNode","tProjectionNode","projectionView","ngContainerChildTNode","NG_TEMPLATE_SELECTOR","isCssClassMatching","nodeClassAttrVal","cssClassToMatch","nodeClassesLen","matchIndex","matchEndIdx","hasTagAndTypeMatch","currentSelector","isProjectionMode","isNodeMatchingSelector","nodeAttrs","selectOnlyMarkerIdx","skipToNextSelector","isPositive","attrIndexInNode","findAttrIndexInNode","selectorAttrValue","nodeAttrValue","maybeAttrName","selectOnlyMode","isNodeMatchingSelectorList","getProjectAsAttrValue","ngProjectAsAttrIdx","matchingSelectorIndex","textSelectors","ngProjectAsAttrVal","bindPlayerFactory","factoryFn","BoundPlayerFactory","CorePlayerHandler","_players","flushPlayers","player","play","queuePlayer","ANIMATION_PROP_PREFIX","createEmptyStylingContext","sanitizer","initialStyles","initialClasses","allocStylingContext","templateStyleContext","getStylingContext","viewData","storageIndex","wrapper","isStylingContext","stylingTemplate","isAnimationProp","addPlayerInternal","playerContext","rootContext","playerContextIndex","ref","addEventListener","nonFactoryPlayerIndex","playerHandler","getPlayersInternal","players","nonFactoryPlayersStart","getOrCreatePlayerContext","throwInvalidRefError","stylingContext","getPlayerContext","allocPlayerContext","hasStyling","attr","hasClassInput","initializeStaticContext","patchContextWithStaticAttrs","getDirectiveRegistryValuesIndexOf","patchInitialStylingValue","initialStyling","prop","existingValue","renderInitialStylesAndClasses","renderInitialStylingValues","initialStylingValues","isEntryClassBased","setClass","setStyle","updateContextWithBindings","directiveRef","classBindingNames","styleBindingNames","styleSanitizer","onlyProcessSingleClasses","findOrPatchDirectiveIntoRegistry","singlePropOffsetValues","totalCurrentClassBindings","totalCurrentStyleBindings","classesOffset","stylesOffset","singleStylesStartIndex","singleClassesStartIndex","multiStylesStartIndex","multiClassesStartIndex","currentSinglePropsLength","insertionOffset","filteredStyleBindingNames","singlePropIndex","getMatchingBindingIndex","filteredClassBindingNames","totalStyles","totalClasses","start","total","totalNewEntries","isMultiBased","isClassBased","flag","getPointers","staticIndex","getInitialIndex","singleOrMultiIndex","getMultiOrSingleIndex","setFlag","pointers","entryIsClassBased","adjustedIndex","multiIndex","singleIndex","initialValuesToLookup","indexForInitial","getInitialStylingValuesIndexOf","initialFlag","prepareInitialFlag","setProp","setValue","setPlayerBuilderIndex","masterFlag","directiveRefs","nextOffsetInsertionIndex","detectedIndex","singlePropStartPosition","singlePropPositionIndex","styleSanitizerIndex","bindingName","getProp","updateStylingMap","classesInput","stylesInput","getDirectiveIndexFromRegistry","classesPlayerBuilder","ClassAndStylePlayerBuilder","stylesPlayerBuilder","classesValue","stylesValue","ignoreAllClassUpdates","limitToSingleClasses","ignoreAllStyleUpdates","classNames","applyAllClasses","playerBuildersAreDirty","classesPlayerBuilderIndex","hasPlayerBuilderChanged","setPlayerBuilder","stylesPlayerBuilderIndex","split","classes","styleProps","classesStartIndex","multiStartIndex","getMultiStartIndex","dirty","ctxIndex","propIndex","propLimit","processValue","adjustedPropIndex","newProp","newValue","playerBuilderIndex","getValue","hasValueChanged","initialValue","getInitialValue","setDirty","indexOfEntry","findEntryPositionByProp","valueToCompare","flagToCompare","swapMultiContextEntries","newFlag","getStyleSanitizer","insertNewMultiProperty","doRemoveValue","valueExists","setContextDirty","setDirectiveDirty","setContextPlayersDirty","updateClassProp","offset","addOrRemove","_updateSingleStylingValue","updateStyleProp","getSinglePropIndexValue","currFlag","currDirective","getDirectiveIndexFromEntry","allowValueChange","playerBuilder","currPlayerIndex","getPlayerBuilderIndex","newIndex","setSanitizeFlag","indexForMulti","valueForMulti","multiDirty","singleDirty","renderStyling","rootOrView","isFirstRender","classesStore","stylesStore","totalPlayersQueued","targetDirectiveIndex","isContextDirty","isDirectiveDirty","flushPlayerBuilders","onlySingleClasses","stillDirty","isDirty","getPlayerBuilder","isInSingleRegion","readInitialValue","valueToApply","doApplyValue","playersStartIndex","builder","playerInsertionIndex","oldPlayer","buildPlayer","wasQueued","store","setProperty","removeStyle","removeProperty","className","addClass","removeClass","remove","sanitizeYes","isDirtyYes","isClassBasedValue","isSanitizable","configFlag","dynamicIndex","initialValues","insertionIndex","directiveOwnerPointers","playerIndex","thisProp","indexA","indexB","tmpValue","tmpProp","tmpFlag","tmpPlayerBuilderIndex","flagA","flagB","singleIndexA","_flag","_initial","singleIndexB","playerIndexA","directiveIndexA","updateSinglePointerValues","indexStartPosition","multiFlag","singleFlag","initialIndexForSingle","flagValue","updatedFlag","classBased","doShift","initialIndex","hasValues","usesSanitizer","_element","_type","_values","_dirty","_factory","currentPlayer","keyValues","singlePropOffsetRegistryIndex","offsets","indexForOffset","dirs","dirtyYes","currentDirectiveOwner","newDirectiveOwner","getInitialClassNameValue","initialClassValues","isPresent","_CLEAN_PROMISE","refreshDescendantViews","refreshDynamicEmbeddedViews","refreshContentQueries","setHostBindings","refreshChildComponents","expandoInstructions","expandoStartIndex","currentDirectiveIndex","currentElementIndex","instruction","providerCount","directiveDefIdx","directiveDef","componentRefresh","createLView","rendererFactory","createNodeAtIndex","createTNode","createViewNode","allocExpando","createEmbeddedViewAndNode","declarationView","queries","_isParent","_previousOrParentTNode","createView","renderEmbeddedTemplate","viewToRender","tickRootContext","namespaceHTML","getRenderFlags","nextContext","renderComponentOrTemplate","templateFn","normalExecutionPath","begin","_currentNamespace","namespaceSVG","namespaceMathML","elementStart","elementEnd","elementContainerStart","createComment","createDirectivesAndLocals","elementContainerEnd","addNode","elementCreate","setUpAttributes","inputData","initializeTNodeInputs","overriddenRenderer","rendererToUse","createElement","createElementNS","localRefExtractor","resolveDirectives","findDirectiveMatches","instantiateAllDirectives","invokeDirectivesHostBindings","saveResolvedLocalsInData","localIndex","getOrCreateTView","ngPrivateData","createTView","viewIndex","initialViewLength","createViewBlueprint","directiveRegistry","pipeRegistry","fill","isProc","namespaceURI","attrVal","setAttribute","setAttributeNS","createError","locateHostElement","elementOrSelector","defaultRenderer","rNode","selectRootElement","querySelector","eventName","listenerFn","getCleanup","lCleanupIndex","wrappedListener","wrapListenerWithPreventDefault","generatePropertyAliases","propsLength","subscription","subscribe","storeCleanupWithContext","getTViewCleanup","storeCleanupFn","setInputsForProperty","elementAttribute","removeAttribute","strValue","elementProperty","nativeOnly","elementPropertyInternal","componentHostSyntheticProperty","loadComponentRenderer","componentLView","loadRendererFn","dataValue","markDirtyIfOnPush","setNgReflectProperties","tViews","parentInSameView","tParent","initialInputs","debugValue","JSON","textContent","direction","propStore","isInput","defs","propertyAliasMap","internalName","hasProperty","elementStyling","elementHostAttrs","elementStylingApply","scheduleTick","elementStyleProp","styleIndex","suffix","valueToAdd","elementClassProp","classIndex","onOrOffClassValue","elementStylingMap","hackImplementationOfElementStylingMap","classInputVal","textNative","textBinding","instantiateRootComponent","generateExpandoInstructionBlock","baseResolveDirective","postProcessBaseDirective","exportsMap","initNodeFlags","saveNameToExportMap","cacheMatchingLocalNames","addComponentLogic","postProcessDirective","expando","previousExpandoLength","directiveCount","elementIndex","providerStartIndex","prefillHostVars","totalHostVars","setInputsFromAttrs","registry","matches","queueComponentIndexForCheck","queueHostBindingForCheck","hostVars","numberOfDirectives","directiveFactory","nodeInjectorFactory","addToViewTree","initialInputData","generateInitialInputs","minifiedInputName","attrValue","inputsToStore","createLContainer","hostNative","isForViewContainerRef","containerInternal","comment","containerRefreshStart","containerRefreshEnd","nextIndex","dynamicViewData","scanForView","tContainerNode","startIdx","viewBlockId","viewAtPositionId","embeddedViewStart","containerTNode","getOrCreateEmbeddedTView","containerTViews","embeddedViewEnd","viewHost","adjustedElementIndex","viewAttached","syncViewWithBlueprint","checkView","componentTView","projectionDef","componentNode","noOfNodeBuckets","pData","tails","componentChild","bucketIndex","nextNode","projectionNodeStack$1","selectorIndex","nodeToProject","projectedView","currentComponentView","currentComponentHost","firstProjectedNode","adjustedHostIndex","childComponentLView","wrapListenerIn_preventDefault","preventDefault","returnValue","markViewDirty","nothingScheduled","clean","r","scheduler","detectChanges","detectChangesInternal","detectChangesInRootView","checkNoChanges","checkNoChangesInRootView","hostTView","createViewQuery","updateViewQuery","markDirty","allocHostVars","count","interpolationV","content","interpolation1","prefix","v0","interpolation2","i0","v1","interpolation3","i1","v2","interpolation4","i2","v3","interpolation5","i3","v4","interpolation6","i4","v5","interpolation7","i5","v6","interpolation8","i6","v7","reference","loadQueryList","queryListIdx","load","directiveInject","injectAttribute","registerContentQuery","queryList","savedContentQueriesLength","tViewContentQueries","lastSavedDirectiveIndex","CLEAN_PROMISE","getCurrentView","addPlayer","element$$1","getPlayers","GLOBAL_PUBLISH_EXPANDO_KEY","_published","publishDefaultGlobalUtils","publishGlobalUtil","w","renderComponent","componentType","componentDef","componentTag","hostRNode","host","rootFlags","createRootContext","createRootComponentView","createRootComponent","hostFeatures","LifecycleHooksFeature","rootTView","dirIndex","getRootContext$2","whenRendered","isComponentDef$1","definition","getSuperType","InheritDefinitionFeature","superType","superDef","baseDef","writeableDef","maybeUnwrapEmpty","prevHostBindings","superHostBindings","rf","ctx","prevViewQuery","superViewQuery","prevContentQueries","superContentQueries","prevContentQueriesRefresh","superContentQueriesRefresh","queryIndex","ngInherit","superPrototype","PRIVATE_PREFIX","NgOnChangesFeature","publicToDeclaredInputs","publicToMinifiedInputs","declaredKey","privateMinKey","originalProperty","checkProto","getOwnPropertyDescriptor","getter","setter","simpleChanges","writable","currentChange","configurable","onChangesWrapper","delegateHook","ngOnChanges","noop","SOURCE","_THROW_IF_NOT_FOUND","THROW_IF_NOT_FOUND","INJECTOR$1","NullInjector","Injector","StaticInjector","NULL","SWITCH_INJECTOR_FACTORY","SWITCH_INJECTOR_FACTORY__POST_R3__","SWITCH_INJECTOR_FACTORY__PRE_R3__","IDENT","EMPTY","CIRCULAR","MULTI_PROVIDER_FN","arguments","USE_VALUE","provide","String","useValue","NG_TOKEN_PATH","NG_TEMP_TOKEN_PATH","NULL_INJECTOR$1","NEW_LINE","NO_NEW_LINE","records","_records","deps","useNew","recursivelyProcessProviders","record","tryResolveToken","tokenPath","message","formatError","tokens","resolveProvider","provider","computeDeps","useFactory","useExisting","useClass","staticError","multiProviderMixError","resolvedProvider","multi","multiProvider","resolveToken","path","depRecords","depRecord","childRecord","providerDeps","charAt","substr","parts","APP_ROOT","NOT_YET","CIRCULAR$1","EMPTY_ARRAY$1","NULL_INJECTOR$2","getNullInjector","createInjector","defType","additionalProviders","R3Injector","injectorDefTypes","destroyed","dedupStack","deepForEach","injectorDef","processInjectorType","processProvider","makeRecord","isRootInjector","has","assertNotDestroyed","service","previousInjector","couldBeInjectableType","injectableDefInScope","injectableDefOrInjectorDefFactory","hydrate","nextInjector","defOrWrappedDef","parents","ngModule","defName","isDuplicate","imported","pop","defProviders","injectorType","ngModuleType","isTypeProvider","providerToRecord","multiRecord","existing","hasOnDestroy","Function","paramLength","providerToFactory","isValueProvider","isExistingProvider","isFactoryProvider","classRef","ngModuleDetail","providerDetail","hasDeps","viewProviders","isComponent$$1","resolveProvider$1","lInjectablesBlueprint","providerFactory","beginIndex","existingFactoryIndex","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesProvidersFactoryExist","doesViewProvidersFactoryExist","multiFactory","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","multiFactoryAdd","componentProviders","isComponentProvider","multiResolve","factories","componentCount","multiProviders","f","ProvidersFeature","ComponentRef","ComponentFactory","noComponentFactoryError","error","ERROR_COMPONENT","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver","CodegenComponentFactoryResolver","_parent","_ngModule","_factories","ComponentFactoryBoundToModule","ngContentSelectors","projectableNodes","rootSelectorOrNode","NgModuleRef","NgModuleFactory","ViewRef","_context","_componentIndex","_appRef","_viewContainerRef","_tViewNode","rootNodes","collectNativeNodes","_lookUpContext","detach","markForCheck","reattach","attachToViewContainerRef","vcRef","detachFromAppRef","attachToAppRef","appRef","RootViewRef","_view","tNodeChild","injectElementRef","ElementRefToken","createElementRef","R3ElementRef","ElementRef_","R3TemplateRef","injectTemplateRef","TemplateRefToken","createTemplateRef","TemplateRef_","_declarationParentView","elementRef","_tView","_renderer","_queries","_injectorIndex","createEmbeddedView","container$$1","viewRef","hostContainer","R3ViewContainerRef","injectViewContainerRef","ViewContainerRefToken","previousTNode","createContainerRef","ViewContainerRef_","_lContainer","_hostTNode","_hostView","_viewRefs","parentInjector","templateRef","adjustedIdx","_adjustIndex","createComponent","componentFactory","ngModuleRef","contextInjector","componentRef","insert","move","wasDetached","shift","commentNode","parentOfHostNative","injectChangeDetectorRef","createViewRef","componentIndex","hostComponentView","getOrCreateRenderer2","injectRenderer2","ElementRef","nativeElement","SWITCH_ELEMENT_REF_FACTORY","SWITCH_ELEMENT_REF_FACTORY__POST_R3__","SWITCH_ELEMENT_REF_FACTORY__PRE_R3__","RenderComponentType","slotCount","animations","RenderDebugInfo","Renderer","Renderer2Interceptor","RootRenderer","RendererFactory2","RendererStyleFlags2","Renderer2","SWITCH_RENDERER2_FACTORY","SWITCH_RENDERER2_FACTORY__POST_R3__","SWITCH_RENDERER2_FACTORY__PRE_R3__","SecurityContext","NONE","HTML","STYLE","SCRIPT","URL","RESOURCE_URL","Sanitizer","Version","full","major","minor","patch","VERSION","ComponentFactoryResolver$1","ComponentFactory$1","toRefArray","array","nonMinified","minified","templateName","ROOT_CONTEXT","SCHEDULER","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","createChainedInjector","rootViewInjector","isInternalRootView","oldLView","tElementNode","projection$$1","nodeList","firstTNode","ComponentRef$1","componentFactoryResolver","_rootLView","destroyCbs","changeDetectorRef","_devMode","_runModeLocked","isDevMode","enableProdMode","InertBodyHelper","defaultDoc","inertDocument","implementation","createHTMLDocument","inertBodyElement","body","inertHtml","innerHTML","getInertBodyElement","getInertBodyElement_XHR","isDOMParserAvailable","getInertBodyElement_DOMParser","getInertBodyElement_InertDocument","html","encodeURI","_a","xhr","XMLHttpRequest","responseType","open","send","DOMParser","parseFromString","templateEl","documentMode","stripCustomNsAttrs","el","elAttrs","attrib","childNode","nodeType","ELEMENT_NODE","SAFE_URL_PATTERN","DATA_URL_PATTERN","_sanitizeUrl","match","console","warn","sanitizeSrcset","srcset","trim","tagSet","tags","merge$1","sets","s","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","HTML_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SanitizingHtmlSerializer","sanitizedSomething","buf","sanitizeChildren","traverseContent","startElement","TEXT_NODE","chars","nodeValue","endElement","checkClobberedElement","nodeName","elAttr","lower","encodeEntities","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","hi","low","inertBodyHelper","_sanitizeHtml","unsafeHtmlInput","unsafeHtml","mXSSAttempts","parsedHtml","safeHtml","getTemplateContent","isTemplateElement","ELEMENT_MARKER","marker","COMMENT_MARKER","MARKER","ICU_BLOCK_REGEX","SUBTEMPLATE_REGEXP","PH_REGEXP","BINDING_REGEXP","ICU_REGEXP","PP_PLACEHOLDERS","PP_ICU_VARS","PP_ICUS","extractParts","pattern","prevPos","braceStack","results","braces","lastIndex","exec","pos","block","test","parseICUBlock","cases","icuType","mainBinding","str","binding","parseInt","blocks","removeInnerTemplateTranslation","inTemplate","tagMatched","getTranslationForTemplate","subTemplateIndex","search","RegExp","generateBindingUpdateOpCodes","destinationNode","sanitizeFn","updateOpCodes","textParts","textValue","toMaskBit","getBindingMask","icuExpression","valueArr","i18nIndexStack","i18nIndexStackPointer","Math","min","parentIndexStack","i18nStart","i18nStartFirstPass","parentIndexPointer","createOpCodes","icuExpressions","templateTranslation","msgParts","phIndex","icuNodeIndex","icuStart","tIcuIndex","hasBinding","tI18n","update","icus","appendI18nNode","i18nPostprocess","replacements","_match","hasUnmatchedValues","_idx","i18nEnd","i18nEndFirstPass","rootIndex","visitedPlaceholders","readCreateOpCodes","removeNode","currentTNode","opCode","textRNode","destinationNodeIndex","destinationTNode","elementNodeIndex","commentValue","commentRNode","activeCaseIndex","tagNameValue","elementRNode","readUpdateOpCodes","bindingsStartIndex","changeMask","bypassCheckBit","caseCreated","checkBit","skipCodes","tIcu","icuTNode","removeCodes","k","removeOpCode","nestedIcuNodeIndex","nestedIcuTNode","activeIndex","nestedIcuTIndex","nestedTIcu","caseIndex","getCaseIndex","removedPhTNode","removedPhRNode","i18n","i18nAttributes","i18nAttributesFirstPass","previousElement","previousElementIndex","shiftsCounter","i18nExp","expression","i18nApply","Plural","Zero","One","Two","Few","Many","Other","getPluralCase","locale","nLike","n","nDecimal","floor","abs","lang","getPluralCategory","plural","bindingValue","resolvedCase","tIcus","createCodes","updateCodes","childIcus","nestedIcus","icuIndex","icuCase","parseIcuCase","worstCaseSize","max","opCodes","parseNodes","NESTED_ICU","nestedIcusToCreate","lowerAttrName","COMMENT_NODE","nestedIcuIndex","newLocal","nestedIcu","nestTIcuIndex","COMPONENT_FACTORY_RESOLVER","NgModuleRef$1","_bootstrapComponents","_r3Injector","injectFlags","NgModuleFactory$1","moduleType","setClassMetadata","decorators","ctorParameters","propDecorators","clazz","pureFunction0","slotOffset","pureFn","thisArg","pureFunction1","exp","pureFunction2","pureFunction3","pureFunction4","pureFunction5","exp5","pureFunction6","exp6","pureFunction7","exp7","pureFunction8","exp8","pureFunctionV","exps","pipe","pipeName","getPipeDef$1","pipeInstance","pipeBind1","unwrapValue","isPure","transform","pipeBind2","pipeBind3","pipeBind4","pipeBindV","EventEmitter","isAsync","__isAsync","emit","generatorOrNext","complete","schedulerFn","errorFn","err","completeFn","sink","TemplateRef","SWITCH_TEMPLATE_REF_FACTORY","SWITCH_TEMPLATE_REF_FACTORY__POST_R3__","SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__","LQueries_","shallow","deep","track","predicate","descend","read","createQuery","shallowResults","copyQueriesToContainer","deepResults","copyQueriesToView","insertView$1","isRootNodeOfQuery","removeView$1","query","containerValues","clonedQuery","viewValuesIdx","removed","getIdxOfMatchingSelector","queryByReadToken","matchingIdx","queryByTNodeType","queryByTemplateRef","templateRefToken","templateRefResult","queryRead","addMatch","matchingValue","createPredicate","_valuesTree","QueryList_","changes","last","filter","find","reduce","init","toArray","reset","notifyOnChanges","QueryList","memoryIndex","queryRefresh","queryListImpl","templateRefExtractor","BRAND","allowSanitizationBypass","bypassSanitizationTrustHtml","trustedHtml","bypassSanitizationTrustString","bypassSanitizationTrustStyle","trustedStyle","bypassSanitizationTrustScript","trustedScript","bypassSanitizationTrustUrl","trustedUrl","bypassSanitizationTrustResourceUrl","trustedResourceUrl","trustedString","trusted","VALUES","TRANSFORMATION_FNS","COLOR_FNS","GRADIENTS","CSS3_FNS","FN_ARGS","SAFE_STYLE_VALUE","URL_RE","hasBalancedQuotes","outsideSingle","outsideDouble","c","_sanitizeStyle","urlMatch","sanitizeHtml","getSanitizer","sanitize","sanitizeStyle","unsafeStyle","sanitizeUrl","unsafeUrl","sanitizeResourceUrl","unsafeResourceUrl","sanitizeScript","unsafeScript","defaultStyleSanitizer","angularCoreEnv","NgModuleFactoryLoader","modules","registerModuleFactory","assertNotExisting","registerNgModuleType","getModuleFactory__PRE_R3__","noModuleError","getModuleFactory__POST_R3__","getModuleFactory","Type","isType","DELEGATE_CTOR","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","ReflectionCapabilities","reflect","_reflect","isReflectionEnabled","_zipTypesAndAnnotations","paramTypes","paramAnnotations","_ownParameters","parentCtor","typeStr","tsickleCtorParams","ctorParam","convertTsickleDecoratorIntoMetadata","getOwnMetadata","getParentCtor","_ownAnnotations","typeOrFunc","ownAnnotations","parentAnnotations","_ownPropMetadata","propMetadata","parentPropMetadata","ownPropMetadata","hasLifecycleHook","lcProperty","guards","method","functionBody","importUri","resourceUri","resolveIdentifier","moduleUrl","members","runtime","resolveEnum","enumIdentifier","decoratorInvocations","decoratorInvocation","decoratorType","annotationArgs","parentProto","getReflect","reflectDependencies","convertDependencies","compiler","dep","reflectDependency","optional","resolved","R3ResolvedDependencyType","Token","skipSelf","setTokenAndResolvedType","param","__proto__","EMPTY_ARRAY$2","moduleQueue","enqueueModuleForDelayedScoping","flushingModuleQueue","flushModuleScopingQueueAsMuchAsPossible","every","isResolvedDeclaration","setScopeOnDeclaredComponents","declaration","compileNgModule","compileNgModuleDefs","flatten$1","expandModuleWithProviders","emitInline","verifySemanticsOfNgModuleDef","compileInjector","verifiedNgModule","errors","verifyDeclarationsHaveDefinitions","combinedDeclarations","computeCombinedExports","verifyExportsAreDeclaredOrReExported","verifyDeclarationIsUnique","verifyComponentEntryComponentsIsPartOfNgModule","getAnnotation","unwrapModuleWithProvidersImports","verifyComponentIsPartOfNgModule","entryComponents","kind","lastIndexOf","existingModule","ownerNgModule","typeOrWithProviders","collect","__annotations__","readAnnotation","decorator","resetCompiledComponents","transitiveScopes","transitiveScopesFor","patchComponentDefWithScope","ngSelectorScope","from","compilation","dir","isNgModule","scopes","exported","declared","declaredWithDefs","importedTyped","importedScope","entry","exportedTyped","exportedScope","mapFn","out","isModuleWithProviders","compileComponent","directiveMetadata","preserveWhitespaces","viewQueries","extractQueriesMetadata","interpolation","hasSelectorScope","compileDirective","facade","extendsDirectlyFromObject","typeArgumentCount","isContentQuery","lifecycle","usesOnChanges","typeSourceSpan","usesInheritance","convertToR3QueryPredicate","splitByComma","convertToR3QueryMetadata","propertyName","ann","isQueryAnn","queriesMeta","field","piece","compilePipe","Directive","SWITCH_COMPILE_DIRECTIVE","Component","SWITCH_COMPILE_COMPONENT","Pipe","p","SWITCH_COMPILE_PIPE","initializeBaseDef","inheritedBaseDef","updateBaseDefFromIOProp","defProp","Input","bindingPropertyName","Output","HostBinding","hostPropertyName","HostListener","SWITCH_COMPILE_COMPONENT__POST_R3__","SWITCH_COMPILE_DIRECTIVE__POST_R3__","SWITCH_COMPILE_PIPE__POST_R3__","SWITCH_COMPILE_COMPONENT__PRE_R3__","SWITCH_COMPILE_DIRECTIVE__PRE_R3__","SWITCH_COMPILE_PIPE__PRE_R3__","ɵ0$2","USE_VALUE$1","EMPTY_ARRAY$3","convertInjectableProviderToFactory","reflectionCapabilities","valueProvider","existingProvider","factoryProvider","classProvider","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","NgModule","SWITCH_COMPILE_NGMODULE","preR3NgModuleCompile","SWITCH_COMPILE_NGMODULE__POST_R3__","SWITCH_COMPILE_NGMODULE__PRE_R3__","compileInjectable","srcMeta","hasAProvider","isUseClassProvider","isUseFactoryProvider","isUseValueProvider","isUseExistingProvider","compilerMeta","ctorDeps","userDeps","ɵ0$3","USE_VALUE$2","Injectable","SWITCH_COMPILE_INJECTABLE","render2CompileInjectable","injectableType","SWITCH_COMPILE_INJECTABLE__POST_R3__","SWITCH_COMPILE_INJECTABLE__PRE_R3__","ERROR_DEBUG_CONTEXT","ERROR_ORIGINAL_ERROR","ERROR_LOGGER","getDebugContext","getOriginalError","getErrorLogger","defaultErrorLogger","ErrorHandler","_console","handleError","originalError","_findOriginalError","_findContext","errorLogger","wrappedError","findFirstClosedCycle","constructResolvingPath","reversed","reverse","tokenStrs","injectionError","constructResolvingMessage","errMsg","addKey","injectors","noProviderError","cyclicDependencyError","instantiationError","originalException","originalStack","invalidProviderError","noAnnotationError","params","signature","ii","parameter","outOfBoundsError","mixingMultiProvidersWithRegularProvidersError","provider1","provider2","ReflectiveKey","displayName","_globalKeyRegistry","numberOfKeys","KeyRegistry","_allKeys","newKey","size","Reflector","updateCapabilities","caps","identifier","reflector","ReflectiveDependency","visibility","fromKey","_EMPTY_LIST","ResolvedReflectiveProvider_","resolvedFactories","resolvedFactory","ResolvedReflectiveFactory","dependencies","resolveReflectiveFactory","resolvedDeps","_dependenciesFor","aliasInstance","constructDependencies","resolveReflectiveProvider","resolveReflectiveProviders","normalized","_normalizeProviders","resolvedProviderMap","mergeResolvedReflectiveProviders","normalizedProvidersMap","_extractToken","_createDependency","paramMetadata","UNDEFINED","ReflectiveInjector","resolveAndCreate","ResolvedReflectiveProviders","fromResolvedProviders","ReflectiveInjector_","_providers","_constructionCounter","len","keyIds","objs","_getByKey","resolveAndCreateChild","createChildFromResolved","inj","resolveAndInstantiate","instantiateResolved","_instantiateProvider","getProviderAtIndex","_new","_getMaxNumberOfObjects","_instantiate","ResolvedReflectiveFactory$$1","_getByReflectiveDependency","stack","INJECTOR_KEY","_getByKeySelf","_getByKeyDefault","_getObjByKeyId","keyId","_throwOrNull","inj_","_mapProviders","isPromise","isObservable","APP_INITIALIZER","ApplicationInitStatus","appInits","initialized","donePromise","rej","reject","runInitializers","asyncInitPromises","initResult","catch","ɵfac","ApplicationInitStatus_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","APP_ID","_appIdRandomProviderFactory","_randomChar","APP_ID_RANDOM_PROVIDER","fromCharCode","random","PLATFORM_INITIALIZER","PLATFORM_ID","APP_BOOTSTRAP_LISTENER","PACKAGE_ROOT_URL","Console","log","Console_Factory","ModuleWithComponentFactories","ngModuleFactory","componentFactories","_throwError","Compiler_compileModuleSync__PRE_R3__","Compiler_compileModuleSync__POST_R3__","Compiler_compileModuleSync","Compiler_compileModuleAsync__PRE_R3__","Compiler_compileModuleAsync__POST_R3__","Compiler_compileModuleAsync","Compiler_compileModuleAndAllComponentsSync__PRE_R3__","Compiler_compileModuleAndAllComponentsSync__POST_R3__","Compiler_compileModuleAndAllComponentsSync","Compiler_compileModuleAndAllComponentsAsync__PRE_R3__","Compiler_compileModuleAndAllComponentsAsync__POST_R3__","Compiler_compileModuleAndAllComponentsAsync","Compiler","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","Compiler_Factory","COMPILER_OPTIONS","CompilerFactory","trace","events","detectWTF","wtf","createScope","leave","scope","leaveScope","startTimeRange","rangeType","beginTimeRange","endTimeRange","range","wtfEnabled","noopScope","arg0","arg1","wtfCreateScope","wtfLeave","wtfStartTimeRange","wtfEndTimeRange","NgZone","enableLongStackTrace","hasPendingMicrotasks","hasPendingMacrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","assertZonePatched","_nesting","_outer","_inner","fork","forkInnerZoneWithAngularBehavior","isInAngularZone","assertInAngularZone","assertNotInAngularZone","run","applyThis","applyArgs","runTask","zone","task","scheduleEventTask","EMPTY_PAYLOAD","noop$1","cancelTask","runGuarded","runOutsideAngular","checkStable","properties","onInvokeTask","delegate","onEnter","invokeTask","onLeave","onInvoke","invoke","onHasTask","hasTaskState","hasTask","change","microTask","macroTask","onHandleError","NoopNgZone","Testability","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","taskTrackingZone","_watchAngularEvents","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","cb","clearTimeout","timeoutId","doneCb","pending","getPendingTasks","updateCb","macroTasks","creationLocation","addCallback","timeout","whenStable","getPendingRequestCount","findProviders","using","exactMatch","Testability_Factory","TestabilityRegistry","_applications","_testabilityGetter","addToWindow","registerApplication","testability","unregisterApplication","delete","unregisterAllApplications","getTestability","elem","getAllTestabilities","getAllRootElements","findTestabilityInTree","findInAncestors","TestabilityRegistry_Factory","_NoopGetTestability","setTestabilityGetter","_platform","compileNgModuleFactory","compileNgModuleFactory__PRE_R3__","compilerFactory","createCompiler","compileNgModuleFactory__POST_R3__","ALLOW_MULTIPLE_PLATFORMS","NgProbeToken","createPlatform","PlatformRef","inits","createPlatformFactory","parentPlatformFactory","desc","extraProviders","platform","getPlatform","injectedProviders","assertPlatform","requiredToken","destroyPlatform","_injector","_modules","_destroyListeners","_destroyed","bootstrapModuleFactory","moduleFactory","ngZoneOption","ngZone","getNgZone","ngZoneInjector","moduleRef","exceptionHandler","_callAndReportToErrorHandler","initStatus","_moduleDoBootstrap","bootstrapModule","compilerOptions","optionsReducer","ApplicationRef","ngDoBootstrap","module","PlatformRef_Factory","errorHandler","dst","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_views","_runningTick","_enforceNoNewChanges","_stable","componentTypes","tick","isCurrentlyStable","observer","stableSub","unstableSub","componentOrFactory","selectorOrNode","compRef","_unloadComponent","_loadComponent","_tickScope","attachView","viewCount","ApplicationRef_Factory","QueryList$1","_results","flatten$2","flat","flatItem","_SEPARATOR","FACTORY_CLASS_SUFFIX","SystemJsNgModuleLoaderConfig","DEFAULT_CONFIG","factoryPathPrefix","factoryPathSuffix","SystemJsNgModuleLoader","_compiler","config","_config","offlineMode","loadFactory","loadAndCompile","exportName","System","import","checkNotEmpty","factoryClassSuffix","SystemJsNgModuleLoader_Factory","modulePath","ViewContainerRef","SWITCH_VIEW_CONTAINER_REF_FACTORY","SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__","SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__","ChangeDetectorRef","SWITCH_CHANGE_DETECTOR_REF_FACTORY","SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__","SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__","ViewRef$1","EmbeddedViewRef","EventListener","DebugNode__PRE_R3__","nativeNode","_debugContext","DebugElement__PRE_R3__","addChild","references","childNodes","insertChildrenAfter","newChildren","siblingIndex","refChild","newChild","refIndex","queryAll","_queryElementChildren","queryAllNodes","_queryNodeChildren","children","triggerEventHandler","eventObj","asNativeElements","debugEls","DebugNode__POST_R3__","DebugElement__POST_R3__","eAttrs","lNode","eClasses","classList","styleName","eStyles","getPropertyValue","getDebugNode__POST_R3__","_queryNodeChildrenR3","elementsOnly","_nativeNodeToDebugNode","getDebugNode__PRE_R3__","getDebugNode","indexDebugNode","removeDebugNodeFromIndex","DebugNode","DebugElement","DefaultIterableDifferFactory","supports","trackByFn","DefaultIterableDiffer","trackByIdentity","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","_trackByFn","forEachItem","_next","forEachOperation","nextIt","nextRemove","addRemoveOffset","moveOffsets","currentIndex","getPreviousIndex","adjPreviousIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","forEachPreviousItem","_nextPrevious","forEachAddedItem","_nextAdded","forEachMovedItem","_nextMoved","forEachRemovedItem","forEachIdentityChange","_nextIdentityChange","diff","collection","check","_reset","mayBeDirty","itemTrackBy","trackById","_mismatch","_verifyReinsertion","_addIdentityChange","_truncate","nextRecord","previousRecord","_prev","_remove","_moveAfter","_reinsertAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","_addToRemovals","_unlink","prevRecord","prev","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_prevDup","_nextDup","_DuplicateItemRecordList","_head","_tail","atOrAfterIndex","duplicates","recordList","isEmpty","moveOffset","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","forEachChangedItem","_nextChanged","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","before","KeyValueChangeRecord_","_addToAdditions","_addToChanges","IterableDiffers","copied","extend","iterable","getTypeNameForDebugging","KeyValueDiffers","kv","keyValDiff","iterableDiff","defaultIterableDiffers","defaultKeyValueDiffers","_CORE_PLATFORM_PROVIDERS","platformCore","LOCALE_ID","TRANSLATIONS","TRANSLATIONS_FORMAT","MissingTranslationStrategy","Warning","Ignore","_iterableDiffersFactory","_keyValueDiffersFactory","_localeFactory","APPLICATION_MODULE_PROVIDERS","ApplicationModule","ApplicationModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","SWITCH_IVY_ENABLED__POST_R3__","SWITCH_IVY_ENABLED__PRE_R3__","ivyEnabled","shiftInitState","priorInitState","newInitState","initState","initIndex","shouldCallLifecycleInitHook","asTextData","nodes","asElementData","asProviderData","asPureExpressionData","asQueryList","DebugContext","Services","setCurrentNode","createRootView","createComponentView","createNgModuleRef","overrideProvider","overrideComponentView","clearOverrides","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","handleEvent","updateDirectives","updateRenderer","dirtyParentQueries","expressionChangedAfterItHasBeenCheckedError","isFirstCheck","viewDebugError","viewWrappedDebugError","_addDebugContext","logError","isViewDebugError","viewDestroyedError","NOOP","_tokenKeyCache","tokenKey","unwrapValue$1","nodeIdx","bindingIdx","globalBindingIdx","oldValues","UNDEFINED_RENDERER_TYPE_ID","EMPTY_RENDERER_TYPE_ID","createRendererType2","_renderCompCount$1","resolveRendererType2","isFilled","checkBinding","checkAndUpdateBinding","checkBindingNoChanges","bindings","markParentViewsForCheck","currView","viewContainerParent","markParentViewsForCheckProjectedViews","endView","dispatchEvent","event","nodeDef","root","declaredViewContainer","parentNodeDef","viewParentEl","renderNode","renderElement","renderText","elementEventFullName","isComponentView","isEmbeddedView","filterQueryId","queryId","splitMatchedQueriesDsl","matchedQueriesDsl","matchedQueries","matchedQueryIds","valueType","splitDepsDsl","sourceName","getParentRenderElement","renderHost","componentRendererType","DEFINITION_CACHE","WeakMap","resolveDefinition","rootRenderNodes","renderNodes","visitRootRenderNodes","lastRenderRootNode","visitSiblingRenderNodes","visitRenderNode","childCount","visitProjectedRenderNodes","ngContentIndex","compView","hostElDef","projectedNodes","execRenderNodeAction","ngContent","rn","bindingFlags","embeddedViews","viewContainer","_embeddedViews","NS_PREFIX_RE","splitNamespace","calcBindingFlags","interpolate","valueCount","constAndInterp","_toStringWithNull","inlineInterpolate","c0","a1","c1","a2","c2","a3","c3","a4","c4","a5","c5","a6","c6","a7","c7","a8","c8","a9","c9","EMPTY_ARRAY$4","EMPTY_MAP","anchorDef","templateFactory","outputIndex","checkIndex","childFlags","directChildFlags","childMatchedQueries","ns","componentProvider","publicProviders","allProviders","elementDef","namespaceAndName","fixedAttrs","bindingDefs","suffixOrSecurityContext","securityContext","nonMinifiedName","outputDefs","elDef","preserveContent","listenToElementOutputs","output","handleEventClosure","renderEventHandlerClosure","listenTarget","listenerView","disposable","disposables","checkAndUpdateElementInline","v8","v9","bindLen","changed","checkAndUpdateElementValue","checkAndUpdateElementDynamic","elData","renderNode$$1","setElementAttribute","setElementClass","setElementStyle","bindView","setElementProperty","renderValue","unit","UNDEFINED_VALUE","InjectorRefTokenKey","INJECTORRefTokenKey","NgModuleRefTokenKey","moduleProvideDef","depDefs","moduleDef","providersByKey","isRoot","initNgModule","_def","provDef","_createProviderInstance","resolveNgModuleDep","depDef","tokenKey$$1","providerDef","providerInstance","targetsModule","moduleTransitivelyPresent","injectable","_createClass","_callFactory","depValues","callNgModuleLifecycle","lifecycles","attachEmbeddedView","elementData","addToArray","attachProjectedView","prevView","renderAttachEmbeddedView","vcElementData","dvcElementData","projectedViews","_projectedViews","markNodeAsProjectedTemplate","viewDef","nodeFlags","detachEmbeddedView","removeFromArray","renderDetachView","detachProjectedView","moveEmbeddedView","oldViewIndex","newViewIndex","prevRenderNode","EMPTY_CONTEXT","createComponentFactory","viewDefFactory","ComponentFactory_","getComponentViewDefinitionFactory","_inputs","_outputs","inputsArr","outputsArr","componentNodeIndex","ComponentRef_","ViewRef_","_viewRef","_component","_elDef","Injector_","createViewContainerData","_data","viewRef_","createChangeDetectorRef","fs","createTemplateData","_parentView","createInjector$1","allowPrivateServices","createRendererV1","RendererAdapter","createViewRoot","createTemplateAnchor","parentElement","projectNodes","attachViewAfter","viewRootNodes","viewAllNodes","listenGlobal","propertyValue","attributeValue","setBindingDebugInfo","isAdd","styleValue","invokeElementMethod","methodName","setText","animate","bootstrapComponents","NgModuleRef_","_moduleType","RendererV1TokenKey","Renderer2TokenKey","ElementRefTokenKey","ViewContainerRefTokenKey","TemplateRefTokenKey","ChangeDetectorRefTokenKey","InjectorRefTokenKey$1","INJECTORRefTokenKey$1","createProviderInstance","_createProviderInstance$1","createPipeInstance","createClass","createDirectiveInstance","outputObservable","eventHandlerClosure","checkAndUpdateDirectiveInline","providerData","updateProp","checkAndUpdateDirectiveDynamic","callFactory","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1","searchView","findCompView","cdView","callLifecycleHooksChildrenFirst","callProviderLifecycles","callElementProvidersLifecycles","queryDef","bindingType","filterId","createQuery$1","queryIds","nodeMatchedQueries","tplDef","checkAndUpdateQuery","newValues","calcQueryValues","notify","boundValue","getQueryValue","dvc","queryValueType","ngContentDef","appendNgContent","purePipeDef","argCount","_pureExpressionDef","pureArrayDef","pureObjectDef","propToIndex","nbKeys","propertyNames","createPureExpression","checkAndUpdatePureExpressionInline","checkAndUpdatePureExpressionDynamic","textDef","staticText","checkAndUpdateTextInline","_addInterpolationPart","checkAndUpdateTextDynamic","valueStr","viewBindingCount","viewDisposableCount","viewNodeFlags","viewRootNodeFlags","viewMatchedQueries","currentParent","currentRenderParent","currentElementHasPublicProviders","currentElementHasPrivateProviders","validateNode","isPrivateService","isNgContainer","newParent","rootNodeFlags","bindingCount","outputCount","nodeCount","parentFlags","parentEnd","anchorDef$$1","initView","createViewNodes","compRenderer","hostDef","nodeData","compViewDef","execComponentViewsAction","ViewAction","CreateViewNodes","execQueriesAction","markProjectedViewsForCheck","execEmbeddedViewsAction","CheckNoChanges","CheckAndUpdate","callInit","checkAndUpdateNode","argStyle","checkAndUpdateNodeInline","checkAndUpdateNodeDynamic","checkNoChangesNode","checkNoChangesNodeInline","checkNoChangesNodeDynamic","checkNoChangesQuery","Destroy","destroyViewNodes","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","callViewAction","viewState","execProjectedViewsAction","queryFlags","staticDynamicQueryFlag","checkType","initServicesIfNeeded","services","createDebugServices","createProdServices","createProdRootView","DebugContext_","prodCheckAndUpdateNode","prodCheckNoChangesNode","debugSetCurrentNode","debugCreateRootView","debugCreateEmbeddedView","debugCreateComponentView","debugCreateNgModuleRef","debugOverrideProvider","debugOverrideComponentView","debugClearOverrides","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","debugHandleEvent","debugUpdateDirectives","debugUpdateRenderer","elInjector","createRootData","DebugRendererFactory2","defWithOverride","applyProviderOverridesToView","callWithDebugContext","DebugAction","viewDef$$1","viewDefOverrides","applyProviderOverridesToNgModule","providerOverrides","providerOverridesWithScope","override","comp","compFactory","hostViewDef","elementIndicesWithOverwrittenProviders","findElementIndicesWithOverwrittenProviders","applyProviderOverridesToElement","elIndicesWithOverwrittenProviders","lastElementDef","elIndex","hasOverrides","hasDeprecatedOverrides","calcHasOverrides","applyProviderOverrides","deprecatedBehavior","moduleSet","_currentAction","_currentView","_currentNodeIndex","nextDirectiveWithBinding","debugCheckDirectivesFn","debugCheckAndUpdateNode","debugCheckNoChangesNode","nextRenderNodeWithBinding","debugCheckRenderNodeFn","givenValues","bindingValues","elView","elOrCompView","childDef","collectReferences","componentRenderElement","findHostElement","logViewDef","logNodeIndex","renderNodeIndex","getRenderNodeIndex","currRenderNodeIndex","nodeLogger","refName","oldAction","oldNodeIndex","getCurrentDebugContext","renderData","DebugRenderer2","whenRenderingDone","debugContextFactory","namespace","debugCtx","debugEl","debugChildEl","debugRefEl","oldChild","fullName","createNgModuleFactory","defFactory","NgModuleFactory_","cloneNgModuleDefinition","_ngModuleDefFactory","ɵangular_packages_core_core_t","ɵangular_packages_core_core_q","ɵangular_packages_core_core_r","ɵangular_packages_core_core_s","ɵangular_packages_core_core_h","ɵangular_packages_core_core_o","ɵangular_packages_core_core_p","ɵangular_packages_core_core_n","ɵangular_packages_core_core_m","ɵangular_packages_core_core_c","ɵangular_packages_core_core_d","ɵangular_packages_core_core_e","ɵangular_packages_core_core_f","ɵangular_packages_core_core_g","ɵangular_packages_core_core_l","ɵangular_packages_core_core_u","ɵangular_packages_core_core_w","ɵangular_packages_core_core_v","ɵangular_packages_core_core_z","ɵangular_packages_core_core_x","ɵangular_packages_core_core_y","ɵangular_packages_core_core_bc","ɵangular_packages_core_core_bj","ɵangular_packages_core_core_bd","ɵangular_packages_core_core_be","ɵangular_packages_core_core_bf","ɵangular_packages_core_core_bi","ɵangular_packages_core_core_bm","ɵangular_packages_core_core_i","ɵangular_packages_core_core_j","ɵangular_packages_core_core_k","ɵangular_packages_core_core_a","ɵangular_packages_core_core_b","ɵangular_packages_core_core_bk","ɵangular_packages_core_core_ba","ɵangular_packages_core_core_bb","ɵinject","ɵNoopNgZone","ɵComponentFactory","ɵALLOW_MULTIPLE_PLATFORMS","ɵAPP_ID_RANDOM_PROVIDER","ɵdefaultIterableDiffers","ɵdefaultKeyValueDiffers","ɵdevModeEqual","ɵisListLikeIterable","ɵChangeDetectorStatus","ɵisDefaultChangeDetectionStrategy","ɵConsole","ɵgetInjectableDef","ɵsetCurrentInjector","ɵAPP_ROOT","ɵivyEnabled","ɵCodegenComponentFactoryResolver","ɵresolveComponentResources","ɵReflectionCapabilities","ɵRenderDebugInfo","ɵ_sanitizeHtml","ɵ_sanitizeStyle","ɵ_sanitizeUrl","ɵglobal","ɵlooseIdentical","ɵstringify","ɵmakeDecorator","ɵisObservable","ɵisPromise","ɵclearOverrides","ɵinitServicesIfNeeded","ɵoverrideComponentView","ɵoverrideProvider","ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","ɵdefineBase","ɵdefineComponent","ɵdefineDirective","ɵdefinePipe","ɵdefineNgModule","ɵdetectChanges","ɵrenderComponent","ɵRender3ComponentFactory","ɵRender3ComponentRef","ɵdirectiveInject","ɵinjectAttribute","ɵgetFactoryOf","ɵgetInheritedFactory","ɵtemplateRefExtractor","ɵProvidersFeature","ɵInheritDefinitionFeature","ɵNgOnChangesFeature","ɵLifecycleHooksFeature","ɵRender3NgModuleRef","ɵmarkDirty","ɵNgModuleFactory","ɵNO_CHANGE","ɵcontainer","ɵnextContext","ɵelementStart","ɵnamespaceHTML","ɵnamespaceMathML","ɵnamespaceSVG","ɵelement","ɵlistener","ɵtext","ɵembeddedViewStart","ɵquery","ɵregisterContentQuery","ɵprojection","ɵbind","ɵinterpolation1","ɵinterpolation2","ɵinterpolation3","ɵinterpolation4","ɵinterpolation5","ɵinterpolation6","ɵinterpolation7","ɵinterpolation8","ɵinterpolationV","ɵpipeBind1","ɵpipeBind2","ɵpipeBind3","ɵpipeBind4","ɵpipeBindV","ɵpureFunction0","ɵpureFunction1","ɵpureFunction2","ɵpureFunction3","ɵpureFunction4","ɵpureFunction5","ɵpureFunction6","ɵpureFunction7","ɵpureFunction8","ɵpureFunctionV","ɵgetCurrentView","ɵgetHostElement","ɵrestoreView","ɵcontainerRefreshStart","ɵcontainerRefreshEnd","ɵqueryRefresh","ɵloadQueryList","ɵelementEnd","ɵelementProperty","ɵcomponentHostSyntheticProperty","ɵprojectionDef","ɵreference","ɵenableBindings","ɵdisableBindings","ɵallocHostVars","ɵelementAttribute","ɵelementContainerStart","ɵelementContainerEnd","ɵelementStyling","ɵelementHostAttrs","ɵelementStylingMap","ɵelementStyleProp","ɵelementStylingApply","ɵelementClassProp","ɵtextBinding","ɵtemplate","ɵembeddedViewEnd","ɵstore","ɵload","ɵpipe","ɵwhenRendered","ɵi18n","ɵi18nAttributes","ɵi18nExp","ɵi18nStart","ɵi18nEnd","ɵi18nApply","ɵi18nPostprocess","ɵsetClassMetadata","ɵcompileComponent","ɵcompileDirective","ɵcompileNgModule","ɵcompileNgModuleDefs","ɵpatchComponentDefWithScope","ɵresetCompiledComponents","ɵcompilePipe","ɵsanitizeHtml","ɵsanitizeStyle","ɵdefaultStyleSanitizer","ɵsanitizeScript","ɵsanitizeUrl","ɵsanitizeResourceUrl","ɵbypassSanitizationTrustHtml","ɵbypassSanitizationTrustStyle","ɵbypassSanitizationTrustScript","ɵbypassSanitizationTrustUrl","ɵbypassSanitizationTrustResourceUrl","ɵgetLContext","ɵbindPlayerFactory","ɵaddPlayer","ɵgetPlayers","ɵcompileNgModuleFactory__POST_R3__","ɵSWITCH_COMPILE_COMPONENT__POST_R3__","ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__","ɵSWITCH_COMPILE_PIPE__POST_R3__","ɵSWITCH_COMPILE_NGMODULE__POST_R3__","ɵgetDebugNode__POST_R3__","ɵSWITCH_COMPILE_INJECTABLE__POST_R3__","ɵSWITCH_IVY_ENABLED__POST_R3__","ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__","ɵCompiler_compileModuleSync__POST_R3__","ɵCompiler_compileModuleAsync__POST_R3__","ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__","ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__","ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__","ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__","ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__","ɵSWITCH_RENDERER2_FACTORY__POST_R3__","ɵgetModuleFactory__POST_R3__","ɵpublishGlobalUtil","ɵpublishDefaultGlobalUtils","ɵSWITCH_INJECTOR_FACTORY__POST_R3__","ɵregisterModuleFactory","ɵEMPTY_ARRAY","ɵEMPTY_MAP","ɵand","ɵccf","ɵcmf","ɵcrt","ɵdid","ɵeld","ɵelementEventFullName","ɵgetComponentViewDefinitionFactory","ɵinlineInterpolate","ɵinterpolate","ɵmpd","ɵncd","ɵnov","ɵpid","ɵprd","ɵpad","ɵpod","ɵppd","ɵqud","ɵted","ɵunv","ɵvid"],"sources":["C:/Users/win10/Desktop/invoice crud/node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js"],"sourcesContent":["/**\n * @license Angular v7.2.16\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Subject, Subscription, Observable, merge } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @template T\n * @param {?} objWithPropertyToExtract\n * @return {?}\n */\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n    for (let key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === (/** @type {?} */ (getClosureSafeProperty))) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param {?} target The target to set properties on\n * @param {?} source The source of the property keys and values to set\n * @return {?}\n */\nfunction fillProperties(target, source) {\n    for (const key in source) {\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NG_COMPONENT_DEF = getClosureSafeProperty({ ngComponentDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_DIRECTIVE_DEF = getClosureSafeProperty({ ngDirectiveDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_PIPE_DEF = getClosureSafeProperty({ ngPipeDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_MODULE_DEF = getClosureSafeProperty({ ngModuleDef: getClosureSafeProperty });\n/** @type {?} */\nconst NG_BASE_DEF = getClosureSafeProperty({ ngBaseDef: getClosureSafeProperty });\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n * @type {?}\n */\nconst NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n * in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `\\@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * \\@publicApi\n * @template T\n * @param {?} opts\n * @return {?}\n */\nfunction defineInjectable(opts) {\n    return (/** @type {?} */ (((/** @type {?} */ ({\n        providedIn: (/** @type {?} */ (opts.providedIn)) || null, factory: opts.factory, value: undefined,\n    })))));\n}\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n *   create the type must be provided. If that factory function needs to inject arguments, it can\n *   use the `inject` function.\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * \\@publicApi\n * @param {?} options\n * @return {?}\n */\nfunction defineInjector(options) {\n    return (/** @type {?} */ (((/** @type {?} */ ({\n        factory: options.factory, providers: options.providers || [], imports: options.imports || [],\n    })))));\n}\n/**\n * Read the `ngInjectableDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @template T\n * @param {?} type type which may have `ngInjectableDef`\n * @return {?}\n */\nfunction getInjectableDef(type) {\n    return type && type.hasOwnProperty(NG_INJECTABLE_DEF) ? ((/** @type {?} */ (type)))[NG_INJECTABLE_DEF] : null;\n}\n/**\n * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @template T\n * @param {?} type type which may have `ngInjectorDef`\n * @return {?}\n */\nfunction getInjectorDef(type) {\n    return type && type.hasOwnProperty(NG_INJECTOR_DEF) ? ((/** @type {?} */ (type)))[NG_INJECTOR_DEF] : null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * \\@publicApi\n * @template T\n */\nclass InjectionToken {\n    /**\n     * @param {?} _desc\n     * @param {?=} options\n     */\n    constructor(_desc, options) {\n        this._desc = _desc;\n        /**\n         * \\@internal\n         */\n        this.ngMetadataName = 'InjectionToken';\n        if (options !== undefined) {\n            /** @nocollapse */ this.ngInjectableDef = defineInjectable({\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n        else {\n            /** @nocollapse */ this.ngInjectableDef = undefined;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return `InjectionToken ${this._desc}`; }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ANNOTATIONS = '__annotations__';\n/** @type {?} */\nconst PARAMETERS = '__parameters__';\n/** @type {?} */\nconst PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n * @template T\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} additionalProcessing\n * @param {?=} typeFn\n * @return {?}\n */\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n    /** @type {?} */\n    const metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function DecoratorFactory(...args) {\n        if (this instanceof DecoratorFactory) {\n            metaCtor.call(this, ...args);\n            return this;\n        }\n        /** @type {?} */\n        const annotationInstance = new ((/** @type {?} */ (DecoratorFactory)))(...args);\n        return function TypeDecorator(cls) {\n            if (typeFn)\n                typeFn(cls, ...args);\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            /** @type {?} */\n            const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                ((/** @type {?} */ (cls)))[ANNOTATIONS] :\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n            annotations.push(annotationInstance);\n            if (additionalProcessing)\n                additionalProcessing(cls);\n            return cls;\n        };\n    }\n    if (parentClass) {\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    ((/** @type {?} */ (DecoratorFactory))).annotationCls = DecoratorFactory;\n    return (/** @type {?} */ (DecoratorFactory));\n}\n/**\n * @param {?=} props\n * @return {?}\n */\nfunction makeMetadataCtor(props) {\n    return function ctor(...args) {\n        if (props) {\n            /** @type {?} */\n            const values = props(...args);\n            for (const propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @return {?}\n */\nfunction makeParamDecorator(name, props, parentClass) {\n    /** @type {?} */\n    const metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function ParamDecoratorFactory(...args) {\n        if (this instanceof ParamDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        /** @type {?} */\n        const annotationInstance = new ((/** @type {?} */ (ParamDecoratorFactory)))(...args);\n        ((/** @type {?} */ (ParamDecorator))).annotation = annotationInstance;\n        return ParamDecorator;\n        /**\n         * @param {?} cls\n         * @param {?} unusedKey\n         * @param {?} index\n         * @return {?}\n         */\n        function ParamDecorator(cls, unusedKey, index) {\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            /** @type {?} */\n            const parameters = cls.hasOwnProperty(PARAMETERS) ?\n                ((/** @type {?} */ (cls)))[PARAMETERS] :\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n            // there might be gaps if some in between parameters do not have annotations.\n            // we pad with nulls.\n            while (parameters.length <= index) {\n                parameters.push(null);\n            }\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\n            return cls;\n        }\n    }\n    if (parentClass) {\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    ((/** @type {?} */ (ParamDecoratorFactory))).annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} additionalProcessing\n * @return {?}\n */\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\n    /** @type {?} */\n    const metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function PropDecoratorFactory(...args) {\n        if (this instanceof PropDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        /** @type {?} */\n        const decoratorInstance = new ((/** @type {?} */ (PropDecoratorFactory)))(...args);\n        /**\n         * @param {?} target\n         * @param {?} name\n         * @return {?}\n         */\n        function PropDecorator(target, name) {\n            /** @type {?} */\n            const constructor = target.constructor;\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            /** @type {?} */\n            const meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                ((/** @type {?} */ (constructor)))[PROP_METADATA] :\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n            meta[name].unshift(decoratorInstance);\n            if (additionalProcessing)\n                additionalProcessing(target, name, ...args);\n        }\n        return PropDecorator;\n    }\n    if (parentClass) {\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    ((/** @type {?} */ (PropDecoratorFactory))).annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A DI token that you can use to create a virtual [provider](guide/glossary#provider)\n * that will populate the `entryComponents` field of components and NgModules\n * based on its `useValue` property value.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) are added to the `entryComponents` property.\n *\n * \\@usageNotes\n *\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on a router configuration that refers\n * to components.\n *\n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * \\@NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Attribute decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Attribute = makeParamDecorator('Attribute', (attributeName) => ({ attributeName }));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Base class for query metadata.\n *\n * @see `ContentChildren`.\n * @see `ContentChild`.\n * @see `ViewChildren`.\n * @see `ViewChild`.\n *\n * \\@publicApi\n * @abstract\n */\nclass Query {\n}\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst ContentChildren = makePropDecorator('ContentChildren', (selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: false, descendants: false }, data)), Query);\n/**\n * ContentChild decorator and metadata.\n *\n *\n * \\@Annotation\n *\n * \\@publicApi\n * @type {?}\n */\nconst ContentChild = makePropDecorator('ContentChild', (selector, data = {}) => (Object.assign({ selector, first: true, isViewQuery: false, descendants: true }, data)), Query);\n/**\n * ViewChildren decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst ViewChildren = makePropDecorator('ViewChildren', (selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: true, descendants: true }, data)), Query);\n/**\n * ViewChild decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst ViewChild = makePropDecorator('ViewChild', (selector, data) => (Object.assign({ selector, first: true, isViewQuery: true, descendants: true }, data)), Query);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst ChangeDetectionStrategy = {\n    /**\n     * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n     * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n     * Change detection can still be explicitly invoked.\n     * This strategy applies to all child directives and cannot be overridden.\n     */\n    OnPush: 0,\n    /**\n     * Use the default `CheckAlways` strategy, in which change detection is automatic until\n     * explicitly deactivated.\n     */\n    Default: 1,\n};\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = 'OnPush';\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = 'Default';\n/** @enum {number} */\nconst ChangeDetectorStatus = {\n    /**\n     * A state in which, after calling `detectChanges()`, the change detector\n     * state becomes `Checked`, and must be explicitly invoked or reactivated.\n     */\n    CheckOnce: 0,\n    /**\n     * A state in which change detection is skipped until the change detector mode\n     * becomes `CheckOnce`.\n     */\n    Checked: 1,\n    /**\n     * A state in which change detection continues automatically until explicitly\n     * deactivated.\n     */\n    CheckAlways: 2,\n    /**\n     * A state in which a change detector sub tree is not a part of the main tree and\n     * should be skipped.\n     */\n    Detached: 3,\n    /**\n     * Indicates that the change detector encountered an error checking a binding\n     * or calling a directive lifecycle method and is now in an inconsistent state. Change\n     * detectors in this state do not detect changes.\n     */\n    Errored: 4,\n    /**\n     * Indicates that the change detector has been destroyed.\n     */\n    Destroyed: 5,\n};\nChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = 'CheckOnce';\nChangeDetectorStatus[ChangeDetectorStatus.Checked] = 'Checked';\nChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = 'CheckAlways';\nChangeDetectorStatus[ChangeDetectorStatus.Detached] = 'Detached';\nChangeDetectorStatus[ChangeDetectorStatus.Errored] = 'Errored';\nChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = 'Destroyed';\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @see `ChangeDetectorStatus` / `ChangeDetectorRef`\n * @param {?} changeDetectionStrategy The strategy to check.\n * @return {?} True if the given strategy is the current default, false otherwise.\n */\nfunction isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n    return changeDetectionStrategy == null ||\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst __window = typeof window !== 'undefined' && window;\n/** @type {?} */\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\n/** @type {?} */\nconst __global = typeof global !== 'undefined' && global;\n// Check __global first, because in Node tests both __global and __window may be defined and _global\n// should be __global in that case.\n/** @type {?} */\nconst _global = __global || __window || __self;\n/** @type {?} */\nconst promise = Promise.resolve(0);\n/** @type {?} */\nlet _symbolIterator = null;\n/**\n * @return {?}\n */\nfunction getSymbolIterator() {\n    if (!_symbolIterator) {\n        /** @type {?} */\n        const Symbol = _global['Symbol'];\n        if (Symbol && Symbol.iterator) {\n            _symbolIterator = Symbol.iterator;\n        }\n        else {\n            // es6-shim specific logic\n            /** @type {?} */\n            const keys = Object.getOwnPropertyNames(Map.prototype);\n            for (let i = 0; i < keys.length; ++i) {\n                /** @type {?} */\n                const key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    ((/** @type {?} */ (Map))).prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nfunction scheduleMicroTask(fn) {\n    if (typeof Zone === 'undefined') {\n        // use promise to schedule microTask instead of use Zone\n        promise.then(() => { fn && fn.apply(null, null); });\n    }\n    else {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n}\n// JS has NaN !== NaN\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction looseIdentical(a, b) {\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n    if (token.name) {\n        return `${token.name}`;\n    }\n    /** @type {?} */\n    const res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    /** @type {?} */\n    const newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n * @param {?} fn\n * @return {?}\n */\nfunction noSideEffects(fn) {\n    return '' + { toString: fn };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * \\@usageNotes\n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@publicApi\n * @param {?} forwardRefFn\n * @return {?}\n */\nfunction forwardRef(forwardRefFn) {\n    ((/** @type {?} */ (forwardRefFn))).__forward_ref__ = forwardRef;\n    ((/** @type {?} */ (forwardRefFn))).toString = function () { return stringify(this()); };\n    return ((/** @type {?} */ ((/** @type {?} */ (forwardRefFn)))));\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * \\@publicApi\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction resolveForwardRef(type) {\n    /** @type {?} */\n    const fn = type;\n    if (typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef) {\n        return fn();\n    }\n    else {\n        return type;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to resolve resource URLs on `\\@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * \\@Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `\\@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `\\@Component.templateUrl` into\n * // `\\@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param {?} resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n * @return {?}\n */\nfunction resolveComponentResources(resourceResolver) {\n    // Store all promises which are fetching the resources.\n    /** @type {?} */\n    const urlFetches = [];\n    // Cache so that we don't fetch the same resource more than once.\n    /** @type {?} */\n    const urlMap = new Map();\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    function cachedResourceResolve(url) {\n        /** @type {?} */\n        let promise = urlMap.get(url);\n        if (!promise) {\n            /** @type {?} */\n            const resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n            urlFetches.push(promise);\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach((component) => {\n        if (component.templateUrl) {\n            cachedResourceResolve(component.templateUrl).then((template) => {\n                component.template = template;\n                component.templateUrl = undefined;\n            });\n        }\n        /** @type {?} */\n        const styleUrls = component.styleUrls;\n        /** @type {?} */\n        const styles = component.styles || (component.styles = []);\n        /** @type {?} */\n        const styleOffset = component.styles.length;\n        styleUrls && styleUrls.forEach((styleUrl, index) => {\n            styles.push(''); // pre-allocate array.\n            cachedResourceResolve(styleUrl).then((style) => {\n                styles[styleOffset + index] = style;\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                if (styleUrls.length == 0) {\n                    component.styleUrls = undefined;\n                }\n            });\n        });\n    });\n    componentResourceResolutionQueue.clear();\n    return Promise.all(urlFetches).then(() => null);\n}\n/** @type {?} */\nconst componentResourceResolutionQueue = new Set();\n/**\n * @param {?} metadata\n * @return {?}\n */\nfunction maybeQueueResolutionOfComponentResources(metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.add(metadata);\n    }\n}\n/**\n * @param {?} component\n * @return {?}\n */\nfunction componentNeedsResolution(component) {\n    return component.templateUrl || component.styleUrls && component.styleUrls.length;\n}\n/**\n * @param {?} response\n * @return {?}\n */\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst ViewEncapsulation = {\n    /**\n     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n     * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n     * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n     * selectors.\n     *\n     * This is the default option.\n     */\n    Emulated: 0,\n    /**\n     * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n     * Use the native encapsulation mechanism of the renderer.\n     *\n     * For the DOM this means using the deprecated [Shadow DOM\n     * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    Native: 1,\n    /**\n     * Don't provide any template or style encapsulation.\n     */\n    None: 2,\n    /**\n     * Use Shadow DOM to encapsulate styles.\n     *\n     * For the DOM this means using modern [Shadow\n     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n     * creating a ShadowRoot for Component's Host Element.\n     */\n    ShadowDom: 3,\n};\nViewEncapsulation[ViewEncapsulation.Emulated] = 'Emulated';\nViewEncapsulation[ViewEncapsulation.Native] = 'Native';\nViewEncapsulation[ViewEncapsulation.None] = 'None';\nViewEncapsulation[ViewEncapsulation.ShadowDom] = 'ShadowDom';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nfunction ngDevModeResetPerfCounters() {\n    /** @type {?} */\n    const newCounters = {\n        firstTemplatePass: 0,\n        tNode: 0,\n        tView: 0,\n        rendererCreateTextNode: 0,\n        rendererSetText: 0,\n        rendererCreateElement: 0,\n        rendererAddEventListener: 0,\n        rendererSetAttribute: 0,\n        rendererRemoveAttribute: 0,\n        rendererSetProperty: 0,\n        rendererSetClassName: 0,\n        rendererAddClass: 0,\n        rendererRemoveClass: 0,\n        rendererSetStyle: 0,\n        rendererRemoveStyle: 0,\n        rendererDestroy: 0,\n        rendererDestroyNode: 0,\n        rendererMoveNode: 0,\n        rendererRemoveNode: 0,\n        rendererCreateComment: 0,\n    };\n    // NOTE: Under Ivy we may have both window & global defined in the Node\n    //    environment since ensureDocument() in render3.ts sets global.window.\n    if (typeof window != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        ((/** @type {?} */ (window)))['ngDevMode'] = newCounters;\n    }\n    if (typeof global != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        ((/** @type {?} */ (global)))['ngDevMode'] = newCounters;\n    }\n    if (typeof self != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        ((/** @type {?} */ (self)))['ngDevMode'] = newCounters;\n    }\n    return newCounters;\n}\n/**\n * This checks to see if the `ngDevMode` has been set. If yes,\n * than we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n */\nif (typeof ngDevMode === 'undefined' || ngDevMode) {\n    ngDevModeResetPerfCounters();\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n * @type {?}\n */\nconst EMPTY_OBJ = {};\n/** @type {?} */\nconst EMPTY_ARRAY = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    Object.freeze(EMPTY_OBJ);\n    Object.freeze(EMPTY_ARRAY);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _renderCompCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} componentDefinition\n * @return {?}\n */\nfunction defineComponent(componentDefinition) {\n    /** @type {?} */\n    const type = componentDefinition.type;\n    /** @type {?} */\n    const typePrototype = type.prototype;\n    /** @type {?} */\n    const declaredInputs = (/** @type {?} */ ({}));\n    /** @type {?} */\n    const def = {\n        type: type,\n        providersResolver: null,\n        consts: componentDefinition.consts,\n        vars: componentDefinition.vars,\n        factory: componentDefinition.factory,\n        template: componentDefinition.template || (/** @type {?} */ (null)),\n        hostBindings: componentDefinition.hostBindings || null,\n        contentQueries: componentDefinition.contentQueries || null,\n        contentQueriesRefresh: componentDefinition.contentQueriesRefresh || null,\n        attributes: componentDefinition.attributes || null,\n        declaredInputs: declaredInputs,\n        inputs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        outputs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        exportAs: componentDefinition.exportAs || null,\n        onInit: typePrototype.ngOnInit || null,\n        doCheck: typePrototype.ngDoCheck || null,\n        afterContentInit: typePrototype.ngAfterContentInit || null,\n        afterContentChecked: typePrototype.ngAfterContentChecked || null,\n        afterViewInit: typePrototype.ngAfterViewInit || null,\n        afterViewChecked: typePrototype.ngAfterViewChecked || null,\n        onDestroy: typePrototype.ngOnDestroy || null,\n        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n        directiveDefs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        pipeDefs: (/** @type {?} */ (null)),\n        // assigned in noSideEffects\n        selectors: componentDefinition.selectors,\n        viewQuery: componentDefinition.viewQuery || null,\n        features: componentDefinition.features || null,\n        data: componentDefinition.data || {},\n        // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n        // next line. Also `None` should be 0 not 2.\n        encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n        id: 'c',\n        styles: componentDefinition.styles || EMPTY_ARRAY,\n        _: (/** @type {?} */ (null)),\n    };\n    def._ = (/** @type {?} */ (noSideEffects(() => {\n        /** @type {?} */\n        const directiveTypes = (/** @type {?} */ (componentDefinition.directives));\n        /** @type {?} */\n        const feature = componentDefinition.features;\n        /** @type {?} */\n        const pipeTypes = (/** @type {?} */ (componentDefinition.pipes));\n        def.id += _renderCompCount++;\n        def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n            def.outputs = invertObject(componentDefinition.outputs),\n            feature && feature.forEach((fn) => fn(def));\n        def.directiveDefs = directiveTypes ?\n            () => (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                .map(extractDirectiveDef) :\n            null;\n        def.pipeDefs = pipeTypes ?\n            () => (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef) :\n            null;\n    })));\n    return (/** @type {?} */ (def));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction extractDirectiveDef(type) {\n    /** @type {?} */\n    const def = getComponentDef(type) || getDirectiveDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(`'${type.name}' is neither 'ComponentType' or 'DirectiveType'.`);\n    }\n    return (/** @type {?} */ (def));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction extractPipeDef(type) {\n    /** @type {?} */\n    const def = getPipeDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(`'${type.name}' is not a 'PipeType'.`);\n    }\n    return (/** @type {?} */ (def));\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nfunction defineNgModule(def) {\n    /** @type {?} */\n    const res = {\n        type: def.type,\n        bootstrap: def.bootstrap || EMPTY_ARRAY,\n        declarations: def.declarations || EMPTY_ARRAY,\n        imports: def.imports || EMPTY_ARRAY,\n        exports: def.exports || EMPTY_ARRAY,\n        transitiveCompileScopes: null,\n    };\n    return (/** @type {?} */ (res));\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n * \\@Input()\n *   propName1: string;\n *\n * \\@Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n * @param {?} obj\n * @param {?=} secondary\n * @return {?}\n */\nfunction invertObject(obj, secondary) {\n    if (obj == null)\n        return EMPTY_OBJ;\n    /** @type {?} */\n    const newLookup = {};\n    for (const minifiedKey in obj) {\n        if (obj.hasOwnProperty(minifiedKey)) {\n            /** @type {?} */\n            let publicName = obj[minifiedKey];\n            /** @type {?} */\n            let declaredName = publicName;\n            if (Array.isArray(publicName)) {\n                declaredName = publicName[1];\n                publicName = publicName[0];\n            }\n            newLookup[publicName] = minifiedKey;\n            if (secondary) {\n                (secondary[publicName] = declaredName);\n            }\n        }\n    }\n    return newLookup;\n}\n/**\n * Create a base definition\n *\n * # Example\n * ```\n * class ShouldBeInherited {\n *   static ngBaseDef = defineBase({\n *      ...\n *   })\n * }\n * @template T\n * @param {?} baseDefinition The base definition parameters\n * @return {?}\n */\nfunction defineBase(baseDefinition) {\n    /** @type {?} */\n    const declaredInputs = (/** @type {?} */ ({}));\n    return {\n        inputs: invertObject(baseDefinition.inputs, declaredInputs),\n        declaredInputs: declaredInputs,\n        outputs: invertObject(baseDefinition.outputs),\n    };\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n * @type {?}\n */\nconst defineDirective = (/** @type {?} */ ((/** @type {?} */ (defineComponent))));\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} pipeDef Pipe definition generated by the compiler\n * @return {?}\n */\nfunction definePipe(pipeDef) {\n    return (/** @type {?} */ (((/** @type {?} */ ({\n        name: pipeDef.name,\n        factory: pipeDef.factory,\n        pure: pipeDef.pure !== false,\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    })))));\n}\n/**\n * The following getter methods retrieve the definition form the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getComponentDef(type) {\n    return ((/** @type {?} */ (type)))[NG_COMPONENT_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getDirectiveDef(type) {\n    return ((/** @type {?} */ (type)))[NG_DIRECTIVE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getPipeDef(type) {\n    return ((/** @type {?} */ (type)))[NG_PIPE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @param {?=} throwNotFound\n * @return {?}\n */\nfunction getNgModuleDef(type, throwNotFound) {\n    /** @type {?} */\n    /** @nocollapse */ const ngModuleDef = ((/** @type {?} */ (type)))[NG_MODULE_DEF] || null;\n    if (!ngModuleDef && throwNotFound === true) {\n        throw new Error(`Type ${stringify(type)} does not have 'ngModuleDef' property.`);\n    }\n    return ngModuleDef;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nfunction assertEqual(actual, expected, msg) {\n    if (actual != expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nfunction assertNotEqual(actual, expected, msg) {\n    if (actual == expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nfunction assertLessThan(actual, expected, msg) {\n    if (actual >= expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nfunction assertGreaterThan(actual, expected, msg) {\n    if (actual <= expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} msg\n * @return {?}\n */\nfunction assertDefined(actual, msg) {\n    if (actual == null) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nfunction assertComponentType(actual, msg = 'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.') {\n    if (!getComponentDef(actual)) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nfunction assertNgModuleType(actual, msg = 'Type passed in is not NgModuleType, it does not have \\'ngModuleDef\\' property.') {\n    if (!getNgModuleDef(actual)) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} msg\n * @return {?}\n */\nfunction throwError(msg) {\n    // tslint:disable-next-line\n    debugger; // Left intentionally for better debugger experience.\n    throw new Error(`ASSERTION ERROR: ${msg}`);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction assertDomNode(node) {\n    assertEqual(node instanceof Node, true, 'The provided value must be an instance of a DOM Node');\n}\n/**\n * @param {?} isParent\n * @return {?}\n */\nfunction assertPreviousIsParent(isParent) {\n    assertEqual(isParent, true, 'previousOrParentTNode should be a parent');\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction assertHasParent(tNode) {\n    assertDefined(tNode.parent, 'previousOrParentTNode should have a parent');\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction assertDataInRange(arr, index) {\n    assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\n/** @type {?} */\nconst TVIEW = 0;\n/** @type {?} */\nconst FLAGS = 1;\n/** @type {?} */\nconst PARENT = 2;\n/** @type {?} */\nconst NEXT = 3;\n/** @type {?} */\nconst QUERIES = 4;\n/** @type {?} */\nconst HOST = 5;\n/** @type {?} */\nconst HOST_NODE = 6;\n// Rename to `T_HOST`?\n/** @type {?} */\nconst BINDING_INDEX = 7;\n/** @type {?} */\nconst CLEANUP = 8;\n/** @type {?} */\nconst CONTEXT = 9;\n/** @type {?} */\nconst INJECTOR = 10;\n/** @type {?} */\nconst RENDERER_FACTORY = 11;\n/** @type {?} */\nconst RENDERER = 12;\n/** @type {?} */\nconst SANITIZER = 13;\n/** @type {?} */\nconst TAIL = 14;\n/** @type {?} */\nconst CONTAINER_INDEX = 15;\n/** @type {?} */\nconst CONTENT_QUERIES = 16;\n/** @type {?} */\nconst DECLARATION_VIEW = 17;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n * @type {?}\n */\nconst HEADER_OFFSET = 18;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n * @type {?}\n */\nconst ACTIVE_INDEX = 0;\n/** @type {?} */\nconst VIEWS = 1;\n// PARENT, NEXT, QUERIES, and HOST are indices 2, 3, 4, and 5.\n// As we already have these constants in LView, we don't need to re-create them.\n/** @type {?} */\nconst NATIVE = 6;\n/** @type {?} */\nconst RENDER_PARENT = 7;\n// Because interfaces in TS/JS cannot be instanceof-checked this means that we\n// need to rely on predictable characteristics of data-structures to check if they\n// are what we expect for them to be. The `LContainer` interface code below has a\n// fixed length and the constant value below references that. Using the length value\n// below we can predictably gaurantee that we are dealing with an `LContainer` array.\n// This value MUST be kept up to date with the length of the `LContainer` array\n// interface below so that runtime type checking can work.\n/** @type {?} */\nconst LCONTAINER_LENGTH = 8;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This property will be monkey-patched on elements, components and directives\n * @type {?}\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst TNODE = 8;\n/** @type {?} */\nconst PARENT_INJECTOR = 8;\n/** @type {?} */\nconst INJECTOR_BLOOM_PARENT_SIZE = 9;\n/** @type {?} */\nconst NO_PARENT_INJECTOR = (/** @type {?} */ (-1));\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nclass NodeInjectorFactory {\n    /**\n     * @param {?} factory\n     * @param {?} isViewProvider\n     * @param {?} injectImplementation\n     */\n    constructor(factory, \n    /**\n     * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n     */\n    isViewProvider, injectImplementation) {\n        this.factory = factory;\n        /**\n         * Marker set to true during factory invocation to see if we get into recursive loop.\n         * Recursive loop causes an error to be displayed.\n         */\n        this.resolving = false;\n        this.canSeeViewProviders = isViewProvider;\n        this.injectImpl = injectImplementation;\n    }\n}\n/** @type {?} */\nconst FactoryPrototype = NodeInjectorFactory.prototype;\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isFactory(obj) {\n    // See: https://jsperf.com/instanceof-vs-getprototypeof\n    return obj != null && typeof obj == 'object' && Object.getPrototypeOf(obj) == FactoryPrototype;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction isDifferent(a, b) {\n    // NaN is the only value that is not equal to itself so the first\n    // test checks if both a and b are not NaN\n    return !(a !== a && b !== b) && a !== b;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction stringify$1(value) {\n    if (typeof value == 'function')\n        return value.name || value;\n    if (typeof value == 'string')\n        return value;\n    if (value == null)\n        return '';\n    if (typeof value == 'object' && typeof value.type == 'function')\n        return value.type.name || value.type;\n    return '' + value;\n}\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n * @param {?} list\n * @return {?}\n */\nfunction flatten(list) {\n    /** @type {?} */\n    const result = [];\n    /** @type {?} */\n    let i = 0;\n    while (i < list.length) {\n        /** @type {?} */\n        const item = list[i];\n        if (Array.isArray(item)) {\n            if (item.length > 0) {\n                list = item.concat(list.slice(i + 1));\n                i = 0;\n            }\n            else {\n                i++;\n            }\n        }\n        else {\n            result.push(item);\n            i++;\n        }\n    }\n    return result;\n}\n/**\n * Retrieves a value from any `LView` or `TData`.\n * @template T\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction loadInternal(view, index) {\n    ngDevMode && assertDataInRange(view, index + HEADER_OFFSET);\n    return view[index + HEADER_OFFSET];\n}\n/**\n * Takes the value of a slot in `LView` and returns the element node.\n *\n * Normally, element nodes are stored flat, but if the node has styles/classes on it,\n * it might be wrapped in a styling context. Or if that node has a directive that injects\n * ViewContainerRef, it may be wrapped in an LContainer. Or if that node is a component,\n * it will be wrapped in LView. It could even have all three, so we keep looping\n * until we find something that isn't an array.\n *\n * @param {?} value The initial value in `LView`\n * @return {?}\n */\nfunction readElementValue(value) {\n    while (Array.isArray(value)) {\n        value = (/** @type {?} */ (value[HOST]));\n    }\n    return value;\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n * @param {?} index\n * @param {?} lView\n * @return {?}\n */\nfunction getNativeByIndex(index, lView) {\n    return readElementValue(lView[index + HEADER_OFFSET]);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nfunction getNativeByTNode(tNode, hostView) {\n    return readElementValue(hostView[tNode.index]);\n}\n/**\n * @param {?} index\n * @param {?} view\n * @return {?}\n */\nfunction getTNode(index, view) {\n    ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n    ngDevMode && assertLessThan(index, view[TVIEW].data.length, 'wrong index for TNode');\n    return (/** @type {?} */ (view[TVIEW].data[index + HEADER_OFFSET]));\n}\n/**\n * @param {?} nodeIndex\n * @param {?} hostView\n * @return {?}\n */\nfunction getComponentViewByIndex(nodeIndex, hostView) {\n    // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n    /** @type {?} */\n    const slotValue = hostView[nodeIndex];\n    return slotValue.length >= HEADER_OFFSET ? slotValue : slotValue[HOST];\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isContentQueryHost(tNode) {\n    return (tNode.flags & 4 /* hasContentQuery */) !== 0;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isComponent(tNode) {\n    return (tNode.flags & 1 /* isComponent */) === 1 /* isComponent */;\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nfunction isComponentDef(def) {\n    return ((/** @type {?} */ (def))).template !== null;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isLContainer(value) {\n    // Styling contexts are also arrays, but their first index contains an element node\n    return Array.isArray(value) && value.length === LCONTAINER_LENGTH;\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction isRootView(target) {\n    return (target[FLAGS] & 128 /* IsRoot */) !== 0;\n}\n/**\n * Retrieve the root view from any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} target\n * @return {?}\n */\nfunction getRootView(target) {\n    ngDevMode && assertDefined(target, 'component');\n    /** @type {?} */\n    let lView = Array.isArray(target) ? ((/** @type {?} */ (target))) : (/** @type {?} */ (readPatchedLView(target)));\n    while (lView && !(lView[FLAGS] & 128 /* IsRoot */)) {\n        lView = (/** @type {?} */ (lView[PARENT]));\n    }\n    return lView;\n}\n/**\n * @param {?} viewOrComponent\n * @return {?}\n */\nfunction getRootContext(viewOrComponent) {\n    /** @type {?} */\n    const rootView = getRootView(viewOrComponent);\n    ngDevMode &&\n        assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n    return (/** @type {?} */ (rootView[CONTEXT]));\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n * @param {?} target\n * @return {?}\n */\nfunction readPatchedData(target) {\n    ngDevMode && assertDefined(target, 'Target expected');\n    return target[MONKEY_PATCH_KEY_NAME];\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction readPatchedLView(target) {\n    /** @type {?} */\n    const value = readPatchedData(target);\n    if (value) {\n        return Array.isArray(value) ? value : ((/** @type {?} */ (value))).lView;\n    }\n    return null;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nfunction hasParentInjector(parentLocation) {\n    return parentLocation !== NO_PARENT_INJECTOR;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nfunction getParentInjectorIndex(parentLocation) {\n    return ((/** @type {?} */ ((/** @type {?} */ (parentLocation))))) & 32767 /* InjectorIndexMask */;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nfunction getParentInjectorViewOffset(parentLocation) {\n    return ((/** @type {?} */ ((/** @type {?} */ (parentLocation))))) >> 16 /* ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LView instance from which to start walking up the view tree\n * @return {?} The LView instance that contains the parent injector\n */\nfunction getParentInjectorView(location, startView) {\n    /** @type {?} */\n    let viewOffset = getParentInjectorViewOffset(location);\n    /** @type {?} */\n    let parentView = startView;\n    // For most cases, the parent injector can be found on the host node (e.g. for component\n    // or container), but we must keep the loop here to support the rarer case of deeply nested\n    // <ng-template> tags or inline views, where the parent injector might live many views\n    // above the child injector.\n    while (viewOffset > 0) {\n        parentView = (/** @type {?} */ (parentView[DECLARATION_VIEW]));\n        viewOffset--;\n    }\n    return parentView;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the TNode of the parent injector is found.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LView instance from which to start walking up the view tree\n * @param {?} startTNode The TNode instance of the starting element\n * @return {?} The TNode of the parent injector\n */\nfunction getParentInjectorTNode(location, startView, startTNode) {\n    if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {\n        // view offset is 0\n        /** @type {?} */\n        const injectorIndex = startTNode.parent.injectorIndex;\n        /** @type {?} */\n        let parentTNode = startTNode.parent;\n        while (parentTNode.parent != null && injectorIndex == parentTNode.injectorIndex) {\n            parentTNode = parentTNode.parent;\n        }\n        return parentTNode;\n    }\n    /** @type {?} */\n    let viewOffset = getParentInjectorViewOffset(location);\n    // view offset is 1\n    /** @type {?} */\n    let parentView = startView;\n    /** @type {?} */\n    let parentTNode = (/** @type {?} */ (startView[HOST_NODE]));\n    // view offset is superior to 1\n    while (viewOffset > 1) {\n        parentView = (/** @type {?} */ (parentView[DECLARATION_VIEW]));\n        parentTNode = (/** @type {?} */ (parentView[HOST_NODE]));\n        viewOffset--;\n    }\n    return parentTNode;\n}\n/** @type {?} */\nconst defaultScheduler = (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only\n    setTimeout // everything else\n).bind(_global);\n/**\n * Equivalent to ES6 spread, add each item to an array.\n *\n * @param {?} items The items to add\n * @param {?} arr The array to which you want to add the items\n * @return {?}\n */\nfunction addAllToArray(items, arr) {\n    for (let i = 0; i < items.length; i++) {\n        arr.push(items[i]);\n    }\n}\n/**\n * Given a current view, finds the nearest component's host (LElement).\n *\n * @param {?} lView LView for which we want a host element node\n * @return {?} The host node\n */\nfunction findComponentView(lView) {\n    /** @type {?} */\n    let rootTNode = lView[HOST_NODE];\n    while (rootTNode && rootTNode.type === 2 /* View */) {\n        ngDevMode && assertDefined(lView[DECLARATION_VIEW], 'lView[DECLARATION_VIEW]');\n        lView = (/** @type {?} */ (lView[DECLARATION_VIEW]));\n        rootTNode = lView[HOST_NODE];\n    }\n    return lView;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction getCompilerFacade() {\n    /** @type {?} */\n    const globalNg = _global['ng'];\n    if (!globalNg || !globalNg.ɵcompilerFacade) {\n        throw new Error(`Angular JIT compilation failed: '@angular/compiler' not loaded!\\n` +\n            `  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\\n` +\n            `  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\\n` +\n            `  - Alternatively provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`);\n    }\n    return globalNg.ɵcompilerFacade;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Inject decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Inject = makeParamDecorator('Inject', (token) => ({ token }));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Optional decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Optional = makeParamDecorator('Optional');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Self decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Self = makeParamDecorator('Self');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * SkipSelf decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst SkipSelf = makeParamDecorator('SkipSelf');\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Host decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Host = makeParamDecorator('Host');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst InjectFlags = {\n    // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n    Default: 0,\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    Host: 1,\n    /** Don't descend into ancestors of the node requesting injection. */\n    Self: 2,\n    /** Skip the node that is requesting injection. */\n    SkipSelf: 4,\n    /** Inject `defaultValue` instead if token not found. */\n    Optional: 8,\n};\nInjectFlags[InjectFlags.Default] = 'Default';\nInjectFlags[InjectFlags.Host] = 'Host';\nInjectFlags[InjectFlags.Self] = 'Self';\nInjectFlags[InjectFlags.SkipSelf] = 'SkipSelf';\nInjectFlags[InjectFlags.Optional] = 'Optional';\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n * @type {?}\n */\nlet _currentInjector = undefined;\n/**\n * @param {?} injector\n * @return {?}\n */\nfunction setCurrentInjector(injector) {\n    /** @type {?} */\n    const former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n * @type {?}\n */\nlet _injectImplementation;\n/**\n * Sets the current inject implementation.\n * @param {?} impl\n * @return {?}\n */\nfunction setInjectImplementation(impl) {\n    /** @type {?} */\n    const previous = _injectImplementation;\n    _injectImplementation = impl;\n    return previous;\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nfunction injectInjectorOnly(token, flags = InjectFlags.Default) {\n    if (_currentInjector === undefined) {\n        throw new Error(`inject() must be called from an injection context`);\n    }\n    else if (_currentInjector === null) {\n        return injectRootLimpMode(token, undefined, flags);\n    }\n    else {\n        return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n    }\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nfunction inject(token, flags = InjectFlags.Default) {\n    return (_injectImplementation || injectInjectorOnly)(token, flags);\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * `InjectableDef`.\n * @template T\n * @param {?} token\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction injectRootLimpMode(token, notFoundValue, flags) {\n    /** @type {?} */\n    const injectableDef = getInjectableDef(token);\n    if (injectableDef && injectableDef.providedIn == 'root') {\n        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n            injectableDef.value;\n    }\n    if (flags & InjectFlags.Optional)\n        return null;\n    if (notFoundValue !== undefined)\n        return notFoundValue;\n    throw new Error(`Injector: NOT_FOUND [${stringify(token)}]`);\n}\n/**\n * @param {?} types\n * @return {?}\n */\nfunction injectArgs(types) {\n    /** @type {?} */\n    const args = [];\n    for (let i = 0; i < types.length; i++) {\n        /** @type {?} */\n        const arg = types[i];\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new Error('Arguments array must have arguments.');\n            }\n            /** @type {?} */\n            let type = undefined;\n            /** @type {?} */\n            let flags = InjectFlags.Default;\n            for (let j = 0; j < arg.length; j++) {\n                /** @type {?} */\n                const meta = arg[j];\n                if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n                    flags |= InjectFlags.Optional;\n                }\n                else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n                    flags |= InjectFlags.SkipSelf;\n                }\n                else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n                    flags |= InjectFlags.Self;\n                }\n                else if (meta instanceof Inject) {\n                    type = meta.token;\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(inject((/** @type {?} */ (type)), flags));\n        }\n        else {\n            args.push(inject(arg));\n        }\n    }\n    return args;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} tNode\n * @param {?} type\n * @return {?}\n */\nfunction assertNodeType(tNode, type) {\n    assertDefined(tNode, 'should be called with a TNode');\n    assertEqual(tNode.type, type, `should be a ${typeName(type)}`);\n}\n/**\n * @param {?} tNode\n * @param {...?} types\n * @return {?}\n */\nfunction assertNodeOfPossibleTypes(tNode, ...types) {\n    assertDefined(tNode, 'should be called with a TNode');\n    /** @type {?} */\n    const found = types.some(type => tNode.type === type);\n    assertEqual(found, true, `Should be one of ${types.map(typeName).join(', ')} but got ${typeName(tNode.type)}`);\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction typeName(type) {\n    if (type == 1 /* Projection */)\n        return 'Projection';\n    if (type == 0 /* Container */)\n        return 'Container';\n    if (type == 2 /* View */)\n        return 'View';\n    if (type == 3 /* Element */)\n        return 'Element';\n    if (type == 4 /* ElementContainer */)\n        return 'ElementContainer';\n    return '<unknown>';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * If this is the first template pass, any ngOnInit or ngDoCheck hooks will be queued into\n * TView.initHooks during directiveCreate.\n *\n * The directive index and hook type are encoded into one number (1st bit: type, remaining bits:\n * directive index), then saved in the even indices of the initHooks array. The odd indices\n * hold the hook functions themselves.\n *\n * @param {?} index The index of the directive in LView\n * @param {?} onInit\n * @param {?} doCheck\n * @param {?} tView The current TView\n * @return {?}\n */\nfunction queueInitHooks(index, onInit, doCheck, tView) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n    if (onInit) {\n        (tView.initHooks || (tView.initHooks = [])).push(index, onInit);\n    }\n    if (doCheck) {\n        (tView.initHooks || (tView.initHooks = [])).push(index, doCheck);\n        (tView.checkHooks || (tView.checkHooks = [])).push(index, doCheck);\n    }\n}\n/**\n * Loops through the directives on a node and queues all their hooks except ngOnInit\n * and ngDoCheck, which are queued separately in directiveCreate.\n * @param {?} tView\n * @param {?} tNode\n * @return {?}\n */\nfunction queueLifecycleHooks(tView, tNode) {\n    if (tView.firstTemplatePass) {\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n        // hooks for projected components and directives must be called *before* their hosts.\n        for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (tView.data[i]));\n            queueContentHooks(def, tView, i);\n            queueViewHooks(def, tView, i);\n            queueDestroyHooks(def, tView, i);\n        }\n    }\n}\n/**\n * Queues afterContentInit and afterContentChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueContentHooks(def, tView, i) {\n    if (def.afterContentInit) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentInit);\n    }\n    if (def.afterContentChecked) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentChecked);\n        (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, def.afterContentChecked);\n    }\n}\n/**\n * Queues afterViewInit and afterViewChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueViewHooks(def, tView, i) {\n    if (def.afterViewInit) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewInit);\n    }\n    if (def.afterViewChecked) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewChecked);\n        (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, def.afterViewChecked);\n    }\n}\n/**\n * Queues onDestroy hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueDestroyHooks(def, tView, i) {\n    if (def.onDestroy != null) {\n        (tView.destroyHooks || (tView.destroyHooks = [])).push(i, def.onDestroy);\n    }\n}\n/**\n * Calls onInit and doCheck calls if they haven't already been called.\n *\n * @param {?} currentView The current view\n * @param {?} tView\n * @param {?} checkNoChangesMode\n * @return {?}\n */\nfunction executeInitHooks(currentView, tView, checkNoChangesMode) {\n    if (!checkNoChangesMode && currentView[FLAGS] & 32 /* RunInit */) {\n        executeHooks(currentView, tView.initHooks, tView.checkHooks, checkNoChangesMode);\n        currentView[FLAGS] &= ~32 /* RunInit */;\n    }\n}\n/**\n * Iterates over afterViewInit and afterViewChecked functions and calls them.\n *\n * @param {?} currentView The current view\n * @param {?} allHooks\n * @param {?} checkHooks\n * @param {?} checkNoChangesMode\n * @return {?}\n */\nfunction executeHooks(currentView, allHooks, checkHooks, checkNoChangesMode) {\n    if (checkNoChangesMode)\n        return;\n    /** @type {?} */\n    const hooksToCall = currentView[FLAGS] & 2 /* FirstLViewPass */ ? allHooks : checkHooks;\n    if (hooksToCall) {\n        callHooks(currentView, hooksToCall);\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass.\n *\n * @param {?} currentView The current view\n * @param {?} arr The array in which the hooks are found\n * @return {?}\n */\nfunction callHooks(currentView, arr) {\n    for (let i = 0; i < arr.length; i += 2) {\n        ((/** @type {?} */ (arr[i + 1]))).call(currentView[(/** @type {?} */ (arr[i]))]);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Store the element depth count. This is used to identify the root elements of the template\n * so that we can than attach `LView` to only those elements.\n * @type {?}\n */\nlet elementDepthCount;\n/**\n * @return {?}\n */\nfunction getElementDepthCount() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return elementDepthCount;\n}\n/**\n * @return {?}\n */\nfunction increaseElementDepthCount() {\n    elementDepthCount++;\n}\n/**\n * @return {?}\n */\nfunction decreaseElementDepthCount() {\n    elementDepthCount--;\n}\n/** @type {?} */\nlet currentDirectiveDef = null;\n/**\n * @return {?}\n */\nfunction getCurrentDirectiveDef() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return currentDirectiveDef;\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction setCurrentDirectiveDef(def) {\n    currentDirectiveDef = def;\n}\n/**\n * Stores whether directives should be matched to elements.\n *\n * When template contains `ngNonBindable` than we need to prevent the runtime form matching\n * directives on children of that element.\n *\n * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n * </div>\n * ```\n * @type {?}\n */\nlet bindingsEnabled;\n/**\n * @return {?}\n */\nfunction getBindingsEnabled() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return bindingsEnabled;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n * @return {?}\n */\nfunction enableBindings() {\n    bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n * @return {?}\n */\nfunction disableBindings() {\n    bindingsEnabled = false;\n}\n/**\n * @return {?}\n */\nfunction getLView() {\n    return lView;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param {?} viewToRestore The OpaqueViewState instance to restore.\n * @return {?}\n */\nfunction restoreView(viewToRestore) {\n    contextLView = (/** @type {?} */ ((/** @type {?} */ (viewToRestore))));\n}\n/**\n * Used to set the parent property when nodes are created and track query results.\n * @type {?}\n */\nlet previousOrParentTNode;\n/**\n * @return {?}\n */\nfunction getPreviousOrParentTNode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return previousOrParentTNode;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction setPreviousOrParentTNode(tNode) {\n    previousOrParentTNode = tNode;\n}\n/**\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nfunction setTNodeAndViewData(tNode, view) {\n    previousOrParentTNode = tNode;\n    lView = view;\n}\n/**\n * If `isParent` is:\n *  - `true`: then `previousOrParentTNode` points to a parent node.\n *  - `false`: then `previousOrParentTNode` points to previous node (sibling).\n * @type {?}\n */\nlet isParent;\n/**\n * @return {?}\n */\nfunction getIsParent() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return isParent;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction setIsParent(value) {\n    isParent = value;\n}\n/**\n * Query instructions can ask for \"current queries\" in 2 different cases:\n * - when creating view queries (at the root of a component view, before any node is created - in\n * this case currentQueries points to view queries)\n * - when creating content queries (i.e. this previousOrParentTNode points to a node on which we\n * create content queries).\n * @param {?} QueryType\n * @return {?}\n */\nfunction getOrCreateCurrentQueries(QueryType) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    let currentQueries = lView[QUERIES];\n    // if this is the first content query on a node, any existing LQueries needs to be cloned\n    // in subsequent template passes, the cloning occurs before directive instantiation.\n    if (previousOrParentTNode && previousOrParentTNode !== lView[HOST_NODE] &&\n        !isContentQueryHost(previousOrParentTNode)) {\n        currentQueries && (currentQueries = lView[QUERIES] = currentQueries.clone());\n        previousOrParentTNode.flags |= 4 /* hasContentQuery */;\n    }\n    return currentQueries || (lView[QUERIES] = new QueryType(null, null, null));\n}\n/**\n * Checks whether a given view is in creation mode\n * @param {?=} view\n * @return {?}\n */\nfunction isCreationMode(view = lView) {\n    return (view[FLAGS] & 1 /* CreationMode */) === 1 /* CreationMode */;\n}\n/**\n * State of the current view being processed.\n *\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n * @type {?}\n */\nlet lView;\n/**\n * The last viewData retrieved by nextContext().\n * Allows building nextContext() and reference() calls.\n *\n * e.g. const inner = x().$implicit; const outer = x().$implicit;\n * @type {?}\n */\nlet contextLView = (/** @type {?} */ (null));\n/**\n * @return {?}\n */\nfunction getContextLView() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return contextLView;\n}\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n * @type {?}\n */\nlet checkNoChangesMode = false;\n/**\n * @return {?}\n */\nfunction getCheckNoChangesMode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return checkNoChangesMode;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nfunction setCheckNoChangesMode(mode) {\n    checkNoChangesMode = mode;\n}\n/**\n * Whether or not this is the first time the current view has been processed.\n * @type {?}\n */\nlet firstTemplatePass = true;\n/**\n * @return {?}\n */\nfunction getFirstTemplatePass() {\n    return firstTemplatePass;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction setFirstTemplatePass(value) {\n    firstTemplatePass = value;\n}\n/**\n * The root index from which pure function instructions should calculate their binding\n * indices. In component views, this is TView.bindingStartIndex. In a host binding\n * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n * @type {?}\n */\nlet bindingRootIndex = -1;\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\n/**\n * @return {?}\n */\nfunction getBindingRoot() {\n    return bindingRootIndex;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction setBindingRoot(value) {\n    bindingRootIndex = value;\n}\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param {?} newView New state to become active\n * @param {?} hostTNode\n * @return {?} the previous state;\n */\nfunction enterView(newView, hostTNode) {\n    /** @type {?} */\n    const oldView = lView;\n    if (newView) {\n        /** @type {?} */\n        const tView = newView[TVIEW];\n        firstTemplatePass = tView.firstTemplatePass;\n        bindingRootIndex = tView.bindingStartIndex;\n    }\n    previousOrParentTNode = (/** @type {?} */ (hostTNode));\n    isParent = true;\n    lView = contextLView = newView;\n    return oldView;\n}\n/**\n * @template T\n * @param {?=} level\n * @return {?}\n */\nfunction nextContextImpl(level = 1) {\n    contextLView = walkUpViews(level, (/** @type {?} */ (contextLView)));\n    return (/** @type {?} */ (contextLView[CONTEXT]));\n}\n/**\n * @param {?} nestingLevel\n * @param {?} currentView\n * @return {?}\n */\nfunction walkUpViews(nestingLevel, currentView) {\n    while (nestingLevel > 0) {\n        ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n        currentView = (/** @type {?} */ (currentView[DECLARATION_VIEW]));\n        nestingLevel--;\n    }\n    return currentView;\n}\n/**\n * Resets the application state.\n * @return {?}\n */\nfunction resetComponentState() {\n    isParent = false;\n    previousOrParentTNode = (/** @type {?} */ (null));\n    elementDepthCount = 0;\n    bindingsEnabled = true;\n}\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param {?} newView New state to become active\n * @return {?}\n */\nfunction leaveView(newView) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (isCreationMode(lView)) {\n        lView[FLAGS] &= ~1 /* CreationMode */;\n    }\n    else {\n        executeHooks(lView, tView.viewHooks, tView.viewCheckHooks, checkNoChangesMode);\n        // Views are clean and in update mode after being checked, so these bits are cleared\n        lView[FLAGS] &= ~(8 /* Dirty */ | 2 /* FirstLViewPass */);\n        lView[FLAGS] |= 32 /* RunInit */;\n        lView[BINDING_INDEX] = tView.bindingStartIndex;\n    }\n    enterView(newView, null);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * \\@Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * \\@Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n * @type {?}\n */\nlet includeViewProviders = true;\n/**\n * @param {?} v\n * @return {?}\n */\nfunction setIncludeViewProviders(v) {\n    /** @type {?} */\n    const oldValue = includeViewProviders;\n    includeViewProviders = v;\n    return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n * @type {?}\n */\nconst BLOOM_SIZE = 256;\n/** @type {?} */\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n/**\n * Counter used to generate unique IDs for directives.\n * @type {?}\n */\nlet nextNgElementId = 0;\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param {?} injectorIndex The index of the node injector where this token should be registered\n * @param {?} tView The TView for the injector's bloom filters\n * @param {?} type The directive token to register\n * @return {?}\n */\nfunction bloomAdd(injectorIndex, tView, type) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'expected firstTemplatePass to be true');\n    /** @type {?} */\n    let id = typeof type !== 'string' ? ((/** @type {?} */ (type)))[NG_ELEMENT_ID] : type.charCodeAt(0) || 0;\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n    if (id == null) {\n        id = ((/** @type {?} */ (type)))[NG_ELEMENT_ID] = nextNgElementId++;\n    }\n    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n    /** @type {?} */\n    const bloomBit = id & BLOOM_MASK;\n    // Create a mask that targets the specific bit associated with the directive.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    /** @type {?} */\n    const mask = 1 << bloomBit;\n    // Use the raw bloomBit number to determine which bloom filter bucket we should check\n    // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc\n    /** @type {?} */\n    const b7 = bloomBit & 0x80;\n    /** @type {?} */\n    const b6 = bloomBit & 0x40;\n    /** @type {?} */\n    const b5 = bloomBit & 0x20;\n    /** @type {?} */\n    const tData = (/** @type {?} */ (tView.data));\n    if (b7) {\n        b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :\n            (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));\n    }\n    else {\n        b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :\n            (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));\n    }\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param {?} tNode for which an injector should be retrieved / created.\n * @param {?} hostView View where the node is stored\n * @return {?} Node injector\n */\nfunction getOrCreateNodeInjectorForNode(tNode, hostView) {\n    /** @type {?} */\n    const existingInjectorIndex = getInjectorIndex(tNode, hostView);\n    if (existingInjectorIndex !== -1) {\n        return existingInjectorIndex;\n    }\n    /** @type {?} */\n    const tView = hostView[TVIEW];\n    if (tView.firstTemplatePass) {\n        tNode.injectorIndex = hostView.length;\n        insertBloom(tView.data, tNode); // foundation for node bloom\n        insertBloom(hostView, null); // foundation for cumulative bloom\n        insertBloom(tView.blueprint, null);\n        ngDevMode && assertEqual(tNode.flags === 0 || tNode.flags === 1 /* isComponent */, true, 'expected tNode.flags to not be initialized');\n    }\n    /** @type {?} */\n    const parentLoc = getParentInjectorLocation(tNode, hostView);\n    /** @type {?} */\n    const parentIndex = getParentInjectorIndex(parentLoc);\n    /** @type {?} */\n    const parentLView = getParentInjectorView(parentLoc, hostView);\n    /** @type {?} */\n    const injectorIndex = tNode.injectorIndex;\n    // If a parent injector can't be found, its location is set to -1.\n    // In that case, we don't need to set up a cumulative bloom\n    if (hasParentInjector(parentLoc)) {\n        /** @type {?} */\n        const parentData = (/** @type {?} */ (parentLView[TVIEW].data));\n        // Creates a cumulative bloom filter that merges the parent's bloom filter\n        // and its own cumulative bloom (which contains tokens for all ancestors)\n        for (let i = 0; i < 8; i++) {\n            hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n        }\n    }\n    hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;\n    return injectorIndex;\n}\n/**\n * @param {?} arr\n * @param {?} footer\n * @return {?}\n */\nfunction insertBloom(arr, footer) {\n    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nfunction getInjectorIndex(tNode, hostView) {\n    if (tNode.injectorIndex === -1 ||\n        // If the injector index is the same as its parent's injector index, then the index has been\n        // copied down from the parent node. No injector has been created yet on this node.\n        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n        // After the first template pass, the injector index might exist but the parent values\n        // might not have been calculated yet for this instance\n        hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {\n        return -1;\n    }\n    else {\n        return tNode.injectorIndex;\n    }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nfunction getParentInjectorLocation(tNode, view) {\n    if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n        return (/** @type {?} */ (tNode.parent.injectorIndex)); // ViewOffset is 0\n    }\n    // For most cases, the parent injector index can be found on the host node (e.g. for component\n    // or container), so this loop will be skipped, but we must keep the loop here to support\n    // the rarer case of deeply nested <ng-template> tags or inline views.\n    /** @type {?} */\n    let hostTNode = view[HOST_NODE];\n    /** @type {?} */\n    let viewOffset = 1;\n    while (hostTNode && hostTNode.injectorIndex === -1) {\n        view = (/** @type {?} */ (view[DECLARATION_VIEW]));\n        hostTNode = view ? view[HOST_NODE] : null;\n        viewOffset++;\n    }\n    return hostTNode ?\n        hostTNode.injectorIndex | (viewOffset << 16 /* ViewOffsetShift */) :\n        (/** @type {?} */ (-1));\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param {?} injectorIndex\n * @param {?} view\n * @param {?} token The type or the injection token to be made public\n * @return {?}\n */\nfunction diPublicInInjector(injectorIndex, view, token) {\n    bloomAdd(injectorIndex, view[TVIEW], token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * \\@Component(...)\n * class MyComponent {\n *   constructor(\\@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * \\@publicApi\n * @param {?} tNode\n * @param {?} attrNameToInject\n * @return {?}\n */\nfunction injectAttributeImpl(tNode, attrNameToInject) {\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    ngDevMode && assertDefined(tNode, 'expecting tNode');\n    /** @type {?} */\n    const attrs = tNode.attrs;\n    if (attrs) {\n        for (let i = 0; i < attrs.length; i = i + 2) {\n            /** @type {?} */\n            const attrName = attrs[i];\n            if (attrName === 3 /* SelectOnly */)\n                break;\n            if (attrName == attrNameToInject) {\n                return (/** @type {?} */ (attrs[i + 1]));\n            }\n        }\n    }\n    return null;\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * @template T\n * @param {?} tNode The Node where the search for the injector should start\n * @param {?} lView The `LView` that contains the `tNode`\n * @param {?} token The token to look for\n * @param {?=} flags Injection flags\n * @param {?=} notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @return {?} the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {\n    if (tNode) {\n        /** @type {?} */\n        const bloomHash = bloomHashBitOrFactory(token);\n        // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n        // so just call the factory function to create it.\n        if (typeof bloomHash === 'function') {\n            /** @type {?} */\n            const savePreviousOrParentTNode = getPreviousOrParentTNode();\n            /** @type {?} */\n            const saveLView = getLView();\n            setTNodeAndViewData(tNode, lView);\n            try {\n                /** @type {?} */\n                const value = bloomHash();\n                if (value == null && !(flags & InjectFlags.Optional)) {\n                    throw new Error(`No provider for ${stringify$1(token)}!`);\n                }\n                else {\n                    return value;\n                }\n            }\n            finally {\n                setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n            }\n        }\n        else if (typeof bloomHash == 'number') {\n            // If the token has a bloom hash, then it is a token which could be in NodeInjector.\n            // A reference to the previous injector TView that was found while climbing the element\n            // injector tree. This is used to know if viewProviders can be accessed on the current\n            // injector.\n            /** @type {?} */\n            let previousTView = null;\n            /** @type {?} */\n            let injectorIndex = getInjectorIndex(tNode, lView);\n            /** @type {?} */\n            let parentLocation = NO_PARENT_INJECTOR;\n            /** @type {?} */\n            let hostTElementNode = flags & InjectFlags.Host ? findComponentView(lView)[HOST_NODE] : null;\n            // If we should skip this injector, or if there is no injector on this node, start by\n            // searching\n            // the parent injector.\n            if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n                parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                    lView[injectorIndex + PARENT_INJECTOR];\n                if (!shouldSearchParent(flags, false)) {\n                    injectorIndex = -1;\n                }\n                else {\n                    previousTView = lView[TVIEW];\n                    injectorIndex = getParentInjectorIndex(parentLocation);\n                    lView = getParentInjectorView(parentLocation, lView);\n                }\n            }\n            // Traverse up the injector tree until we find a potential match or until we know there\n            // *isn't* a match.\n            while (injectorIndex !== -1) {\n                parentLocation = lView[injectorIndex + PARENT_INJECTOR];\n                // Check the current injector. If it matches, see if it contains token.\n                /** @type {?} */\n                const tView = lView[TVIEW];\n                if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n                    // At this point, we have an injector which *may* contain the token, so we step through\n                    // the providers and directives associated with the injector's corresponding node to get\n                    // the instance.\n                    /** @type {?} */\n                    const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n                    if (instance !== NOT_FOUND) {\n                        return instance;\n                    }\n                }\n                if (shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + TNODE] === hostTElementNode) &&\n                    bloomHasToken(bloomHash, injectorIndex, lView)) {\n                    // The def wasn't found anywhere on this node, so it was a false positive.\n                    // Traverse up the tree and continue searching.\n                    previousTView = tView;\n                    injectorIndex = getParentInjectorIndex(parentLocation);\n                    lView = getParentInjectorView(parentLocation, lView);\n                }\n                else {\n                    // If we should not search parent OR If the ancestor bloom filter value does not have the\n                    // bit corresponding to the directive we can give up on traversing up to find the specific\n                    // injector.\n                    injectorIndex = -1;\n                }\n            }\n        }\n    }\n    if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n        // This must be set or the NullInjector will throw for optional deps\n        notFoundValue = null;\n    }\n    if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n        /** @type {?} */\n        const moduleInjector = lView[INJECTOR];\n        if (moduleInjector) {\n            return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n        }\n        else {\n            return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n        }\n    }\n    if (flags & InjectFlags.Optional) {\n        return notFoundValue;\n    }\n    else {\n        throw new Error(`NodeInjector: NOT_FOUND [${stringify$1(token)}]`);\n    }\n}\n/** @type {?} */\nconst NOT_FOUND = {};\n/**\n * @template T\n * @param {?} injectorIndex\n * @param {?} lView\n * @param {?} token\n * @param {?} previousTView\n * @param {?} flags\n * @param {?} hostTElementNode\n * @return {?}\n */\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n    /** @type {?} */\n    const currentTView = lView[TVIEW];\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (currentTView.data[injectorIndex + TNODE]));\n    // First, we need to determine if view providers can be accessed by the starting element.\n    // There are two possibities\n    /** @type {?} */\n    const canAccessViewProviders = previousTView == null ?\n        // 1) This is the first invocation `previousTView == null` which means that we are at the\n        // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n        // to look into the ViewProviders is if:\n        // - we are on a component\n        // - AND the injector set `includeViewProviders` to true (implying that the token can see\n        // ViewProviders because it is the Component or a Service which itself was declared in\n        // ViewProviders)\n        (isComponent(tNode) && includeViewProviders) :\n        // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n        // In such a case we are only allowed to look into the ViewProviders if:\n        // - We just crossed from child View to Parent View `previousTView != currentTView`\n        // - AND the parent TNode is an Element.\n        // This means that we just came from the Component's View and therefore are allowed to see\n        // into the ViewProviders.\n        (previousTView != currentTView && (tNode.type === 3 /* Element */));\n    // This special case happens when there is a @host on the inject and when we are searching\n    // on the host element node.\n    /** @type {?} */\n    const isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;\n    /** @type {?} */\n    const injectableIdx = locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders, isHostSpecialCase);\n    if (injectableIdx !== null) {\n        return getNodeInjectable(currentTView.data, lView, injectableIdx, (/** @type {?} */ (tNode)));\n    }\n    else {\n        return NOT_FOUND;\n    }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @template T\n * @param {?} tNode TNode on which directives are present.\n * @param {?} lView The view we are currently processing\n * @param {?} token Provider token or type of a directive to look for.\n * @param {?} canAccessViewProviders Whether view providers should be considered.\n * @param {?} isHostSpecialCase Whether the host special case applies.\n * @return {?} Index of a found directive or provider, or null when none found.\n */\nfunction locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders, isHostSpecialCase) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const nodeProviderIndexes = tNode.providerIndexes;\n    /** @type {?} */\n    const tInjectables = tView.data;\n    /** @type {?} */\n    const injectablesStart = nodeProviderIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    const directivesStart = tNode.directiveStart;\n    /** @type {?} */\n    const directiveEnd = tNode.directiveEnd;\n    /** @type {?} */\n    const cptViewProvidersCount = nodeProviderIndexes >> 16 /* CptViewProvidersCountShift */;\n    /** @type {?} */\n    const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n    // When the host special case applies, only the viewProviders and the component are visible\n    /** @type {?} */\n    const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n    for (let i = startingIndex; i < endIndex; i++) {\n        /** @type {?} */\n        const providerTokenOrDef = (/** @type {?} */ (tInjectables[i]));\n        if (i < directivesStart && token === providerTokenOrDef ||\n            i >= directivesStart && ((/** @type {?} */ (providerTokenOrDef))).type === token) {\n            return i;\n        }\n    }\n    if (isHostSpecialCase) {\n        /** @type {?} */\n        const dirDef = (/** @type {?} */ (tInjectables[directivesStart]));\n        if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n            return directivesStart;\n        }\n    }\n    return null;\n}\n/**\n * Retrieve or instantiate the injectable from the `lData` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n * @param {?} tData\n * @param {?} lData\n * @param {?} index\n * @param {?} tNode\n * @return {?}\n */\nfunction getNodeInjectable(tData, lData, index, tNode) {\n    /** @type {?} */\n    let value = lData[index];\n    if (isFactory(value)) {\n        /** @type {?} */\n        const factory = value;\n        if (factory.resolving) {\n            throw new Error(`Circular dep for ${stringify$1(tData[index])}`);\n        }\n        /** @type {?} */\n        const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n        factory.resolving = true;\n        /** @type {?} */\n        let previousInjectImplementation;\n        if (factory.injectImpl) {\n            previousInjectImplementation = setInjectImplementation(factory.injectImpl);\n        }\n        /** @type {?} */\n        const savePreviousOrParentTNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        const saveLView = getLView();\n        setTNodeAndViewData(tNode, lData);\n        try {\n            value = lData[index] = factory.factory(null, tData, lData, tNode);\n        }\n        finally {\n            if (factory.injectImpl)\n                setInjectImplementation(previousInjectImplementation);\n            setIncludeViewProviders(previousIncludeViewProviders);\n            factory.resolving = false;\n            setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n        }\n    }\n    return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param {?} token the injection token\n * @return {?} the matching bit to check in the bloom filter or `null` if the token is not known.\n */\nfunction bloomHashBitOrFactory(token) {\n    ngDevMode && assertDefined(token, 'token must be defined');\n    if (typeof token === 'string') {\n        return token.charCodeAt(0) || 0;\n    }\n    /** @type {?} */\n    const tokenId = ((/** @type {?} */ (token)))[NG_ELEMENT_ID];\n    return typeof tokenId === 'number' ? tokenId & BLOOM_MASK : tokenId;\n}\n/**\n * @param {?} bloomHash\n * @param {?} injectorIndex\n * @param {?} injectorView\n * @return {?}\n */\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\n    // Create a mask that targets the specific bit associated with the directive we're looking for.\n    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n    // to bit positions 0 - 31 in a 32 bit integer.\n    /** @type {?} */\n    const mask = 1 << bloomHash;\n    /** @type {?} */\n    const b7 = bloomHash & 0x80;\n    /** @type {?} */\n    const b6 = bloomHash & 0x40;\n    /** @type {?} */\n    const b5 = bloomHash & 0x20;\n    // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:\n    // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.\n    // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\n    /** @type {?} */\n    let value;\n    if (b7) {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :\n            (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);\n    }\n    else {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :\n            (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);\n    }\n    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n    // this injector is a potential match.\n    return !!(value & mask);\n}\n/**\n * Returns true if flags prevent parent injector from being searched for tokens\n * @param {?} flags\n * @param {?} isFirstHostTNode\n * @return {?}\n */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n    return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\n/**\n * @return {?}\n */\nfunction injectInjector() {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (getPreviousOrParentTNode()));\n    return new NodeInjector(tNode, getLView());\n}\nclass NodeInjector {\n    /**\n     * @param {?} _tNode\n     * @param {?} _lView\n     */\n    constructor(_tNode, _lView) {\n        this._tNode = _tNode;\n        this._lView = _lView;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue) {\n        return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);\n    }\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getFactoryOf(type) {\n    /** @type {?} */\n    const typeAny = (/** @type {?} */ (type));\n    /** @type {?} */\n    const def = getComponentDef(typeAny) || getDirectiveDef(typeAny) ||\n        getPipeDef(typeAny) || getInjectableDef(typeAny) || getInjectorDef(typeAny);\n    if (!def || def.factory === undefined) {\n        return null;\n    }\n    return def.factory;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nfunction getInheritedFactory(type) {\n    /** @type {?} */\n    const proto = (/** @type {?} */ (Object.getPrototypeOf(type.prototype).constructor));\n    /** @type {?} */\n    const factory = getFactoryOf(proto);\n    if (factory !== null) {\n        return factory;\n    }\n    else {\n        // There is no factory defined. Either this was improper usage of inheritance\n        // (no Angular decorator on the superclass) or there is no constructor at all\n        // in the inheritance chain. Since the two cases cannot be distinguished, the\n        // latter has to be assumed.\n        return (t) => new t();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param {?} target Component, Directive or DOM Node.\n * @return {?}\n */\nfunction getLContext(target) {\n    /** @type {?} */\n    let mpValue = readPatchedData(target);\n    if (mpValue) {\n        // only when it's an array is it considered an LView instance\n        // ... otherwise it's an already constructed LContext instance\n        if (Array.isArray(mpValue)) {\n            /** @type {?} */\n            const lView = (/** @type {?} */ (mpValue));\n            /** @type {?} */\n            let nodeIndex;\n            /** @type {?} */\n            let component = undefined;\n            /** @type {?} */\n            let directives = undefined;\n            if (isComponentInstance(target)) {\n                nodeIndex = findViaComponent(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided component was not found in the application');\n                }\n                component = target;\n            }\n            else if (isDirectiveInstance(target)) {\n                nodeIndex = findViaDirective(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided directive was not found in the application');\n                }\n                directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n            }\n            else {\n                nodeIndex = findViaNativeElement(lView, (/** @type {?} */ (target)));\n                if (nodeIndex == -1) {\n                    return null;\n                }\n            }\n            // the goal is not to fill the entire context full of data because the lookups\n            // are expensive. Instead, only the target data (the element, component, container, ICU\n            // expression or directive details) are filled into the context. If called multiple times\n            // with different target values then the missing target data will be filled in.\n            /** @type {?} */\n            const native = readElementValue(lView[nodeIndex]);\n            /** @type {?} */\n            const existingCtx = readPatchedData(native);\n            /** @type {?} */\n            const context = (existingCtx && !Array.isArray(existingCtx)) ?\n                existingCtx :\n                createLContext(lView, nodeIndex, native);\n            // only when the component has been discovered then update the monkey-patch\n            if (component && context.component === undefined) {\n                context.component = component;\n                attachPatchData(context.component, context);\n            }\n            // only when the directives have been discovered then update the monkey-patch\n            if (directives && context.directives === undefined) {\n                context.directives = directives;\n                for (let i = 0; i < directives.length; i++) {\n                    attachPatchData(directives[i], context);\n                }\n            }\n            attachPatchData(context.native, context);\n            mpValue = context;\n        }\n    }\n    else {\n        /** @type {?} */\n        const rElement = (/** @type {?} */ (target));\n        ngDevMode && assertDomNode(rElement);\n        // if the context is not found then we need to traverse upwards up the DOM\n        // to find the nearest element that has already been monkey patched with data\n        /** @type {?} */\n        let parent = (/** @type {?} */ (rElement));\n        while (parent = parent.parentNode) {\n            /** @type {?} */\n            const parentContext = readPatchedData(parent);\n            if (parentContext) {\n                /** @type {?} */\n                let lView;\n                if (Array.isArray(parentContext)) {\n                    lView = (/** @type {?} */ (parentContext));\n                }\n                else {\n                    lView = parentContext.lView;\n                }\n                // the edge of the app was also reached here through another means\n                // (maybe because the DOM was changed manually).\n                if (!lView) {\n                    return null;\n                }\n                /** @type {?} */\n                const index = findViaNativeElement(lView, rElement);\n                if (index >= 0) {\n                    /** @type {?} */\n                    const native = readElementValue(lView[index]);\n                    /** @type {?} */\n                    const context = createLContext(lView, index, native);\n                    attachPatchData(native, context);\n                    mpValue = context;\n                    break;\n                }\n            }\n        }\n    }\n    return ((/** @type {?} */ (mpValue))) || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n * @param {?} lView\n * @param {?} nodeIndex\n * @param {?} native\n * @return {?}\n */\nfunction createLContext(lView, nodeIndex, native) {\n    return {\n        lView,\n        nodeIndex,\n        native,\n        component: undefined,\n        directives: undefined,\n        localRefs: undefined,\n    };\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param {?} componentInstance\n * @return {?} The component's view\n */\nfunction getComponentViewByInstance(componentInstance) {\n    /** @type {?} */\n    let lView = readPatchedData(componentInstance);\n    /** @type {?} */\n    let view;\n    if (Array.isArray(lView)) {\n        /** @type {?} */\n        const nodeIndex = findViaComponent(lView, componentInstance);\n        view = getComponentViewByIndex(nodeIndex, lView);\n        /** @type {?} */\n        const context = createLContext(lView, nodeIndex, (/** @type {?} */ (view[HOST])));\n        context.component = componentInstance;\n        attachPatchData(componentInstance, context);\n        attachPatchData(context.native, context);\n    }\n    else {\n        /** @type {?} */\n        const context = (/** @type {?} */ ((/** @type {?} */ (lView))));\n        view = getComponentViewByIndex(context.nodeIndex, context.lView);\n    }\n    return view;\n}\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n * @param {?} target\n * @param {?} data\n * @return {?}\n */\nfunction attachPatchData(target, data) {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction isComponentInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngComponentDef;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nfunction isDirectiveInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngDirectiveDef;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} target\n * @return {?}\n */\nfunction findViaNativeElement(lView, target) {\n    /** @type {?} */\n    let tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n        if (native === target) {\n            return tNode.index;\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n * @param {?} tNode\n * @return {?}\n */\nfunction traverseNextElement(tNode) {\n    if (tNode.child) {\n        return tNode.child;\n    }\n    else if (tNode.next) {\n        return tNode.next;\n    }\n    else {\n        // Let's take the following template: <div><span>text</span></div><component/>\n        // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n        // in this case the parent `div`, so that we can find the component.\n        while (tNode.parent && !tNode.parent.next) {\n            tNode = tNode.parent;\n        }\n        return tNode.parent && tNode.parent.next;\n    }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} componentInstance\n * @return {?}\n */\nfunction findViaComponent(lView, componentInstance) {\n    /** @type {?} */\n    const componentIndices = lView[TVIEW].components;\n    if (componentIndices) {\n        for (let i = 0; i < componentIndices.length; i++) {\n            /** @type {?} */\n            const elementComponentIndex = componentIndices[i];\n            /** @type {?} */\n            const componentView = getComponentViewByIndex(elementComponentIndex, lView);\n            if (componentView[CONTEXT] === componentInstance) {\n                return elementComponentIndex;\n            }\n        }\n    }\n    else {\n        /** @type {?} */\n        const rootComponentView = getComponentViewByIndex(HEADER_OFFSET, lView);\n        /** @type {?} */\n        const rootComponent = rootComponentView[CONTEXT];\n        if (rootComponent === componentInstance) {\n            // we are dealing with the root element here therefore we know that the\n            // element is the very first element after the HEADER data in the lView\n            return HEADER_OFFSET;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} directiveInstance\n * @return {?}\n */\nfunction findViaDirective(lView, directiveInstance) {\n    // if a directive is monkey patched then it will (by default)\n    // have a reference to the LView of the current view. The\n    // element bound to the directive being search lives somewhere\n    // in the view data. We loop through the nodes and check their\n    // list of directives for the instance.\n    /** @type {?} */\n    let tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        const directiveIndexStart = tNode.directiveStart;\n        /** @type {?} */\n        const directiveIndexEnd = tNode.directiveEnd;\n        for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n            if (lView[i] === directiveInstance) {\n                return tNode.index;\n            }\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param {?} nodeIndex The node index\n * @param {?} lView The target view data\n * @param {?} includeComponents Whether or not to include components in returned directives\n * @return {?}\n */\nfunction getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));\n    /** @type {?} */\n    let directiveStartIndex = tNode.directiveStart;\n    if (directiveStartIndex == 0)\n        return EMPTY_ARRAY;\n    /** @type {?} */\n    const directiveEndIndex = tNode.directiveEnd;\n    if (!includeComponents && tNode.flags & 1 /* isComponent */)\n        directiveStartIndex++;\n    return lView.slice(directiveStartIndex, directiveEndIndex);\n}\n/**\n * @param {?} nodeIndex\n * @param {?} lView\n * @return {?}\n */\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));\n    /** @type {?} */\n    let directiveStartIndex = tNode.directiveStart;\n    return tNode.flags & 1 /* isComponent */ ? lView[directiveStartIndex] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n * @param {?} lView\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction discoverLocalRefs(lView, nodeIndex) {\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));\n    if (tNode && tNode.localNames) {\n        /** @type {?} */\n        const result = {};\n        for (let i = 0; i < tNode.localNames.length; i += 2) {\n            /** @type {?} */\n            const localRefName = tNode.localNames[i];\n            /** @type {?} */\n            const directiveIndex = (/** @type {?} */ (tNode.localNames[i + 1]));\n            result[localRefName] =\n                directiveIndex === -1 ? (/** @type {?} */ (getNativeByTNode(tNode, lView))) : lView[directiveIndex];\n        }\n        return result;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * \\@publicApi\n * @template T\n * @param {?} element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @return {?}\n */\nfunction getComponent(element) {\n    /** @type {?} */\n    const context = loadLContextFromNode(element);\n    if (context.component === undefined) {\n        context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);\n    }\n    return (/** @type {?} */ (context.component));\n}\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * \\@publicApi\n * @template T\n * @param {?} element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @return {?}\n */\nfunction getContext(element) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContextFromNode(element)));\n    return (/** @type {?} */ (context.lView[CONTEXT]));\n}\n/**\n * Returns the component instance associated with view which owns the DOM element (`null`\n * otherwise).\n *\n * \\@publicApi\n * @template T\n * @param {?} element DOM element which is owned by an existing component's view.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getViewComponent(<child-comp>) instanceof MyApp).toBeTruthy();\n * expect(getViewComponent(<my-app>)).toEqual(null);\n * ```\n *\n * @return {?}\n */\nfunction getViewComponent(element) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContext(element)));\n    /** @type {?} */\n    let lView = context.lView;\n    while (lView[PARENT] && lView[HOST] === null) {\n        // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`\n        lView = (/** @type {?} */ (lView[PARENT]));\n    }\n    return lView[FLAGS] & 128 /* IsRoot */ ? null : (/** @type {?} */ (lView[CONTEXT]));\n}\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated.\n *\n * @param {?} target\n * @return {?}\n */\nfunction getRootContext$1(target) {\n    /** @type {?} */\n    const lViewData = Array.isArray(target) ? target : (/** @type {?} */ (loadLContext(target))).lView;\n    /** @type {?} */\n    const rootLView = getRootView$1(lViewData);\n    return (/** @type {?} */ (rootLView[CONTEXT]));\n}\n/**\n * Retrieve all root components.\n *\n * Root components are those which have been bootstrapped by Angular.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getRootComponents(target) {\n    return [...getRootContext$1(target).components];\n}\n/**\n * Retrieves an `Injector` associated with the element, component or directive.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getInjector(target) {\n    /** @type {?} */\n    const context = loadLContext(target);\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (context.lView[TVIEW].data[context.nodeIndex]));\n    return new NodeInjector(tNode, context.lView);\n}\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * \\@publicApi\n * @param {?} element Element for which the injection tokens should be retrieved.\n * @return {?}\n */\nfunction getInjectionTokens(element) {\n    /** @type {?} */\n    const context = loadLContext(element, false);\n    if (!context)\n        return [];\n    /** @type {?} */\n    const lView = context.lView;\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const tNode = (/** @type {?} */ (tView.data[context.nodeIndex]));\n    /** @type {?} */\n    const providerTokens = [];\n    /** @type {?} */\n    const startIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    const endIndex = tNode.directiveEnd;\n    for (let i = startIndex; i < endIndex; i++) {\n        /** @type {?} */\n        let value = tView.data[i];\n        if (isDirectiveDefHack(value)) {\n            // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n            // design flaw.  We should always store same type so that we can be monomorphic. The issue\n            // is that for Components/Directives we store the def instead the type. The correct behavior\n            // is that we should always be storing injectable type in this location.\n            value = value.type;\n        }\n        providerTokens.push(value);\n    }\n    return providerTokens;\n}\n/**\n * Retrieves directives associated with a given DOM host element.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getDirectives(target) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContext(target)));\n    if (context.directives === undefined) {\n        context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);\n    }\n    return context.directives || [];\n}\n/**\n * @param {?} target\n * @param {?=} throwOnNotFound\n * @return {?}\n */\nfunction loadLContext(target, throwOnNotFound = true) {\n    /** @type {?} */\n    const context = getLContext(target);\n    if (!context && throwOnNotFound) {\n        throw new Error(ngDevMode ? `Unable to find context associated with ${stringify$1(target)}` :\n            'Invalid ng target');\n    }\n    return context;\n}\n/**\n * Retrieve the root view from any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} componentOrView any component or view\n *\n * @return {?}\n */\nfunction getRootView$1(componentOrView) {\n    /** @type {?} */\n    let lView;\n    if (Array.isArray(componentOrView)) {\n        ngDevMode && assertDefined(componentOrView, 'lView');\n        lView = (/** @type {?} */ (componentOrView));\n    }\n    else {\n        ngDevMode && assertDefined(componentOrView, 'component');\n        lView = (/** @type {?} */ (readPatchedLView(componentOrView)));\n    }\n    while (lView && !(lView[FLAGS] & 128 /* IsRoot */)) {\n        lView = (/** @type {?} */ (lView[PARENT]));\n    }\n    return lView;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nfunction getLocalRefs(target) {\n    /** @type {?} */\n    const context = (/** @type {?} */ (loadLContext(target)));\n    if (context.localRefs === undefined) {\n        context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);\n    }\n    return context.localRefs || {};\n}\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * \\@publicApi\n * @template T\n * @param {?} directive Component or Directive for which the host element should be retrieved.\n *\n * @return {?}\n */\nfunction getHostElement(directive) {\n    return (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (getLContext(directive))).native))));\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction loadLContextFromNode(node) {\n    if (!(node instanceof Node))\n        throw new Error('Expecting instance of DOM Node');\n    return (/** @type {?} */ (loadLContext(node)));\n}\n/**\n * @param {?} listener\n * @return {?}\n */\nfunction isBrowserEvents(listener) {\n    // Browser events are those which don't have `useCapture` as boolean.\n    return typeof listener.useCapture === 'boolean';\n}\n/**\n * Retrieves a list of DOM listeners.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div (click)=\"doSomething()\">\n *     </div>\n * </mp-app>\n *\n * expect(getListeners(<div>)).toEqual({\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * });\n * ```\n *\n * \\@publicApi\n * @param {?} element Element for which the DOM listeners should be retrieved.\n * @return {?}\n */\nfunction getListeners(element) {\n    /** @type {?} */\n    const lContext = loadLContextFromNode(element);\n    /** @type {?} */\n    const lView = lContext.lView;\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const lCleanup = lView[CLEANUP];\n    /** @type {?} */\n    const tCleanup = tView.cleanup;\n    /** @type {?} */\n    const listeners = [];\n    if (tCleanup && lCleanup) {\n        for (let i = 0; i < tCleanup.length;) {\n            /** @type {?} */\n            const firstParam = tCleanup[i++];\n            /** @type {?} */\n            const secondParam = tCleanup[i++];\n            if (typeof firstParam === 'string') {\n                /** @type {?} */\n                const name = firstParam;\n                /** @type {?} */\n                const listenerElement = (/** @type {?} */ ((/** @type {?} */ (readElementValue(lView[secondParam])))));\n                /** @type {?} */\n                const callback = lCleanup[tCleanup[i++]];\n                /** @type {?} */\n                const useCaptureOrIndx = tCleanup[i++];\n                // if useCaptureOrIndx is boolean then report it as is.\n                // if useCaptureOrIndx is positive number then it in unsubscribe method\n                // if useCaptureOrIndx is negative number then it is a Subscription\n                /** @type {?} */\n                const useCapture = typeof useCaptureOrIndx === 'boolean' ?\n                    useCaptureOrIndx :\n                    (useCaptureOrIndx >= 0 ? false : null);\n                if (element == listenerElement) {\n                    listeners.push({ element, name, callback, useCapture });\n                }\n            }\n        }\n    }\n    listeners.sort(sortListeners);\n    return listeners;\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sortListeners(a, b) {\n    if (a.name == b.name)\n        return 0;\n    return a.name < b.name ? -1 : 1;\n}\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n * @param {?} obj\n * @return {?}\n */\nfunction isDirectiveDefHack(obj) {\n    return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} name\n * @return {?}\n */\nfunction normalizeDebugBindingName(name) {\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n    return `ng-reflect-${name}`;\n}\n/** @type {?} */\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction normalizeDebugBindingValue(value) {\n    try {\n        // Limit the size of the value as otherwise the DOM just gets polluted.\n        return value != null ? value.toString().slice(0, 30) : value;\n    }\n    catch (e) {\n        return '[ERROR] Exception while trying to serialize the value';\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction devModeEqual(a, b) {\n    /** @type {?} */\n    const isListLikeIterableA = isListLikeIterable(a);\n    /** @type {?} */\n    const isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        /** @type {?} */\n        const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        /** @type {?} */\n        const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * \\@publicApi\n */\nclass WrappedValue {\n    /**\n     * @param {?} value\n     */\n    constructor(value) { this.wrapped = value; }\n    /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    static wrap(value) { return new WrappedValue(value); }\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    static unwrap(value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; }\n    /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    static isWrapped(value) { return value instanceof WrappedValue; }\n}\n/**\n * Represents a basic change from a previous to a new value.\n *\n * \\@publicApi\n */\nclass SimpleChange {\n    /**\n     * @param {?} previousValue\n     * @param {?} currentValue\n     * @param {?} firstChange\n     */\n    constructor(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     * @return {?}\n     */\n    isFirstChange() { return this.firstChange; }\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} comparator\n * @return {?}\n */\nfunction areIterablesEqual(a, b, comparator) {\n    /** @type {?} */\n    const iterator1 = a[getSymbolIterator()]();\n    /** @type {?} */\n    const iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        /** @type {?} */\n        const item1 = iterator1.next();\n        /** @type {?} */\n        const item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\n/**\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nfunction iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (let i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        /** @type {?} */\n        const iterator = obj[getSymbolIterator()]();\n        /** @type {?} */\n        let item;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Called when there are multiple component selectors that match a given node\n * @param {?} tNode\n * @return {?}\n */\nfunction throwMultipleComponentError(tNode) {\n    throw new Error(`Multiple components match node with tagname ${tNode.tagName}`);\n}\n/**\n * Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on.\n * @param {?} creationMode\n * @param {?} oldValue\n * @param {?} currValue\n * @return {?}\n */\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue) {\n    /** @type {?} */\n    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n    if (creationMode) {\n        msg +=\n            ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n                ` Has it been created in a change detection hook ?`;\n    }\n    // TODO: include debug context\n    throw new Error(msg);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * A special value which designates that a value has not changed.\n * @type {?}\n */\nconst NO_CHANGE = (/** @type {?} */ ({}));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(misko): consider inlining\n/**\n * Updates binding and returns the value.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nfunction updateBinding(lView, bindingIndex, value) {\n    return lView[bindingIndex] = value;\n}\n/**\n * Gets the current binding value.\n * @param {?} lView\n * @param {?} bindingIndex\n * @return {?}\n */\nfunction getBinding(lView, bindingIndex) {\n    ngDevMode && assertDataInRange(lView, lView[bindingIndex]);\n    ngDevMode &&\n        assertNotEqual(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n    return lView[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nfunction bindingUpdated(lView, bindingIndex, value) {\n    ngDevMode && assertNotEqual(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    ngDevMode &&\n        assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n    if (lView[bindingIndex] === NO_CHANGE) {\n        // initial pass\n        lView[bindingIndex] = value;\n    }\n    else if (isDifferent(lView[bindingIndex], value)) {\n        if (ngDevMode && getCheckNoChangesMode()) {\n            if (!devModeEqual(lView[bindingIndex], value)) {\n                throwErrorIfNoChangesMode(isCreationMode(lView), lView[bindingIndex], value);\n            }\n        }\n        lView[bindingIndex] = value;\n    }\n    else {\n        return false;\n    }\n    return true;\n}\n/**\n * Updates 2 bindings if changed, then returns whether either was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @return {?}\n */\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n    /** @type {?} */\n    const different = bindingUpdated(lView, bindingIndex, exp1);\n    return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/**\n * Updates 3 bindings if changed, then returns whether any was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @return {?}\n */\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n    /** @type {?} */\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/**\n * Updates 4 bindings if changed, then returns whether any was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @return {?}\n */\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n    /** @type {?} */\n    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NG_PROJECT_AS_ATTR_NAME = 'ngProjectAs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The goal here is to make sure that the browser DOM API is the Renderer.\n * We do this by defining a subset of DOM API to be the renderer and than\n * use that time for rendering.\n *\n * At runtime we can then use the DOM api directly, in server or web-worker\n * it will be easy to implement such API.\n */\n/** @enum {number} */\nconst RendererStyleFlags3 = {\n    Important: 1,\n    DashCase: 2,\n};\nRendererStyleFlags3[RendererStyleFlags3.Important] = 'Important';\nRendererStyleFlags3[RendererStyleFlags3.DashCase] = 'DashCase';\n/**\n * Returns whether the `renderer` is a `ProceduralRenderer3`\n * @param {?} renderer\n * @return {?}\n */\nfunction isProceduralRenderer(renderer) {\n    return !!(((/** @type {?} */ (renderer))).listen);\n}\n/** @type {?} */\nconst domRendererFactory3 = {\n    createRenderer: (hostElement, rendererType) => { return document; }\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Retrieves the parent element of a given node.\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction getParentNative(tNode, currentView) {\n    if (tNode.parent == null) {\n        return getHostNative(currentView);\n    }\n    else {\n        /** @type {?} */\n        const parentTNode = getFirstParentNative(tNode);\n        return getNativeByTNode(parentTNode, currentView);\n    }\n}\n/**\n * Get the first parent of a node that isn't an IcuContainer TNode\n * @param {?} tNode\n * @return {?}\n */\nfunction getFirstParentNative(tNode) {\n    /** @type {?} */\n    let parent = tNode.parent;\n    while (parent && parent.type === 5 /* IcuContainer */) {\n        parent = parent.parent;\n    }\n    return (/** @type {?} */ (parent));\n}\n/**\n * Gets the host element given a view. Will return null if the current view is an embedded view,\n * which does not have a host element.\n * @param {?} currentView\n * @return {?}\n */\nfunction getHostNative(currentView) {\n    /** @type {?} */\n    const hostTNode = (/** @type {?} */ (currentView[HOST_NODE]));\n    return hostTNode && hostTNode.type !== 2 /* View */ ?\n        ((/** @type {?} */ (getNativeByTNode(hostTNode, (/** @type {?} */ (currentView[PARENT])))))) :\n        null;\n}\n/**\n * @param {?} tNode\n * @param {?} embeddedView\n * @return {?}\n */\nfunction getLContainer(tNode, embeddedView) {\n    if (tNode.index === -1) {\n        // This is a dynamically created view inside a dynamic container.\n        // If the host index is -1, the view has not yet been inserted, so it has no parent.\n        /** @type {?} */\n        const containerHostIndex = embeddedView[CONTAINER_INDEX];\n        return containerHostIndex > -1 ? (/** @type {?} */ (embeddedView[PARENT]))[containerHostIndex] : null;\n    }\n    else {\n        // This is a inline view node (e.g. embeddedViewStart)\n        return (/** @type {?} */ ((/** @type {?} */ (embeddedView[PARENT]))[(/** @type {?} */ (tNode.parent)).index]));\n    }\n}\n/**\n * Retrieves render parent for a given view.\n * Might be null if a view is not yet attached to any container.\n * @param {?} tViewNode\n * @param {?} view\n * @return {?}\n */\nfunction getContainerRenderParent(tViewNode, view) {\n    /** @type {?} */\n    const container = getLContainer(tViewNode, view);\n    return container ? container[RENDER_PARENT] : null;\n}\n/**\n * Stack used to keep track of projection nodes in walkTNodeTree.\n *\n * This is deliberately created outside of walkTNodeTree to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n * @type {?}\n */\nconst projectionNodeStack = [];\n/**\n * Walks a tree of TNodes, applying a transformation on the element nodes, either only on the first\n * one found, or on all of them.\n *\n * @param {?} viewToWalk the view to walk\n * @param {?} action identifies the action to be performed on the elements\n * @param {?} renderer the current renderer.\n * @param {?} renderParent Optional the render parent node to be set in all LContainers found,\n * required for action modes Insert and Destroy.\n * @param {?=} beforeNode Optional the node before which elements should be added, required for action\n * Insert.\n * @return {?}\n */\nfunction walkTNodeTree(viewToWalk, action, renderer, renderParent, beforeNode) {\n    /** @type {?} */\n    const rootTNode = (/** @type {?} */ (viewToWalk[TVIEW].node));\n    /** @type {?} */\n    let projectionNodeIndex = -1;\n    /** @type {?} */\n    let currentView = viewToWalk;\n    /** @type {?} */\n    let tNode = (/** @type {?} */ (rootTNode.child));\n    while (tNode) {\n        /** @type {?} */\n        let nextTNode = null;\n        if (tNode.type === 3 /* Element */) {\n            executeNodeAction(action, renderer, renderParent, getNativeByTNode(tNode, currentView), beforeNode);\n            /** @type {?} */\n            const nodeOrContainer = currentView[tNode.index];\n            if (isLContainer(nodeOrContainer)) {\n                // This element has an LContainer, and its comment needs to be handled\n                executeNodeAction(action, renderer, renderParent, nodeOrContainer[NATIVE], beforeNode);\n            }\n        }\n        else if (tNode.type === 0 /* Container */) {\n            /** @type {?} */\n            const lContainer = (/** @type {?} */ ((/** @type {?} */ (currentView))[tNode.index]));\n            executeNodeAction(action, renderer, renderParent, lContainer[NATIVE], beforeNode);\n            if (renderParent)\n                lContainer[RENDER_PARENT] = renderParent;\n            if (lContainer[VIEWS].length) {\n                currentView = lContainer[VIEWS][0];\n                nextTNode = currentView[TVIEW].node;\n                // When the walker enters a container, then the beforeNode has to become the local native\n                // comment node.\n                beforeNode = lContainer[NATIVE];\n            }\n        }\n        else if (tNode.type === 1 /* Projection */) {\n            /** @type {?} */\n            const componentView = findComponentView((/** @type {?} */ (currentView)));\n            /** @type {?} */\n            const componentHost = (/** @type {?} */ (componentView[HOST_NODE]));\n            /** @type {?} */\n            const head = ((/** @type {?} */ (componentHost.projection)))[(/** @type {?} */ (tNode.projection))];\n            // Must store both the TNode and the view because this projection node could be nested\n            // deeply inside embedded views, and we need to get back down to this particular nested view.\n            projectionNodeStack[++projectionNodeIndex] = tNode;\n            projectionNodeStack[++projectionNodeIndex] = (/** @type {?} */ (currentView));\n            if (head) {\n                currentView = (/** @type {?} */ (componentView[PARENT]));\n                nextTNode = (/** @type {?} */ (currentView[TVIEW].data[head.index]));\n            }\n        }\n        else {\n            // Otherwise, this is a View or an ElementContainer\n            nextTNode = tNode.child;\n        }\n        if (nextTNode === null) {\n            // this last node was projected, we need to get back down to its projection node\n            if (tNode.next === null && (tNode.flags & 2 /* isProjected */)) {\n                currentView = (/** @type {?} */ (projectionNodeStack[projectionNodeIndex--]));\n                tNode = (/** @type {?} */ (projectionNodeStack[projectionNodeIndex--]));\n            }\n            nextTNode = tNode.next;\n            /**\n             * Find the next node in the TNode tree, taking into account the place where a node is\n             * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n             *\n             * If there is no sibling node, then it goes to the next sibling of the parent node...\n             * until it reaches rootNode (at which point null is returned).\n             */\n            while (!nextTNode) {\n                // If parent is null, we're crossing the view boundary, so we should get the host TNode.\n                tNode = tNode.parent || currentView[TVIEW].node;\n                if (tNode === null || tNode === rootTNode)\n                    return null;\n                // When exiting a container, the beforeNode must be restored to the previous value\n                if (tNode.type === 0 /* Container */) {\n                    currentView = (/** @type {?} */ (currentView[PARENT]));\n                    beforeNode = currentView[tNode.index][NATIVE];\n                }\n                if (tNode.type === 2 /* View */ && currentView[NEXT]) {\n                    currentView = (/** @type {?} */ (currentView[NEXT]));\n                    nextTNode = currentView[TVIEW].node;\n                }\n                else {\n                    nextTNode = tNode.next;\n                }\n            }\n        }\n        tNode = nextTNode;\n    }\n}\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n * @param {?} action\n * @param {?} renderer\n * @param {?} parent\n * @param {?} node\n * @param {?=} beforeNode\n * @return {?}\n */\nfunction executeNodeAction(action, renderer, parent, node, beforeNode) {\n    if (action === 0 /* Insert */) {\n        isProceduralRenderer((/** @type {?} */ (renderer))) ?\n            ((/** @type {?} */ (renderer))).insertBefore((/** @type {?} */ (parent)), node, (/** @type {?} */ (beforeNode))) :\n            (/** @type {?} */ (parent)).insertBefore(node, (/** @type {?} */ (beforeNode)), true);\n    }\n    else if (action === 1 /* Detach */) {\n        isProceduralRenderer((/** @type {?} */ (renderer))) ?\n            ((/** @type {?} */ (renderer))).removeChild((/** @type {?} */ (parent)), node) :\n            (/** @type {?} */ (parent)).removeChild(node);\n    }\n    else if (action === 2 /* Destroy */) {\n        ngDevMode && ngDevMode.rendererDestroyNode++;\n        (/** @type {?} */ (((/** @type {?} */ (renderer))).destroyNode))(node);\n    }\n}\n/**\n * @param {?} value\n * @param {?} renderer\n * @return {?}\n */\nfunction createTextNode(value, renderer) {\n    return isProceduralRenderer(renderer) ? renderer.createText(stringify$1(value)) :\n        renderer.createTextNode(stringify$1(value));\n}\n/**\n * @param {?} viewToWalk\n * @param {?} insertMode\n * @param {?=} beforeNode\n * @return {?}\n */\nfunction addRemoveViewFromContainer(viewToWalk, insertMode, beforeNode) {\n    /** @type {?} */\n    const renderParent = getContainerRenderParent((/** @type {?} */ (viewToWalk[TVIEW].node)), viewToWalk);\n    ngDevMode && assertNodeType((/** @type {?} */ (viewToWalk[TVIEW].node)), 2 /* View */);\n    if (renderParent) {\n        /** @type {?} */\n        const renderer = viewToWalk[RENDERER];\n        walkTNodeTree(viewToWalk, insertMode ? 0 /* Insert */ : 1 /* Detach */, renderer, renderParent, beforeNode);\n    }\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n * @param {?} rootView The view to destroy\n * @return {?}\n */\nfunction destroyViewTree(rootView) {\n    // If the view has no children, we can clean it up and return early.\n    if (rootView[TVIEW].childIndex === -1) {\n        return cleanUpView(rootView);\n    }\n    /** @type {?} */\n    let viewOrContainer = getLViewChild(rootView);\n    while (viewOrContainer) {\n        /** @type {?} */\n        let next = null;\n        if (viewOrContainer.length >= HEADER_OFFSET) {\n            // If LView, traverse down to child.\n            /** @type {?} */\n            const view = (/** @type {?} */ (viewOrContainer));\n            if (view[TVIEW].childIndex > -1)\n                next = getLViewChild(view);\n        }\n        else {\n            // If container, traverse down to its first LView.\n            /** @type {?} */\n            const container = (/** @type {?} */ (viewOrContainer));\n            if (container[VIEWS].length)\n                next = container[VIEWS][0];\n        }\n        if (next == null) {\n            // Only clean up view when moving to the side or up, as destroy hooks\n            // should be called in order from the bottom up.\n            while (viewOrContainer && !(/** @type {?} */ (viewOrContainer))[NEXT] && viewOrContainer !== rootView) {\n                cleanUpView(viewOrContainer);\n                viewOrContainer = getParentState(viewOrContainer, rootView);\n            }\n            cleanUpView(viewOrContainer || rootView);\n            next = viewOrContainer && (/** @type {?} */ (viewOrContainer))[NEXT];\n        }\n        viewOrContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param {?} lView The view to insert\n * @param {?} lContainer The container into which the view should be inserted\n * @param {?} parentView The new parent of the inserted view\n * @param {?} index The index at which to insert the view\n * @param {?} containerIndex The index of the container node, if dynamic\n * @return {?}\n */\nfunction insertView(lView, lContainer, parentView, index, containerIndex) {\n    /** @type {?} */\n    const views = lContainer[VIEWS];\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        views[index - 1][NEXT] = lView;\n    }\n    if (index < views.length) {\n        lView[NEXT] = views[index];\n        views.splice(index, 0, lView);\n    }\n    else {\n        views.push(lView);\n        lView[NEXT] = null;\n    }\n    // Dynamically inserted views need a reference to their parent container's host so it's\n    // possible to jump from a view to its container's next when walking the node tree.\n    if (containerIndex > -1) {\n        lView[CONTAINER_INDEX] = containerIndex;\n        lView[PARENT] = parentView;\n    }\n    // Notify query that a new view has been added\n    if (lView[QUERIES]) {\n        (/** @type {?} */ (lView[QUERIES])).insertView(index);\n    }\n    // Sets the attached flag\n    lView[FLAGS] |= 16 /* Attached */;\n}\n/**\n * Detaches a view from a container.\n *\n * This method splices the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param {?} lContainer The container from which to detach a view\n * @param {?} removeIndex The index of the view to detach\n * @param {?} detached Whether or not this view is already detached.\n * @return {?} Detached LView instance.\n */\nfunction detachView(lContainer, removeIndex, detached) {\n    /** @type {?} */\n    const views = lContainer[VIEWS];\n    /** @type {?} */\n    const viewToDetach = views[removeIndex];\n    if (removeIndex > 0) {\n        views[removeIndex - 1][NEXT] = (/** @type {?} */ (viewToDetach[NEXT]));\n    }\n    views.splice(removeIndex, 1);\n    if (!detached) {\n        addRemoveViewFromContainer(viewToDetach, false);\n    }\n    if (viewToDetach[QUERIES]) {\n        (/** @type {?} */ (viewToDetach[QUERIES])).removeView();\n    }\n    viewToDetach[CONTAINER_INDEX] = -1;\n    viewToDetach[PARENT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~16 /* Attached */;\n    return viewToDetach;\n}\n/**\n * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n *\n * @param {?} lContainer The container from which to remove a view\n * @param {?} containerHost\n * @param {?} removeIndex The index of the view to remove\n * @return {?}\n */\nfunction removeView(lContainer, containerHost, removeIndex) {\n    /** @type {?} */\n    const view = lContainer[VIEWS][removeIndex];\n    detachView(lContainer, removeIndex, !!containerHost.detached);\n    destroyLView(view);\n}\n/**\n * Gets the child of the given LView\n * @param {?} lView\n * @return {?}\n */\nfunction getLViewChild(lView) {\n    /** @type {?} */\n    const childIndex = lView[TVIEW].childIndex;\n    return childIndex === -1 ? null : lView[childIndex];\n}\n/**\n * A standalone function which destroys an LView,\n * conducting cleanup (e.g. removing listeners, calling onDestroys).\n *\n * @param {?} view The view to be destroyed.\n * @return {?}\n */\nfunction destroyLView(view) {\n    /** @type {?} */\n    const renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n        walkTNodeTree(view, 2 /* Destroy */, renderer, null);\n    }\n    destroyViewTree(view);\n    // Sets the destroyed flag\n    view[FLAGS] |= 64 /* Destroyed */;\n}\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param {?} state The LViewOrLContainer for which we need a parent state\n * @param {?} rootView The rootView, so we don't propagate too far up the view tree\n * @return {?} The correct parent LViewOrLContainer\n */\nfunction getParentState(state, rootView) {\n    /** @type {?} */\n    let tNode;\n    if (state.length >= HEADER_OFFSET && (tNode = (/** @type {?} */ (((/** @type {?} */ (state)))))[HOST_NODE]) &&\n        tNode.type === 2 /* View */) {\n        // if it's an embedded view, the state needs to go up to the container, in case the\n        // container has a next\n        return (/** @type {?} */ (getLContainer((/** @type {?} */ (tNode)), (/** @type {?} */ (state)))));\n    }\n    else {\n        // otherwise, use parent view for containers or component views\n        return state[PARENT] === rootView ? null : state[PARENT];\n    }\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to \\@Output listeners.\n *\n * @param {?} viewOrContainer\n * @return {?}\n */\nfunction cleanUpView(viewOrContainer) {\n    if (((/** @type {?} */ (viewOrContainer))).length >= HEADER_OFFSET) {\n        /** @type {?} */\n        const view = (/** @type {?} */ (viewOrContainer));\n        executeOnDestroys(view);\n        executePipeOnDestroys(view);\n        removeListeners(view);\n        /** @type {?} */\n        const hostTNode = view[HOST_NODE];\n        // For component views only, the local renderer is destroyed as clean up time.\n        if (hostTNode && hostTNode.type === 3 /* Element */ && isProceduralRenderer(view[RENDERER])) {\n            ngDevMode && ngDevMode.rendererDestroy++;\n            ((/** @type {?} */ (view[RENDERER]))).destroy();\n        }\n    }\n}\n/**\n * Removes listeners and unsubscribes from output subscriptions\n * @param {?} lView\n * @return {?}\n */\nfunction removeListeners(lView) {\n    /** @type {?} */\n    const tCleanup = (/** @type {?} */ (lView[TVIEW].cleanup));\n    if (tCleanup != null) {\n        /** @type {?} */\n        const lCleanup = (/** @type {?} */ (lView[CLEANUP]));\n        for (let i = 0; i < tCleanup.length - 1; i += 2) {\n            if (typeof tCleanup[i] === 'string') {\n                // This is a listener with the native renderer\n                /** @type {?} */\n                const idx = tCleanup[i + 1];\n                /** @type {?} */\n                const listener = lCleanup[tCleanup[i + 2]];\n                /** @type {?} */\n                const native = readElementValue(lView[idx]);\n                /** @type {?} */\n                const useCaptureOrSubIdx = tCleanup[i + 3];\n                if (typeof useCaptureOrSubIdx === 'boolean') {\n                    // DOM listener\n                    native.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n                }\n                else {\n                    if (useCaptureOrSubIdx >= 0) {\n                        // unregister\n                        lCleanup[useCaptureOrSubIdx]();\n                    }\n                    else {\n                        // Subscription\n                        lCleanup[-useCaptureOrSubIdx].unsubscribe();\n                    }\n                }\n                i += 2;\n            }\n            else if (typeof tCleanup[i] === 'number') {\n                // This is a listener with renderer2 (cleanup fn can be found by index)\n                /** @type {?} */\n                const cleanupFn = lCleanup[tCleanup[i]];\n                cleanupFn();\n            }\n            else {\n                // This is a cleanup function that is grouped with the index of its context\n                /** @type {?} */\n                const context = lCleanup[tCleanup[i + 1]];\n                tCleanup[i].call(context);\n            }\n        }\n        lView[CLEANUP] = null;\n    }\n}\n/**\n * Calls onDestroy hooks for this view\n * @param {?} view\n * @return {?}\n */\nfunction executeOnDestroys(view) {\n    /** @type {?} */\n    const tView = view[TVIEW];\n    /** @type {?} */\n    let destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        callHooks(view, destroyHooks);\n    }\n}\n/**\n * Calls pipe destroy hooks for this view\n * @param {?} lView\n * @return {?}\n */\nfunction executePipeOnDestroys(lView) {\n    /** @type {?} */\n    const pipeDestroyHooks = lView[TVIEW] && lView[TVIEW].pipeDestroyHooks;\n    if (pipeDestroyHooks) {\n        callHooks((/** @type {?} */ (lView)), pipeDestroyHooks);\n    }\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction getRenderParent(tNode, currentView) {\n    if (canInsertNativeNode(tNode, currentView)) {\n        // If we are asked for a render parent of the root component we need to do low-level DOM\n        // operation as LTree doesn't exist above the topmost host node. We might need to find a render\n        // parent of the topmost host node if the root component injects ViewContainerRef.\n        if (isRootView(currentView)) {\n            return nativeParentNode(currentView[RENDERER], getNativeByTNode(tNode, currentView));\n        }\n        /** @type {?} */\n        const hostTNode = currentView[HOST_NODE];\n        /** @type {?} */\n        const tNodeParent = tNode.parent;\n        if (tNodeParent != null && tNodeParent.type === 4 /* ElementContainer */) {\n            tNode = getHighestElementContainer(tNodeParent);\n        }\n        return tNode.parent == null && (/** @type {?} */ (hostTNode)).type === 2 /* View */ ?\n            getContainerRenderParent((/** @type {?} */ (hostTNode)), currentView) :\n            (/** @type {?} */ (getParentNative(tNode, currentView)));\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction canInsertNativeChildOfElement(tNode) {\n    // If the parent is null, then we are inserting across views. This happens when we\n    // insert a root element of the component view into the component host element and it\n    // should always be eager.\n    if (tNode.parent == null ||\n        // We should also eagerly insert if the parent is a regular, non-component element\n        // since we know that this relationship will never be broken.\n        tNode.parent.type === 3 /* Element */ && !(tNode.parent.flags & 1 /* isComponent */)) {\n        return true;\n    }\n    // Parent is a Component. Component's content nodes are not inserted immediately\n    // because they will be projected, and so doing insert at this point would be wasteful.\n    // Since the projection would than move it to its final destination.\n    return false;\n}\n/**\n * We might delay insertion of children for a given view if it is disconnected.\n * This might happen for 2 main reasons:\n * - view is not inserted into any container (view was created but not inserted yet)\n * - view is inserted into a container but the container itself is not inserted into the DOM\n * (container might be part of projection or child of a view that is not inserted yet).\n *\n * In other words we can insert children of a given view if this view was inserted into a container\n * and\n * the container itself has its render parent determined.\n * @param {?} viewTNode\n * @param {?} view\n * @return {?}\n */\nfunction canInsertNativeChildOfView(viewTNode, view) {\n    // Because we are inserting into a `View` the `View` may be disconnected.\n    /** @type {?} */\n    const container = (/** @type {?} */ (getLContainer(viewTNode, view)));\n    if (container == null || container[RENDER_PARENT] == null) {\n        // The `View` is not inserted into a `Container` or the parent `Container`\n        // itself is disconnected. So we have to delay.\n        return false;\n    }\n    // The parent `Container` is in inserted state, so we can eagerly insert into\n    // this location.\n    return true;\n}\n/**\n * Returns whether a native element can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is mare for projection but has not been inserted\n *   into destination.\n *\n *\n * @param {?} tNode The tNode of the node that we want to insert.\n * @param {?} currentView Current LView being processed.\n * @return {?} boolean Whether the node should be inserted now (or delayed until later).\n */\nfunction canInsertNativeNode(tNode, currentView) {\n    /** @type {?} */\n    let currentNode = tNode;\n    /** @type {?} */\n    let parent = tNode.parent;\n    if (tNode.parent) {\n        if (tNode.parent.type === 4 /* ElementContainer */) {\n            currentNode = getHighestElementContainer(tNode);\n            parent = currentNode.parent;\n        }\n        else if (tNode.parent.type === 5 /* IcuContainer */) {\n            currentNode = getFirstParentNative(currentNode);\n            parent = currentNode.parent;\n        }\n    }\n    if (parent === null)\n        parent = currentView[HOST_NODE];\n    if (parent && parent.type === 2 /* View */) {\n        return canInsertNativeChildOfView((/** @type {?} */ (parent)), currentView);\n    }\n    else {\n        // Parent is a regular element or a component\n        return canInsertNativeChildOfElement(currentNode);\n    }\n}\n/**\n * Inserts a native node before another native node for a given parent using {\\@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?} beforeNode\n * @return {?}\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.insertBefore(parent, child, beforeNode);\n    }\n    else {\n        parent.insertBefore(child, beforeNode, true);\n    }\n}\n/**\n * Returns a native parent of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nfunction nativeParentNode(renderer, node) {\n    return (/** @type {?} */ ((isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode)));\n}\n/**\n * Returns a native sibling of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nfunction nativeNextSibling(renderer, node) {\n    return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n}\n/**\n * Appends the `child` element to the `parent`.\n *\n * The element insertion might be delayed {\\@link canInsertNativeNode}.\n *\n * @param {?=} childEl The child that should be appended\n * @param {?=} childTNode The TNode of the child element\n * @param {?=} currentView The current LView\n * @return {?} Whether or not the child was appended\n */\nfunction appendChild(childEl = null, childTNode, currentView) {\n    if (childEl !== null && canInsertNativeNode(childTNode, currentView)) {\n        /** @type {?} */\n        const renderer = currentView[RENDERER];\n        /** @type {?} */\n        const parentEl = getParentNative(childTNode, currentView);\n        /** @type {?} */\n        const parentTNode = childTNode.parent || (/** @type {?} */ (currentView[HOST_NODE]));\n        if (parentTNode.type === 2 /* View */) {\n            /** @type {?} */\n            const lContainer = (/** @type {?} */ (getLContainer((/** @type {?} */ (parentTNode)), currentView)));\n            /** @type {?} */\n            const views = lContainer[VIEWS];\n            /** @type {?} */\n            const index = views.indexOf(currentView);\n            nativeInsertBefore(renderer, (/** @type {?} */ (lContainer[RENDER_PARENT])), childEl, getBeforeNodeForView(index, views, lContainer[NATIVE]));\n        }\n        else if (parentTNode.type === 4 /* ElementContainer */) {\n            /** @type {?} */\n            const renderParent = (/** @type {?} */ (getRenderParent(childTNode, currentView)));\n            nativeInsertBefore(renderer, renderParent, childEl, parentEl);\n        }\n        else if (parentTNode.type === 5 /* IcuContainer */) {\n            /** @type {?} */\n            const icuAnchorNode = (/** @type {?} */ ((/** @type {?} */ (getNativeByTNode((/** @type {?} */ (childTNode.parent)), currentView)))));\n            nativeInsertBefore(renderer, (/** @type {?} */ (parentEl)), childEl, icuAnchorNode);\n        }\n        else {\n            isProceduralRenderer(renderer) ? renderer.appendChild((/** @type {?} */ ((/** @type {?} */ (parentEl)))), childEl) :\n                (/** @type {?} */ (parentEl)).appendChild(childEl);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Gets the top-level ng-container if ng-containers are nested.\n *\n * @param {?} ngContainer The TNode of the starting ng-container\n * @return {?} tNode The TNode of the highest level ng-container\n */\nfunction getHighestElementContainer(ngContainer) {\n    while (ngContainer.parent != null && ngContainer.parent.type === 4 /* ElementContainer */) {\n        ngContainer = ngContainer.parent;\n    }\n    return ngContainer;\n}\n/**\n * @param {?} index\n * @param {?} views\n * @param {?} containerNative\n * @return {?}\n */\nfunction getBeforeNodeForView(index, views, containerNative) {\n    if (index + 1 < views.length) {\n        /** @type {?} */\n        const view = (/** @type {?} */ (views[index + 1]));\n        /** @type {?} */\n        const viewTNode = (/** @type {?} */ (view[HOST_NODE]));\n        return viewTNode.child ? getNativeByTNode(viewTNode.child, view) : containerNative;\n    }\n    else {\n        return containerNative;\n    }\n}\n/**\n * Removes the `child` element from the DOM if not in view and not projected.\n *\n * @param {?} childTNode The TNode of the child to remove\n * @param {?} childEl The child that should be removed\n * @param {?} currentView The current LView\n * @return {?} Whether or not the child was removed\n */\nfunction removeChild(childTNode, childEl, currentView) {\n    // We only remove the element if not in View or not projected.\n    if (childEl !== null && canInsertNativeNode(childTNode, currentView)) {\n        /** @type {?} */\n        const parentNative = (/** @type {?} */ ((/** @type {?} */ (getParentNative(childTNode, currentView)))));\n        /** @type {?} */\n        const renderer = currentView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.removeChild((/** @type {?} */ (parentNative)), childEl) :\n            (/** @type {?} */ (parentNative)).removeChild(childEl);\n        return true;\n    }\n    return false;\n}\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param {?} projectedTNode The TNode to be projected\n * @param {?} tProjectionNode The projection (ng-content) TNode\n * @param {?} currentView Current LView\n * @param {?} projectionView Projection view (view above current)\n * @return {?}\n */\nfunction appendProjectedNode(projectedTNode, tProjectionNode, currentView, projectionView) {\n    /** @type {?} */\n    const native = getNativeByTNode(projectedTNode, projectionView);\n    appendChild(native, tProjectionNode, currentView);\n    // the projected contents are processed while in the shadow view (which is the currentView)\n    // therefore we need to extract the view where the host element lives since it's the\n    // logical container of the content projected views\n    attachPatchData(native, projectionView);\n    /** @type {?} */\n    const renderParent = getRenderParent(tProjectionNode, currentView);\n    /** @type {?} */\n    const nodeOrContainer = projectionView[projectedTNode.index];\n    if (projectedTNode.type === 0 /* Container */) {\n        // The node we are adding is a container and we are adding it to an element which\n        // is not a component (no more re-projection).\n        // Alternatively a container is projected at the root of a component's template\n        // and can't be re-projected (as not content of any component).\n        // Assign the final projection location in those cases.\n        nodeOrContainer[RENDER_PARENT] = renderParent;\n        /** @type {?} */\n        const views = nodeOrContainer[VIEWS];\n        for (let i = 0; i < views.length; i++) {\n            addRemoveViewFromContainer(views[i], true, nodeOrContainer[NATIVE]);\n        }\n    }\n    else {\n        if (projectedTNode.type === 4 /* ElementContainer */) {\n            /** @type {?} */\n            let ngContainerChildTNode = (/** @type {?} */ (projectedTNode.child));\n            while (ngContainerChildTNode) {\n                appendProjectedNode(ngContainerChildTNode, tProjectionNode, currentView, projectionView);\n                ngContainerChildTNode = ngContainerChildTNode.next;\n            }\n        }\n        if (isLContainer(nodeOrContainer)) {\n            nodeOrContainer[RENDER_PARENT] = renderParent;\n            appendChild(nodeOrContainer[NATIVE], tProjectionNode, currentView);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n/**\n * @param {?} nodeClassAttrVal\n * @param {?} cssClassToMatch\n * @return {?}\n */\nfunction isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\n    /** @type {?} */\n    const nodeClassesLen = nodeClassAttrVal.length;\n    /** @type {?} */\n    const matchIndex = (/** @type {?} */ (nodeClassAttrVal)).indexOf(cssClassToMatch);\n    /** @type {?} */\n    const matchEndIdx = matchIndex + cssClassToMatch.length;\n    if (matchIndex === -1 // no match\n        || (matchIndex > 0 && (/** @type {?} */ (nodeClassAttrVal))[matchIndex - 1] !== ' ') // no space before\n        ||\n            (matchEndIdx < nodeClassesLen && (/** @type {?} */ (nodeClassAttrVal))[matchEndIdx] !== ' ')) // no space after\n     {\n        return false;\n    }\n    return true;\n}\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be perfomed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode. In \"projection\" mode, we do not need to check types, so if tag name\n * matches selector, we declare a match. In \"directive matching\" mode, we also check whether tNode\n * is of expected type:\n * - whether tNode has either Element or ElementContainer type\n * - or if we want to match \"ng-template\" tag, we check for Container type\n * @param {?} tNode\n * @param {?} currentSelector\n * @param {?} isProjectionMode\n * @return {?}\n */\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n    return currentSelector === tNode.tagName &&\n        (isProjectionMode ||\n            (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) ||\n            (tNode.type === 0 /* Container */ && currentSelector === NG_TEMPLATE_SELECTOR));\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param {?} tNode\n * @param {?} selector\n * @param {?} isProjectionMode\n * @return {?} true if node matches the selector.\n */\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n    ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n    /** @type {?} */\n    let mode = 4 /* ELEMENT */;\n    /** @type {?} */\n    const nodeAttrs = (/** @type {?} */ (tNode.attrs));\n    /** @type {?} */\n    const selectOnlyMarkerIdx = nodeAttrs ? nodeAttrs.indexOf(3 /* SelectOnly */) : -1;\n    // When processing \":not\" selectors, we skip to the next \":not\" if the\n    // current one doesn't match\n    /** @type {?} */\n    let skipToNextSelector = false;\n    for (let i = 0; i < selector.length; i++) {\n        /** @type {?} */\n        const current = selector[i];\n        if (typeof current === 'number') {\n            // If we finish processing a :not selector and it hasn't failed, return false\n            if (!skipToNextSelector && !isPositive(mode) && !isPositive((/** @type {?} */ (current)))) {\n                return false;\n            }\n            // If we are skipping to the next :not() and this mode flag is positive,\n            // it's a part of the current :not() selector, and we should keep skipping\n            if (skipToNextSelector && isPositive(current))\n                continue;\n            skipToNextSelector = false;\n            mode = ((/** @type {?} */ (current))) | (mode & 1 /* NOT */);\n            continue;\n        }\n        if (skipToNextSelector)\n            continue;\n        if (mode & 4 /* ELEMENT */) {\n            mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;\n            if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||\n                current === '' && selector.length === 1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n            }\n        }\n        else {\n            /** @type {?} */\n            const attrName = mode & 8 /* CLASS */ ? 'class' : current;\n            /** @type {?} */\n            const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs);\n            if (attrIndexInNode === -1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n                continue;\n            }\n            /** @type {?} */\n            const selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];\n            if (selectorAttrValue !== '') {\n                /** @type {?} */\n                let nodeAttrValue;\n                /** @type {?} */\n                const maybeAttrName = nodeAttrs[attrIndexInNode];\n                if (selectOnlyMarkerIdx > -1 && attrIndexInNode > selectOnlyMarkerIdx) {\n                    nodeAttrValue = '';\n                }\n                else {\n                    ngDevMode && assertNotEqual(maybeAttrName, 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');\n                    nodeAttrValue = (/** @type {?} */ (nodeAttrs[attrIndexInNode + 1]));\n                }\n                if (mode & 8 /* CLASS */ &&\n                    !isCssClassMatching((/** @type {?} */ (nodeAttrValue)), (/** @type {?} */ (selectorAttrValue))) ||\n                    mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n        }\n    }\n    return isPositive(mode) || skipToNextSelector;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nfunction isPositive(mode) {\n    return (mode & 1 /* NOT */) === 0;\n}\n/**\n * Examines an attributes definition array from a node to find the index of the\n * attribute with the specified name.\n *\n * NOTE: Will not find namespaced attributes.\n *\n * @param {?} name the name of the attribute to find\n * @param {?} attrs the attribute array to examine\n * @return {?}\n */\nfunction findAttrIndexInNode(name, attrs) {\n    if (attrs === null)\n        return -1;\n    /** @type {?} */\n    let selectOnlyMode = false;\n    /** @type {?} */\n    let i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        const maybeAttrName = attrs[i];\n        if (maybeAttrName === name) {\n            return i;\n        }\n        else if (maybeAttrName === 0 /* NamespaceURI */) {\n            // NOTE(benlesh): will not find namespaced attributes. This is by design.\n            i += 4;\n        }\n        else {\n            if (maybeAttrName === 3 /* SelectOnly */) {\n                selectOnlyMode = true;\n            }\n            i += selectOnlyMode ? 1 : 2;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} tNode\n * @param {?} selector\n * @param {?=} isProjectionMode\n * @return {?}\n */\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\n    for (let i = 0; i < selector.length; i++) {\n        if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction getProjectAsAttrValue(tNode) {\n    /** @type {?} */\n    const nodeAttrs = tNode.attrs;\n    if (nodeAttrs != null) {\n        /** @type {?} */\n        const ngProjectAsAttrIdx = nodeAttrs.indexOf(NG_PROJECT_AS_ATTR_NAME);\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n        // (attribute names are stored at even indexes)\n        if ((ngProjectAsAttrIdx & 1) === 0) {\n            return (/** @type {?} */ (nodeAttrs[ngProjectAsAttrIdx + 1]));\n        }\n    }\n    return null;\n}\n/**\n * Checks a given node against matching selectors and returns\n * selector index (or 0 if none matched).\n *\n * This function takes into account the ngProjectAs attribute: if present its value will be compared\n * to the raw (un-parsed) CSS selector instead of using standard selector matching logic.\n * @param {?} tNode\n * @param {?} selectors\n * @param {?} textSelectors\n * @return {?}\n */\nfunction matchingSelectorIndex(tNode, selectors, textSelectors) {\n    /** @type {?} */\n    const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n    for (let i = 0; i < selectors.length; i++) {\n        // if a node has the ngProjectAs attribute match it against unparsed selector\n        // match a node against a parsed selector only if ngProjectAs attribute is not present\n        if (ngProjectAsAttrVal === textSelectors[i] ||\n            ngProjectAsAttrVal === null &&\n                isNodeMatchingSelectorList(tNode, selectors[i], /* isProjectionMode */ true)) {\n            return i + 1; // first matching selector \"captures\" a given node\n        }\n    }\n    return 0;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Combines the binding value and a factory for an animation player.\n *\n * Used to bind a player to an element template binding (currently only\n * `[style]`, `[style.prop]`, `[class]` and `[class.name]` bindings\n * supported). The provided `factoryFn` function will be run once all\n * the associated bindings have been evaluated on the element and is\n * designed to return a player which will then be placed on the element.\n *\n * @template T\n * @param {?} factoryFn The function that is used to create a player\n *   once all the rendering-related (styling values) have been\n *   processed for the element binding.\n * @param {?} value The raw value that will be exposed to the binding\n *   so that the binding can update its internal values when\n *   any changes are evaluated.\n * @return {?}\n */\nfunction bindPlayerFactory(factoryFn, value) {\n    return (/** @type {?} */ (new BoundPlayerFactory(factoryFn, value)));\n}\n/**\n * @template T\n */\nclass BoundPlayerFactory {\n    /**\n     * @param {?} fn\n     * @param {?} value\n     */\n    constructor(fn, value) {\n        this.fn = fn;\n        this.value = value;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CorePlayerHandler {\n    constructor() {\n        this._players = [];\n    }\n    /**\n     * @return {?}\n     */\n    flushPlayers() {\n        for (let i = 0; i < this._players.length; i++) {\n            /** @type {?} */\n            const player = this._players[i];\n            if (!player.parent && player.state === 0 /* Pending */) {\n                player.play();\n            }\n        }\n        this._players.length = 0;\n    }\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    queuePlayer(player) { this._players.push(player); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ANIMATION_PROP_PREFIX = '@';\n/**\n * @param {?=} element\n * @param {?=} sanitizer\n * @param {?=} initialStyles\n * @param {?=} initialClasses\n * @return {?}\n */\nfunction createEmptyStylingContext(element, sanitizer, initialStyles, initialClasses) {\n    return [\n        0,\n        [null, -1, false, sanitizer || null],\n        initialStyles || [null],\n        initialClasses || [null],\n        [0, 0],\n        element || null,\n        null,\n        null,\n        null,\n    ];\n}\n/**\n * Used clone a copy of a pre-computed template of a styling context.\n *\n * A pre-computed template is designed to be computed once for a given element\n * (instructions.ts has logic for caching this).\n * @param {?} element\n * @param {?} templateStyleContext\n * @return {?}\n */\nfunction allocStylingContext(element, templateStyleContext) {\n    // each instance gets a copy\n    /** @type {?} */\n    const context = (/** @type {?} */ ((/** @type {?} */ (templateStyleContext.slice()))));\n    context[5 /* ElementPosition */] = element;\n    // this will prevent any other directives from extending the context\n    context[0 /* MasterFlagPosition */] |= 32 /* BindingAllocationLocked */;\n    return context;\n}\n/**\n * Retrieve the `StylingContext` at a given index.\n *\n * This method lazily creates the `StylingContext`. This is because in most cases\n * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n * which would create unnecessary memory pressure.\n *\n * @param {?} index Index of the style allocation. See: `elementStyling`.\n * @param {?} viewData The view to search for the styling context\n * @return {?}\n */\nfunction getStylingContext(index, viewData) {\n    /** @type {?} */\n    let storageIndex = index;\n    /** @type {?} */\n    let slotValue = viewData[storageIndex];\n    /** @type {?} */\n    let wrapper = viewData;\n    while (Array.isArray(slotValue)) {\n        wrapper = slotValue;\n        slotValue = (/** @type {?} */ (slotValue[HOST]));\n    }\n    if (isStylingContext(wrapper)) {\n        return (/** @type {?} */ (wrapper));\n    }\n    else {\n        // This is an LView or an LContainer\n        /** @type {?} */\n        const stylingTemplate = getTNode(index - HEADER_OFFSET, viewData).stylingTemplate;\n        if (wrapper !== viewData) {\n            storageIndex = HOST;\n        }\n        return wrapper[storageIndex] = stylingTemplate ?\n            allocStylingContext(slotValue, stylingTemplate) :\n            createEmptyStylingContext(slotValue);\n    }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isStylingContext(value) {\n    // Not an LView or an LContainer\n    return Array.isArray(value) && typeof value[0 /* MasterFlagPosition */] === 'number' &&\n        Array.isArray(value[2 /* InitialStyleValuesPosition */]);\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction isAnimationProp(name) {\n    return name[0] === ANIMATION_PROP_PREFIX;\n}\n/**\n * @param {?} playerContext\n * @param {?} rootContext\n * @param {?} element\n * @param {?} player\n * @param {?} playerContextIndex\n * @param {?=} ref\n * @return {?}\n */\nfunction addPlayerInternal(playerContext, rootContext, element, player, playerContextIndex, ref) {\n    ref = ref || element;\n    if (playerContextIndex) {\n        playerContext[playerContextIndex] = player;\n    }\n    else {\n        playerContext.push(player);\n    }\n    if (player) {\n        player.addEventListener(200 /* Destroyed */, () => {\n            /** @type {?} */\n            const index = playerContext.indexOf(player);\n            /** @type {?} */\n            const nonFactoryPlayerIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            // if the player is being removed from the factory side of the context\n            // (which is where the [style] and [class] bindings do their thing) then\n            // that side of the array cannot be resized since the respective bindings\n            // have pointer index values that point to the associated factory instance\n            if (index) {\n                if (index < nonFactoryPlayerIndex) {\n                    playerContext[index] = null;\n                }\n                else {\n                    playerContext.splice(index, 1);\n                }\n            }\n            player.destroy();\n        });\n        /** @type {?} */\n        const playerHandler = rootContext.playerHandler || (rootContext.playerHandler = new CorePlayerHandler());\n        playerHandler.queuePlayer(player, ref);\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} playerContext\n * @return {?}\n */\nfunction getPlayersInternal(playerContext) {\n    /** @type {?} */\n    const players = [];\n    /** @type {?} */\n    const nonFactoryPlayersStart = playerContext[0 /* NonBuilderPlayersStart */];\n    // add all factory-based players (which are apart of [style] and [class] bindings)\n    for (let i = 1 /* PlayerBuildersStartPosition */ + 1 /* PlayerOffsetPosition */; i < nonFactoryPlayersStart; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n        /** @type {?} */\n        const player = (/** @type {?} */ (playerContext[i]));\n        if (player) {\n            players.push(player);\n        }\n    }\n    // add all custom players (not apart of [style] and [class] bindings)\n    for (let i = nonFactoryPlayersStart; i < playerContext.length; i++) {\n        players.push((/** @type {?} */ (playerContext[i])));\n    }\n    return players;\n}\n/**\n * @param {?} target\n * @param {?=} context\n * @return {?}\n */\nfunction getOrCreatePlayerContext(target, context) {\n    context = context || (/** @type {?} */ (getLContext(target)));\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return null;\n    }\n    const { lView, nodeIndex } = context;\n    /** @type {?} */\n    const stylingContext = getStylingContext(nodeIndex, lView);\n    return getPlayerContext(stylingContext) || allocPlayerContext(stylingContext);\n}\n/**\n * @param {?} stylingContext\n * @return {?}\n */\nfunction getPlayerContext(stylingContext) {\n    return stylingContext[8 /* PlayerContext */];\n}\n/**\n * @param {?} data\n * @return {?}\n */\nfunction allocPlayerContext(data) {\n    return data[8 /* PlayerContext */] =\n        [5 /* SinglePlayerBuildersStartPosition */, null, null, null, null];\n}\n/**\n * @return {?}\n */\nfunction throwInvalidRefError() {\n    throw new Error('Only elements that exist in an Angular application can be used for animations');\n}\n/**\n * @param {?} attrs\n * @return {?}\n */\nfunction hasStyling(attrs) {\n    for (let i = 0; i < attrs.length; i++) {\n        /** @type {?} */\n        const attr = attrs[i];\n        if (attr == 1 /* Classes */ || attr == 2 /* Styles */)\n            return true;\n    }\n    return false;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction hasClassInput(tNode) {\n    return tNode.flags & 8 /* hasClassInput */ ? true : false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This file includes the code to power all styling-binding operations in Angular.\n *\n * These include:\n * [style]=\"myStyleObj\"\n * [class]=\"myClassObj\"\n * [style.prop]=\"myPropValue\"\n * [class.name]=\"myClassValue\"\n *\n * There are many different ways in which these functions below are called. Please see\n * `interfaces/styles.ts` to get a better idea of how the styling algorithm works.\n */\n/**\n * Creates a new StylingContext an fills it with the provided static styling attribute values.\n * @param {?} attrs\n * @return {?}\n */\nfunction initializeStaticContext(attrs) {\n    /** @type {?} */\n    const context = createEmptyStylingContext();\n    /** @type {?} */\n    const initialClasses = context[3 /* InitialClassValuesPosition */] =\n        [null];\n    /** @type {?} */\n    const initialStyles = context[2 /* InitialStyleValuesPosition */] =\n        [null];\n    // The attributes array has marker values (numbers) indicating what the subsequent\n    // values represent. When we encounter a number, we set the mode to that type of attribute.\n    /** @type {?} */\n    let mode = -1;\n    for (let i = 0; i < attrs.length; i++) {\n        /** @type {?} */\n        const attr = attrs[i];\n        if (typeof attr == 'number') {\n            mode = attr;\n        }\n        else if (mode === 2 /* Styles */) {\n            initialStyles.push((/** @type {?} */ (attr)), (/** @type {?} */ (attrs[++i])));\n        }\n        else if (mode === 1 /* Classes */) {\n            initialClasses.push((/** @type {?} */ (attr)), true);\n        }\n        else if (mode === 3 /* SelectOnly */) {\n            break;\n        }\n    }\n    return context;\n}\n/**\n * Designed to update an existing styling context with new static styling\n * data (classes and styles).\n *\n * @param {?} context the existing styling context\n * @param {?} attrs an array of new static styling attributes that will be\n *              assigned to the context\n * @param {?} directive the directive instance with which static data is associated with.\n * @return {?}\n */\nfunction patchContextWithStaticAttrs(context, attrs, directive) {\n    // If the styling context has already been patched with the given directive's bindings,\n    // then there is no point in doing it again. The reason why this may happen (the directive\n    // styling being patched twice) is because the `stylingBinding` function is called each time\n    // an element is created (both within a template function and within directive host bindings).\n    /** @type {?} */\n    const directives = context[1 /* DirectiveRegistryPosition */];\n    if (getDirectiveRegistryValuesIndexOf(directives, directive) == -1) {\n        // this is a new directive which we have not seen yet.\n        directives.push(directive, -1, false, null);\n        /** @type {?} */\n        let initialClasses = null;\n        /** @type {?} */\n        let initialStyles = null;\n        /** @type {?} */\n        let mode = -1;\n        for (let i = 0; i < attrs.length; i++) {\n            /** @type {?} */\n            const attr = attrs[i];\n            if (typeof attr == 'number') {\n                mode = attr;\n            }\n            else if (mode == 1 /* Classes */) {\n                initialClasses = initialClasses || context[3 /* InitialClassValuesPosition */];\n                patchInitialStylingValue(initialClasses, attr, true);\n            }\n            else if (mode == 2 /* Styles */) {\n                initialStyles = initialStyles || context[2 /* InitialStyleValuesPosition */];\n                patchInitialStylingValue(initialStyles, attr, attrs[++i]);\n            }\n        }\n    }\n}\n/**\n * Designed to add a style or class value into the existing set of initial styles.\n *\n * The function will search and figure out if a style/class value is already present\n * within the provided initial styling array. If and when a style/class value is not\n * present (or if it's value is falsy) then it will be inserted/updated in the list\n * of initial styling values.\n * @param {?} initialStyling\n * @param {?} prop\n * @param {?} value\n * @return {?}\n */\nfunction patchInitialStylingValue(initialStyling, prop, value) {\n    // Even values are keys; Odd numbers are values; Search keys only\n    for (let i = 1 /* KeyValueStartPosition */; i < initialStyling.length;) {\n        /** @type {?} */\n        const key = initialStyling[i];\n        if (key === prop) {\n            /** @type {?} */\n            const existingValue = initialStyling[i + 1 /* ValueOffset */];\n            // If there is no previous style value (when `null`) or no previous class\n            // applied (when `false`) then we update the the newly given value.\n            if (existingValue == null || existingValue == false) {\n                initialStyling[i + 1 /* ValueOffset */] = value;\n            }\n            return;\n        }\n        i = i + 2 /* Size */;\n    }\n    // We did not find existing key, add a new one.\n    initialStyling.push(prop, value);\n}\n/**\n * Runs through the initial styling data present in the context and renders\n * them via the renderer on the element.\n * @param {?} element\n * @param {?} context\n * @param {?} renderer\n * @return {?}\n */\nfunction renderInitialStylesAndClasses(element, context, renderer) {\n    /** @type {?} */\n    const initialClasses = context[3 /* InitialClassValuesPosition */];\n    renderInitialStylingValues(element, renderer, initialClasses, true);\n    /** @type {?} */\n    const initialStyles = context[2 /* InitialStyleValuesPosition */];\n    renderInitialStylingValues(element, renderer, initialStyles, false);\n}\n/**\n * This is a helper function designed to render each entry present within the\n * provided list of initialStylingValues.\n * @param {?} element\n * @param {?} renderer\n * @param {?} initialStylingValues\n * @param {?} isEntryClassBased\n * @return {?}\n */\nfunction renderInitialStylingValues(element, renderer, initialStylingValues, isEntryClassBased) {\n    for (let i = 1 /* KeyValueStartPosition */; i < initialStylingValues.length; i += 2 /* Size */) {\n        /** @type {?} */\n        const value = initialStylingValues[i + 1 /* ValueOffset */];\n        if (value) {\n            if (isEntryClassBased) {\n                setClass(element, (/** @type {?} */ (initialStylingValues[i + 0 /* PropOffset */])), true, renderer, null);\n            }\n            else {\n                setStyle(element, (/** @type {?} */ (initialStylingValues[i + 0 /* PropOffset */])), (/** @type {?} */ (value)), renderer, null);\n            }\n        }\n    }\n}\n/**\n * Adds in new binding values to a styling context.\n *\n * If a directive value is provided then all provided class/style binding names will\n * reference the provided directive.\n *\n * @param {?} context the existing styling context\n * @param {?} directiveRef the directive that the new bindings will reference\n * @param {?=} classBindingNames an array of class binding names that will be added to the context\n * @param {?=} styleBindingNames an array of style binding names that will be added to the context\n * @param {?=} styleSanitizer an optional sanitizer that handle all sanitization on for each of\n *    the bindings added to the context. Note that if a directive is provided then the sanitizer\n *    instance will only be active if and when the directive updates the bindings that it owns.\n * @param {?=} onlyProcessSingleClasses\n * @return {?}\n */\nfunction updateContextWithBindings(context, directiveRef, classBindingNames, styleBindingNames, styleSanitizer, onlyProcessSingleClasses) {\n    if (context[0 /* MasterFlagPosition */] & 32 /* BindingAllocationLocked */)\n        return;\n    // this means the context has already been patched with the directive's bindings\n    /** @type {?} */\n    const directiveIndex = findOrPatchDirectiveIntoRegistry(context, directiveRef, styleSanitizer);\n    if (directiveIndex === -1) {\n        // this means the directive has already been patched in ... No point in doing anything\n        return;\n    }\n    // there are alot of variables being used below to track where in the context the new\n    // binding values will be placed. Because the context consists of multiple types of\n    // entries (single classes/styles and multi classes/styles) alot of the index positions\n    // need to be computed ahead of time and the context needs to be extended before the values\n    // are inserted in.\n    /** @type {?} */\n    const singlePropOffsetValues = context[4 /* SinglePropOffsetPositions */];\n    /** @type {?} */\n    const totalCurrentClassBindings = singlePropOffsetValues[1 /* ClassesCountPosition */];\n    /** @type {?} */\n    const totalCurrentStyleBindings = singlePropOffsetValues[0 /* StylesCountPosition */];\n    /** @type {?} */\n    const classesOffset = totalCurrentClassBindings * 4 /* Size */;\n    /** @type {?} */\n    const stylesOffset = totalCurrentStyleBindings * 4 /* Size */;\n    /** @type {?} */\n    const singleStylesStartIndex = 9 /* SingleStylesStartPosition */;\n    /** @type {?} */\n    let singleClassesStartIndex = singleStylesStartIndex + stylesOffset;\n    /** @type {?} */\n    let multiStylesStartIndex = singleClassesStartIndex + classesOffset;\n    /** @type {?} */\n    let multiClassesStartIndex = multiStylesStartIndex + stylesOffset;\n    // because we're inserting more bindings into the context, this means that the\n    // binding values need to be referenced the singlePropOffsetValues array so that\n    // the template/directive can easily find them inside of the `elementStyleProp`\n    // and the `elementClassProp` functions without iterating through the entire context.\n    // The first step to setting up these reference points is to mark how many bindings\n    // are being added. Even if these bindings already exist in the context, the directive\n    // or template code will still call them unknowingly. Therefore the total values need\n    // to be registered so that we know how many bindings are assigned to each directive.\n    /** @type {?} */\n    const currentSinglePropsLength = singlePropOffsetValues.length;\n    singlePropOffsetValues.push(styleBindingNames ? styleBindingNames.length : 0, classBindingNames ? classBindingNames.length : 0);\n    // the code below will check to see if a new style binding already exists in the context\n    // if so then there is no point in inserting it into the context again. Whether or not it\n    // exists the styling offset code will now know exactly where it is\n    /** @type {?} */\n    let insertionOffset = 0;\n    /** @type {?} */\n    const filteredStyleBindingNames = [];\n    if (styleBindingNames && styleBindingNames.length) {\n        for (let i = 0; i < styleBindingNames.length; i++) {\n            /** @type {?} */\n            const name = styleBindingNames[i];\n            /** @type {?} */\n            let singlePropIndex = getMatchingBindingIndex(context, name, singleStylesStartIndex, singleClassesStartIndex);\n            if (singlePropIndex == -1) {\n                singlePropIndex = singleClassesStartIndex + insertionOffset;\n                insertionOffset += 4 /* Size */;\n                filteredStyleBindingNames.push(name);\n            }\n            singlePropOffsetValues.push(singlePropIndex);\n        }\n    }\n    // just like with the style binding loop above, the new class bindings get the same treatment...\n    /** @type {?} */\n    const filteredClassBindingNames = [];\n    if (classBindingNames && classBindingNames.length) {\n        for (let i = 0; i < classBindingNames.length; i++) {\n            /** @type {?} */\n            const name = classBindingNames[i];\n            /** @type {?} */\n            let singlePropIndex = getMatchingBindingIndex(context, name, singleClassesStartIndex, multiStylesStartIndex);\n            if (singlePropIndex == -1) {\n                singlePropIndex = multiStylesStartIndex + insertionOffset;\n                insertionOffset += 4 /* Size */;\n                filteredClassBindingNames.push(name);\n            }\n            else {\n                singlePropIndex += filteredStyleBindingNames.length * 4 /* Size */;\n            }\n            singlePropOffsetValues.push(singlePropIndex);\n        }\n    }\n    // because new styles are being inserted, this means the existing collection of style offset\n    // index values are incorrect (they point to the wrong values). The code below will run through\n    // the entire offset array and update the existing set of index values to point to their new\n    // locations while taking the new binding values into consideration.\n    /** @type {?} */\n    let i = 2 /* ValueStartPosition */;\n    if (filteredStyleBindingNames.length) {\n        while (i < currentSinglePropsLength) {\n            /** @type {?} */\n            const totalStyles = singlePropOffsetValues[i + 0 /* StylesCountPosition */];\n            /** @type {?} */\n            const totalClasses = singlePropOffsetValues[i + 1 /* ClassesCountPosition */];\n            if (totalClasses) {\n                /** @type {?} */\n                const start = i + 2 /* ValueStartPosition */ + totalStyles;\n                for (let j = start; j < start + totalClasses; j++) {\n                    singlePropOffsetValues[j] += filteredStyleBindingNames.length * 4 /* Size */;\n                }\n            }\n            /** @type {?} */\n            const total = totalStyles + totalClasses;\n            i += 2 /* ValueStartPosition */ + total;\n        }\n    }\n    /** @type {?} */\n    const totalNewEntries = filteredClassBindingNames.length + filteredStyleBindingNames.length;\n    // in the event that there are new style values being inserted, all existing class and style\n    // bindings need to have their pointer values offsetted with the new amount of space that is\n    // used for the new style/class bindings.\n    for (let i = singleStylesStartIndex; i < context.length; i += 4 /* Size */) {\n        /** @type {?} */\n        const isMultiBased = i >= multiStylesStartIndex;\n        /** @type {?} */\n        const isClassBased = i >= (isMultiBased ? multiClassesStartIndex : singleClassesStartIndex);\n        /** @type {?} */\n        const flag = getPointers(context, i);\n        /** @type {?} */\n        const staticIndex = getInitialIndex(flag);\n        /** @type {?} */\n        let singleOrMultiIndex = getMultiOrSingleIndex(flag);\n        if (isMultiBased) {\n            singleOrMultiIndex +=\n                isClassBased ? (filteredStyleBindingNames.length * 4 /* Size */) : 0;\n        }\n        else {\n            singleOrMultiIndex += (totalNewEntries * 4 /* Size */) +\n                ((isClassBased ? filteredStyleBindingNames.length : 0) * 4 /* Size */);\n        }\n        setFlag(context, i, pointers(flag, staticIndex, singleOrMultiIndex));\n    }\n    // this is where we make space in the context for the new style bindings\n    for (let i = 0; i < filteredStyleBindingNames.length * 4 /* Size */; i++) {\n        context.splice(multiClassesStartIndex, 0, null);\n        context.splice(singleClassesStartIndex, 0, null);\n        singleClassesStartIndex++;\n        multiStylesStartIndex++;\n        multiClassesStartIndex += 2; // both single + multi slots were inserted\n    }\n    // this is where we make space in the context for the new class bindings\n    for (let i = 0; i < filteredClassBindingNames.length * 4 /* Size */; i++) {\n        context.splice(multiStylesStartIndex, 0, null);\n        context.push(null);\n        multiStylesStartIndex++;\n        multiClassesStartIndex++;\n    }\n    /** @type {?} */\n    const initialClasses = context[3 /* InitialClassValuesPosition */];\n    /** @type {?} */\n    const initialStyles = context[2 /* InitialStyleValuesPosition */];\n    // the code below will insert each new entry into the context and assign the appropriate\n    // flags and index values to them. It's important this runs at the end of this function\n    // because the context, property offset and index values have all been computed just before.\n    for (let i = 0; i < totalNewEntries; i++) {\n        /** @type {?} */\n        const entryIsClassBased = i >= filteredStyleBindingNames.length;\n        /** @type {?} */\n        const adjustedIndex = entryIsClassBased ? (i - filteredStyleBindingNames.length) : i;\n        /** @type {?} */\n        const propName = entryIsClassBased ? filteredClassBindingNames[adjustedIndex] :\n            filteredStyleBindingNames[adjustedIndex];\n        /** @type {?} */\n        let multiIndex;\n        /** @type {?} */\n        let singleIndex;\n        if (entryIsClassBased) {\n            multiIndex = multiClassesStartIndex +\n                ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n            singleIndex = singleClassesStartIndex +\n                ((totalCurrentClassBindings + adjustedIndex) * 4 /* Size */);\n        }\n        else {\n            multiIndex =\n                multiStylesStartIndex + ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n            singleIndex = singleStylesStartIndex +\n                ((totalCurrentStyleBindings + adjustedIndex) * 4 /* Size */);\n        }\n        // if a property is not found in the initial style values list then it\n        // is ALWAYS added incase a follow-up directive introduces the same initial\n        // style/class value later on.\n        /** @type {?} */\n        let initialValuesToLookup = entryIsClassBased ? initialClasses : initialStyles;\n        /** @type {?} */\n        let indexForInitial = getInitialStylingValuesIndexOf(initialValuesToLookup, propName);\n        if (indexForInitial === -1) {\n            indexForInitial = initialValuesToLookup.length + 1 /* ValueOffset */;\n            initialValuesToLookup.push(propName, entryIsClassBased ? false : null);\n        }\n        else {\n            indexForInitial += 1 /* ValueOffset */;\n        }\n        /** @type {?} */\n        const initialFlag = prepareInitialFlag(context, propName, entryIsClassBased, styleSanitizer || null);\n        setFlag(context, singleIndex, pointers(initialFlag, indexForInitial, multiIndex));\n        setProp(context, singleIndex, propName);\n        setValue(context, singleIndex, null);\n        setPlayerBuilderIndex(context, singleIndex, 0, directiveIndex);\n        setFlag(context, multiIndex, pointers(initialFlag, indexForInitial, singleIndex));\n        setProp(context, multiIndex, propName);\n        setValue(context, multiIndex, null);\n        setPlayerBuilderIndex(context, multiIndex, 0, directiveIndex);\n    }\n    // the total classes/style values are updated so the next time the context is patched\n    // additional style/class bindings from another directive then it knows exactly where\n    // to insert them in the context\n    singlePropOffsetValues[1 /* ClassesCountPosition */] =\n        totalCurrentClassBindings + filteredClassBindingNames.length;\n    singlePropOffsetValues[0 /* StylesCountPosition */] =\n        totalCurrentStyleBindings + filteredStyleBindingNames.length;\n    // there is no initial value flag for the master index since it doesn't\n    // reference an initial style value\n    /** @type {?} */\n    const masterFlag = pointers(0, 0, multiStylesStartIndex) |\n        (onlyProcessSingleClasses ? 16 /* OnlyProcessSingleClasses */ : 0);\n    setFlag(context, 0 /* MasterFlagPosition */, masterFlag);\n}\n/**\n * Searches through the existing registry of directives\n * @param {?} context\n * @param {?} directiveRef\n * @param {?=} styleSanitizer\n * @return {?}\n */\nfunction findOrPatchDirectiveIntoRegistry(context, directiveRef, styleSanitizer) {\n    /** @type {?} */\n    const directiveRefs = context[1 /* DirectiveRegistryPosition */];\n    /** @type {?} */\n    const nextOffsetInsertionIndex = context[4 /* SinglePropOffsetPositions */].length;\n    /** @type {?} */\n    let directiveIndex;\n    /** @type {?} */\n    const detectedIndex = getDirectiveRegistryValuesIndexOf(directiveRefs, directiveRef);\n    if (detectedIndex === -1) {\n        directiveIndex = directiveRefs.length / 4 /* Size */;\n        directiveRefs.push(directiveRef, nextOffsetInsertionIndex, false, styleSanitizer || null);\n    }\n    else {\n        /** @type {?} */\n        const singlePropStartPosition = detectedIndex + 1 /* SinglePropValuesIndexOffset */;\n        if ((/** @type {?} */ (directiveRefs[singlePropStartPosition])) >= 0) {\n            // the directive has already been patched into the context\n            return -1;\n        }\n        directiveIndex = detectedIndex / 4 /* Size */;\n        // because the directive already existed this means that it was set during elementHostAttrs or\n        // elementStart which means that the binding values were not here. Therefore, the values below\n        // need to be applied so that single class and style properties can be assigned later.\n        /** @type {?} */\n        const singlePropPositionIndex = detectedIndex + 1 /* SinglePropValuesIndexOffset */;\n        directiveRefs[singlePropPositionIndex] = nextOffsetInsertionIndex;\n        // the sanitizer is also apart of the binding process and will be used when bindings are\n        // applied.\n        /** @type {?} */\n        const styleSanitizerIndex = detectedIndex + 3 /* StyleSanitizerOffset */;\n        directiveRefs[styleSanitizerIndex] = styleSanitizer || null;\n    }\n    return directiveIndex;\n}\n/**\n * @param {?} context\n * @param {?} bindingName\n * @param {?} start\n * @param {?} end\n * @return {?}\n */\nfunction getMatchingBindingIndex(context, bindingName, start, end) {\n    for (let j = start; j < end; j += 4 /* Size */) {\n        if (getProp(context, j) === bindingName)\n            return j;\n    }\n    return -1;\n}\n/**\n * Sets and resolves all `multi` styling on an `StylingContext` so that they can be\n * applied to the element once `renderStyling` is called.\n *\n * All missing styles/class (any values that are not provided in the new `styles`\n * or `classes` params) will resolve to `null` within their respective positions\n * in the context.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style values.\n * @param {?} classesInput The key/value map of CSS class names that will be used for the update.\n * @param {?=} stylesInput The key/value map of CSS styles that will be used for the update.\n * @param {?=} directiveRef\n * @return {?}\n */\nfunction updateStylingMap(context, classesInput, stylesInput, directiveRef) {\n    stylesInput = stylesInput || null;\n    /** @type {?} */\n    const directiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n    /** @type {?} */\n    const element = (/** @type {?} */ ((/** @type {?} */ (context[5 /* ElementPosition */]))));\n    /** @type {?} */\n    const classesPlayerBuilder = classesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder((/** @type {?} */ (classesInput)), element, 1 /* Class */) :\n        null;\n    /** @type {?} */\n    const stylesPlayerBuilder = stylesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder((/** @type {?} */ (stylesInput)), element, 2 /* Style */) :\n        null;\n    /** @type {?} */\n    const classesValue = classesPlayerBuilder ?\n        (/** @type {?} */ (((/** @type {?} */ (classesInput))))).value :\n        classesInput;\n    /** @type {?} */\n    const stylesValue = stylesPlayerBuilder ? (/** @type {?} */ (stylesInput))['value'] : stylesInput;\n    // early exit (this is what's done to avoid using ctx.bind() to cache the value)\n    /** @type {?} */\n    const ignoreAllClassUpdates = limitToSingleClasses(context) || classesValue === NO_CHANGE ||\n        classesValue === context[6 /* CachedClassValueOrInitialClassString */];\n    /** @type {?} */\n    const ignoreAllStyleUpdates = stylesValue === NO_CHANGE || stylesValue === context[7 /* CachedStyleValue */];\n    if (ignoreAllClassUpdates && ignoreAllStyleUpdates)\n        return;\n    context[6 /* CachedClassValueOrInitialClassString */] = classesValue;\n    context[7 /* CachedStyleValue */] = stylesValue;\n    /** @type {?} */\n    let classNames = EMPTY_ARRAY;\n    /** @type {?} */\n    let applyAllClasses = false;\n    /** @type {?} */\n    let playerBuildersAreDirty = false;\n    /** @type {?} */\n    const classesPlayerBuilderIndex = classesPlayerBuilder ? 1 /* ClassMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    /** @type {?} */\n    const stylesPlayerBuilderIndex = stylesPlayerBuilder ? 3 /* StyleMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    // each time a string-based value pops up then it shouldn't require a deep\n    // check of what's changed.\n    if (!ignoreAllClassUpdates) {\n        if (typeof classesValue == 'string') {\n            classNames = classesValue.split(/\\s+/);\n            // this boolean is used to avoid having to create a key/value map of `true` values\n            // since a classname string implies that all those classes are added\n            applyAllClasses = true;\n        }\n        else {\n            classNames = classesValue ? Object.keys(classesValue) : EMPTY_ARRAY;\n        }\n    }\n    /** @type {?} */\n    const classes = (/** @type {?} */ ((classesValue || EMPTY_OBJ)));\n    /** @type {?} */\n    const styleProps = stylesValue ? Object.keys(stylesValue) : EMPTY_ARRAY;\n    /** @type {?} */\n    const styles = stylesValue || EMPTY_OBJ;\n    /** @type {?} */\n    const classesStartIndex = styleProps.length;\n    /** @type {?} */\n    let multiStartIndex = getMultiStartIndex(context);\n    /** @type {?} */\n    let dirty = false;\n    /** @type {?} */\n    let ctxIndex = multiStartIndex;\n    /** @type {?} */\n    let propIndex = 0;\n    /** @type {?} */\n    const propLimit = styleProps.length + classNames.length;\n    // the main loop here will try and figure out how the shape of the provided\n    // styles differ with respect to the context. Later if the context/styles/classes\n    // are off-balance then they will be dealt in another loop after this one\n    while (ctxIndex < context.length && propIndex < propLimit) {\n        /** @type {?} */\n        const isClassBased = propIndex >= classesStartIndex;\n        /** @type {?} */\n        const processValue = (!isClassBased && !ignoreAllStyleUpdates) || (isClassBased && !ignoreAllClassUpdates);\n        // when there is a cache-hit for a string-based class then we should\n        // avoid doing any work diffing any of the changes\n        if (processValue) {\n            /** @type {?} */\n            const adjustedPropIndex = isClassBased ? propIndex - classesStartIndex : propIndex;\n            /** @type {?} */\n            const newProp = isClassBased ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n            /** @type {?} */\n            const newValue = isClassBased ? (applyAllClasses ? true : classes[newProp]) : styles[newProp];\n            /** @type {?} */\n            const playerBuilderIndex = isClassBased ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n            /** @type {?} */\n            const prop = getProp(context, ctxIndex);\n            if (prop === newProp) {\n                /** @type {?} */\n                const value = getValue(context, ctxIndex);\n                /** @type {?} */\n                const flag = getPointers(context, ctxIndex);\n                setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                if (hasValueChanged(flag, value, newValue)) {\n                    setValue(context, ctxIndex, newValue);\n                    playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n                    /** @type {?} */\n                    const initialValue = getInitialValue(context, flag);\n                    // SKIP IF INITIAL CHECK\n                    // If the former `value` is `null` then it means that an initial value\n                    // could be being rendered on screen. If that is the case then there is\n                    // no point in updating the value incase it matches. In other words if the\n                    // new value is the exact same as the previously rendered value (which\n                    // happens to be the initial value) then do nothing.\n                    if (value != null || hasValueChanged(flag, initialValue, newValue)) {\n                        setDirty(context, ctxIndex, true);\n                        dirty = true;\n                    }\n                }\n            }\n            else {\n                /** @type {?} */\n                const indexOfEntry = findEntryPositionByProp(context, newProp, ctxIndex);\n                if (indexOfEntry > 0) {\n                    // it was found at a later point ... just swap the values\n                    /** @type {?} */\n                    const valueToCompare = getValue(context, indexOfEntry);\n                    /** @type {?} */\n                    const flagToCompare = getPointers(context, indexOfEntry);\n                    swapMultiContextEntries(context, ctxIndex, indexOfEntry);\n                    if (hasValueChanged(flagToCompare, valueToCompare, newValue)) {\n                        /** @type {?} */\n                        const initialValue = getInitialValue(context, flagToCompare);\n                        setValue(context, ctxIndex, newValue);\n                        // same if statement logic as above (look for SKIP IF INITIAL CHECK).\n                        if (valueToCompare != null || hasValueChanged(flagToCompare, initialValue, newValue)) {\n                            setDirty(context, ctxIndex, true);\n                            playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n                            dirty = true;\n                        }\n                    }\n                }\n                else {\n                    // we only care to do this if the insertion is in the middle\n                    /** @type {?} */\n                    const newFlag = prepareInitialFlag(context, newProp, isClassBased, getStyleSanitizer(context, directiveIndex));\n                    playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n                    insertNewMultiProperty(context, ctxIndex, isClassBased, newProp, newFlag, newValue, directiveIndex, playerBuilderIndex);\n                    dirty = true;\n                }\n            }\n        }\n        ctxIndex += 4 /* Size */;\n        propIndex++;\n    }\n    // this means that there are left-over values in the context that\n    // were not included in the provided styles/classes and in this\n    // case the  goal is to \"remove\" them from the context (by nullifying)\n    while (ctxIndex < context.length) {\n        /** @type {?} */\n        const flag = getPointers(context, ctxIndex);\n        /** @type {?} */\n        const isClassBased = (flag & 2 /* Class */) === 2 /* Class */;\n        /** @type {?} */\n        const processValue = (!isClassBased && !ignoreAllStyleUpdates) || (isClassBased && !ignoreAllClassUpdates);\n        if (processValue) {\n            /** @type {?} */\n            const value = getValue(context, ctxIndex);\n            /** @type {?} */\n            const doRemoveValue = valueExists(value, isClassBased);\n            if (doRemoveValue) {\n                setDirty(context, ctxIndex, true);\n                setValue(context, ctxIndex, null);\n                // we keep the player factory the same so that the `nulled` value can\n                // be instructed into the player because removing a style and/or a class\n                // is a valid animation player instruction.\n                /** @type {?} */\n                const playerBuilderIndex = isClassBased ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n                setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n                dirty = true;\n            }\n        }\n        ctxIndex += 4 /* Size */;\n    }\n    // this means that there are left-over properties in the context that\n    // were not detected in the context during the loop above. In that\n    // case we want to add the new entries into the list\n    /** @type {?} */\n    const sanitizer = getStyleSanitizer(context, directiveIndex);\n    while (propIndex < propLimit) {\n        /** @type {?} */\n        const isClassBased = propIndex >= classesStartIndex;\n        /** @type {?} */\n        const processValue = (!isClassBased && !ignoreAllStyleUpdates) || (isClassBased && !ignoreAllClassUpdates);\n        if (processValue) {\n            /** @type {?} */\n            const adjustedPropIndex = isClassBased ? propIndex - classesStartIndex : propIndex;\n            /** @type {?} */\n            const prop = isClassBased ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n            /** @type {?} */\n            const value = isClassBased ? (applyAllClasses ? true : classes[prop]) : styles[prop];\n            /** @type {?} */\n            const flag = prepareInitialFlag(context, prop, isClassBased, sanitizer) | 1 /* Dirty */;\n            /** @type {?} */\n            const playerBuilderIndex = isClassBased ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n            /** @type {?} */\n            const ctxIndex = context.length;\n            context.push(flag, prop, value, 0);\n            setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n            dirty = true;\n        }\n        propIndex++;\n    }\n    if (dirty) {\n        setContextDirty(context, true);\n        setDirectiveDirty(context, directiveIndex, true);\n    }\n    if (playerBuildersAreDirty) {\n        setContextPlayersDirty(context, true);\n    }\n}\n/**\n * This method will toggle the referenced CSS class (by the provided index)\n * within the given context.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided class value.\n * @param {?} offset The index of the CSS class which is being updated.\n * @param {?} addOrRemove Whether or not to add or remove the CSS class\n * @param {?=} directiveRef\n * @return {?}\n */\nfunction updateClassProp(context, offset, addOrRemove, directiveRef) {\n    _updateSingleStylingValue(context, offset, addOrRemove, true, directiveRef);\n}\n/**\n * Sets and resolves a single style value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyling` is called.\n *\n * Note that prop-level styling values are considered higher priority than any styling that\n * has been applied using `updateStylingMap`, therefore, when styling values are rendered\n * then any styles/classes that have been applied using this function will be considered first\n * (then multi values second and then initial values as a backup).\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style value.\n * @param {?} offset The index of the property which is being updated.\n * @param {?} input\n * @param {?=} directiveRef an optional reference to the directive responsible\n *    for this binding change. If present then style binding will only\n *    actualize if the directive has ownership over this binding\n *    (see styling.ts#directives for more information about the algorithm).\n * @return {?}\n */\nfunction updateStyleProp(context, offset, input, directiveRef) {\n    _updateSingleStylingValue(context, offset, input, false, directiveRef);\n}\n/**\n * @param {?} context\n * @param {?} offset\n * @param {?} input\n * @param {?} isClassBased\n * @param {?} directiveRef\n * @return {?}\n */\nfunction _updateSingleStylingValue(context, offset, input, isClassBased, directiveRef) {\n    /** @type {?} */\n    const directiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n    /** @type {?} */\n    const singleIndex = getSinglePropIndexValue(context, directiveIndex, offset, isClassBased);\n    /** @type {?} */\n    const currValue = getValue(context, singleIndex);\n    /** @type {?} */\n    const currFlag = getPointers(context, singleIndex);\n    /** @type {?} */\n    const currDirective = getDirectiveIndexFromEntry(context, singleIndex);\n    /** @type {?} */\n    const value = (input instanceof BoundPlayerFactory) ? input.value : input;\n    if (hasValueChanged(currFlag, currValue, value) &&\n        allowValueChange(currValue, value, currDirective, directiveIndex)) {\n        /** @type {?} */\n        const isClassBased = (currFlag & 2 /* Class */) === 2 /* Class */;\n        /** @type {?} */\n        const element = (/** @type {?} */ ((/** @type {?} */ (context[5 /* ElementPosition */]))));\n        /** @type {?} */\n        const playerBuilder = input instanceof BoundPlayerFactory ?\n            new ClassAndStylePlayerBuilder((/** @type {?} */ (input)), element, isClassBased ? 1 /* Class */ : 2 /* Style */) :\n            null;\n        /** @type {?} */\n        const value = (/** @type {?} */ ((playerBuilder ? ((/** @type {?} */ (input))).value : input)));\n        /** @type {?} */\n        const currPlayerIndex = getPlayerBuilderIndex(context, singleIndex);\n        /** @type {?} */\n        let playerBuildersAreDirty = false;\n        /** @type {?} */\n        let playerBuilderIndex = playerBuilder ? currPlayerIndex : 0;\n        if (hasPlayerBuilderChanged(context, playerBuilder, currPlayerIndex)) {\n            /** @type {?} */\n            const newIndex = setPlayerBuilder(context, playerBuilder, currPlayerIndex);\n            playerBuilderIndex = playerBuilder ? newIndex : 0;\n            playerBuildersAreDirty = true;\n        }\n        if (playerBuildersAreDirty || currDirective !== directiveIndex) {\n            setPlayerBuilderIndex(context, singleIndex, playerBuilderIndex, directiveIndex);\n        }\n        if (currDirective !== directiveIndex) {\n            /** @type {?} */\n            const prop = getProp(context, singleIndex);\n            /** @type {?} */\n            const sanitizer = getStyleSanitizer(context, directiveIndex);\n            setSanitizeFlag(context, singleIndex, (sanitizer && sanitizer(prop)) ? true : false);\n        }\n        // the value will always get updated (even if the dirty flag is skipped)\n        setValue(context, singleIndex, value);\n        /** @type {?} */\n        const indexForMulti = getMultiOrSingleIndex(currFlag);\n        // if the value is the same in the multi-area then there's no point in re-assembling\n        /** @type {?} */\n        const valueForMulti = getValue(context, indexForMulti);\n        if (!valueForMulti || hasValueChanged(currFlag, valueForMulti, value)) {\n            /** @type {?} */\n            let multiDirty = false;\n            /** @type {?} */\n            let singleDirty = true;\n            // only when the value is set to `null` should the multi-value get flagged\n            if (!valueExists(value, isClassBased) && valueExists(valueForMulti, isClassBased)) {\n                multiDirty = true;\n                singleDirty = false;\n            }\n            setDirty(context, indexForMulti, multiDirty);\n            setDirty(context, singleIndex, singleDirty);\n            setDirectiveDirty(context, directiveIndex, true);\n            setContextDirty(context, true);\n        }\n        if (playerBuildersAreDirty) {\n            setContextPlayersDirty(context, true);\n        }\n    }\n}\n/**\n * Renders all queued styling using a renderer onto the given element.\n *\n * This function works by rendering any styles (that have been applied\n * using `updateStylingMap`) and any classes (that have been applied using\n * `updateStyleProp`) onto the provided element using the provided renderer.\n * Just before the styles/classes are rendered a final key/value style map\n * will be assembled (if `styleStore` or `classStore` are provided).\n *\n * @param {?} context The styling context that will be used to determine\n *      what styles will be rendered\n * @param {?} renderer the renderer that will be used to apply the styling\n * @param {?} rootOrView\n * @param {?} isFirstRender\n * @param {?=} classesStore if provided, the updated class values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param {?=} stylesStore if provided, the updated style values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param {?=} directiveRef an optional directive that will be used to target which\n *    styling values are rendered. If left empty, only the bindings that are\n *    registered on the template will be rendered.\n * @return {?} number the total amount of players that got queued for animation (if any)\n */\nfunction renderStyling(context, renderer, rootOrView, isFirstRender, classesStore, stylesStore, directiveRef) {\n    /** @type {?} */\n    let totalPlayersQueued = 0;\n    /** @type {?} */\n    const targetDirectiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n    if (isContextDirty(context) && isDirectiveDirty(context, targetDirectiveIndex)) {\n        /** @type {?} */\n        const flushPlayerBuilders = context[0 /* MasterFlagPosition */] & 8 /* PlayerBuildersDirty */;\n        /** @type {?} */\n        const native = (/** @type {?} */ (context[5 /* ElementPosition */]));\n        /** @type {?} */\n        const multiStartIndex = getMultiStartIndex(context);\n        /** @type {?} */\n        const onlySingleClasses = limitToSingleClasses(context);\n        /** @type {?} */\n        let stillDirty = false;\n        for (let i = 9 /* SingleStylesStartPosition */; i < context.length; i += 4 /* Size */) {\n            // there is no point in rendering styles that have not changed on screen\n            if (isDirty(context, i)) {\n                /** @type {?} */\n                const flag = getPointers(context, i);\n                /** @type {?} */\n                const directiveIndex = getDirectiveIndexFromEntry(context, i);\n                if (targetDirectiveIndex !== directiveIndex) {\n                    stillDirty = true;\n                    continue;\n                }\n                /** @type {?} */\n                const prop = getProp(context, i);\n                /** @type {?} */\n                const value = getValue(context, i);\n                /** @type {?} */\n                const styleSanitizer = (flag & 4 /* Sanitize */) ? getStyleSanitizer(context, directiveIndex) : null;\n                /** @type {?} */\n                const playerBuilder = getPlayerBuilder(context, i);\n                /** @type {?} */\n                const isClassBased = flag & 2 /* Class */ ? true : false;\n                /** @type {?} */\n                const isInSingleRegion = i < multiStartIndex;\n                /** @type {?} */\n                const readInitialValue = !isClassBased || !onlySingleClasses;\n                /** @type {?} */\n                let valueToApply = value;\n                // VALUE DEFER CASE 1: Use a multi value instead of a null single value\n                // this check implies that a single value was removed and we\n                // should now defer to a multi value and use that (if set).\n                if (isInSingleRegion && !valueExists(valueToApply, isClassBased)) {\n                    // single values ALWAYS have a reference to a multi index\n                    /** @type {?} */\n                    const multiIndex = getMultiOrSingleIndex(flag);\n                    valueToApply = getValue(context, multiIndex);\n                }\n                // VALUE DEFER CASE 2: Use the initial value if all else fails (is falsy)\n                // the initial value will always be a string or null,\n                // therefore we can safely adopt it incase there's nothing else\n                // note that this should always be a falsy check since `false` is used\n                // for both class and style comparisons (styles can't be false and false\n                // classes are turned off and should therefore defer to their initial values)\n                // Note that we ignore class-based deferals because otherwise a class can never\n                // be removed in the case that it exists as true in the initial classes list...\n                if (!isClassBased && !valueExists(valueToApply, isClassBased) && readInitialValue) {\n                    valueToApply = getInitialValue(context, flag);\n                }\n                // if the first render is true then we do not want to start applying falsy\n                // values to the DOM element's styling. Otherwise then we know there has\n                // been a change and even if it's falsy then it's removing something that\n                // was truthy before.\n                /** @type {?} */\n                const doApplyValue = isFirstRender ? valueToApply : true;\n                if (doApplyValue) {\n                    if (isClassBased) {\n                        setClass(native, prop, valueToApply ? true : false, renderer, classesStore, playerBuilder);\n                    }\n                    else {\n                        setStyle(native, prop, (/** @type {?} */ (valueToApply)), renderer, styleSanitizer, stylesStore, playerBuilder);\n                    }\n                }\n                setDirty(context, i, false);\n            }\n        }\n        if (flushPlayerBuilders) {\n            /** @type {?} */\n            const rootContext = Array.isArray(rootOrView) ? getRootContext(rootOrView) : (/** @type {?} */ (rootOrView));\n            /** @type {?} */\n            const playerContext = (/** @type {?} */ (getPlayerContext(context)));\n            /** @type {?} */\n            const playersStartIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            for (let i = 1 /* PlayerBuildersStartPosition */; i < playersStartIndex; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n                /** @type {?} */\n                const builder = (/** @type {?} */ (playerContext[i]));\n                /** @type {?} */\n                const playerInsertionIndex = i + 1 /* PlayerOffsetPosition */;\n                /** @type {?} */\n                const oldPlayer = (/** @type {?} */ (playerContext[playerInsertionIndex]));\n                if (builder) {\n                    /** @type {?} */\n                    const player = builder.buildPlayer(oldPlayer, isFirstRender);\n                    if (player !== undefined) {\n                        if (player != null) {\n                            /** @type {?} */\n                            const wasQueued = addPlayerInternal(playerContext, rootContext, (/** @type {?} */ (native)), player, playerInsertionIndex);\n                            wasQueued && totalPlayersQueued++;\n                        }\n                        if (oldPlayer) {\n                            oldPlayer.destroy();\n                        }\n                    }\n                }\n                else if (oldPlayer) {\n                    // the player builder has been removed ... therefore we should delete the associated\n                    // player\n                    oldPlayer.destroy();\n                }\n            }\n            setContextPlayersDirty(context, false);\n        }\n        setDirectiveDirty(context, targetDirectiveIndex, false);\n        setContextDirty(context, stillDirty);\n    }\n    return totalPlayersQueued;\n}\n/**\n * This function renders a given CSS prop/value entry using the\n * provided renderer. If a `store` value is provided then\n * that will be used a render context instead of the provided\n * renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} prop the CSS style property that will be rendered\n * @param {?} value the CSS style value that will be rendered\n * @param {?} renderer\n * @param {?} sanitizer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @param {?=} playerBuilder\n * @return {?}\n */\nfunction setStyle(native, prop, value, renderer, sanitizer, store, playerBuilder) {\n    value = sanitizer && value ? sanitizer(prop, value) : value;\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(prop, value);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(prop, value);\n        }\n    }\n    else if (value) {\n        value = value.toString(); // opacity, z-index and flexbox all have number values which may not\n        // assign as numbers\n        ngDevMode && ngDevMode.rendererSetStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n            native['style'].setProperty(prop, value);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n            native['style'].removeProperty(prop);\n    }\n}\n/**\n * This function renders a given CSS class value using the provided\n * renderer (by adding or removing it from the provided element).\n * If a `store` value is provided then that will be used a render\n * context instead of the provided renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} className\n * @param {?} add\n * @param {?} renderer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @param {?=} playerBuilder\n * @return {?}\n */\nfunction setClass(native, className, add, renderer, store, playerBuilder) {\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(className, add);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(className, add);\n        }\n    }\n    else if (add) {\n        ngDevMode && ngDevMode.rendererAddClass++;\n        isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n            native['classList'].add(className);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveClass++;\n        isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n            native['classList'].remove(className);\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} sanitizeYes\n * @return {?}\n */\nfunction setSanitizeFlag(context, index, sanitizeYes) {\n    if (sanitizeYes) {\n        ((/** @type {?} */ (context[index]))) |= 4 /* Sanitize */;\n    }\n    else {\n        ((/** @type {?} */ (context[index]))) &= ~4 /* Sanitize */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setDirty(context, index, isDirtyYes) {\n    /** @type {?} */\n    const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    if (isDirtyYes) {\n        ((/** @type {?} */ (context[adjustedIndex]))) |= 1 /* Dirty */;\n    }\n    else {\n        ((/** @type {?} */ (context[adjustedIndex]))) &= ~1 /* Dirty */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isDirty(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (((/** @type {?} */ (context[adjustedIndex]))) & 1 /* Dirty */) == 1 /* Dirty */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isClassBasedValue(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (((/** @type {?} */ (context[adjustedIndex]))) & 2 /* Class */) == 2 /* Class */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isSanitizable(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index >= 9 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return (((/** @type {?} */ (context[adjustedIndex]))) & 4 /* Sanitize */) == 4 /* Sanitize */;\n}\n/**\n * @param {?} configFlag\n * @param {?} staticIndex\n * @param {?} dynamicIndex\n * @return {?}\n */\nfunction pointers(configFlag, staticIndex, dynamicIndex) {\n    return (configFlag & 63 /* BitMask */) | (staticIndex << 6 /* BitCountSize */) |\n        (dynamicIndex << (14 /* BitCountSize */ + 6 /* BitCountSize */));\n}\n/**\n * @param {?} context\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialValue(context, flag) {\n    /** @type {?} */\n    const index = getInitialIndex(flag);\n    /** @type {?} */\n    const entryIsClassBased = flag & 2 /* Class */;\n    /** @type {?} */\n    const initialValues = entryIsClassBased ? context[3 /* InitialClassValuesPosition */] :\n        context[2 /* InitialStyleValuesPosition */];\n    return initialValues[index];\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialIndex(flag) {\n    return (flag >> 6 /* BitCountSize */) & 16383 /* BitMask */;\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getMultiOrSingleIndex(flag) {\n    /** @type {?} */\n    const index = (flag >> (14 /* BitCountSize */ + 6 /* BitCountSize */)) & 16383 /* BitMask */;\n    return index >= 9 /* SingleStylesStartPosition */ ? index : -1;\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getMultiStartIndex(context) {\n    return (/** @type {?} */ (getMultiOrSingleIndex(context[0 /* MasterFlagPosition */])));\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} prop\n * @return {?}\n */\nfunction setProp(context, index, prop) {\n    context[index + 1 /* PropertyOffset */] = prop;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction setValue(context, index, value) {\n    context[index + 2 /* ValueOffset */] = value;\n}\n/**\n * @param {?} context\n * @param {?} builder\n * @param {?} index\n * @return {?}\n */\nfunction hasPlayerBuilderChanged(context, builder, index) {\n    /** @type {?} */\n    const playerContext = (/** @type {?} */ (context[8 /* PlayerContext */]));\n    if (builder) {\n        if (!playerContext || index === 0) {\n            return true;\n        }\n    }\n    else if (!playerContext) {\n        return false;\n    }\n    return playerContext[index] !== builder;\n}\n/**\n * @param {?} context\n * @param {?} builder\n * @param {?} insertionIndex\n * @return {?}\n */\nfunction setPlayerBuilder(context, builder, insertionIndex) {\n    /** @type {?} */\n    let playerContext = context[8 /* PlayerContext */] || allocPlayerContext(context);\n    if (insertionIndex > 0) {\n        playerContext[insertionIndex] = builder;\n    }\n    else {\n        insertionIndex = playerContext[0 /* NonBuilderPlayersStart */];\n        playerContext.splice(insertionIndex, 0, builder, null);\n        playerContext[0 /* NonBuilderPlayersStart */] +=\n            2 /* PlayerAndPlayerBuildersTupleSize */;\n    }\n    return insertionIndex;\n}\n/**\n * @param {?} directiveIndex\n * @param {?} playerIndex\n * @return {?}\n */\nfunction directiveOwnerPointers(directiveIndex, playerIndex) {\n    return (playerIndex << 16 /* BitCountSize */) | directiveIndex;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} playerBuilderIndex\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction setPlayerBuilderIndex(context, index, playerBuilderIndex, directiveIndex) {\n    /** @type {?} */\n    const value = directiveOwnerPointers(directiveIndex, playerBuilderIndex);\n    context[index + 3 /* PlayerBuilderIndexOffset */] = value;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPlayerBuilderIndex(context, index) {\n    /** @type {?} */\n    const flag = (/** @type {?} */ (context[index + 3 /* PlayerBuilderIndexOffset */]));\n    /** @type {?} */\n    const playerBuilderIndex = (flag >> 16 /* BitCountSize */) &\n        65535 /* BitMask */;\n    return playerBuilderIndex;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPlayerBuilder(context, index) {\n    /** @type {?} */\n    const playerBuilderIndex = getPlayerBuilderIndex(context, index);\n    if (playerBuilderIndex) {\n        /** @type {?} */\n        const playerContext = context[8 /* PlayerContext */];\n        if (playerContext) {\n            return (/** @type {?} */ (playerContext[playerBuilderIndex]));\n        }\n    }\n    return null;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} flag\n * @return {?}\n */\nfunction setFlag(context, index, flag) {\n    /** @type {?} */\n    const adjustedIndex = index === 0 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    context[adjustedIndex] = flag;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPointers(context, index) {\n    /** @type {?} */\n    const adjustedIndex = index === 0 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    return (/** @type {?} */ (context[adjustedIndex]));\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getValue(context, index) {\n    return (/** @type {?} */ (context[index + 2 /* ValueOffset */]));\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getProp(context, index) {\n    return (/** @type {?} */ (context[index + 1 /* PropertyOffset */]));\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction isContextDirty(context) {\n    return isDirty(context, 0 /* MasterFlagPosition */);\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction limitToSingleClasses(context) {\n    return context[0 /* MasterFlagPosition */] & 16 /* OnlyProcessSingleClasses */;\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setContextDirty(context, isDirtyYes) {\n    setDirty(context, 0 /* MasterFlagPosition */, isDirtyYes);\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setContextPlayersDirty(context, isDirtyYes) {\n    if (isDirtyYes) {\n        ((/** @type {?} */ (context[0 /* MasterFlagPosition */]))) |= 8 /* PlayerBuildersDirty */;\n    }\n    else {\n        ((/** @type {?} */ (context[0 /* MasterFlagPosition */]))) &= ~8 /* PlayerBuildersDirty */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} prop\n * @param {?=} startIndex\n * @return {?}\n */\nfunction findEntryPositionByProp(context, prop, startIndex) {\n    for (let i = (startIndex || 0) + 1 /* PropertyOffset */; i < context.length; i += 4 /* Size */) {\n        /** @type {?} */\n        const thisProp = context[i];\n        if (thisProp == prop) {\n            return i - 1 /* PropertyOffset */;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} context\n * @param {?} indexA\n * @param {?} indexB\n * @return {?}\n */\nfunction swapMultiContextEntries(context, indexA, indexB) {\n    /** @type {?} */\n    const tmpValue = getValue(context, indexA);\n    /** @type {?} */\n    const tmpProp = getProp(context, indexA);\n    /** @type {?} */\n    const tmpFlag = getPointers(context, indexA);\n    /** @type {?} */\n    const tmpPlayerBuilderIndex = getPlayerBuilderIndex(context, indexA);\n    /** @type {?} */\n    let flagA = tmpFlag;\n    /** @type {?} */\n    let flagB = getPointers(context, indexB);\n    /** @type {?} */\n    const singleIndexA = getMultiOrSingleIndex(flagA);\n    if (singleIndexA >= 0) {\n        /** @type {?} */\n        const _flag = getPointers(context, singleIndexA);\n        /** @type {?} */\n        const _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexA, pointers(_flag, _initial, indexB));\n    }\n    /** @type {?} */\n    const singleIndexB = getMultiOrSingleIndex(flagB);\n    if (singleIndexB >= 0) {\n        /** @type {?} */\n        const _flag = getPointers(context, singleIndexB);\n        /** @type {?} */\n        const _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexB, pointers(_flag, _initial, indexA));\n    }\n    setValue(context, indexA, getValue(context, indexB));\n    setProp(context, indexA, getProp(context, indexB));\n    setFlag(context, indexA, getPointers(context, indexB));\n    /** @type {?} */\n    const playerIndexA = getPlayerBuilderIndex(context, indexB);\n    /** @type {?} */\n    const directiveIndexA = 0;\n    setPlayerBuilderIndex(context, indexA, playerIndexA, directiveIndexA);\n    setValue(context, indexB, tmpValue);\n    setProp(context, indexB, tmpProp);\n    setFlag(context, indexB, tmpFlag);\n    setPlayerBuilderIndex(context, indexB, tmpPlayerBuilderIndex, directiveIndexA);\n}\n/**\n * @param {?} context\n * @param {?} indexStartPosition\n * @return {?}\n */\nfunction updateSinglePointerValues(context, indexStartPosition) {\n    for (let i = indexStartPosition; i < context.length; i += 4 /* Size */) {\n        /** @type {?} */\n        const multiFlag = getPointers(context, i);\n        /** @type {?} */\n        const singleIndex = getMultiOrSingleIndex(multiFlag);\n        if (singleIndex > 0) {\n            /** @type {?} */\n            const singleFlag = getPointers(context, singleIndex);\n            /** @type {?} */\n            const initialIndexForSingle = getInitialIndex(singleFlag);\n            /** @type {?} */\n            const flagValue = (isDirty(context, singleIndex) ? 1 /* Dirty */ : 0 /* None */) |\n                (isClassBasedValue(context, singleIndex) ? 2 /* Class */ : 0 /* None */) |\n                (isSanitizable(context, singleIndex) ? 4 /* Sanitize */ : 0 /* None */);\n            /** @type {?} */\n            const updatedFlag = pointers(flagValue, initialIndexForSingle, i);\n            setFlag(context, singleIndex, updatedFlag);\n        }\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} classBased\n * @param {?} name\n * @param {?} flag\n * @param {?} value\n * @param {?} directiveIndex\n * @param {?} playerIndex\n * @return {?}\n */\nfunction insertNewMultiProperty(context, index, classBased, name, flag, value, directiveIndex, playerIndex) {\n    /** @type {?} */\n    const doShift = index < context.length;\n    // prop does not exist in the list, add it in\n    context.splice(index, 0, flag | 1 /* Dirty */ | (classBased ? 2 /* Class */ : 0 /* None */), name, value, 0);\n    setPlayerBuilderIndex(context, index, playerIndex, directiveIndex);\n    if (doShift) {\n        // because the value was inserted midway into the array then we\n        // need to update all the shifted multi values' single value\n        // pointers to point to the newly shifted location\n        updateSinglePointerValues(context, index + 4 /* Size */);\n    }\n}\n/**\n * @param {?} value\n * @param {?=} isClassBased\n * @return {?}\n */\nfunction valueExists(value, isClassBased) {\n    if (isClassBased) {\n        return value ? true : false;\n    }\n    return value !== null;\n}\n/**\n * @param {?} context\n * @param {?} prop\n * @param {?} entryIsClassBased\n * @param {?=} sanitizer\n * @return {?}\n */\nfunction prepareInitialFlag(context, prop, entryIsClassBased, sanitizer) {\n    /** @type {?} */\n    let flag = (sanitizer && sanitizer(prop)) ? 4 /* Sanitize */ : 0 /* None */;\n    /** @type {?} */\n    let initialIndex;\n    if (entryIsClassBased) {\n        flag |= 2 /* Class */;\n        initialIndex =\n            getInitialStylingValuesIndexOf(context[3 /* InitialClassValuesPosition */], prop);\n    }\n    else {\n        initialIndex =\n            getInitialStylingValuesIndexOf(context[2 /* InitialStyleValuesPosition */], prop);\n    }\n    initialIndex = initialIndex > 0 ? (initialIndex + 1 /* ValueOffset */) : 0;\n    return pointers(flag, initialIndex, 0);\n}\n/**\n * @param {?} flag\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction hasValueChanged(flag, a, b) {\n    /** @type {?} */\n    const isClassBased = flag & 2 /* Class */;\n    /** @type {?} */\n    const hasValues = a && b;\n    /** @type {?} */\n    const usesSanitizer = flag & 4 /* Sanitize */;\n    // the toString() comparison ensures that a value is checked\n    // ... otherwise (during sanitization bypassing) the === comparsion\n    // would fail since a new String() instance is created\n    if (!isClassBased && hasValues && usesSanitizer) {\n        // we know for sure we're dealing with strings at this point\n        return ((/** @type {?} */ (a))).toString() !== ((/** @type {?} */ (b))).toString();\n    }\n    // everything else is safe to check with a normal equality check\n    return a !== b;\n}\n/**\n * @template T\n */\nclass ClassAndStylePlayerBuilder {\n    /**\n     * @param {?} factory\n     * @param {?} _element\n     * @param {?} _type\n     */\n    constructor(factory, _element, _type) {\n        this._element = _element;\n        this._type = _type;\n        this._values = {};\n        this._dirty = false;\n        this._factory = (/** @type {?} */ (factory));\n    }\n    /**\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(prop, value) {\n        if (this._values[prop] !== value) {\n            this._values[prop] = value;\n            this._dirty = true;\n        }\n    }\n    /**\n     * @param {?} currentPlayer\n     * @param {?} isFirstRender\n     * @return {?}\n     */\n    buildPlayer(currentPlayer, isFirstRender) {\n        // if no values have been set here then this means the binding didn't\n        // change and therefore the binding values were not updated through\n        // `setValue` which means no new player will be provided.\n        if (this._dirty) {\n            /** @type {?} */\n            const player = this._factory.fn(this._element, this._type, (/** @type {?} */ (this._values)), isFirstRender, currentPlayer || null);\n            this._values = {};\n            this._dirty = false;\n            return player;\n        }\n        return undefined;\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getDirectiveIndexFromEntry(context, index) {\n    /** @type {?} */\n    const value = (/** @type {?} */ (context[index + 3 /* PlayerBuilderIndexOffset */]));\n    return value & 65535 /* BitMask */;\n}\n/**\n * @param {?} context\n * @param {?} directive\n * @return {?}\n */\nfunction getDirectiveIndexFromRegistry(context, directive) {\n    /** @type {?} */\n    const index = getDirectiveRegistryValuesIndexOf(context[1 /* DirectiveRegistryPosition */], directive);\n    ngDevMode &&\n        assertNotEqual(index, -1, `The provided directive ${directive} has not been allocated to the element\\'s style/class bindings`);\n    return index > 0 ? index / 4 /* Size */ : 0;\n    // return index / DirectiveRegistryValuesIndex.Size;\n}\n/**\n * @param {?} directives\n * @param {?} directive\n * @return {?}\n */\nfunction getDirectiveRegistryValuesIndexOf(directives, directive) {\n    for (let i = 0; i < directives.length; i += 4 /* Size */) {\n        if (directives[i] === directive) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} keyValues\n * @param {?} key\n * @return {?}\n */\nfunction getInitialStylingValuesIndexOf(keyValues, key) {\n    for (let i = 1 /* KeyValueStartPosition */; i < keyValues.length; i += 2 /* Size */) {\n        if (keyValues[i] === key)\n            return i;\n    }\n    return -1;\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} offset\n * @param {?} isClassBased\n * @return {?}\n */\nfunction getSinglePropIndexValue(context, directiveIndex, offset, isClassBased) {\n    /** @type {?} */\n    const singlePropOffsetRegistryIndex = (/** @type {?} */ (context[1 /* DirectiveRegistryPosition */][(directiveIndex * 4 /* Size */) +\n        1 /* SinglePropValuesIndexOffset */]));\n    /** @type {?} */\n    const offsets = context[4 /* SinglePropOffsetPositions */];\n    /** @type {?} */\n    const indexForOffset = singlePropOffsetRegistryIndex +\n        2 /* ValueStartPosition */ +\n        (isClassBased ?\n            offsets[singlePropOffsetRegistryIndex + 0 /* StylesCountPosition */] :\n            0) +\n        offset;\n    return offsets[indexForOffset];\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction getStyleSanitizer(context, directiveIndex) {\n    /** @type {?} */\n    const dirs = context[1 /* DirectiveRegistryPosition */];\n    /** @type {?} */\n    const value = dirs[directiveIndex * 4 /* Size */ +\n        3 /* StyleSanitizerOffset */] ||\n        dirs[3 /* StyleSanitizerOffset */] || null;\n    return (/** @type {?} */ (value));\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @return {?}\n */\nfunction isDirectiveDirty(context, directiveIndex) {\n    /** @type {?} */\n    const dirs = context[1 /* DirectiveRegistryPosition */];\n    return (/** @type {?} */ (dirs[directiveIndex * 4 /* Size */ +\n        2 /* DirtyFlagOffset */]));\n}\n/**\n * @param {?} context\n * @param {?} directiveIndex\n * @param {?} dirtyYes\n * @return {?}\n */\nfunction setDirectiveDirty(context, directiveIndex, dirtyYes) {\n    /** @type {?} */\n    const dirs = context[1 /* DirectiveRegistryPosition */];\n    dirs[directiveIndex * 4 /* Size */ +\n        2 /* DirtyFlagOffset */] = dirtyYes;\n}\n/**\n * @param {?} currentValue\n * @param {?} newValue\n * @param {?} currentDirectiveOwner\n * @param {?} newDirectiveOwner\n * @return {?}\n */\nfunction allowValueChange(currentValue, newValue, currentDirectiveOwner, newDirectiveOwner) {\n    // the code below relies the importance of directive's being tied to their\n    // index value. The index values for each directive are derived from being\n    // registered into the styling context directive registry. The most important\n    // directive is the parent component directive (the template) and each directive\n    // that is added after is considered less important than the previous entry. This\n    // prioritization of directives enables the styling algorithm to decide if a style\n    // or class should be allowed to be updated/replaced incase an earlier directive\n    // already wrote to the exact same style-property or className value. In other words\n    // ... this decides what to do if and when there is a collision.\n    if (currentValue) {\n        if (newValue) {\n            // if a directive index is lower than it always has priority over the\n            // previous directive's value...\n            return newDirectiveOwner <= currentDirectiveOwner;\n        }\n        else {\n            // only write a null value incase it's the same owner writing it.\n            // this avoids having a higher-priority directive write to null\n            // only to have a lesser-priority directive change right to a\n            // non-null value immediately afterwards.\n            return currentDirectiveOwner === newDirectiveOwner;\n        }\n    }\n    return true;\n}\n/**\n * This function is only designed to be called for `[class]` bindings when\n * `[ngClass]` (or something that uses `class` as an input) is present. Once\n * directive host bindings fully work for `[class]` and `[style]` inputs\n * then this can be deleted.\n * @param {?} context\n * @return {?}\n */\nfunction getInitialClassNameValue(context) {\n    /** @type {?} */\n    let className = (/** @type {?} */ (context[6 /* CachedClassValueOrInitialClassString */]));\n    if (className == null) {\n        className = '';\n        /** @type {?} */\n        const initialClassValues = context[3 /* InitialClassValuesPosition */];\n        for (let i = 1 /* KeyValueStartPosition */; i < initialClassValues.length; i += 2 /* Size */) {\n            /** @type {?} */\n            const isPresent = initialClassValues[i + 1];\n            if (isPresent) {\n                className += (className.length ? ' ' : '') + initialClassValues[i];\n            }\n        }\n        context[6 /* CachedClassValueOrInitialClassString */] = className;\n    }\n    return className;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n * @type {?}\n */\nconst _CLEAN_PROMISE = Promise.resolve(null);\n/**\n * Refreshes the view, executing the following steps in that order:\n * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n * bindings, refreshes child components.\n * Note: view hooks are triggered later when leaving the view.\n * @param {?} lView\n * @return {?}\n */\nfunction refreshDescendantViews(lView) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    // This needs to be set before children are processed to support recursive components\n    tView.firstTemplatePass = false;\n    setFirstTemplatePass(false);\n    // If this is a creation pass, we should not call lifecycle hooks or evaluate bindings.\n    // This will be done in the update pass.\n    if (!isCreationMode(lView)) {\n        /** @type {?} */\n        const checkNoChangesMode = getCheckNoChangesMode();\n        executeInitHooks(lView, tView, checkNoChangesMode);\n        refreshDynamicEmbeddedViews(lView);\n        // Content query results must be refreshed before content hooks are called.\n        refreshContentQueries(tView);\n        executeHooks(lView, tView.contentHooks, tView.contentCheckHooks, checkNoChangesMode);\n        setHostBindings(tView, lView);\n    }\n    refreshChildComponents(tView.components);\n}\n/**\n * Sets the host bindings for the current view.\n * @param {?} tView\n * @param {?} viewData\n * @return {?}\n */\nfunction setHostBindings(tView, viewData) {\n    if (tView.expandoInstructions) {\n        /** @type {?} */\n        let bindingRootIndex = viewData[BINDING_INDEX] = tView.expandoStartIndex;\n        setBindingRoot(bindingRootIndex);\n        /** @type {?} */\n        let currentDirectiveIndex = -1;\n        /** @type {?} */\n        let currentElementIndex = -1;\n        for (let i = 0; i < tView.expandoInstructions.length; i++) {\n            /** @type {?} */\n            const instruction = tView.expandoInstructions[i];\n            if (typeof instruction === 'number') {\n                if (instruction <= 0) {\n                    // Negative numbers mean that we are starting new EXPANDO block and need to update\n                    // the current element and directive index.\n                    currentElementIndex = -instruction;\n                    // Injector block and providers are taken into account.\n                    /** @type {?} */\n                    const providerCount = ((/** @type {?} */ (tView.expandoInstructions[++i])));\n                    bindingRootIndex += INJECTOR_BLOOM_PARENT_SIZE + providerCount;\n                    currentDirectiveIndex = bindingRootIndex;\n                }\n                else {\n                    // This is either the injector size (so the binding root can skip over directives\n                    // and get to the first set of host bindings on this node) or the host var count\n                    // (to get to the next set of host bindings on this node).\n                    bindingRootIndex += instruction;\n                }\n                setBindingRoot(bindingRootIndex);\n            }\n            else {\n                // If it's not a number, it's a host binding function that needs to be executed.\n                if (instruction !== null) {\n                    viewData[BINDING_INDEX] = bindingRootIndex;\n                    instruction(2 /* Update */, readElementValue(viewData[currentDirectiveIndex]), currentElementIndex);\n                }\n                currentDirectiveIndex++;\n            }\n        }\n    }\n}\n/**\n * Refreshes content queries for all directives in the given view.\n * @param {?} tView\n * @return {?}\n */\nfunction refreshContentQueries(tView) {\n    if (tView.contentQueries != null) {\n        for (let i = 0; i < tView.contentQueries.length; i += 2) {\n            /** @type {?} */\n            const directiveDefIdx = tView.contentQueries[i];\n            /** @type {?} */\n            const directiveDef = (/** @type {?} */ (tView.data[directiveDefIdx]));\n            (/** @type {?} */ (directiveDef.contentQueriesRefresh))(directiveDefIdx - HEADER_OFFSET, tView.contentQueries[i + 1]);\n        }\n    }\n}\n/**\n * Refreshes child components in the current view.\n * @param {?} components\n * @return {?}\n */\nfunction refreshChildComponents(components) {\n    if (components != null) {\n        for (let i = 0; i < components.length; i++) {\n            componentRefresh(components[i]);\n        }\n    }\n}\n/**\n * @template T\n * @param {?} parentLView\n * @param {?} tView\n * @param {?} context\n * @param {?} flags\n * @param {?=} rendererFactory\n * @param {?=} renderer\n * @param {?=} sanitizer\n * @param {?=} injector\n * @return {?}\n */\nfunction createLView(parentLView, tView, context, flags, rendererFactory, renderer, sanitizer, injector) {\n    /** @type {?} */\n    const lView = (/** @type {?} */ (tView.blueprint.slice()));\n    lView[FLAGS] = flags | 1 /* CreationMode */ | 16 /* Attached */ | 32 /* RunInit */ |\n        2 /* FirstLViewPass */;\n    lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n    lView[CONTEXT] = context;\n    lView[RENDERER_FACTORY] = (/** @type {?} */ ((rendererFactory || parentLView && parentLView[RENDERER_FACTORY])));\n    ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n    lView[RENDERER] = (/** @type {?} */ ((renderer || parentLView && parentLView[RENDERER])));\n    ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n    lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || (/** @type {?} */ (null));\n    lView[(/** @type {?} */ (INJECTOR))] = injector || parentLView && parentLView[INJECTOR] || null;\n    return lView;\n}\n/**\n * @param {?} index\n * @param {?} type\n * @param {?} native\n * @param {?} name\n * @param {?} attrs\n * @return {?}\n */\nfunction createNodeAtIndex(index, type, native, name, attrs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    ngDevMode &&\n        assertLessThan(adjustedIndex, lView.length, `Slot should have been initialized with null`);\n    lView[adjustedIndex] = native;\n    /** @type {?} */\n    let tNode = (/** @type {?} */ (tView.data[adjustedIndex]));\n    if (tNode == null) {\n        // TODO(misko): Refactor createTNode so that it does not depend on LView.\n        tNode = tView.data[adjustedIndex] = createTNode(lView, type, adjustedIndex, name, attrs, null);\n    }\n    // Now link ourselves into the tree.\n    // We need this even if tNode exists, otherwise we might end up pointing to unexisting tNodes when\n    // we use i18n (especially with ICU expressions that update the DOM during the update phase).\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const isParent = getIsParent();\n    if (previousOrParentTNode) {\n        if (isParent && previousOrParentTNode.child == null &&\n            (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {\n            // We are in the same view, which means we are adding content node to the parent view.\n            previousOrParentTNode.child = tNode;\n        }\n        else if (!isParent) {\n            previousOrParentTNode.next = tNode;\n        }\n    }\n    if (tView.firstChild == null) {\n        tView.firstChild = tNode;\n    }\n    setPreviousOrParentTNode(tNode);\n    setIsParent(true);\n    return (/** @type {?} */ (tNode));\n}\n/**\n * @param {?} index\n * @param {?} view\n * @return {?}\n */\nfunction createViewNode(index, view) {\n    // View nodes are not stored in data because they can be added / removed at runtime (which\n    // would cause indices to change). Their TNodes are instead stored in tView.node.\n    if (view[TVIEW].node == null) {\n        view[TVIEW].node = (/** @type {?} */ (createTNode(view, 2 /* View */, index, null, null, null)));\n    }\n    return view[HOST_NODE] = (/** @type {?} */ (view[TVIEW].node));\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n * template passes.\n * @param {?} view\n * @return {?}\n */\nfunction allocExpando(view) {\n    /** @type {?} */\n    const tView = view[TVIEW];\n    if (tView.firstTemplatePass) {\n        tView.expandoStartIndex++;\n        tView.blueprint.push(null);\n        tView.data.push(null);\n        view.push(null);\n    }\n}\n/**\n * Used for creating the LViewNode of a dynamic embedded view,\n * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n * @template T\n * @param {?} tView\n * @param {?} context\n * @param {?} declarationView\n * @param {?} renderer\n * @param {?} queries\n * @param {?} injectorIndex\n * @return {?}\n */\nfunction createEmbeddedViewAndNode(tView, context, declarationView, renderer, queries, injectorIndex) {\n    /** @type {?} */\n    const _isParent = getIsParent();\n    /** @type {?} */\n    const _previousOrParentTNode = getPreviousOrParentTNode();\n    setIsParent(true);\n    setPreviousOrParentTNode((/** @type {?} */ (null)));\n    /** @type {?} */\n    const lView = createLView(declarationView, tView, context, 4 /* CheckAlways */);\n    lView[DECLARATION_VIEW] = declarationView;\n    if (queries) {\n        lView[QUERIES] = queries.createView();\n    }\n    createViewNode(-1, lView);\n    if (tView.firstTemplatePass) {\n        (/** @type {?} */ (tView.node)).injectorIndex = injectorIndex;\n    }\n    setIsParent(_isParent);\n    setPreviousOrParentTNode(_previousOrParentTNode);\n    return lView;\n}\n/**\n * Used for rendering embedded views (e.g. dynamically created views)\n *\n * Dynamically created views must store/retrieve their TViews differently from component views\n * because their template functions are nested in the template functions of their hosts, creating\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n * TView for dynamically created views on their host TNode, which only has one instance.\n * @template T\n * @param {?} viewToRender\n * @param {?} tView\n * @param {?} context\n * @return {?}\n */\nfunction renderEmbeddedTemplate(viewToRender, tView, context) {\n    /** @type {?} */\n    const _isParent = getIsParent();\n    /** @type {?} */\n    const _previousOrParentTNode = getPreviousOrParentTNode();\n    setIsParent(true);\n    setPreviousOrParentTNode((/** @type {?} */ (null)));\n    /** @type {?} */\n    let oldView;\n    if (viewToRender[FLAGS] & 128 /* IsRoot */) {\n        // This is a root view inside the view tree\n        tickRootContext(getRootContext(viewToRender));\n    }\n    else {\n        try {\n            setIsParent(true);\n            setPreviousOrParentTNode((/** @type {?} */ (null)));\n            oldView = enterView(viewToRender, viewToRender[HOST_NODE]);\n            namespaceHTML();\n            (/** @type {?} */ (tView.template))(getRenderFlags(viewToRender), context);\n            // This must be set to false immediately after the first creation run because in an\n            // ngFor loop, all the views will be created together before update mode runs and turns\n            // off firstTemplatePass. If we don't set it here, instances will perform directive\n            // matching, etc again and again.\n            viewToRender[TVIEW].firstTemplatePass = false;\n            setFirstTemplatePass(false);\n            refreshDescendantViews(viewToRender);\n        }\n        finally {\n            leaveView((/** @type {?} */ (oldView)));\n            setIsParent(_isParent);\n            setPreviousOrParentTNode(_previousOrParentTNode);\n        }\n    }\n}\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @template T\n * @param {?=} level The relative level of the view from which to grab context compared to contextVewData\n * @return {?} context\n */\nfunction nextContext(level = 1) {\n    return nextContextImpl(level);\n}\n/**\n * @template T\n * @param {?} hostView\n * @param {?} context\n * @param {?=} templateFn\n * @return {?}\n */\nfunction renderComponentOrTemplate(hostView, context, templateFn) {\n    /** @type {?} */\n    const rendererFactory = hostView[RENDERER_FACTORY];\n    /** @type {?} */\n    const oldView = enterView(hostView, hostView[HOST_NODE]);\n    /** @type {?} */\n    const normalExecutionPath = !getCheckNoChangesMode();\n    try {\n        if (normalExecutionPath && rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        if (isCreationMode(hostView)) {\n            // creation mode pass\n            if (templateFn) {\n                namespaceHTML();\n                templateFn(1 /* Create */, (/** @type {?} */ (context)));\n            }\n            refreshDescendantViews(hostView);\n            hostView[FLAGS] &= ~1 /* CreationMode */;\n        }\n        // update mode pass\n        templateFn && templateFn(2 /* Update */, (/** @type {?} */ (context)));\n        refreshDescendantViews(hostView);\n    }\n    finally {\n        if (normalExecutionPath && rendererFactory.end) {\n            rendererFactory.end();\n        }\n        leaveView(oldView);\n    }\n}\n/**\n * This function returns the default configuration of rendering flags depending on when the\n * template is in creation mode or update mode. Update block and create block are\n * always run separately.\n * @param {?} view\n * @return {?}\n */\nfunction getRenderFlags(view) {\n    return isCreationMode(view) ? 1 /* Create */ : 2 /* Update */;\n}\n//////////////////////////\n//// Namespace\n//////////////////////////\n/** @type {?} */\nlet _currentNamespace = null;\n/**\n * @return {?}\n */\nfunction namespaceSVG() {\n    _currentNamespace = 'http://www.w3.org/2000/svg';\n}\n/**\n * @return {?}\n */\nfunction namespaceMathML() {\n    _currentNamespace = 'http://www.w3.org/1998/MathML/';\n}\n/**\n * @return {?}\n */\nfunction namespaceHTML() {\n    _currentNamespace = null;\n}\n//////////////////////////\n//// Element\n//////////////////////////\n/**\n * Creates an empty element using {\\@link elementStart} and {\\@link elementEnd}\n *\n * @param {?} index Index of the element in the data array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @return {?}\n */\nfunction element(index, name, attrs, localRefs) {\n    elementStart(index, name, attrs, localRefs);\n    elementEnd();\n}\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param {?} index Index of the element in the LView array\n * @param {?=} attrs Set of attributes to be used when matching directives.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n * @return {?}\n */\nfunction elementContainerStart(index, attrs, localRefs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const renderer = lView[RENDERER];\n    /** @type {?} */\n    const tagName = 'ng-container';\n    ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'element containers should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    const native = renderer.createComment(ngDevMode ? tagName : '');\n    ngDevMode && assertDataInRange(lView, index - 1);\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 4 /* ElementContainer */, native, tagName, attrs || null);\n    appendChild(native, tNode, lView);\n    createDirectivesAndLocals(tView, lView, localRefs);\n    attachPatchData(native, lView);\n}\n/**\n * Mark the end of the <ng-container>.\n * @return {?}\n */\nfunction elementContainerEnd() {\n    /** @type {?} */\n    let previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertHasParent(getPreviousOrParentTNode());\n        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 4 /* ElementContainer */);\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        lView[QUERIES] = currentQueries.addNode((/** @type {?} */ (previousOrParentTNode)));\n    }\n    queueLifecycleHooks(tView, previousOrParentTNode);\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param {?} index Index of the element in the LView array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n * @return {?}\n */\nfunction elementStart(index, name, attrs, localRefs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'elements should be created before any bindings ');\n    ngDevMode && ngDevMode.rendererCreateElement++;\n    /** @type {?} */\n    const native = elementCreate(name);\n    ngDevMode && assertDataInRange(lView, index - 1);\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 3 /* Element */, (/** @type {?} */ (native)), name, attrs || null);\n    if (attrs) {\n        // it's important to only prepare styling-related datastructures once for a given\n        // tNode and not each time an element is created. Also, the styling code is designed\n        // to be patched and constructed at various points, but only up until the first element\n        // is created. Then the styling context is locked and can only be instantiated for each\n        // successive element that is created.\n        if (tView.firstTemplatePass && !tNode.stylingTemplate && hasStyling(attrs)) {\n            tNode.stylingTemplate = initializeStaticContext(attrs);\n        }\n        setUpAttributes(native, attrs);\n    }\n    appendChild(native, tNode, lView);\n    createDirectivesAndLocals(tView, lView, localRefs);\n    // any immediate children of a component or template container must be pre-emptively\n    // monkey-patched with the component view data so that the element can be inspected\n    // later on using any element discovery utility methods (see `element_discovery.ts`)\n    if (getElementDepthCount() === 0) {\n        attachPatchData(native, lView);\n    }\n    increaseElementDepthCount();\n    // if a directive contains a host binding for \"class\" then all class-based data will\n    // flow through that (except for `[class.prop]` bindings). This also includes initial\n    // static class values as well. (Note that this will be fixed once map-based `[style]`\n    // and `[class]` bindings work for multiple directives.)\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        const inputData = initializeTNodeInputs(tNode);\n        if (inputData && inputData.hasOwnProperty('class')) {\n            tNode.flags |= 8 /* hasClassInput */;\n        }\n    }\n    // There is no point in rendering styles when a class directive is present since\n    // it will take that over for us (this will be removed once #FW-882 is in).\n    if (tNode.stylingTemplate && (tNode.flags & 8 /* hasClassInput */) === 0) {\n        renderInitialStylesAndClasses(native, tNode.stylingTemplate, lView[RENDERER]);\n    }\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param {?} name the tag name\n * @param {?=} overriddenRenderer Optional A renderer to override the default one\n * @return {?} the element created\n */\nfunction elementCreate(name, overriddenRenderer) {\n    /** @type {?} */\n    let native;\n    /** @type {?} */\n    const rendererToUse = overriddenRenderer || getLView()[RENDERER];\n    if (isProceduralRenderer(rendererToUse)) {\n        native = rendererToUse.createElement(name, _currentNamespace);\n    }\n    else {\n        if (_currentNamespace === null) {\n            native = rendererToUse.createElement(name);\n        }\n        else {\n            native = rendererToUse.createElementNS(_currentNamespace, name);\n        }\n    }\n    return native;\n}\n/**\n * Creates directive instances and populates local refs.\n *\n * @param {?} tView\n * @param {?} viewData\n * @param {?} localRefs Local refs of the node in question\n * @param {?=} localRefExtractor mapping function that extracts local ref value from TNode\n * @return {?}\n */\nfunction createDirectivesAndLocals(tView, viewData, localRefs, localRefExtractor = getNativeByTNode) {\n    if (!getBindingsEnabled())\n        return;\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    if (getFirstTemplatePass()) {\n        ngDevMode && ngDevMode.firstTemplatePass++;\n        resolveDirectives(tView, viewData, findDirectiveMatches(tView, viewData, previousOrParentTNode), previousOrParentTNode, localRefs || null);\n    }\n    instantiateAllDirectives(tView, viewData, previousOrParentTNode);\n    invokeDirectivesHostBindings(tView, viewData, previousOrParentTNode);\n    saveResolvedLocalsInData(viewData, previousOrParentTNode, localRefExtractor);\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n * @param {?} viewData\n * @param {?} tNode\n * @param {?} localRefExtractor\n * @return {?}\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor) {\n    /** @type {?} */\n    const localNames = tNode.localNames;\n    if (localNames) {\n        /** @type {?} */\n        let localIndex = tNode.index + 1;\n        for (let i = 0; i < localNames.length; i += 2) {\n            /** @type {?} */\n            const index = (/** @type {?} */ (localNames[i + 1]));\n            /** @type {?} */\n            const value = index === -1 ?\n                localRefExtractor((/** @type {?} */ (tNode)), viewData) :\n                viewData[index];\n            viewData[localIndex++] = value;\n        }\n    }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param {?} templateFn The template from which to get static data\n * @param {?} consts The number of nodes, local refs, and pipes in this view\n * @param {?} vars The number of bindings and pure function bindings in this view\n * @param {?} directives Directive defs that should be saved on TView\n * @param {?} pipes Pipe defs that should be saved on TView\n * @param {?} viewQuery\n * @return {?} TView\n */\nfunction getOrCreateTView(templateFn, consts, vars, directives, pipes, viewQuery) {\n    // TODO(misko): reading `ngPrivateData` here is problematic for two reasons\n    // 1. It is a megamorphic call on each invocation.\n    // 2. For nested embedded views (ngFor inside ngFor) the template instance is per\n    //    outer template invocation, which means that no such property will exist\n    // Correct solution is to only put `ngPrivateData` on the Component template\n    // and not on embedded templates.\n    return templateFn.ngPrivateData ||\n        (templateFn.ngPrivateData =\n            (/** @type {?} */ (createTView(-1, templateFn, consts, vars, directives, pipes, viewQuery))));\n}\n/**\n * Creates a TView instance\n *\n * @param {?} viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n * @param {?} templateFn Template function\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars\n * @param {?} directives Registry of directives for this view\n * @param {?} pipes Registry of pipes for this view\n * @param {?} viewQuery\n * @return {?}\n */\nfunction createTView(viewIndex, templateFn, consts, vars, directives, pipes, viewQuery) {\n    ngDevMode && ngDevMode.tView++;\n    /** @type {?} */\n    const bindingStartIndex = HEADER_OFFSET + consts;\n    // This length does not yet contain host bindings from child directives because at this point,\n    // we don't know which directives are active on this template. As soon as a directive is matched\n    // that has a host binding, we will update the blueprint with that def's hostVars count.\n    /** @type {?} */\n    const initialViewLength = bindingStartIndex + vars;\n    /** @type {?} */\n    const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n    return blueprint[(/** @type {?} */ (TVIEW))] = {\n        id: viewIndex,\n        blueprint: blueprint,\n        template: templateFn,\n        viewQuery: viewQuery,\n        node: (/** @type {?} */ (null)),\n        data: blueprint.slice(),\n        // Fill in to match HEADER_OFFSET in LView\n        childIndex: -1,\n        // Children set in addToViewTree(), if any\n        bindingStartIndex: bindingStartIndex,\n        expandoStartIndex: initialViewLength,\n        expandoInstructions: null,\n        firstTemplatePass: true,\n        initHooks: null,\n        checkHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null,\n        pipeDestroyHooks: null,\n        cleanup: null,\n        contentQueries: null,\n        components: null,\n        directiveRegistry: typeof directives === 'function' ? directives() : directives,\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n        firstChild: null,\n    };\n}\n/**\n * @param {?} bindingStartIndex\n * @param {?} initialViewLength\n * @return {?}\n */\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n    /** @type {?} */\n    const blueprint = (/** @type {?} */ (new Array(initialViewLength)\n        .fill(null, 0, bindingStartIndex)\n        .fill(NO_CHANGE, bindingStartIndex)));\n    blueprint[CONTAINER_INDEX] = -1;\n    blueprint[BINDING_INDEX] = bindingStartIndex;\n    return blueprint;\n}\n/**\n * @param {?} native\n * @param {?} attrs\n * @return {?}\n */\nfunction setUpAttributes(native, attrs) {\n    /** @type {?} */\n    const renderer = getLView()[RENDERER];\n    /** @type {?} */\n    const isProc = isProceduralRenderer(renderer);\n    /** @type {?} */\n    let i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        const attrName = attrs[i++];\n        if (typeof attrName == 'number') {\n            if (attrName === 0 /* NamespaceURI */) {\n                // Namespaced attributes\n                /** @type {?} */\n                const namespaceURI = (/** @type {?} */ (attrs[i++]));\n                /** @type {?} */\n                const attrName = (/** @type {?} */ (attrs[i++]));\n                /** @type {?} */\n                const attrVal = (/** @type {?} */ (attrs[i++]));\n                ngDevMode && ngDevMode.rendererSetAttribute++;\n                isProc ?\n                    ((/** @type {?} */ (renderer)))\n                        .setAttribute(native, attrName, attrVal, namespaceURI) :\n                    native.setAttributeNS(namespaceURI, attrName, attrVal);\n            }\n            else {\n                // All other `AttributeMarker`s are ignored here.\n                break;\n            }\n        }\n        else {\n            /// attrName is string;\n            /** @type {?} */\n            const attrVal = attrs[i++];\n            if (attrName !== NG_PROJECT_AS_ATTR_NAME) {\n                // Standard attributes\n                ngDevMode && ngDevMode.rendererSetAttribute++;\n                if (isAnimationProp(attrName)) {\n                    if (isProc) {\n                        ((/** @type {?} */ (renderer))).setProperty(native, attrName, attrVal);\n                    }\n                }\n                else {\n                    isProc ?\n                        ((/** @type {?} */ (renderer)))\n                            .setAttribute(native, (/** @type {?} */ (attrName)), (/** @type {?} */ (attrVal))) :\n                        native.setAttribute((/** @type {?} */ (attrName)), (/** @type {?} */ (attrVal)));\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} text\n * @param {?} token\n * @return {?}\n */\nfunction createError(text, token) {\n    return new Error(`Renderer: ${text} [${stringify$1(token)}]`);\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param {?} factory\n * @param {?} elementOrSelector Render element or CSS selector to locate the element.\n * @return {?}\n */\nfunction locateHostElement(factory, elementOrSelector) {\n    /** @type {?} */\n    const defaultRenderer = factory.createRenderer(null, null);\n    /** @type {?} */\n    const rNode = typeof elementOrSelector === 'string' ?\n        (isProceduralRenderer(defaultRenderer) ?\n            defaultRenderer.selectRootElement(elementOrSelector) :\n            defaultRenderer.querySelector(elementOrSelector)) :\n        elementOrSelector;\n    if (ngDevMode && !rNode) {\n        if (typeof elementOrSelector === 'string') {\n            throw createError('Host node with selector not found:', elementOrSelector);\n        }\n        else {\n            throw createError('Host node is required:', elementOrSelector);\n        }\n    }\n    return rNode;\n}\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param {?} eventName Name of the event\n * @param {?} listenerFn The function to be called when event emits\n * @param {?=} useCapture Whether or not to use capture in event listener.\n * @return {?}\n */\nfunction listener(eventName, listenerFn, useCapture = false) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const firstTemplatePass = tView.firstTemplatePass;\n    /** @type {?} */\n    const tCleanup = firstTemplatePass && (tView.cleanup || (tView.cleanup = []));\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n    // add native event listener - applicable to elements only\n    if (tNode.type === 3 /* Element */) {\n        /** @type {?} */\n        const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));\n        ngDevMode && ngDevMode.rendererAddEventListener++;\n        /** @type {?} */\n        const renderer = lView[RENDERER];\n        /** @type {?} */\n        const lCleanup = getCleanup(lView);\n        /** @type {?} */\n        const lCleanupIndex = lCleanup.length;\n        /** @type {?} */\n        let useCaptureOrSubIdx = useCapture;\n        // In order to match current behavior, native DOM event listeners must be added for all\n        // events (including outputs).\n        if (isProceduralRenderer(renderer)) {\n            /** @type {?} */\n            const cleanupFn = renderer.listen(native, eventName, listenerFn);\n            lCleanup.push(listenerFn, cleanupFn);\n            useCaptureOrSubIdx = lCleanupIndex + 1;\n        }\n        else {\n            /** @type {?} */\n            const wrappedListener = wrapListenerWithPreventDefault(listenerFn);\n            native.addEventListener(eventName, wrappedListener, useCapture);\n            lCleanup.push(wrappedListener);\n        }\n        tCleanup && tCleanup.push(eventName, tNode.index, lCleanupIndex, useCaptureOrSubIdx);\n    }\n    // subscribe to directive outputs\n    if (tNode.outputs === undefined) {\n        // if we create TNode here, inputs must be undefined so we know they still need to be\n        // checked\n        tNode.outputs = generatePropertyAliases(tNode, 1 /* Output */);\n    }\n    /** @type {?} */\n    const outputs = tNode.outputs;\n    /** @type {?} */\n    let props;\n    if (outputs && (props = outputs[eventName])) {\n        /** @type {?} */\n        const propsLength = props.length;\n        if (propsLength) {\n            /** @type {?} */\n            const lCleanup = getCleanup(lView);\n            for (let i = 0; i < propsLength; i += 2) {\n                ngDevMode && assertDataInRange(lView, (/** @type {?} */ (props[i])));\n                /** @type {?} */\n                const subscription = lView[(/** @type {?} */ (props[i]))][props[i + 1]].subscribe(listenerFn);\n                /** @type {?} */\n                const idx = lCleanup.length;\n                lCleanup.push(listenerFn, subscription);\n                tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n            }\n        }\n    }\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n * @param {?} lView\n * @param {?} context\n * @param {?} cleanupFn\n * @return {?}\n */\nfunction storeCleanupWithContext(lView, context, cleanupFn) {\n    /** @type {?} */\n    const lCleanup = getCleanup(lView);\n    lCleanup.push(context);\n    if (lView[TVIEW].firstTemplatePass) {\n        getTViewCleanup(lView).push(cleanupFn, lCleanup.length - 1);\n    }\n}\n/**\n * Saves the cleanup function itself in LView.cleanupInstances.\n *\n * This is necessary for functions that are wrapped with their contexts, like in renderer2\n * listeners.\n *\n * On the first template pass, the index of the cleanup function is saved in TView.\n * @param {?} view\n * @param {?} cleanupFn\n * @return {?}\n */\nfunction storeCleanupFn(view, cleanupFn) {\n    getCleanup(view).push(cleanupFn);\n    if (view[TVIEW].firstTemplatePass) {\n        getTViewCleanup(view).push((/** @type {?} */ (view[CLEANUP])).length - 1, null);\n    }\n}\n/**\n * Mark the end of the element.\n * @return {?}\n */\nfunction elementEnd() {\n    /** @type {?} */\n    let previousOrParentTNode = getPreviousOrParentTNode();\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertHasParent(getPreviousOrParentTNode());\n        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 3 /* Element */);\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        lView[QUERIES] = currentQueries.addNode((/** @type {?} */ (previousOrParentTNode)));\n    }\n    queueLifecycleHooks(getLView()[TVIEW], previousOrParentTNode);\n    decreaseElementDepthCount();\n    // this is fired at the end of elementEnd because ALL of the stylingBindings code\n    // (for directives and the template) have now executed which means the styling\n    // context can be instantiated properly.\n    if (hasClassInput(previousOrParentTNode)) {\n        /** @type {?} */\n        const stylingContext = getStylingContext(previousOrParentTNode.index, lView);\n        setInputsForProperty(lView, (/** @type {?} */ ((/** @type {?} */ (previousOrParentTNode.inputs))['class'])), getInitialClassNameValue(stylingContext));\n    }\n}\n/**\n * Updates the value of removes an attribute on an Element.\n *\n * @param {?} index\n * @param {?} name name The name of the attribute.\n * @param {?} value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?}\n */\nfunction elementAttribute(index, name, value, sanitizer) {\n    if (value !== NO_CHANGE) {\n        /** @type {?} */\n        const lView = getLView();\n        /** @type {?} */\n        const renderer = lView[RENDERER];\n        /** @type {?} */\n        const element = getNativeByIndex(index, lView);\n        if (value == null) {\n            ngDevMode && ngDevMode.rendererRemoveAttribute++;\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name) :\n                element.removeAttribute(name);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            /** @type {?} */\n            const strValue = sanitizer == null ? stringify$1(value) : sanitizer(value);\n            isProceduralRenderer(renderer) ? renderer.setAttribute(element, name, strValue) :\n                element.setAttribute(name, strValue);\n        }\n    }\n}\n/**\n * Update a property on an element.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\@Inputs don't have to be re-compiled.\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @param {?=} nativeOnly Whether or not we should only set native properties and skip input check\n * (this is necessary for host property bindings)\n * @return {?}\n */\nfunction elementProperty(index, propName, value, sanitizer, nativeOnly) {\n    elementPropertyInternal(index, propName, value, sanitizer, nativeOnly);\n}\n/**\n * Updates a synthetic host binding (e.g. `[\\@foo]`) on a component.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `\\@HostBinding('\\@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation \\@triggers, they need to be\n * evaluated with the sub components renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @param {?=} nativeOnly Whether or not we should only set native properties and skip input check\n * (this is necessary for host property bindings)\n * @return {?}\n */\nfunction componentHostSyntheticProperty(index, propName, value, sanitizer, nativeOnly) {\n    elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadComponentRenderer);\n}\n/**\n * @param {?} tNode\n * @param {?} lView\n * @return {?}\n */\nfunction loadComponentRenderer(tNode, lView) {\n    /** @type {?} */\n    const componentLView = (/** @type {?} */ (lView[tNode.index]));\n    return componentLView[RENDERER];\n}\n/**\n * @template T\n * @param {?} index\n * @param {?} propName\n * @param {?} value\n * @param {?=} sanitizer\n * @param {?=} nativeOnly\n * @param {?=} loadRendererFn\n * @return {?}\n */\nfunction elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadRendererFn) {\n    if (value === NO_CHANGE)\n        return;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const element = (/** @type {?} */ (getNativeByIndex(index, lView)));\n    /** @type {?} */\n    const tNode = getTNode(index, lView);\n    /** @type {?} */\n    let inputData;\n    /** @type {?} */\n    let dataValue;\n    if (!nativeOnly && (inputData = initializeTNodeInputs(tNode)) &&\n        (dataValue = inputData[propName])) {\n        setInputsForProperty(lView, dataValue, value);\n        if (isComponent(tNode))\n            markDirtyIfOnPush(lView, index + HEADER_OFFSET);\n        if (ngDevMode) {\n            if (tNode.type === 3 /* Element */ || tNode.type === 0 /* Container */) {\n                setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n            }\n        }\n    }\n    else if (tNode.type === 3 /* Element */) {\n        /** @type {?} */\n        const renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n        // It is assumed that the sanitizer is only added when the compiler determines that the property\n        // is risky, so sanitization can be done without further checks.\n        value = sanitizer != null ? ((/** @type {?} */ (sanitizer(value)))) : value;\n        ngDevMode && ngDevMode.rendererSetProperty++;\n        if (isProceduralRenderer(renderer)) {\n            renderer.setProperty((/** @type {?} */ (element)), propName, value);\n        }\n        else if (!isAnimationProp(propName)) {\n            ((/** @type {?} */ (element))).setProperty ? ((/** @type {?} */ (element))).setProperty(propName, value) :\n                ((/** @type {?} */ (element)))[propName] = value;\n        }\n    }\n}\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param {?} lView\n * @param {?} type The type of the node\n * @param {?} adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param {?} tagName The tag name of the node\n * @param {?} attrs The attributes defined on this node\n * @param {?} tViews Any TViews attached to this node\n * @return {?} the TNode object\n */\nfunction createTNode(lView, type, adjustedIndex, tagName, attrs, tViews) {\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    ngDevMode && ngDevMode.tNode++;\n    /** @type {?} */\n    const parent = getIsParent() ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n    // Parents cannot cross component boundaries because components will be used in multiple places,\n    // so it's only set if the view is the same.\n    /** @type {?} */\n    const parentInSameView = parent && lView && parent !== lView[HOST_NODE];\n    /** @type {?} */\n    const tParent = parentInSameView ? (/** @type {?} */ (parent)) : null;\n    return {\n        type: type,\n        index: adjustedIndex,\n        injectorIndex: tParent ? tParent.injectorIndex : -1,\n        directiveStart: -1,\n        directiveEnd: -1,\n        flags: 0,\n        providerIndexes: 0,\n        tagName: tagName,\n        attrs: attrs,\n        localNames: null,\n        initialInputs: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        tViews: tViews,\n        next: null,\n        child: null,\n        parent: tParent,\n        detached: null,\n        stylingTemplate: null,\n        projection: null\n    };\n}\n/**\n * Given a list of directive indices and minified input names, sets the\n * input properties on the corresponding directives.\n * @param {?} lView\n * @param {?} inputs\n * @param {?} value\n * @return {?}\n */\nfunction setInputsForProperty(lView, inputs, value) {\n    for (let i = 0; i < inputs.length; i += 2) {\n        ngDevMode && assertDataInRange(lView, (/** @type {?} */ (inputs[i])));\n        lView[(/** @type {?} */ (inputs[i]))][inputs[i + 1]] = value;\n    }\n}\n/**\n * @param {?} lView\n * @param {?} element\n * @param {?} type\n * @param {?} inputs\n * @param {?} value\n * @return {?}\n */\nfunction setNgReflectProperties(lView, element, type, inputs, value) {\n    for (let i = 0; i < inputs.length; i += 2) {\n        /** @type {?} */\n        const renderer = lView[RENDERER];\n        /** @type {?} */\n        const attrName = normalizeDebugBindingName((/** @type {?} */ (inputs[i + 1])));\n        /** @type {?} */\n        const debugValue = normalizeDebugBindingValue(value);\n        if (type === 3 /* Element */) {\n            isProceduralRenderer(renderer) ?\n                renderer.setAttribute(((/** @type {?} */ (element))), attrName, debugValue) :\n                ((/** @type {?} */ (element))).setAttribute(attrName, debugValue);\n        }\n        else if (value !== undefined) {\n            /** @type {?} */\n            const value = `bindings=${JSON.stringify({ [attrName]: debugValue }, null, 2)}`;\n            if (isProceduralRenderer(renderer)) {\n                renderer.setValue(((/** @type {?} */ (element))), value);\n            }\n            else {\n                ((/** @type {?} */ (element))).textContent = value;\n            }\n        }\n    }\n}\n/**\n * Consolidates all inputs or outputs of all directives on this logical node.\n *\n * @param {?} tNode\n * @param {?} direction whether to consider inputs or outputs\n * @return {?} PropertyAliases|null aggregate of all properties if any, `null` otherwise\n */\nfunction generatePropertyAliases(tNode, direction) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    /** @type {?} */\n    let propStore = null;\n    /** @type {?} */\n    const start = tNode.directiveStart;\n    /** @type {?} */\n    const end = tNode.directiveEnd;\n    if (end > start) {\n        /** @type {?} */\n        const isInput = direction === 0 /* Input */;\n        /** @type {?} */\n        const defs = tView.data;\n        for (let i = start; i < end; i++) {\n            /** @type {?} */\n            const directiveDef = (/** @type {?} */ (defs[i]));\n            /** @type {?} */\n            const propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n            for (let publicName in propertyAliasMap) {\n                if (propertyAliasMap.hasOwnProperty(publicName)) {\n                    propStore = propStore || {};\n                    /** @type {?} */\n                    const internalName = propertyAliasMap[publicName];\n                    /** @type {?} */\n                    const hasProperty = propStore.hasOwnProperty(publicName);\n                    hasProperty ? propStore[publicName].push(i, internalName) :\n                        (propStore[publicName] = [i, internalName]);\n                }\n            }\n        }\n    }\n    return propStore;\n}\n/**\n * Assign any inline style values to the element during creation mode.\n *\n * This instruction is meant to be called during creation mode to register all\n * dynamic style and class bindings on the element. Note for static values (no binding)\n * see `elementStart` and `elementHostAttrs`.\n *\n * \\@publicApi\n * @param {?=} classBindingNames An array containing bindable class names.\n *        The `elementClassProp` refers to the class name by index in this array.\n *        (i.e. `['foo', 'bar']` means `foo=0` and `bar=1`).\n * @param {?=} styleBindingNames An array containing bindable style properties.\n *        The `elementStyleProp` refers to the class name by index in this array.\n *        (i.e. `['width', 'height']` means `width=0` and `height=1`).\n * @param {?=} styleSanitizer An optional sanitizer function that will be used to sanitize any CSS\n *        property values that are applied to the element (during rendering).\n *        Note that the sanitizer instance itself is tied to the `directive` (if  provided).\n * @param {?=} directive A directive instance the styling is associated with. If not provided\n *        current view's controller instance is assumed.\n *\n * @return {?}\n */\nfunction elementStyling(classBindingNames, styleBindingNames, styleSanitizer, directive) {\n    /** @type {?} */\n    const tNode = getPreviousOrParentTNode();\n    if (!tNode.stylingTemplate) {\n        tNode.stylingTemplate = createEmptyStylingContext();\n    }\n    updateContextWithBindings((/** @type {?} */ (tNode.stylingTemplate)), directive || null, classBindingNames, styleBindingNames, styleSanitizer, hasClassInput(tNode));\n}\n/**\n * Assign static styling values to a host element.\n *\n * NOTE: This instruction is meant to used from `hostBindings` function only.\n *\n * \\@publicApi\n * @param {?} directive A directive instance the styling is associated with.\n * @param {?} attrs An array containing class and styling information. The values must be marked with\n *              `AttributeMarker`.\n *\n *        ```\n *        var attrs = [AttributeMarker.Classes, 'foo', 'bar',\n *                     AttributeMarker.Styles, 'width', '100px', 'height, '200px']\n *        elementHostAttrs(directive, attrs);\n *        ```\n *\n * @return {?}\n */\nfunction elementHostAttrs(directive, attrs) {\n    /** @type {?} */\n    const tNode = getPreviousOrParentTNode();\n    if (!tNode.stylingTemplate) {\n        tNode.stylingTemplate = initializeStaticContext(attrs);\n    }\n    patchContextWithStaticAttrs(tNode.stylingTemplate, attrs, directive);\n}\n/**\n * Apply styling binding to the element.\n *\n * This instruction is meant to be run after `elementStyle` and/or `elementStyleProp`.\n * if any styling bindings have changed then the changes are flushed to the element.\n *\n *\n * \\@publicApi\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n * components\n *\n * @return {?}\n */\nfunction elementStylingApply(index, directive) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const isFirstRender = (lView[FLAGS] & 2 /* FirstLViewPass */) !== 0;\n    /** @type {?} */\n    const totalPlayersQueued = renderStyling(getStylingContext(index + HEADER_OFFSET, lView), lView[RENDERER], lView, isFirstRender, null, null, directive);\n    if (totalPlayersQueued > 0) {\n        /** @type {?} */\n        const rootContext = getRootContext(lView);\n        scheduleTick(rootContext, 2 /* FlushPlayers */);\n    }\n}\n/**\n * Update a style bindings value on an element.\n *\n * If the style value is `null` then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `elementStyle` or any styles that are present\n * from when the element was created (with `elementStyling`).\n *\n * (Note that the styling element is updated as part of `elementStylingApply`.)\n *\n * \\@publicApi\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?} styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `elementStlyingBindings`.\n * @param {?} value New value to write (null to remove). Note that if a directive also\n *        attempts to write to the same binding value then it will only be able to\n *        do so if the template binding value is `null` (or doesn't exist at all).\n * @param {?=} suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n * components\n *\n * @return {?}\n */\nfunction elementStyleProp(index, styleIndex, value, suffix, directive) {\n    /** @type {?} */\n    let valueToAdd = null;\n    if (value !== null) {\n        if (suffix) {\n            // when a suffix is applied then it will bypass\n            // sanitization entirely (b/c a new string is created)\n            valueToAdd = stringify$1(value) + suffix;\n        }\n        else {\n            // sanitization happens by dealing with a String value\n            // this means that the string value will be passed through\n            // into the style rendering later (which is where the value\n            // will be sanitized before it is applied)\n            valueToAdd = (/** @type {?} */ ((/** @type {?} */ (value))));\n        }\n    }\n    updateStyleProp(getStylingContext(index + HEADER_OFFSET, getLView()), styleIndex, valueToAdd, directive);\n}\n/**\n * Add or remove a class via a class binding on a DOM element.\n *\n * This instruction is meant to handle the [class.foo]=\"exp\" case and, therefore,\n * the class itself must already be applied using `elementStyling` within\n * the creation block.\n *\n * \\@publicApi\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?} classIndex Index of class to toggle. This index value refers to the\n *        index of the class in the class bindings array that was passed into\n *        `elementStlyingBindings` (which is meant to be called before this\n *        function is).\n * @param {?} value A true/false value which will turn the class on or off.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n * components\n *\n * @return {?}\n */\nfunction elementClassProp(index, classIndex, value, directive) {\n    /** @type {?} */\n    const onOrOffClassValue = (value instanceof BoundPlayerFactory) ? ((/** @type {?} */ (value))) : (!!value);\n    updateClassProp(getStylingContext(index + HEADER_OFFSET, getLView()), classIndex, onOrOffClassValue, directive);\n}\n/**\n * Update style and/or class bindings using object literal.\n *\n * This instruction is meant apply styling via the `[style]=\"exp\"` and `[class]=\"exp\"` template\n * bindings. When styles are applied to the Element they will then be placed with respect to\n * any styles set with `elementStyleProp`. If any styles are set to `null` then they will be\n * removed from the element.\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * \\@publicApi\n * @template T\n * @param {?} index Index of the element's with which styling is associated.\n * @param {?} classes A key/value style map of CSS classes that will be added to the given element.\n *        Any missing classes (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's list of CSS classes.\n * @param {?=} styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n * @param {?=} directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n *\n * @return {?}\n */\nfunction elementStylingMap(index, classes, styles, directive) {\n    if (directive != undefined)\n        return hackImplementationOfElementStylingMap(index, classes, styles, directive); // supported in next PR\n    // supported in next PR\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tNode = getTNode(index, lView);\n    /** @type {?} */\n    const stylingContext = getStylingContext(index + HEADER_OFFSET, lView);\n    if (hasClassInput(tNode) && classes !== NO_CHANGE) {\n        /** @type {?} */\n        const initialClasses = getInitialClassNameValue(stylingContext);\n        /** @type {?} */\n        const classInputVal = (initialClasses.length ? (initialClasses + ' ') : '') + ((/** @type {?} */ (classes)));\n        setInputsForProperty(lView, (/** @type {?} */ ((/** @type {?} */ (tNode.inputs))['class'])), classInputVal);\n    }\n    else {\n        updateStylingMap(stylingContext, classes, styles);\n    }\n}\n/* START OF HACK BLOCK */\n/**\n * @template T\n * @param {?} index\n * @param {?} classes\n * @param {?=} styles\n * @param {?=} directive\n * @return {?}\n */\nfunction hackImplementationOfElementStylingMap(index, classes, styles, directive) {\n    throw new Error('unimplemented. Should not be needed by ViewEngine compatibility');\n}\n/* END OF HACK BLOCK */\n//////////////////////////\n//// Text\n//////////////////////////\n/**\n * Create static text node\n *\n * @param {?} index Index of the node in the data array\n * @param {?=} value Value to write. This value will be stringified.\n * @return {?}\n */\nfunction text(index, value) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'text nodes should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateTextNode++;\n    /** @type {?} */\n    const textNative = createTextNode(value, lView[RENDERER]);\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 3 /* Element */, textNative, null, null);\n    // Text nodes are self closing.\n    setIsParent(false);\n    appendChild(textNative, tNode, lView);\n}\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper interpolation(1-8) method\n *\n * @template T\n * @param {?} index Index of the node in the data array.\n * @param {?} value Stringified value to write.\n * @return {?}\n */\nfunction textBinding(index, value) {\n    if (value !== NO_CHANGE) {\n        /** @type {?} */\n        const lView = getLView();\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        /** @type {?} */\n        const element = (/** @type {?} */ ((/** @type {?} */ (getNativeByIndex(index, lView)))));\n        ngDevMode && assertDefined(element, 'native element should exist');\n        ngDevMode && ngDevMode.rendererSetText++;\n        /** @type {?} */\n        const renderer = lView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.setValue(element, stringify$1(value)) :\n            element.textContent = stringify$1(value);\n    }\n}\n//////////////////////////\n//// Directive\n//////////////////////////\n/**\n * Instantiate a root component.\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @return {?}\n */\nfunction instantiateRootComponent(tView, viewData, def) {\n    /** @type {?} */\n    const rootTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass) {\n        if (def.providersResolver)\n            def.providersResolver(def);\n        generateExpandoInstructionBlock(tView, rootTNode, 1);\n        baseResolveDirective(tView, viewData, def, def.factory);\n    }\n    /** @type {?} */\n    const directive = getNodeInjectable(tView.data, viewData, viewData.length - 1, (/** @type {?} */ (rootTNode)));\n    postProcessBaseDirective(viewData, rootTNode, directive, (/** @type {?} */ (def)));\n    return directive;\n}\n/**\n * Resolve the matched directives on a node.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} directives\n * @param {?} tNode\n * @param {?} localRefs\n * @return {?}\n */\nfunction resolveDirectives(tView, viewData, directives, tNode, localRefs) {\n    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.\n    ngDevMode && assertEqual(getFirstTemplatePass(), true, 'should run on first template pass only');\n    /** @type {?} */\n    const exportsMap = localRefs ? { '': -1 } : null;\n    if (directives) {\n        initNodeFlags(tNode, tView.data.length, directives.length);\n        // When the same token is provided by several directives on the same node, some rules apply in\n        // the viewEngine:\n        // - viewProviders have priority over providers\n        // - the last directive in NgModule.declarations has priority over the previous one\n        // So to match these rules, the order in which providers are added in the arrays is very\n        // important.\n        for (let i = 0; i < directives.length; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (directives[i]));\n            if (def.providersResolver)\n                def.providersResolver(def);\n        }\n        generateExpandoInstructionBlock(tView, tNode, directives.length);\n        for (let i = 0; i < directives.length; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (directives[i]));\n            /** @type {?} */\n            const directiveDefIdx = tView.data.length;\n            baseResolveDirective(tView, viewData, def, def.factory);\n            saveNameToExportMap((/** @type {?} */ (tView.data)).length - 1, def, exportsMap);\n            // Init hooks are queued now so ngOnInit is called in host components before\n            // any projected components.\n            queueInitHooks(directiveDefIdx, def.onInit, def.doCheck, tView);\n        }\n    }\n    if (exportsMap)\n        cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n * @param {?} tView\n * @param {?} lView\n * @param {?} tNode\n * @return {?}\n */\nfunction instantiateAllDirectives(tView, lView, tNode) {\n    /** @type {?} */\n    const start = tNode.directiveStart;\n    /** @type {?} */\n    const end = tNode.directiveEnd;\n    if (!getFirstTemplatePass() && start < end) {\n        getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView);\n    }\n    for (let i = start; i < end; i++) {\n        /** @type {?} */\n        const def = (/** @type {?} */ (tView.data[i]));\n        if (isComponentDef(def)) {\n            addComponentLogic(lView, tNode, (/** @type {?} */ (def)));\n        }\n        /** @type {?} */\n        const directive = getNodeInjectable(tView.data, (/** @type {?} */ (lView)), i, (/** @type {?} */ (tNode)));\n        postProcessDirective(lView, directive, def, i);\n    }\n}\n/**\n * @param {?} tView\n * @param {?} viewData\n * @param {?} tNode\n * @return {?}\n */\nfunction invokeDirectivesHostBindings(tView, viewData, tNode) {\n    /** @type {?} */\n    const start = tNode.directiveStart;\n    /** @type {?} */\n    const end = tNode.directiveEnd;\n    /** @type {?} */\n    const expando = (/** @type {?} */ (tView.expandoInstructions));\n    /** @type {?} */\n    const firstTemplatePass = getFirstTemplatePass();\n    for (let i = start; i < end; i++) {\n        /** @type {?} */\n        const def = (/** @type {?} */ (tView.data[i]));\n        /** @type {?} */\n        const directive = viewData[i];\n        if (def.hostBindings) {\n            /** @type {?} */\n            const previousExpandoLength = expando.length;\n            setCurrentDirectiveDef(def);\n            (/** @type {?} */ (def.hostBindings))(1 /* Create */, directive, tNode.index - HEADER_OFFSET);\n            setCurrentDirectiveDef(null);\n            // `hostBindings` function may or may not contain `allocHostVars` call\n            // (e.g. it may not if it only contains host listeners), so we need to check whether\n            // `expandoInstructions` has changed and if not - we still push `hostBindings` to\n            // expando block, to make sure we execute it for DI cycle\n            if (previousExpandoLength === expando.length && firstTemplatePass) {\n                expando.push(def.hostBindings);\n            }\n        }\n        else if (firstTemplatePass) {\n            expando.push(null);\n        }\n    }\n}\n/**\n * Generates a new block in TView.expandoInstructions for this node.\n *\n * Each expando block starts with the element index (turned negative so we can distinguish\n * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n * @param {?} tView\n * @param {?} tNode\n * @param {?} directiveCount\n * @return {?}\n */\nfunction generateExpandoInstructionBlock(tView, tNode, directiveCount) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'Expando block should only be generated on first template pass.');\n    /** @type {?} */\n    const elementIndex = -(tNode.index - HEADER_OFFSET);\n    /** @type {?} */\n    const providerStartIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    const providerCount = tView.data.length - providerStartIndex;\n    (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, providerCount, directiveCount);\n}\n/**\n * On the first template pass, we need to reserve space for host binding values\n * after directives are matched (so all directives are saved, then bindings).\n * Because we are updating the blueprint, we only need to do this once.\n * @param {?} tView\n * @param {?} lView\n * @param {?} totalHostVars\n * @return {?}\n */\nfunction prefillHostVars(tView, lView, totalHostVars) {\n    ngDevMode &&\n        assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n    for (let i = 0; i < totalHostVars; i++) {\n        lView.push(NO_CHANGE);\n        tView.blueprint.push(NO_CHANGE);\n        tView.data.push(null);\n    }\n}\n/**\n * Process a directive on the current node after its creation.\n * @template T\n * @param {?} viewData\n * @param {?} directive\n * @param {?} def\n * @param {?} directiveDefIdx\n * @return {?}\n */\nfunction postProcessDirective(viewData, directive, def, directiveDefIdx) {\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    postProcessBaseDirective(viewData, previousOrParentTNode, directive, def);\n    ngDevMode && assertDefined(previousOrParentTNode, 'previousOrParentTNode');\n    if (previousOrParentTNode && previousOrParentTNode.attrs) {\n        setInputsFromAttrs(directiveDefIdx, directive, def.inputs, previousOrParentTNode);\n    }\n    if (def.contentQueries) {\n        def.contentQueries(directiveDefIdx);\n    }\n    if (isComponentDef(def)) {\n        /** @type {?} */\n        const componentView = getComponentViewByIndex(previousOrParentTNode.index, viewData);\n        componentView[CONTEXT] = directive;\n    }\n}\n/**\n * A lighter version of postProcessDirective() that is used for the root component.\n * @template T\n * @param {?} lView\n * @param {?} previousOrParentTNode\n * @param {?} directive\n * @param {?} def\n * @return {?}\n */\nfunction postProcessBaseDirective(lView, previousOrParentTNode, directive, def) {\n    /** @type {?} */\n    const native = getNativeByTNode(previousOrParentTNode, lView);\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'directives should be created before any bindings');\n    ngDevMode && assertPreviousIsParent(getIsParent());\n    attachPatchData(directive, lView);\n    if (native) {\n        attachPatchData(native, lView);\n    }\n    // TODO(misko): setUpAttributes should be a feature for better treeshakability.\n    if (def.attributes != null && previousOrParentTNode.type == 3 /* Element */) {\n        setUpAttributes((/** @type {?} */ (native)), (/** @type {?} */ (def.attributes)));\n    }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} tNode\n * @return {?}\n */\nfunction findDirectiveMatches(tView, viewData, tNode) {\n    ngDevMode && assertEqual(getFirstTemplatePass(), true, 'should run on first template pass only');\n    /** @type {?} */\n    const registry = tView.directiveRegistry;\n    /** @type {?} */\n    let matches = null;\n    if (registry) {\n        for (let i = 0; i < registry.length; i++) {\n            /** @type {?} */\n            const def = (/** @type {?} */ (registry[i]));\n            if (isNodeMatchingSelectorList(tNode, (/** @type {?} */ (def.selectors)), /* isProjectionMode */ false)) {\n                matches || (matches = []);\n                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (getPreviousOrParentTNode())), viewData), viewData, def.type);\n                if (isComponentDef(def)) {\n                    if (tNode.flags & 1 /* isComponent */)\n                        throwMultipleComponentError(tNode);\n                    tNode.flags = 1 /* isComponent */;\n                    // The component is always stored first with directives after.\n                    matches.unshift(def);\n                }\n                else {\n                    matches.push(def);\n                }\n            }\n        }\n    }\n    return matches;\n}\n/**\n * Stores index of component's host element so it will be queued for view refresh during CD.\n * @param {?} previousOrParentTNode\n * @return {?}\n */\nfunction queueComponentIndexForCheck(previousOrParentTNode) {\n    ngDevMode &&\n        assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    (tView.components || (tView.components = [])).push(previousOrParentTNode.index);\n}\n/**\n * Stores host binding fn and number of host vars so it will be queued for binding refresh during\n * CD.\n * @param {?} tView\n * @param {?} def\n * @param {?} hostVars\n * @return {?}\n */\nfunction queueHostBindingForCheck(tView, def, hostVars) {\n    ngDevMode &&\n        assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n    /** @type {?} */\n    const expando = (/** @type {?} */ (tView.expandoInstructions));\n    /** @type {?} */\n    const length = expando.length;\n    // Check whether a given `hostBindings` function already exists in expandoInstructions,\n    // which can happen in case directive definition was extended from base definition (as a part of\n    // the `InheritDefinitionFeature` logic). If we found the same `hostBindings` function in the\n    // list, we just increase the number of host vars associated with that function, but do not add it\n    // into the list again.\n    if (length >= 2 && expando[length - 2] === def.hostBindings) {\n        expando[length - 1] = ((/** @type {?} */ (expando[length - 1]))) + hostVars;\n    }\n    else {\n        expando.push((/** @type {?} */ (def.hostBindings)), hostVars);\n    }\n}\n/**\n * Caches local names and their matching directive indices for query and template lookups.\n * @param {?} tNode\n * @param {?} localRefs\n * @param {?} exportsMap\n * @return {?}\n */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n    if (localRefs) {\n        /** @type {?} */\n        const localNames = tNode.localNames = [];\n        // Local names must be stored in tNode in the same order that localRefs are defined\n        // in the template to ensure the data is loaded in the same slots as their refs\n        // in the template (for template queries).\n        for (let i = 0; i < localRefs.length; i += 2) {\n            /** @type {?} */\n            const index = exportsMap[localRefs[i + 1]];\n            if (index == null)\n                throw new Error(`Export of name '${localRefs[i + 1]}' not found!`);\n            localNames.push(localRefs[i], index);\n        }\n    }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n * @param {?} index\n * @param {?} def\n * @param {?} exportsMap\n * @return {?}\n */\nfunction saveNameToExportMap(index, def, exportsMap) {\n    if (exportsMap) {\n        if (def.exportAs)\n            exportsMap[def.exportAs] = index;\n        if (((/** @type {?} */ (def))).template)\n            exportsMap[''] = index;\n    }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param {?} tNode\n * @param {?} index the initial index\n * @param {?} numberOfDirectives\n * @return {?}\n */\nfunction initNodeFlags(tNode, index, numberOfDirectives) {\n    ngDevMode && assertEqual(getFirstTemplatePass(), true, 'expected firstTemplatePass to be true');\n    /** @type {?} */\n    const flags = tNode.flags;\n    ngDevMode && assertEqual(flags === 0 || flags === 1 /* isComponent */, true, 'expected node flags to not be initialized');\n    ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n    // When the first directive is created on a node, save the index\n    tNode.flags = flags & 1 /* isComponent */;\n    tNode.directiveStart = index;\n    tNode.directiveEnd = index + numberOfDirectives;\n    tNode.providerIndexes = index;\n}\n/**\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @param {?} directiveFactory\n * @return {?}\n */\nfunction baseResolveDirective(tView, viewData, def, directiveFactory) {\n    tView.data.push(def);\n    /** @type {?} */\n    const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);\n    tView.blueprint.push(nodeInjectorFactory);\n    viewData.push(nodeInjectorFactory);\n}\n/**\n * @template T\n * @param {?} lView\n * @param {?} previousOrParentTNode\n * @param {?} def\n * @return {?}\n */\nfunction addComponentLogic(lView, previousOrParentTNode, def) {\n    /** @type {?} */\n    const native = getNativeByTNode(previousOrParentTNode, lView);\n    /** @type {?} */\n    const tView = getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery);\n    // Only component views should be added to the view tree directly. Embedded views are\n    // accessed through their containers because they may be removed / re-added later.\n    /** @type {?} */\n    const rendererFactory = lView[RENDERER_FACTORY];\n    /** @type {?} */\n    const componentView = addToViewTree(lView, (/** @type {?} */ (previousOrParentTNode.index)), createLView(lView, tView, null, def.onPush ? 8 /* Dirty */ : 4 /* CheckAlways */, rendererFactory, lView[RENDERER_FACTORY].createRenderer((/** @type {?} */ (native)), def)));\n    componentView[HOST_NODE] = (/** @type {?} */ (previousOrParentTNode));\n    // Component view will always be created before any injected LContainers,\n    // so this is a regular element, wrap it with the component view\n    componentView[HOST] = lView[previousOrParentTNode.index];\n    lView[previousOrParentTNode.index] = componentView;\n    if (getFirstTemplatePass()) {\n        queueComponentIndexForCheck(previousOrParentTNode);\n    }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @template T\n * @param {?} directiveIndex Index of the directive in directives array\n * @param {?} instance Instance of the directive on which to set the initial inputs\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data for this node\n * @return {?}\n */\nfunction setInputsFromAttrs(directiveIndex, instance, inputs, tNode) {\n    /** @type {?} */\n    let initialInputData = (/** @type {?} */ (tNode.initialInputs));\n    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n        initialInputData = generateInitialInputs(directiveIndex, inputs, tNode);\n    }\n    /** @type {?} */\n    const initialInputs = initialInputData[directiveIndex];\n    if (initialInputs) {\n        for (let i = 0; i < initialInputs.length; i += 2) {\n            ((/** @type {?} */ (instance)))[initialInputs[i]] = initialInputs[i + 1];\n        }\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an \\@Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` \\@Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param {?} directiveIndex Index to store the initial input data\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data on this node\n * @return {?}\n */\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\n    /** @type {?} */\n    const initialInputData = tNode.initialInputs || (tNode.initialInputs = []);\n    initialInputData[directiveIndex] = null;\n    /** @type {?} */\n    const attrs = (/** @type {?} */ (tNode.attrs));\n    /** @type {?} */\n    let i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        const attrName = attrs[i];\n        if (attrName === 3 /* SelectOnly */)\n            break;\n        if (attrName === 0 /* NamespaceURI */) {\n            // We do not allow inputs on namespaced attributes.\n            i += 4;\n            continue;\n        }\n        /** @type {?} */\n        const minifiedInputName = inputs[attrName];\n        /** @type {?} */\n        const attrValue = attrs[i + 1];\n        if (minifiedInputName !== undefined) {\n            /** @type {?} */\n            const inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\n            inputsToStore.push(minifiedInputName, (/** @type {?} */ (attrValue)));\n        }\n        i += 2;\n    }\n    return initialInputData;\n}\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param {?} hostNative The host element for the LContainer\n * @param {?} hostTNode The host TNode for the LContainer\n * @param {?} currentView The parent view of the LContainer\n * @param {?} native The native comment element\n * @param {?=} isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @return {?} LContainer\n */\nfunction createLContainer(hostNative, hostTNode, currentView, native, isForViewContainerRef) {\n    return [\n        isForViewContainerRef ? -1 : 0,\n        [],\n        currentView,\n        null,\n        null,\n        hostNative,\n        native,\n        getRenderParent(hostTNode, currentView) // renderParent\n    ];\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param {?} index The index of the container in the data array\n * @param {?} templateFn Inline template\n * @param {?} consts The number of nodes, local refs, and pipes for this template\n * @param {?} vars The number of bindings for this template\n * @param {?=} tagName The name of the container element, if applicable\n * @param {?=} attrs The attrs attached to the container, if applicable\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @param {?=} localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n * @return {?}\n */\nfunction template(index, templateFn, consts, vars, tagName, attrs, localRefs, localRefExtractor) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    // TODO: consider a separate node type for templates\n    /** @type {?} */\n    const tNode = containerInternal(index, tagName || null, attrs || null);\n    if (getFirstTemplatePass()) {\n        tNode.tViews = createTView(-1, templateFn, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n    }\n    createDirectivesAndLocals(tView, lView, localRefs, localRefExtractor);\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const native = getNativeByTNode(previousOrParentTNode, lView);\n    attachPatchData(native, lView);\n    if (currentQueries) {\n        lView[QUERIES] = currentQueries.addNode((/** @type {?} */ (previousOrParentTNode)));\n    }\n    queueLifecycleHooks(tView, tNode);\n    setIsParent(false);\n}\n/**\n * Creates an LContainer for inline views, e.g.\n *\n * % if (showing) {\n *   <div></div>\n * % }\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nfunction container(index) {\n    /** @type {?} */\n    const tNode = containerInternal(index, null, null);\n    getFirstTemplatePass() && (tNode.tViews = []);\n    setIsParent(false);\n}\n/**\n * @param {?} index\n * @param {?} tagName\n * @param {?} attrs\n * @return {?}\n */\nfunction containerInternal(index, tagName, attrs) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'container nodes should be created before any bindings');\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    /** @type {?} */\n    const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    const tNode = createNodeAtIndex(index, 0 /* Container */, comment, tagName, attrs);\n    /** @type {?} */\n    const lContainer = lView[adjustedIndex] =\n        createLContainer(lView[adjustedIndex], tNode, lView, comment);\n    appendChild(comment, tNode, lView);\n    // Containers are added to the current view tree instead of their embedded views\n    // because views can be removed and re-inserted.\n    addToViewTree(lView, index + HEADER_OFFSET, lContainer);\n    /** @type {?} */\n    const currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        // prepare place for matching nodes from views inserted into a given container\n        lContainer[QUERIES] = currentQueries.container();\n    }\n    ngDevMode && assertNodeType(getPreviousOrParentTNode(), 0 /* Container */);\n    return tNode;\n}\n/**\n * Sets a container up to receive views.\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nfunction containerRefreshStart(index) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    let previousOrParentTNode = (/** @type {?} */ (loadInternal(tView.data, index)));\n    setPreviousOrParentTNode(previousOrParentTNode);\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    setIsParent(true);\n    lView[index + HEADER_OFFSET][ACTIVE_INDEX] = 0;\n    // We need to execute init hooks here so ngOnInit hooks are called in top level views\n    // before they are called in embedded views (for backwards compatibility).\n    executeInitHooks(lView, tView, getCheckNoChangesMode());\n}\n/**\n * Marks the end of the LContainer.\n *\n * Marking the end of LContainer is the time when to child views get inserted or removed.\n * @return {?}\n */\nfunction containerRefreshEnd() {\n    /** @type {?} */\n    let previousOrParentTNode = getPreviousOrParentTNode();\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertNodeType(previousOrParentTNode, 2 /* View */);\n        ngDevMode && assertHasParent(previousOrParentTNode);\n        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    /** @type {?} */\n    const lContainer = getLView()[previousOrParentTNode.index];\n    /** @type {?} */\n    const nextIndex = lContainer[ACTIVE_INDEX];\n    // remove extra views at the end of the container\n    while (nextIndex < lContainer[VIEWS].length) {\n        removeView(lContainer, (/** @type {?} */ (previousOrParentTNode)), nextIndex);\n    }\n}\n/**\n * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes them\n * by executing an associated template function.\n * @param {?} lView\n * @return {?}\n */\nfunction refreshDynamicEmbeddedViews(lView) {\n    for (let current = getLViewChild(lView); current !== null; current = current[NEXT]) {\n        // Note: current can be an LView or an LContainer instance, but here we are only interested\n        // in LContainer. We can tell it's an LContainer because its length is less than the LView\n        // header.\n        if (current.length < HEADER_OFFSET && current[ACTIVE_INDEX] === -1) {\n            /** @type {?} */\n            const container = (/** @type {?} */ (current));\n            for (let i = 0; i < container[VIEWS].length; i++) {\n                /** @type {?} */\n                const dynamicViewData = container[VIEWS][i];\n                // The directives and pipes are not needed here as an existing view is only being refreshed.\n                ngDevMode && assertDefined(dynamicViewData[TVIEW], 'TView must be allocated');\n                renderEmbeddedTemplate(dynamicViewData, dynamicViewData[TVIEW], (/** @type {?} */ (dynamicViewData[CONTEXT])));\n            }\n        }\n    }\n}\n/**\n * Looks for a view with a given view block id inside a provided LContainer.\n * Removes views that need to be deleted in the process.\n *\n * @param {?} lContainer to search for views\n * @param {?} tContainerNode to search for views\n * @param {?} startIdx starting index in the views array to search from\n * @param {?} viewBlockId exact view block id to look for\n * @return {?} index of a found view or -1 if not found\n */\nfunction scanForView(lContainer, tContainerNode, startIdx, viewBlockId) {\n    /** @type {?} */\n    const views = lContainer[VIEWS];\n    for (let i = startIdx; i < views.length; i++) {\n        /** @type {?} */\n        const viewAtPositionId = views[i][TVIEW].id;\n        if (viewAtPositionId === viewBlockId) {\n            return views[i];\n        }\n        else if (viewAtPositionId < viewBlockId) {\n            // found a view that should not be at this position - remove\n            removeView(lContainer, tContainerNode, i);\n        }\n        else {\n            // found a view with id greater than the one we are searching for\n            // which means that required view doesn't exist and can't be found at\n            // later positions in the views array - stop the searchdef.cont here\n            break;\n        }\n    }\n    return null;\n}\n/**\n * Marks the start of an embedded view.\n *\n * @param {?} viewBlockId The ID of this view\n * @param {?} consts\n * @param {?} vars\n * @return {?} boolean Whether or not this view is in creation mode\n */\nfunction embeddedViewStart(viewBlockId, consts, vars) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    // The previous node can be a view node if we are processing an inline for loop\n    /** @type {?} */\n    const containerTNode = previousOrParentTNode.type === 2 /* View */ ?\n        (/** @type {?} */ (previousOrParentTNode.parent)) :\n        previousOrParentTNode;\n    /** @type {?} */\n    const lContainer = (/** @type {?} */ (lView[containerTNode.index]));\n    ngDevMode && assertNodeType(containerTNode, 0 /* Container */);\n    /** @type {?} */\n    let viewToRender = scanForView(lContainer, (/** @type {?} */ (containerTNode)), (/** @type {?} */ (lContainer[ACTIVE_INDEX])), viewBlockId);\n    if (viewToRender) {\n        setIsParent(true);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    else {\n        // When we create a new LView, we always reset the state of the instructions.\n        viewToRender = createLView(lView, getOrCreateEmbeddedTView(viewBlockId, consts, vars, (/** @type {?} */ (containerTNode))), null, 4 /* CheckAlways */);\n        if (lContainer[QUERIES]) {\n            viewToRender[QUERIES] = (/** @type {?} */ (lContainer[QUERIES])).createView();\n        }\n        createViewNode(viewBlockId, viewToRender);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    if (lContainer) {\n        if (isCreationMode(viewToRender)) {\n            // it is a new view, insert it into collection of views for a given container\n            insertView(viewToRender, lContainer, lView, (/** @type {?} */ (lContainer[ACTIVE_INDEX])), -1);\n        }\n        (/** @type {?} */ (lContainer[ACTIVE_INDEX]))++;\n    }\n    return isCreationMode(viewToRender) ? 1 /* Create */ | 2 /* Update */ :\n        2 /* Update */;\n}\n/**\n * Initialize the TView (e.g. static data) for the active embedded view.\n *\n * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\n * static data for a particular node would overwrite the static data for a node in the view above\n * it with the same index (since it's in the same template).\n *\n * @param {?} viewIndex The index of the TView in TNode.tViews\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars The number of bindings and pure function bindings in this template\n * @param {?} parent\n * @return {?} TView\n */\nfunction getOrCreateEmbeddedTView(viewIndex, consts, vars, parent) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertNodeType(parent, 0 /* Container */);\n    /** @type {?} */\n    const containerTViews = (/** @type {?} */ (parent.tViews));\n    ngDevMode && assertDefined(containerTViews, 'TView expected');\n    ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\n    if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\n        containerTViews[viewIndex] = createTView(viewIndex, null, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n    }\n    return containerTViews[viewIndex];\n}\n/**\n * Marks the end of an embedded view.\n * @return {?}\n */\nfunction embeddedViewEnd() {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const viewHost = lView[HOST_NODE];\n    if (isCreationMode(lView)) {\n        refreshDescendantViews(lView); // creation mode pass\n        lView[FLAGS] &= ~1 /* CreationMode */;\n    }\n    refreshDescendantViews(lView); // update mode pass\n    leaveView((/** @type {?} */ (lView[PARENT])));\n    setPreviousOrParentTNode((/** @type {?} */ (viewHost)));\n    setIsParent(false);\n}\n/////////////\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @template T\n * @param {?} adjustedElementIndex  Element index in LView[] (adjusted for HEADER_OFFSET)\n * @return {?}\n */\nfunction componentRefresh(adjustedElementIndex) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode && assertDataInRange(lView, adjustedElementIndex);\n    /** @type {?} */\n    const hostView = getComponentViewByIndex(adjustedElementIndex, lView);\n    ngDevMode && assertNodeType((/** @type {?} */ (lView[TVIEW].data[adjustedElementIndex])), 3 /* Element */);\n    // Only attached CheckAlways components or attached, dirty OnPush components should be checked\n    if (viewAttached(hostView) && hostView[FLAGS] & (4 /* CheckAlways */ | 8 /* Dirty */)) {\n        syncViewWithBlueprint(hostView);\n        checkView(hostView, hostView[CONTEXT]);\n    }\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param {?} componentView The view to sync\n * @return {?}\n */\nfunction syncViewWithBlueprint(componentView) {\n    /** @type {?} */\n    const componentTView = componentView[TVIEW];\n    for (let i = componentView.length; i < componentTView.blueprint.length; i++) {\n        componentView[i] = componentTView.blueprint[i];\n    }\n}\n/**\n * Returns a boolean for whether the view is attached\n * @param {?} view\n * @return {?}\n */\nfunction viewAttached(view) {\n    return (view[FLAGS] & 16 /* Attached */) === 16 /* Attached */;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param {?=} selectors A collection of parsed CSS selectors\n * @param {?=} textSelectors\n * @return {?}\n */\nfunction projectionDef(selectors, textSelectors) {\n    /** @type {?} */\n    const componentNode = (/** @type {?} */ (findComponentView(getLView())[HOST_NODE]));\n    if (!componentNode.projection) {\n        /** @type {?} */\n        const noOfNodeBuckets = selectors ? selectors.length + 1 : 1;\n        /** @type {?} */\n        const pData = componentNode.projection =\n            new Array(noOfNodeBuckets).fill(null);\n        /** @type {?} */\n        const tails = pData.slice();\n        /** @type {?} */\n        let componentChild = componentNode.child;\n        while (componentChild !== null) {\n            /** @type {?} */\n            const bucketIndex = selectors ? matchingSelectorIndex(componentChild, selectors, (/** @type {?} */ (textSelectors))) : 0;\n            /** @type {?} */\n            const nextNode = componentChild.next;\n            if (tails[bucketIndex]) {\n                (/** @type {?} */ (tails[bucketIndex])).next = componentChild;\n            }\n            else {\n                pData[bucketIndex] = componentChild;\n                componentChild.next = null;\n            }\n            tails[bucketIndex] = componentChild;\n            componentChild = nextNode;\n        }\n    }\n}\n/**\n * Stack used to keep track of projection nodes in projection() instruction.\n *\n * This is deliberately created outside of projection() to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n * @type {?}\n */\nconst projectionNodeStack$1 = [];\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param {?} nodeIndex\n * @param {?=} selectorIndex\n * @param {?=} attrs\n * @return {?}\n */\nfunction projection(nodeIndex, selectorIndex = 0, attrs) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tProjectionNode = createNodeAtIndex(nodeIndex, 1 /* Projection */, null, null, attrs || null);\n    // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n    if (tProjectionNode.projection === null)\n        tProjectionNode.projection = selectorIndex;\n    // `<ng-content>` has no content\n    setIsParent(false);\n    // re-distribution of projectable nodes is stored on a component's view level\n    /** @type {?} */\n    const componentView = findComponentView(lView);\n    /** @type {?} */\n    const componentNode = (/** @type {?} */ (componentView[HOST_NODE]));\n    /** @type {?} */\n    let nodeToProject = ((/** @type {?} */ (componentNode.projection)))[selectorIndex];\n    /** @type {?} */\n    let projectedView = (/** @type {?} */ (componentView[PARENT]));\n    /** @type {?} */\n    let projectionNodeIndex = -1;\n    while (nodeToProject) {\n        if (nodeToProject.type === 1 /* Projection */) {\n            // This node is re-projected, so we must go up the tree to get its projected nodes.\n            /** @type {?} */\n            const currentComponentView = findComponentView(projectedView);\n            /** @type {?} */\n            const currentComponentHost = (/** @type {?} */ (currentComponentView[HOST_NODE]));\n            /** @type {?} */\n            const firstProjectedNode = ((/** @type {?} */ (currentComponentHost.projection)))[(/** @type {?} */ (nodeToProject.projection))];\n            if (firstProjectedNode) {\n                projectionNodeStack$1[++projectionNodeIndex] = nodeToProject;\n                projectionNodeStack$1[++projectionNodeIndex] = projectedView;\n                nodeToProject = firstProjectedNode;\n                projectedView = (/** @type {?} */ (currentComponentView[PARENT]));\n                continue;\n            }\n        }\n        else {\n            // This flag must be set now or we won't know that this node is projected\n            // if the nodes are inserted into a container later.\n            nodeToProject.flags |= 2 /* isProjected */;\n            appendProjectedNode(nodeToProject, tProjectionNode, lView, projectedView);\n        }\n        // If we are finished with a list of re-projected nodes, we need to get\n        // back to the root projection node that was re-projected.\n        if (nodeToProject.next === null && projectedView !== (/** @type {?} */ (componentView[PARENT]))) {\n            projectedView = (/** @type {?} */ (projectionNodeStack$1[projectionNodeIndex--]));\n            nodeToProject = (/** @type {?} */ (projectionNodeStack$1[projectionNodeIndex--]));\n        }\n        nodeToProject = nodeToProject.next;\n    }\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @template T\n * @param {?} lView The view where LView or LContainer should be added\n * @param {?} adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param {?} state The LView or LContainer to add to the view tree\n * @return {?} The state passed in\n */\nfunction addToViewTree(lView, adjustedHostIndex, state) {\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    /** @type {?} */\n    const firstTemplatePass = getFirstTemplatePass();\n    if (lView[TAIL]) {\n        (/** @type {?} */ (lView[TAIL]))[NEXT] = state;\n    }\n    else if (firstTemplatePass) {\n        tView.childIndex = adjustedHostIndex;\n    }\n    lView[TAIL] = state;\n    return state;\n}\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n/**\n * If node is an OnPush component, marks its LView dirty.\n * @param {?} lView\n * @param {?} viewIndex\n * @return {?}\n */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n    /** @type {?} */\n    const childComponentLView = getComponentViewByIndex(viewIndex, lView);\n    if (!(childComponentLView[FLAGS] & 4 /* CheckAlways */)) {\n        childComponentLView[FLAGS] |= 8 /* Dirty */;\n    }\n}\n/**\n * Wraps an event listener with preventDefault behavior.\n * @param {?} listenerFn\n * @return {?}\n */\nfunction wrapListenerWithPreventDefault(listenerFn) {\n    return function wrapListenerIn_preventDefault(e) {\n        if (listenerFn(e) === false) {\n            e.preventDefault();\n            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n            e.returnValue = false;\n        }\n    };\n}\n/**\n * Marks current view and all ancestors dirty\n * @param {?} lView\n * @return {?}\n */\nfunction markViewDirty(lView) {\n    while (lView && !(lView[FLAGS] & 128 /* IsRoot */)) {\n        lView[FLAGS] |= 8 /* Dirty */;\n        lView = (/** @type {?} */ (lView[PARENT]));\n    }\n    lView[FLAGS] |= 8 /* Dirty */;\n    ngDevMode && assertDefined(lView[CONTEXT], 'rootContext should be defined');\n    /** @type {?} */\n    const rootContext = (/** @type {?} */ (lView[CONTEXT]));\n    scheduleTick(rootContext, 1 /* DetectChanges */);\n}\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n * @template T\n * @param {?} rootContext\n * @param {?} flags\n * @return {?}\n */\nfunction scheduleTick(rootContext, flags) {\n    /** @type {?} */\n    const nothingScheduled = rootContext.flags === 0 /* Empty */;\n    rootContext.flags |= flags;\n    if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n        /** @type {?} */\n        let res;\n        rootContext.clean = new Promise((r) => res = r);\n        rootContext.scheduler(() => {\n            if (rootContext.flags & 1 /* DetectChanges */) {\n                rootContext.flags &= ~1 /* DetectChanges */;\n                tickRootContext(rootContext);\n            }\n            if (rootContext.flags & 2 /* FlushPlayers */) {\n                rootContext.flags &= ~2 /* FlushPlayers */;\n                /** @type {?} */\n                const playerHandler = rootContext.playerHandler;\n                if (playerHandler) {\n                    playerHandler.flushPlayers();\n                }\n            }\n            rootContext.clean = _CLEAN_PROMISE;\n            (/** @type {?} */ (res))(null);\n        });\n    }\n}\n/**\n * @param {?} rootContext\n * @return {?}\n */\nfunction tickRootContext(rootContext) {\n    for (let i = 0; i < rootContext.components.length; i++) {\n        /** @type {?} */\n        const rootComponent = rootContext.components[i];\n        renderComponentOrTemplate((/** @type {?} */ (readPatchedLView(rootComponent))), rootComponent);\n    }\n}\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {\\@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @template T\n * @param {?} component The component which the change detection should be performed on.\n * @return {?}\n */\nfunction detectChanges(component) {\n    /** @type {?} */\n    const view = (/** @type {?} */ (getComponentViewByInstance(component)));\n    detectChangesInternal(view, component);\n}\n/**\n * @template T\n * @param {?} view\n * @param {?} context\n * @return {?}\n */\nfunction detectChangesInternal(view, context) {\n    /** @type {?} */\n    const rendererFactory = view[RENDERER_FACTORY];\n    if (rendererFactory.begin)\n        rendererFactory.begin();\n    if (isCreationMode(view)) {\n        checkView(view, context); // creation mode pass\n    }\n    checkView(view, context); // update mode pass\n    if (rendererFactory.end)\n        rendererFactory.end();\n}\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param {?} lView The view which the change detection should be performed on.\n * @return {?}\n */\nfunction detectChangesInRootView(lView) {\n    tickRootContext((/** @type {?} */ (lView[CONTEXT])));\n}\n/**\n * Checks the change detector and its children, and throws if any changes are detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n * @template T\n * @param {?} component\n * @return {?}\n */\nfunction checkNoChanges(component) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChanges(component);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param {?} lView The view which the change detection should be checked on.\n * @return {?}\n */\nfunction checkNoChangesInRootView(lView) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChangesInRootView(lView);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the view of the component provided. Does not gate on dirty checks or execute doCheck.\n * @template T\n * @param {?} hostView\n * @param {?} component\n * @return {?}\n */\nfunction checkView(hostView, component) {\n    /** @type {?} */\n    const hostTView = hostView[TVIEW];\n    /** @type {?} */\n    const oldView = enterView(hostView, hostView[HOST_NODE]);\n    /** @type {?} */\n    const templateFn = (/** @type {?} */ (hostTView.template));\n    /** @type {?} */\n    const viewQuery = hostTView.viewQuery;\n    try {\n        namespaceHTML();\n        createViewQuery(viewQuery, hostView, component);\n        templateFn(getRenderFlags(hostView), component);\n        refreshDescendantViews(hostView);\n        updateViewQuery(viewQuery, hostView, component);\n    }\n    finally {\n        leaveView(oldView);\n    }\n}\n/**\n * @template T\n * @param {?} viewQuery\n * @param {?} view\n * @param {?} component\n * @return {?}\n */\nfunction createViewQuery(viewQuery, view, component) {\n    if (viewQuery && isCreationMode(view)) {\n        viewQuery(1 /* Create */, component);\n    }\n}\n/**\n * @template T\n * @param {?} viewQuery\n * @param {?} view\n * @param {?} component\n * @return {?}\n */\nfunction updateViewQuery(viewQuery, view, component) {\n    if (viewQuery && !isCreationMode(view)) {\n        viewQuery(2 /* Update */, component);\n    }\n}\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * \\@publicApi\n * @template T\n * @param {?} component Component to mark as dirty.\n *\n * @return {?}\n */\nfunction markDirty(component) {\n    ngDevMode && assertDefined(component, 'component');\n    markViewDirty(getComponentViewByInstance(component));\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\n * Creates a single value binding.\n *\n * @template T\n * @param {?} value Value to diff\n * @return {?}\n */\nfunction bind(value) {\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated(lView, lView[BINDING_INDEX]++, value) ? value : NO_CHANGE;\n}\n/**\n * Allocates the necessary amount of slots for host vars.\n *\n * @param {?} count Amount of vars to be allocated\n * @return {?}\n */\nfunction allocHostVars(count) {\n    if (!getFirstTemplatePass())\n        return;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    queueHostBindingForCheck(tView, (/** @type {?} */ (getCurrentDirectiveDef())), count);\n    prefillHostVars(tView, lView, count);\n}\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n * @param {?} values\n * @return {?}\n */\nfunction interpolationV(values) {\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n    /** @type {?} */\n    let different = false;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    let bindingIndex = lView[BINDING_INDEX];\n    for (let i = 1; i < values.length; i += 2) {\n        // Check if bindings (odd indexes) have changed\n        bindingUpdated(lView, bindingIndex++, values[i]) && (different = true);\n    }\n    lView[BINDING_INDEX] = bindingIndex;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    // Build the updated content\n    /** @type {?} */\n    let content = values[0];\n    for (let i = 1; i < values.length; i += 2) {\n        content += stringify$1(values[i]) + values[i + 1];\n    }\n    return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param {?} prefix static value used for concatenation only.\n * @param {?} v0 value checked for change.\n * @param {?} suffix static value used for concatenation only.\n * @return {?}\n */\nfunction interpolation1(prefix, v0, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated(lView, lView[BINDING_INDEX], v0);\n    lView[BINDING_INDEX] += 1;\n    return different ? prefix + stringify$1(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation2(prefix, v0, i0, v1, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated2(lView, lView[BINDING_INDEX], v0, v1);\n    lView[BINDING_INDEX] += 2;\n    return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation3(prefix, v0, i0, v1, i1, v2, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated3(lView, lView[BINDING_INDEX], v0, v1, v2);\n    lView[BINDING_INDEX] += 3;\n    return different ? prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + suffix :\n        NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, lView[BINDING_INDEX], v0, v1, v2, v3);\n    lView[BINDING_INDEX] += 4;\n    return different ?\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) +\n            suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n    lView[BINDING_INDEX] += 5;\n    return different ?\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\n            stringify$1(v4) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n    lView[BINDING_INDEX] += 6;\n    return different ?\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\n            stringify$1(v4) + i4 + stringify$1(v5) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n    lView[BINDING_INDEX] += 7;\n    return different ?\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\n            stringify$1(v4) + i4 + stringify$1(v5) + i5 + stringify$1(v6) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} i6\n * @param {?} v7\n * @param {?} suffix\n * @return {?}\n */\nfunction interpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n    lView[BINDING_INDEX] += 8;\n    return different ?\n        prefix + stringify$1(v0) + i0 + stringify$1(v1) + i1 + stringify$1(v2) + i2 + stringify$1(v3) + i3 +\n            stringify$1(v4) + i4 + stringify$1(v5) + i5 + stringify$1(v6) + i6 + stringify$1(v7) + suffix :\n        NO_CHANGE;\n}\n/**\n * Store a value in the `data` at a given `index`.\n * @template T\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction store(index, value) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    // We don't store any static data for local variables, so the first time\n    // we see the template, we should store as null to avoid a sparse array\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    if (adjustedIndex >= tView.data.length) {\n        tView.data[adjustedIndex] = null;\n    }\n    lView[adjustedIndex] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @template T\n * @param {?} index The index of the local ref in contextViewData.\n * @return {?}\n */\nfunction reference(index) {\n    /** @type {?} */\n    const contextLView = getContextLView();\n    return loadInternal(contextLView, index);\n}\n/**\n * @template T\n * @param {?} queryListIdx\n * @return {?}\n */\nfunction loadQueryList(queryListIdx) {\n    /** @type {?} */\n    const lView = getLView();\n    ngDevMode &&\n        assertDefined(lView[CONTENT_QUERIES], 'Content QueryList array should be defined if reading a query.');\n    ngDevMode && assertDataInRange((/** @type {?} */ (lView[CONTENT_QUERIES])), queryListIdx);\n    return (/** @type {?} */ (lView[CONTENT_QUERIES]))[queryListIdx];\n}\n/**\n * Retrieves a value from current `viewData`.\n * @template T\n * @param {?} index\n * @return {?}\n */\nfunction load(index) {\n    return loadInternal(getLView(), index);\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nfunction directiveInject(token, flags = InjectFlags.Default) {\n    token = resolveForwardRef(token);\n    return getOrCreateInjectable((/** @type {?} */ (getPreviousOrParentTNode())), getLView(), token, flags);\n}\n/**\n * Facade for the attribute injection from DI.\n * @param {?} attrNameToInject\n * @return {?}\n */\nfunction injectAttribute(attrNameToInject) {\n    return injectAttributeImpl(getPreviousOrParentTNode(), attrNameToInject);\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n * @template Q\n * @param {?} queryList\n * @param {?} currentDirectiveIndex\n * @return {?}\n */\nfunction registerContentQuery(queryList, currentDirectiveIndex) {\n    /** @type {?} */\n    const viewData = getLView();\n    /** @type {?} */\n    const tView = viewData[TVIEW];\n    /** @type {?} */\n    const savedContentQueriesLength = (viewData[CONTENT_QUERIES] || (viewData[CONTENT_QUERIES] = [])).push(queryList);\n    if (getFirstTemplatePass()) {\n        /** @type {?} */\n        const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n        /** @type {?} */\n        const lastSavedDirectiveIndex = tView.contentQueries.length ? tView.contentQueries[tView.contentQueries.length - 2] : -1;\n        if (currentDirectiveIndex !== lastSavedDirectiveIndex) {\n            tViewContentQueries.push(currentDirectiveIndex, savedContentQueriesLength - 1);\n        }\n    }\n}\n/** @type {?} */\nconst CLEAN_PROMISE = _CLEAN_PROMISE;\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction initializeTNodeInputs(tNode) {\n    // If tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n    // yet been checked.\n    if (tNode) {\n        if (tNode.inputs === undefined) {\n            // mark inputs as checked\n            tNode.inputs = generatePropertyAliases(tNode, 0 /* Input */);\n        }\n        return tNode.inputs;\n    }\n    return null;\n}\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n * @return {?}\n */\nfunction getCurrentView() {\n    return (/** @type {?} */ ((/** @type {?} */ (getLView()))));\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getCleanup(view) {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return view[CLEANUP] || (view[CLEANUP] = []);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getTViewCleanup(view) {\n    return view[TVIEW].cleanup || (view[TVIEW].cleanup = []);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Adds a player to an element, directive or component instance that will later be\n * animated once change detection has passed.\n *\n * When a player is added to a reference it will stay active until `player.destroy()`\n * is called. Once called then the player will be removed from the active players\n * present on the associated ref instance.\n *\n * To get a list of all the active players on an element see [getPlayers].\n *\n * @param {?} ref The element, directive or component that the player will be placed on.\n * @param {?} player The player that will be triggered to play once change detection has run.\n * @return {?}\n */\nfunction addPlayer(ref, player) {\n    /** @type {?} */\n    const context = getLContext(ref);\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return;\n    }\n    /** @type {?} */\n    const element$$1 = (/** @type {?} */ (context.native));\n    /** @type {?} */\n    const lView = context.lView;\n    /** @type {?} */\n    const playerContext = (/** @type {?} */ (getOrCreatePlayerContext(element$$1, context)));\n    /** @type {?} */\n    const rootContext = getRootContext$1(lView);\n    addPlayerInternal(playerContext, rootContext, element$$1, player, 0, ref);\n    scheduleTick(rootContext, 2 /* FlushPlayers */);\n}\n/**\n * Returns a list of all the active players present on the provided ref instance (which can\n * be an instance of a directive, component or element).\n *\n * This function will only return players that have been added to the ref instance using\n * `addPlayer` or any players that are active through any template styling bindings\n * (`[style]`, `[style.prop]`, `[class]` and `[class.name]`).\n *\n * \\@publicApi\n * @param {?} ref\n * @return {?}\n */\nfunction getPlayers(ref) {\n    /** @type {?} */\n    const context = getLContext(ref);\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return [];\n    }\n    /** @type {?} */\n    const stylingContext = getStylingContext(context.nodeIndex, context.lView);\n    /** @type {?} */\n    const playerContext = stylingContext ? getPlayerContext(stylingContext) : null;\n    return playerContext ? getPlayersInternal(playerContext) : [];\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This value reflects the property on the window where the dev\n * tools are patched (window.ng).\n *\n * @type {?}\n */\nconst GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\n/*\n * Publishes a collection of default debug tools onto `window._ng_`.\n *\n * These functions are available globally when Angular is in development\n * mode and are automatically stripped away from prod mode is on.\n */\n/** @type {?} */\nlet _published = false;\n/**\n * @return {?}\n */\nfunction publishDefaultGlobalUtils() {\n    if (!_published) {\n        _published = true;\n        publishGlobalUtil('getComponent', getComponent);\n        publishGlobalUtil('getContext', getContext);\n        publishGlobalUtil('getListeners', getListeners);\n        publishGlobalUtil('getViewComponent', getViewComponent);\n        publishGlobalUtil('getHostElement', getHostElement);\n        publishGlobalUtil('getInjector', getInjector);\n        publishGlobalUtil('getRootComponents', getRootComponents);\n        publishGlobalUtil('getDirectives', getDirectives);\n        publishGlobalUtil('getPlayers', getPlayers);\n        publishGlobalUtil('markDirty', markDirty);\n    }\n}\n/**\n * Publishes the given function to `window.ngDevMode` so that it can be\n * used from the browser console when an application is not in production.\n * @param {?} name\n * @param {?} fn\n * @return {?}\n */\nfunction publishGlobalUtil(name, fn) {\n    /** @type {?} */\n    const w = (/** @type {?} */ ((/** @type {?} */ (_global))));\n    ngDevMode && assertDefined(fn, 'function not defined');\n    if (w) {\n        /** @type {?} */\n        let container = w[GLOBAL_PUBLISH_EXPANDO_KEY];\n        if (!container) {\n            container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};\n        }\n        container[name] = fn;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {\\@link ViewContainer#createComponent}.\n *\n * @template T\n * @param {?} componentType Component to bootstrap\n * @param {?=} opts\n * @return {?}\n */\nfunction renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts = {}) {\n    ngDevMode && publishDefaultGlobalUtils();\n    ngDevMode && assertComponentType(componentType);\n    /** @type {?} */\n    const rendererFactory = opts.rendererFactory || domRendererFactory3;\n    /** @type {?} */\n    const sanitizer = opts.sanitizer || null;\n    /** @type {?} */\n    const componentDef = (/** @type {?} */ (getComponentDef(componentType)));\n    if (componentDef.type != componentType)\n        componentDef.type = componentType;\n    // The first index of the first selector is the tag name.\n    /** @type {?} */\n    const componentTag = (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (componentDef.selectors))[0]))[0]));\n    /** @type {?} */\n    const hostRNode = locateHostElement(rendererFactory, opts.host || componentTag);\n    /** @type {?} */\n    const rootFlags = componentDef.onPush ? 8 /* Dirty */ | 128 /* IsRoot */ :\n        4 /* CheckAlways */ | 128 /* IsRoot */;\n    /** @type {?} */\n    const rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n    /** @type {?} */\n    const renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n    /** @type {?} */\n    const rootView = createLView(null, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags, rendererFactory, renderer, undefined, opts.injector || null);\n    /** @type {?} */\n    const oldView = enterView(rootView, null);\n    /** @type {?} */\n    let component;\n    try {\n        if (rendererFactory.begin)\n            rendererFactory.begin();\n        /** @type {?} */\n        const componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);\n        component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n        refreshDescendantViews(rootView); // creation mode pass\n        rootView[FLAGS] &= ~1 /* CreationMode */;\n        refreshDescendantViews(rootView); // update mode pass\n    }\n    finally {\n        leaveView(oldView);\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n    return component;\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param {?} rNode Render host element.\n * @param {?} def ComponentDef\n * @param {?} rootView The parent view where the host node is stored\n * @param {?} rendererFactory\n * @param {?} renderer The current renderer\n * @param {?=} sanitizer The sanitizer, if provided\n *\n * @return {?} Component view created\n */\nfunction createRootComponentView(rNode, def, rootView, rendererFactory, renderer, sanitizer) {\n    resetComponentState();\n    /** @type {?} */\n    const tView = rootView[TVIEW];\n    /** @type {?} */\n    const componentView = createLView(rootView, getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery), null, def.onPush ? 8 /* Dirty */ : 4 /* CheckAlways */, rendererFactory, renderer, sanitizer);\n    /** @type {?} */\n    const tNode = createNodeAtIndex(0, 3 /* Element */, rNode, null, null);\n    if (tView.firstTemplatePass) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), rootView, def.type);\n        tNode.flags = 1 /* isComponent */;\n        initNodeFlags(tNode, rootView.length, 1);\n        queueComponentIndexForCheck(tNode);\n    }\n    // Store component view at node index, with node as the HOST\n    componentView[HOST] = rootView[HEADER_OFFSET];\n    componentView[HOST_NODE] = (/** @type {?} */ (tNode));\n    return rootView[HEADER_OFFSET] = componentView;\n}\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n * @template T\n * @param {?} componentView\n * @param {?} componentDef\n * @param {?} rootView\n * @param {?} rootContext\n * @param {?} hostFeatures\n * @return {?}\n */\nfunction createRootComponent(componentView, componentDef, rootView, rootContext, hostFeatures) {\n    /** @type {?} */\n    const tView = rootView[TVIEW];\n    // Create directive instance with factory() and store at next index in viewData\n    /** @type {?} */\n    const component = instantiateRootComponent(tView, rootView, componentDef);\n    rootContext.components.push(component);\n    componentView[CONTEXT] = component;\n    hostFeatures && hostFeatures.forEach((feature) => feature(component, componentDef));\n    if (tView.firstTemplatePass && componentDef.hostBindings) {\n        /** @type {?} */\n        const rootTNode = getPreviousOrParentTNode();\n        setCurrentDirectiveDef(componentDef);\n        componentDef.hostBindings(1 /* Create */, component, rootTNode.index - HEADER_OFFSET);\n        setCurrentDirectiveDef(null);\n    }\n    return component;\n}\n/**\n * @param {?=} scheduler\n * @param {?=} playerHandler\n * @return {?}\n */\nfunction createRootContext(scheduler, playerHandler) {\n    return {\n        components: [],\n        scheduler: scheduler || defaultScheduler,\n        clean: CLEAN_PROMISE,\n        playerHandler: playerHandler || null,\n        flags: 0 /* Empty */\n    };\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n * @param {?} component\n * @param {?} def\n * @return {?}\n */\nfunction LifecycleHooksFeature(component, def) {\n    /** @type {?} */\n    const rootTView = (/** @type {?} */ (readPatchedLView(component)))[TVIEW];\n    /** @type {?} */\n    const dirIndex = rootTView.data.length - 1;\n    queueInitHooks(dirIndex, def.onInit, def.doCheck, rootTView);\n    // TODO(misko): replace `as TNode` with createTNode call. (needs refactoring to lose dep on\n    // LNode).\n    queueLifecycleHooks(rootTView, (/** @type {?} */ ({ directiveStart: dirIndex, directiveEnd: dirIndex + 1 })));\n}\n/**\n * Retrieve the root context for any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} component any component\n * @return {?}\n */\nfunction getRootContext$2(component) {\n    /** @type {?} */\n    const rootContext = (/** @type {?} */ (getRootView(component)[CONTEXT]));\n    ngDevMode && assertDefined(rootContext, 'rootContext');\n    return rootContext;\n}\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param {?} component Component to wait upon\n * @return {?} Promise which resolves when the component is rendered.\n */\nfunction whenRendered(component) {\n    return getRootContext$2(component).clean;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Determines if a definition is a {\\@link ComponentDef} or a {\\@link DirectiveDef}\n * @template T\n * @param {?} definition The definition to examine\n * @return {?}\n */\nfunction isComponentDef$1(definition) {\n    /** @type {?} */\n    const def = (/** @type {?} */ (definition));\n    return typeof def.template === 'function';\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getSuperType(type) {\n    return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param {?} definition The definition that is a SubClass of another directive of component\n * @return {?}\n */\nfunction InheritDefinitionFeature(definition) {\n    /** @type {?} */\n    let superType = getSuperType(definition.type);\n    while (superType) {\n        /** @type {?} */\n        let superDef = undefined;\n        if (isComponentDef$1(definition)) {\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngComponentDef || superType.ngDirectiveDef;\n        }\n        else {\n            if (superType.ngComponentDef) {\n                throw new Error('Directives cannot inherit Components');\n            }\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngDirectiveDef;\n        }\n        /** @nocollapse @type {?} */\n        const baseDef = ((/** @type {?} */ (superType))).ngBaseDef;\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        if (baseDef || superDef) {\n            /** @type {?} */\n            const writeableDef = (/** @type {?} */ (definition));\n            writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n            writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n            writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n        }\n        if (baseDef) {\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, baseDef.inputs);\n            fillProperties(definition.declaredInputs, baseDef.declaredInputs);\n            fillProperties(definition.outputs, baseDef.outputs);\n        }\n        if (superDef) {\n            // Merge hostBindings\n            /** @type {?} */\n            const prevHostBindings = definition.hostBindings;\n            /** @type {?} */\n            const superHostBindings = superDef.hostBindings;\n            if (superHostBindings) {\n                if (prevHostBindings) {\n                    definition.hostBindings = (rf, ctx, elementIndex) => {\n                        superHostBindings(rf, ctx, elementIndex);\n                        prevHostBindings(rf, ctx, elementIndex);\n                    };\n                }\n                else {\n                    definition.hostBindings = superHostBindings;\n                }\n            }\n            // Merge View Queries\n            if (isComponentDef$1(definition) && isComponentDef$1(superDef)) {\n                /** @type {?} */\n                const prevViewQuery = definition.viewQuery;\n                /** @type {?} */\n                const superViewQuery = superDef.viewQuery;\n                if (superViewQuery) {\n                    if (prevViewQuery) {\n                        definition.viewQuery = (rf, ctx) => {\n                            superViewQuery(rf, ctx);\n                            prevViewQuery(rf, ctx);\n                        };\n                    }\n                    else {\n                        definition.viewQuery = superViewQuery;\n                    }\n                }\n            }\n            // Merge Content Queries\n            /** @type {?} */\n            const prevContentQueries = definition.contentQueries;\n            /** @type {?} */\n            const superContentQueries = superDef.contentQueries;\n            if (superContentQueries) {\n                if (prevContentQueries) {\n                    definition.contentQueries = (dirIndex) => {\n                        superContentQueries(dirIndex);\n                        prevContentQueries(dirIndex);\n                    };\n                }\n                else {\n                    definition.contentQueries = superContentQueries;\n                }\n            }\n            // Merge Content Queries Refresh\n            /** @type {?} */\n            const prevContentQueriesRefresh = definition.contentQueriesRefresh;\n            /** @type {?} */\n            const superContentQueriesRefresh = superDef.contentQueriesRefresh;\n            if (superContentQueriesRefresh) {\n                if (prevContentQueriesRefresh) {\n                    definition.contentQueriesRefresh = (directiveIndex, queryIndex) => {\n                        superContentQueriesRefresh(directiveIndex, queryIndex);\n                        prevContentQueriesRefresh(directiveIndex, queryIndex);\n                    };\n                }\n                else {\n                    definition.contentQueriesRefresh = superContentQueriesRefresh;\n                }\n            }\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, superDef.inputs);\n            fillProperties(definition.declaredInputs, superDef.declaredInputs);\n            fillProperties(definition.outputs, superDef.outputs);\n            // Inherit hooks\n            // Assume super class inheritance feature has already run.\n            definition.afterContentChecked =\n                definition.afterContentChecked || superDef.afterContentChecked;\n            definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n            definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n            definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n            definition.doCheck = definition.doCheck || superDef.doCheck;\n            definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n            definition.onInit = definition.onInit || superDef.onInit;\n            // Run parent features\n            /** @type {?} */\n            const features = superDef.features;\n            if (features) {\n                for (const feature of features) {\n                    if (feature && feature.ngInherit) {\n                        ((/** @type {?} */ (feature)))(definition);\n                    }\n                }\n            }\n            break;\n        }\n        else {\n            // Even if we don't have a definition, check the type for the hooks and use those if need be\n            /** @type {?} */\n            const superPrototype = superType.prototype;\n            if (superPrototype) {\n                definition.afterContentChecked =\n                    definition.afterContentChecked || superPrototype.afterContentChecked;\n                definition.afterContentInit =\n                    definition.afterContentInit || superPrototype.afterContentInit;\n                definition.afterViewChecked =\n                    definition.afterViewChecked || superPrototype.afterViewChecked;\n                definition.afterViewInit = definition.afterViewInit || superPrototype.afterViewInit;\n                definition.doCheck = definition.doCheck || superPrototype.doCheck;\n                definition.onDestroy = definition.onDestroy || superPrototype.onDestroy;\n                definition.onInit = definition.onInit || superPrototype.onInit;\n            }\n        }\n        superType = Object.getPrototypeOf(superType);\n    }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction maybeUnwrapEmpty(value) {\n    if (value === EMPTY_OBJ) {\n        return {};\n    }\n    else if (value === EMPTY_ARRAY) {\n        return [];\n    }\n    else {\n        return value;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst PRIVATE_PREFIX = '__ngOnChanges_';\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {\\@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ngComponentDef = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n * @template T\n * @param {?} definition\n * @return {?}\n */\nfunction NgOnChangesFeature(definition) {\n    /** @type {?} */\n    const publicToDeclaredInputs = definition.declaredInputs;\n    /** @type {?} */\n    const publicToMinifiedInputs = definition.inputs;\n    /** @type {?} */\n    const proto = definition.type.prototype;\n    for (const publicName in publicToDeclaredInputs) {\n        if (publicToDeclaredInputs.hasOwnProperty(publicName)) {\n            /** @type {?} */\n            const minifiedKey = publicToMinifiedInputs[publicName];\n            /** @type {?} */\n            const declaredKey = publicToDeclaredInputs[publicName];\n            /** @type {?} */\n            const privateMinKey = PRIVATE_PREFIX + minifiedKey;\n            // Walk the prototype chain to see if we find a property descriptor\n            // That way we can honor setters and getters that were inherited.\n            /** @type {?} */\n            let originalProperty = undefined;\n            /** @type {?} */\n            let checkProto = proto;\n            while (!originalProperty && checkProto &&\n                Object.getPrototypeOf(checkProto) !== Object.getPrototypeOf(Object.prototype)) {\n                originalProperty = Object.getOwnPropertyDescriptor(checkProto, minifiedKey);\n                checkProto = Object.getPrototypeOf(checkProto);\n            }\n            /** @type {?} */\n            const getter = originalProperty && originalProperty.get;\n            /** @type {?} */\n            const setter = originalProperty && originalProperty.set;\n            // create a getter and setter for property\n            Object.defineProperty(proto, minifiedKey, {\n                get: getter ||\n                    (setter ? undefined : function () { return this[privateMinKey]; }),\n                /**\n                 * @template T\n                 * @this {?}\n                 * @param {?} value\n                 * @return {?}\n                 */\n                set(value) {\n                    /** @type {?} */\n                    let simpleChanges = this[PRIVATE_PREFIX];\n                    if (!simpleChanges) {\n                        simpleChanges = {};\n                        // Place where we will store SimpleChanges if there is a change\n                        Object.defineProperty(this, PRIVATE_PREFIX, { value: simpleChanges, writable: true });\n                    }\n                    /** @type {?} */\n                    const isFirstChange = !this.hasOwnProperty(privateMinKey);\n                    /** @type {?} */\n                    const currentChange = simpleChanges[declaredKey];\n                    if (currentChange) {\n                        currentChange.currentValue = value;\n                    }\n                    else {\n                        simpleChanges[declaredKey] =\n                            new SimpleChange(this[privateMinKey], value, isFirstChange);\n                    }\n                    if (isFirstChange) {\n                        // Create a place where the actual value will be stored and make it non-enumerable\n                        Object.defineProperty(this, privateMinKey, { value, writable: true });\n                    }\n                    else {\n                        this[privateMinKey] = value;\n                    }\n                    if (setter)\n                        setter.call(this, value);\n                },\n                // Make the property configurable in dev mode to allow overriding in tests\n                configurable: !!ngDevMode\n            });\n        }\n    }\n    // If an onInit hook is defined, it will need to wrap the ngOnChanges call\n    // so the call order is changes-init-check in creation mode. In subsequent\n    // change detection runs, only the check wrapper will be called.\n    if (definition.onInit != null) {\n        definition.onInit = onChangesWrapper(definition.onInit);\n    }\n    definition.doCheck = onChangesWrapper(definition.doCheck);\n}\n// This option ensures that the ngOnChanges lifecycle hook will be inherited\n// from superclasses (in InheritDefinitionFeature).\n((/** @type {?} */ (NgOnChangesFeature))).ngInherit = true;\n/**\n * @param {?} delegateHook\n * @return {?}\n */\nfunction onChangesWrapper(delegateHook) {\n    return function () {\n        /** @type {?} */\n        const simpleChanges = this[PRIVATE_PREFIX];\n        if (simpleChanges != null) {\n            this.ngOnChanges(simpleChanges);\n            this[PRIVATE_PREFIX] = null;\n        }\n        if (delegateHook)\n            delegateHook.apply(this);\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {...?} args\n * @return {?}\n */\nfunction noop(...args) {\n    // Do nothing.\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SOURCE = '__source';\n/** @type {?} */\nconst _THROW_IF_NOT_FOUND = new Object();\n/** @type {?} */\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * \\@publicApi\n * @type {?}\n */\nconst INJECTOR$1 = new InjectionToken('INJECTOR');\nclass NullInjector {\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue = _THROW_IF_NOT_FOUND) {\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\n            // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n            // reason why correctly written application should cause this exception.\n            // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n            // if(ngDevMode) debugger;\n            throw new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n        }\n        return notFoundValue;\n    }\n}\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * \\@publicApi\n * @abstract\n */\nclass Injector {\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    static create(options, parent) {\n        if (Array.isArray(options)) {\n            return new StaticInjector(options, parent);\n        }\n        else {\n            return new StaticInjector(options.providers, options.parent, options.name || null);\n        }\n    }\n}\nInjector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\nInjector.NULL = new NullInjector();\n/** @nocollapse */\n/** @nocollapse */ Injector.ngInjectableDef = defineInjectable({\n    providedIn: (/** @type {?} */ ('any')),\n    factory: () => inject(INJECTOR$1),\n});\n/**\n * \\@internal\n */\nInjector.__NG_ELEMENT_ID__ = () => SWITCH_INJECTOR_FACTORY();\n/** @type {?} */\nconst SWITCH_INJECTOR_FACTORY__POST_R3__ = function () {\n    return injectInjector();\n};\n/** @type {?} */\nconst SWITCH_INJECTOR_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_INJECTOR_FACTORY = SWITCH_INJECTOR_FACTORY__PRE_R3__;\n/** @type {?} */\nconst IDENT = function (value) {\n    return value;\n};\n/** @type {?} */\nconst EMPTY = (/** @type {?} */ ([]));\n/** @type {?} */\nconst CIRCULAR = IDENT;\n/** @type {?} */\nconst MULTI_PROVIDER_FN = function () {\n    return Array.prototype.slice.call(arguments);\n};\n/** @type {?} */\nconst USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\n/** @type {?} */\nconst NG_TOKEN_PATH = 'ngTokenPath';\n/** @type {?} */\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n/** @type {?} */\nconst NULL_INJECTOR$1 = Injector.NULL;\n/** @type {?} */\nconst NEW_LINE = /\\n/gm;\n/** @type {?} */\nconst NO_NEW_LINE = 'ɵ';\nclass StaticInjector {\n    /**\n     * @param {?} providers\n     * @param {?=} parent\n     * @param {?=} source\n     */\n    constructor(providers, parent = NULL_INJECTOR$1, source = null) {\n        this.parent = parent;\n        this.source = source;\n        /** @type {?} */\n        const records = this._records = new Map();\n        records.set(Injector, (/** @type {?} */ ({ token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false })));\n        records.set(INJECTOR$1, (/** @type {?} */ ({ token: INJECTOR$1, fn: IDENT, deps: EMPTY, value: this, useNew: false })));\n        recursivelyProcessProviders(records, providers);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    get(token, notFoundValue, flags = InjectFlags.Default) {\n        /** @type {?} */\n        const record = this._records.get(token);\n        try {\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n        }\n        catch (e) {\n            /** @type {?} */\n            const tokenPath = e[NG_TEMP_TOKEN_PATH];\n            if (token[SOURCE]) {\n                tokenPath.unshift(token[SOURCE]);\n            }\n            e.message = formatError('\\n' + e.message, tokenPath, this.source);\n            e[NG_TOKEN_PATH] = tokenPath;\n            e[NG_TEMP_TOKEN_PATH] = null;\n            throw e;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const tokens = (/** @type {?} */ ([]));\n        /** @type {?} */\n        const records = this._records;\n        records.forEach((v, token) => tokens.push(stringify(token)));\n        return `StaticInjector[${tokens.join(', ')}]`;\n    }\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction resolveProvider(provider) {\n    /** @type {?} */\n    const deps = computeDeps(provider);\n    /** @type {?} */\n    let fn = IDENT;\n    /** @type {?} */\n    let value = EMPTY;\n    /** @type {?} */\n    let useNew = false;\n    /** @type {?} */\n    let provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = ((/** @type {?} */ (provider))).useValue;\n    }\n    else if (((/** @type {?} */ (provider))).useFactory) {\n        fn = ((/** @type {?} */ (provider))).useFactory;\n    }\n    else if (((/** @type {?} */ (provider))).useExisting) ;\n    else if (((/** @type {?} */ (provider))).useClass) {\n        useNew = true;\n        fn = resolveForwardRef(((/** @type {?} */ (provider))).useClass);\n    }\n    else if (typeof provide == 'function') {\n        useNew = true;\n        fn = provide;\n    }\n    else {\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n    }\n    return { deps, fn, useNew, value };\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction multiProviderMixError(token) {\n    return staticError('Cannot mix multi providers and regular providers', token);\n}\n/**\n * @param {?} records\n * @param {?} provider\n * @return {?}\n */\nfunction recursivelyProcessProviders(records, provider) {\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (provider instanceof Array) {\n            // if we have an array recurse into the array\n            for (let i = 0; i < provider.length; i++) {\n                recursivelyProcessProviders(records, provider[i]);\n            }\n        }\n        else if (typeof provider === 'function') {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError('Function/Class not supported', provider);\n        }\n        else if (provider && typeof provider === 'object' && provider.provide) {\n            // At this point we have what looks like a provider: {provide: ?, ....}\n            /** @type {?} */\n            let token = resolveForwardRef(provider.provide);\n            /** @type {?} */\n            const resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                // This is a multi provider.\n                /** @type {?} */\n                let multiProvider = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                }\n                else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = (/** @type {?} */ ({\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    })));\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({ token, options: 6 /* Default */ });\n            }\n            /** @type {?} */\n            const record = records.get(token);\n            if (record && record.fn == MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        }\n        else {\n            throw staticError('Unexpected provider', provider);\n        }\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    }\n    catch (e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        /** @type {?} */\n        const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value == CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\n    /** @type {?} */\n    let value;\n    if (record && !(flags & InjectFlags.SkipSelf)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value == CIRCULAR) {\n            throw Error(NO_NEW_LINE + 'Circular dependency');\n        }\n        else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            /** @type {?} */\n            let obj = undefined;\n            /** @type {?} */\n            let useNew = record.useNew;\n            /** @type {?} */\n            let fn = record.fn;\n            /** @type {?} */\n            let depRecords = record.deps;\n            /** @type {?} */\n            let deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (let i = 0; i < depRecords.length; i++) {\n                    /** @type {?} */\n                    const depRecord = depRecords[i];\n                    /** @type {?} */\n                    const options = depRecord.options;\n                    /** @type {?} */\n                    const childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                    // Current Token to resolve\n                    depRecord.token, \n                    // A record which describes how to resolve the token.\n                    // If undefined, this means we don't have such a record\n                    childRecord, \n                    // Other records we know about.\n                    records, \n                    // If we don't know how to resolve dependency and we should not check parent for it,\n                    // than pass in Null injector.\n                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR$1 : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, InjectFlags.Default));\n                }\n            }\n            record.value = value = useNew ? new ((/** @type {?} */ (fn)))(...deps) : fn.apply(obj, deps);\n        }\n    }\n    else if (!(flags & InjectFlags.Self)) {\n        value = parent.get(token, notFoundValue, InjectFlags.Default);\n    }\n    return value;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction computeDeps(provider) {\n    /** @type {?} */\n    let deps = EMPTY;\n    /** @type {?} */\n    const providerDeps = ((/** @type {?} */ (provider))).deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (let i = 0; i < providerDeps.length; i++) {\n            /** @type {?} */\n            let options = 6 /* Default */;\n            /** @type {?} */\n            let token = resolveForwardRef(providerDeps[i]);\n            if (token instanceof Array) {\n                for (let j = 0, annotations = token; j < annotations.length; j++) {\n                    /** @type {?} */\n                    const annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation == Optional) {\n                        options = options | 1 /* Optional */;\n                    }\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n                        options = options & ~2 /* CheckSelf */;\n                    }\n                    else if (annotation instanceof Self || annotation == Self) {\n                        options = options & ~4 /* CheckParent */;\n                    }\n                    else if (annotation instanceof Inject) {\n                        token = ((/** @type {?} */ (annotation))).token;\n                    }\n                    else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({ token, options });\n        }\n    }\n    else if (((/** @type {?} */ (provider))).useExisting) {\n        /** @type {?} */\n        const token = resolveForwardRef(((/** @type {?} */ (provider))).useExisting);\n        deps = [{ token, options: 6 /* Default */ }];\n    }\n    else if (!providerDeps && !(USE_VALUE in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError('\\'deps\\' required', provider);\n    }\n    return deps;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @param {?=} source\n * @return {?}\n */\nfunction formatError(text, obj, source = null) {\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n    /** @type {?} */\n    let context = stringify(obj);\n    if (obj instanceof Array) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        /** @type {?} */\n        let parts = (/** @type {?} */ ([]));\n        for (let key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                /** @type {?} */\n                let value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = `{${parts.join(', ')}}`;\n    }\n    return `StaticInjectorError${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @return {?}\n */\nfunction staticError(text, obj) {\n    return new Error(formatError(text, obj));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n * @type {?}\n */\nconst APP_ROOT = new InjectionToken('The presence of this token marks an injector as being the root injector.');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n * @type {?}\n */\nconst NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n * @type {?}\n */\nconst CIRCULAR$1 = {};\n/** @type {?} */\nconst EMPTY_ARRAY$1 = (/** @type {?} */ ([]));\n/**\n * A lazily initialized NullInjector.\n * @type {?}\n */\nlet NULL_INJECTOR$2 = undefined;\n/**\n * @return {?}\n */\nfunction getNullInjector() {\n    if (NULL_INJECTOR$2 === undefined) {\n        NULL_INJECTOR$2 = new NullInjector();\n    }\n    return NULL_INJECTOR$2;\n}\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * \\@publicApi\n * @param {?} defType\n * @param {?=} parent\n * @param {?=} additionalProviders\n * @return {?}\n */\nfunction createInjector(defType, parent = null, additionalProviders = null) {\n    parent = parent || getNullInjector();\n    return new R3Injector(defType, additionalProviders, parent);\n}\nclass R3Injector {\n    /**\n     * @param {?} def\n     * @param {?} additionalProviders\n     * @param {?} parent\n     */\n    constructor(def, additionalProviders, parent) {\n        this.parent = parent;\n        /**\n         * Map of tokens to records which contain the instances of those tokens.\n         */\n        this.records = new Map();\n        /**\n         * The transitive set of `InjectorType`s which define this injector.\n         */\n        this.injectorDefTypes = new Set();\n        /**\n         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n         */\n        this.onDestroy = new Set();\n        /**\n         * Flag indicating that this injector was previously destroyed.\n         */\n        this.destroyed = false;\n        // Start off by creating Records for every provider declared in every InjectorType\n        // included transitively in `def`.\n        /** @type {?} */\n        const dedupStack = [];\n        deepForEach([def], injectorDef => this.processInjectorType(injectorDef, [], dedupStack));\n        additionalProviders && deepForEach(additionalProviders, provider => this.processProvider(provider, def, additionalProviders));\n        // Make sure the INJECTOR token provides this injector.\n        this.records.set(INJECTOR$1, makeRecord(undefined, this));\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n        // any injectable scoped to APP_ROOT_SCOPE.\n        this.isRootInjector = this.records.has(APP_ROOT);\n        // Eagerly instantiate the InjectorType classes themselves.\n        this.injectorDefTypes.forEach(defType => this.get(defType));\n    }\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     * @return {?}\n     */\n    destroy() {\n        this.assertNotDestroyed();\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n        this.destroyed = true;\n        try {\n            // Call all the lifecycle hooks.\n            this.onDestroy.forEach(service => service.ngOnDestroy());\n        }\n        finally {\n            // Release all references.\n            this.records.clear();\n            this.onDestroy.clear();\n            this.injectorDefTypes.clear();\n        }\n    }\n    /**\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n        this.assertNotDestroyed();\n        // Set the injection context.\n        /** @type {?} */\n        const previousInjector = setCurrentInjector(this);\n        try {\n            // Check for the SkipSelf flag.\n            if (!(flags & InjectFlags.SkipSelf)) {\n                // SkipSelf isn't set, check if the record belongs to this injector.\n                /** @type {?} */\n                let record = this.records.get(token);\n                if (record === undefined) {\n                    // No record, but maybe the token is scoped to this injector. Look for an ngInjectableDef\n                    // with a scope matching this injector.\n                    /** @type {?} */\n                    const def = couldBeInjectableType(token) && getInjectableDef(token);\n                    if (def && this.injectableDefInScope(def)) {\n                        // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\n                        // all along.\n                        record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n                        this.records.set(token, record);\n                    }\n                }\n                // If a record was found, get the instance for it and return it.\n                if (record !== undefined) {\n                    return this.hydrate(token, record);\n                }\n            }\n            // Select the next injector based on the Self flag - if self is set, the next injector is\n            // the NullInjector, otherwise it's the parent.\n            /** @type {?} */\n            const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n            return nextInjector.get(token, notFoundValue);\n        }\n        finally {\n            // Lastly, clean up the state by restoring the previous injector.\n            setCurrentInjector(previousInjector);\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    assertNotDestroyed() {\n        if (this.destroyed) {\n            throw new Error('Injector has already been destroyed.');\n        }\n    }\n    /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     * @private\n     * @param {?} defOrWrappedDef\n     * @param {?} parents\n     * @param {?} dedupStack\n     * @return {?}\n     */\n    processInjectorType(defOrWrappedDef, parents, dedupStack) {\n        defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n        if (!defOrWrappedDef)\n            return;\n        // Either the defOrWrappedDef is an InjectorType (with ngInjectorDef) or an\n        // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\n        // read, so care is taken to only do the read once.\n        // First attempt to read the ngInjectorDef.\n        /** @type {?} */\n        let def = getInjectorDef(defOrWrappedDef);\n        // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\n        /** @type {?} */\n        const ngModule = (def == null) && ((/** @type {?} */ (defOrWrappedDef))).ngModule || undefined;\n        // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,\n        // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\n        // is the `ngModule`.\n        /** @type {?} */\n        const defType = (ngModule === undefined) ? ((/** @type {?} */ (defOrWrappedDef))) : ngModule;\n        // Check for circular dependencies.\n        if (ngDevMode && parents.indexOf(defType) !== -1) {\n            /** @type {?} */\n            const defName = stringify(defType);\n            throw new Error(`Circular dependency in DI detected for type ${defName}. Dependency path: ${parents.map(defType => stringify(defType)).join(' > ')} > ${defName}.`);\n        }\n        // Check for multiple imports of the same module\n        /** @type {?} */\n        const isDuplicate = dedupStack.indexOf(defType) !== -1;\n        // If defOrWrappedType was an InjectorDefTypeWithProviders, then .providers may hold some\n        // extra providers.\n        /** @type {?} */\n        const providers = (ngModule !== undefined) && ((/** @type {?} */ (defOrWrappedDef))).providers ||\n            EMPTY_ARRAY$1;\n        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n        // `InjectorDef` is on its `ngModule`.\n        if (ngModule !== undefined) {\n            def = getInjectorDef(ngModule);\n        }\n        // If no definition was found, it might be from exports. Remove it.\n        if (def == null) {\n            return;\n        }\n        // Track the InjectorType and add a provider for it.\n        this.injectorDefTypes.add(defType);\n        this.records.set(defType, makeRecord(def.factory, NOT_YET));\n        // Add providers in the same way that @NgModule resolution did:\n        // First, include providers from any imports.\n        if (def.imports != null && !isDuplicate) {\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\n            // up deeply importing itself, this can be detected.\n            ngDevMode && parents.push(defType);\n            // Add it to the set of dedups. This way we can detect multiple imports of the same module\n            dedupStack.push(defType);\n            try {\n                deepForEach(def.imports, imported => this.processInjectorType(imported, parents, dedupStack));\n            }\n            finally {\n                // Remove it from the parents set when finished.\n                ngDevMode && parents.pop();\n            }\n        }\n        // Next, include providers listed on the definition itself.\n        /** @type {?} */\n        const defProviders = def.providers;\n        if (defProviders != null && !isDuplicate) {\n            /** @type {?} */\n            const injectorType = (/** @type {?} */ (defOrWrappedDef));\n            deepForEach(defProviders, provider => this.processProvider(provider, injectorType, defProviders));\n        }\n        // Finally, include providers from an InjectorDefTypeWithProviders if there was one.\n        /** @type {?} */\n        const ngModuleType = ((/** @type {?} */ (defOrWrappedDef))).ngModule;\n        deepForEach(providers, provider => this.processProvider(provider, ngModuleType, providers));\n    }\n    /**\n     * Process a `SingleProvider` and add it.\n     * @private\n     * @param {?} provider\n     * @param {?} ngModuleType\n     * @param {?} providers\n     * @return {?}\n     */\n    processProvider(provider, ngModuleType, providers) {\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n        // property.\n        provider = resolveForwardRef(provider);\n        /** @type {?} */\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n        // Construct a `Record` for the provider.\n        /** @type {?} */\n        const record = providerToRecord(provider, ngModuleType, providers);\n        if (!isTypeProvider(provider) && provider.multi === true) {\n            // If the provider indicates that it's a multi-provider, process it specially.\n            // First check whether it's been defined already.\n            /** @type {?} */\n            let multiRecord = this.records.get(token);\n            if (multiRecord) {\n                // It has. Throw a nice error if\n                if (multiRecord.multi === undefined) {\n                    throw new Error(`Mixed multi-provider for ${token}.`);\n                }\n            }\n            else {\n                multiRecord = makeRecord(undefined, NOT_YET, true);\n                multiRecord.factory = () => injectArgs((/** @type {?} */ ((/** @type {?} */ (multiRecord)).multi)));\n                this.records.set(token, multiRecord);\n            }\n            token = provider;\n            (/** @type {?} */ (multiRecord.multi)).push(provider);\n        }\n        else {\n            /** @type {?} */\n            const existing = this.records.get(token);\n            if (existing && existing.multi !== undefined) {\n                throw new Error(`Mixed multi-provider for ${stringify(token)}`);\n            }\n        }\n        this.records.set(token, record);\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} token\n     * @param {?} record\n     * @return {?}\n     */\n    hydrate(token, record) {\n        if (record.value === CIRCULAR$1) {\n            throw new Error(`Cannot instantiate cyclic dependency! ${stringify(token)}`);\n        }\n        else if (record.value === NOT_YET) {\n            record.value = CIRCULAR$1;\n            record.value = (/** @type {?} */ (record.factory))();\n        }\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n            this.onDestroy.add(record.value);\n        }\n        return (/** @type {?} */ (record.value));\n    }\n    /**\n     * @private\n     * @param {?} def\n     * @return {?}\n     */\n    injectableDefInScope(def) {\n        if (!def.providedIn) {\n            return false;\n        }\n        else if (typeof def.providedIn === 'string') {\n            return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\n        }\n        else {\n            return this.injectorDefTypes.has(def.providedIn);\n        }\n    }\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction injectableDefOrInjectorDefFactory(token) {\n    /** @type {?} */\n    const injectableDef = getInjectableDef((/** @type {?} */ (token)));\n    if (injectableDef === null) {\n        /** @type {?} */\n        const injectorDef = getInjectorDef((/** @type {?} */ (token)));\n        if (injectorDef !== null) {\n            return injectorDef.factory;\n        }\n        else if (token instanceof InjectionToken) {\n            throw new Error(`Token ${stringify(token)} is missing an ngInjectableDef definition.`);\n        }\n        else if (token instanceof Function) {\n            /** @type {?} */\n            const paramLength = token.length;\n            if (paramLength > 0) {\n                /** @type {?} */\n                const args = new Array(paramLength).fill('?');\n                throw new Error(`Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n            }\n            return () => new ((/** @type {?} */ (token)))();\n        }\n        throw new Error('unreachable');\n    }\n    return injectableDef.factory;\n}\n/**\n * @param {?} provider\n * @param {?} ngModuleType\n * @param {?} providers\n * @return {?}\n */\nfunction providerToRecord(provider, ngModuleType, providers) {\n    /** @type {?} */\n    let factory = providerToFactory(provider, ngModuleType, providers);\n    if (isValueProvider(provider)) {\n        return makeRecord(undefined, provider.useValue);\n    }\n    else {\n        return makeRecord(factory, NOT_YET);\n    }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param {?} provider provider to convert to factory\n * @param {?=} ngModuleType\n * @param {?=} providers\n * @return {?}\n */\nfunction providerToFactory(provider, ngModuleType, providers) {\n    /** @type {?} */\n    let factory = undefined;\n    if (isTypeProvider(provider)) {\n        return injectableDefOrInjectorDefFactory(resolveForwardRef(provider));\n    }\n    else {\n        if (isValueProvider(provider)) {\n            factory = () => resolveForwardRef(provider.useValue);\n        }\n        else if (isExistingProvider(provider)) {\n            factory = () => inject(resolveForwardRef(provider.useExisting));\n        }\n        else if (isFactoryProvider(provider)) {\n            factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n        }\n        else {\n            /** @type {?} */\n            const classRef = resolveForwardRef(provider &&\n                (((/** @type {?} */ (provider))).useClass || provider.provide));\n            if (!classRef) {\n                /** @type {?} */\n                let ngModuleDetail = '';\n                if (ngModuleType && providers) {\n                    /** @type {?} */\n                    const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n                    ngModuleDetail =\n                        ` - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`;\n                }\n                throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}'` + ngModuleDetail);\n            }\n            if (hasDeps(provider)) {\n                factory = () => new (classRef)(...injectArgs(provider.deps));\n            }\n            else {\n                return injectableDefOrInjectorDefFactory(classRef);\n            }\n        }\n    }\n    return factory;\n}\n/**\n * @template T\n * @param {?} factory\n * @param {?} value\n * @param {?=} multi\n * @return {?}\n */\nfunction makeRecord(factory, value, multi = false) {\n    return {\n        factory: factory,\n        value: value,\n        multi: multi ? [] : undefined,\n    };\n}\n/**\n * @template T\n * @param {?} input\n * @param {?} fn\n * @return {?}\n */\nfunction deepForEach(input, fn) {\n    input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isValueProvider(value) {\n    return value && typeof value == 'object' && USE_VALUE in value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isExistingProvider(value) {\n    return !!(value && ((/** @type {?} */ (value))).useExisting);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFactoryProvider(value) {\n    return !!(value && ((/** @type {?} */ (value))).useFactory);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isTypeProvider(value) {\n    return typeof value === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasDeps(value) {\n    return !!((/** @type {?} */ (value))).deps;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasOnDestroy(value) {\n    return typeof value === 'object' && value != null && ((/** @type {?} */ (value))).ngOnDestroy &&\n        typeof ((/** @type {?} */ (value))).ngOnDestroy === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction couldBeInjectableType(value) {\n    return (typeof value === 'function') ||\n        (typeof value === 'object' && value instanceof InjectionToken);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @template T\n * @param {?} def the directive definition\n * @param {?} providers\n * @param {?} viewProviders\n * @return {?}\n */\nfunction providersResolver(def, providers, viewProviders) {\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const tView = lView[TVIEW];\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        const isComponent$$1 = isComponentDef(def);\n        // The list of view providers is processed first, and the flags are updated\n        resolveProvider$1(viewProviders, tView.data, tView.blueprint, isComponent$$1, true);\n        // Then, the list of providers is processed, and the flags are updated\n        resolveProvider$1(providers, tView.data, tView.blueprint, isComponent$$1, false);\n    }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n * @param {?} provider\n * @param {?} tInjectables\n * @param {?} lInjectablesBlueprint\n * @param {?} isComponent\n * @param {?} isViewProvider\n * @return {?}\n */\nfunction resolveProvider$1(provider, tInjectables, lInjectablesBlueprint, isComponent$$1, isViewProvider) {\n    provider = resolveForwardRef(provider);\n    if (Array.isArray(provider)) {\n        // Recursively call `resolveProvider`\n        // Recursion is OK in this case because this code will not be in hot-path once we implement\n        // cloning of the initial state.\n        for (let i = 0; i < provider.length; i++) {\n            resolveProvider$1(provider[i], tInjectables, lInjectablesBlueprint, isComponent$$1, isViewProvider);\n        }\n    }\n    else {\n        /** @type {?} */\n        const lView = getLView();\n        /** @type {?} */\n        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n        /** @type {?} */\n        let providerFactory = providerToFactory(provider);\n        /** @type {?} */\n        const tNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        const beginIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n        /** @type {?} */\n        const endIndex = tNode.directiveStart;\n        /** @type {?} */\n        const cptViewProvidersCount = tNode.providerIndexes >> 16 /* CptViewProvidersCountShift */;\n        if (isTypeProvider(provider) || !provider.multi) {\n            // Single provider case: the factory is created and pushed immediately\n            /** @type {?} */\n            const factory = new NodeInjectorFactory(providerFactory, isViewProvider, directiveInject);\n            /** @type {?} */\n            const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n            if (existingFactoryIndex == -1) {\n                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView), lView, token);\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                lInjectablesBlueprint[existingFactoryIndex] = factory;\n                lView[existingFactoryIndex] = factory;\n            }\n        }\n        else {\n            // Multi provider case:\n            // We create a multi factory which is going to aggregate all the values.\n            // Since the output of such a factory depends on content or view injection,\n            // we create two of them, which are linked together.\n            //\n            // The first one (for view providers) is always in the first block of the injectables array,\n            // and the second one (for providers) is always in the second block.\n            // This is important because view providers have higher priority. When a multi token\n            // is being looked up, the view providers should be found first.\n            // Note that it is not possible to have a multi factory in the third block (directive block).\n            //\n            // The algorithm to process multi providers is as follows:\n            // 1) If the multi provider comes from the `viewProviders` of the component:\n            //   a) If the special view providers factory doesn't exist, it is created and pushed.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            // 2) If the multi provider comes from the `providers` of the component or of another\n            // directive:\n            //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n            //      It is also linked to the multi factory for view providers, if it exists.\n            //   b) Else, the multi provider is added to the existing multi factory.\n            /** @type {?} */\n            const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n            /** @type {?} */\n            const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n            /** @type {?} */\n            const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingProvidersFactoryIndex];\n            /** @type {?} */\n            const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n            if (isViewProvider && !doesViewProvidersFactoryExist ||\n                !isViewProvider && !doesProvidersFactoryExist) {\n                // Cases 1.a and 2.a\n                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView), lView, token);\n                /** @type {?} */\n                const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent$$1, providerFactory);\n                if (!isViewProvider && doesViewProvidersFactoryExist) {\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n                }\n                tInjectables.push(token);\n                tNode.directiveStart++;\n                tNode.directiveEnd++;\n                if (isViewProvider) {\n                    tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                // Cases 1.b and 2.b\n                multiFactoryAdd((/** @type {?} */ (lInjectablesBlueprint))[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent$$1);\n            }\n            if (!isViewProvider && isComponent$$1 && doesViewProvidersFactoryExist) {\n                (/** @type {?} */ (lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders))++;\n            }\n        }\n    }\n}\n/**\n * Add a factory in a multi factory.\n * @param {?} multiFactory\n * @param {?} factory\n * @param {?} isComponentProvider\n * @return {?}\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n    (/** @type {?} */ (multiFactory.multi)).push(factory);\n    if (isComponentProvider) {\n        (/** @type {?} */ (multiFactory.componentProviders))++;\n    }\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n * @param {?} item\n * @param {?} arr\n * @param {?} begin\n * @param {?} end\n * @return {?}\n */\nfunction indexOf(item, arr, begin, end) {\n    for (let i = begin; i < end; i++) {\n        if (arr[i] === item)\n            return i;\n    }\n    return -1;\n}\n/**\n * Use this with `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n    return multiResolve((/** @type {?} */ (this.multi)), []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lData, tNode) {\n    /** @type {?} */\n    const factories = (/** @type {?} */ (this.multi));\n    /** @type {?} */\n    let result;\n    if (this.providerFactory) {\n        /** @type {?} */\n        const componentCount = (/** @type {?} */ (this.providerFactory.componentProviders));\n        /** @type {?} */\n        const multiProviders = getNodeInjectable(tData, lData, (/** @type {?} */ ((/** @type {?} */ (this.providerFactory)).index)), tNode);\n        // Copy the section of the array which contains `multi` `providers` from the component\n        result = multiProviders.slice(0, componentCount);\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n        // Copy the section of the array which contains `multi` `providers` from other directives\n        for (let i = componentCount; i < multiProviders.length; i++) {\n            result.push(multiProviders[i]);\n        }\n    }\n    else {\n        result = [];\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n    }\n    return result;\n}\n/**\n * Maps an array of factories into an array of values.\n * @param {?} factories\n * @param {?} result\n * @return {?}\n */\nfunction multiResolve(factories, result) {\n    for (let i = 0; i < factories.length; i++) {\n        /** @type {?} */\n        const factory = (/** @type {?} */ ((/** @type {?} */ (factories[i]))));\n        result.push(factory());\n    }\n    return result;\n}\n/**\n * Creates a multi factory.\n * @param {?} factoryFn\n * @param {?} index\n * @param {?} isViewProvider\n * @param {?} isComponent\n * @param {?} f\n * @return {?}\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent$$1, f) {\n    /** @type {?} */\n    const factory = new NodeInjectorFactory(factoryFn, isViewProvider, directiveInject);\n    factory.multi = [];\n    factory.index = index;\n    factory.componentProviders = 0;\n    multiFactoryAdd(factory, f, isComponent$$1 && !isViewProvider);\n    return factory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ngComponentDef = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    consts: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        text(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        textBinding(0, bind(ctx.greeter.greet()));\n *      }\n *    },\n *    features: [ProvidersFeature([GreeterDE])]\n *  });\n * }\n *\n * @template T\n * @param {?} providers\n * @param {?=} viewProviders\n * @return {?}\n */\nfunction ProvidersFeature(providers, viewProviders = []) {\n    return (definition) => {\n        definition.providersResolver = (def) => providersResolver(def, providers, viewProviders);\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass ComponentRef {\n}\n/**\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass ComponentFactory {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} component\n * @return {?}\n */\nfunction noComponentFactoryError(component) {\n    /** @type {?} */\n    const error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n    ((/** @type {?} */ (error)))[ERROR_COMPONENT] = component;\n    return error;\n}\n/** @type {?} */\nconst ERROR_COMPONENT = 'ngComponent';\nclass _NullComponentFactoryResolver {\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    resolveComponentFactory(component) {\n        throw noComponentFactoryError(component);\n    }\n}\n/**\n * \\@publicApi\n * @abstract\n */\nclass ComponentFactoryResolver {\n}\nComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\nclass CodegenComponentFactoryResolver {\n    /**\n     * @param {?} factories\n     * @param {?} _parent\n     * @param {?} _ngModule\n     */\n    constructor(factories, _parent, _ngModule) {\n        this._parent = _parent;\n        this._ngModule = _ngModule;\n        this._factories = new Map();\n        for (let i = 0; i < factories.length; i++) {\n            /** @type {?} */\n            const factory = factories[i];\n            this._factories.set(factory.componentType, factory);\n        }\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    resolveComponentFactory(component) {\n        /** @type {?} */\n        let factory = this._factories.get(component);\n        if (!factory && this._parent) {\n            factory = this._parent.resolveComponentFactory(component);\n        }\n        if (!factory) {\n            throw noComponentFactoryError(component);\n        }\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\n    }\n}\n/**\n * @template C\n */\nclass ComponentFactoryBoundToModule extends ComponentFactory {\n    /**\n     * @param {?} factory\n     * @param {?} ngModule\n     */\n    constructor(factory, ngModule) {\n        super();\n        this.factory = factory;\n        this.ngModule = ngModule;\n        this.selector = factory.selector;\n        this.componentType = factory.componentType;\n        this.ngContentSelectors = factory.ngContentSelectors;\n        this.inputs = factory.inputs;\n        this.outputs = factory.outputs;\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\n *\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n * NgModule Instance.\n *\n * \\@publicApi\n * @abstract\n * @template T\n */\nclass NgModuleRef {\n}\n/**\n * \\@publicApi\n * @abstract\n * @template T\n */\nclass NgModuleFactory {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass ViewRef {\n    /**\n     * @param {?} _lView\n     * @param {?} _context\n     * @param {?} _componentIndex\n     */\n    constructor(_lView, _context, _componentIndex) {\n        this._context = _context;\n        this._componentIndex = _componentIndex;\n        this._appRef = null;\n        this._viewContainerRef = null;\n        /**\n         * \\@internal\n         */\n        this._tViewNode = null;\n        this._lView = _lView;\n    }\n    /**\n     * @return {?}\n     */\n    get rootNodes() {\n        if (this._lView[HOST] == null) {\n            /** @type {?} */\n            const tView = (/** @type {?} */ (this._lView[HOST_NODE]));\n            return collectNativeNodes(this._lView, tView, []);\n        }\n        return [];\n    }\n    /**\n     * @return {?}\n     */\n    get context() { return this._context ? this._context : this._lookUpContext(); }\n    /**\n     * @return {?}\n     */\n    get destroyed() {\n        return (this._lView[FLAGS] & 64 /* Destroyed */) === 64 /* Destroyed */;\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            /** @type {?} */\n            const index = this._viewContainerRef.indexOf(this);\n            if (index > -1) {\n                this._viewContainerRef.detach(index);\n            }\n            this._viewContainerRef = null;\n        }\n        destroyLView(this._lView);\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { storeCleanupFn(this._lView, callback); }\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    markForCheck() { markViewDirty(this._lView); }\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *  /\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    detach() { this._lView[FLAGS] &= ~16 /* Attached */; }\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *  /\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    reattach() { this._lView[FLAGS] |= 16 /* Attached */; }\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    detectChanges() { detectChangesInternal(this._lView, this.context); }\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    checkNoChanges() { checkNoChanges(this.context); }\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    attachToViewContainerRef(vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    }\n    /**\n     * @return {?}\n     */\n    detachFromAppRef() { this._appRef = null; }\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    attachToAppRef(appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _lookUpContext() {\n        return this._context = (/** @type {?} */ ((/** @type {?} */ (this._lView[PARENT]))[this._componentIndex]));\n    }\n}\n/**\n * \\@internal\n * @template T\n */\nclass RootViewRef extends ViewRef {\n    /**\n     * @param {?} _view\n     */\n    constructor(_view) {\n        super(_view, null, -1);\n        this._view = _view;\n    }\n    /**\n     * @return {?}\n     */\n    detectChanges() { detectChangesInRootView(this._view); }\n    /**\n     * @return {?}\n     */\n    checkNoChanges() { checkNoChangesInRootView(this._view); }\n    /**\n     * @return {?}\n     */\n    get context() { return (/** @type {?} */ (null)); }\n}\n/**\n * @param {?} lView\n * @param {?} parentTNode\n * @param {?} result\n * @return {?}\n */\nfunction collectNativeNodes(lView, parentTNode, result) {\n    /** @type {?} */\n    let tNodeChild = parentTNode.child;\n    while (tNodeChild) {\n        result.push(getNativeByTNode(tNodeChild, lView));\n        if (tNodeChild.type === 4 /* ElementContainer */) {\n            collectNativeNodes(lView, tNodeChild, result);\n        }\n        tNodeChild = tNodeChild.next;\n    }\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @param {?} ElementRefToken\n * @return {?} The ElementRef instance to use\n */\nfunction injectElementRef(ElementRefToken) {\n    return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/** @type {?} */\nlet R3ElementRef;\n/**\n * Creates an ElementRef given a node.\n *\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} tNode The node for which you'd like an ElementRef\n * @param {?} view The view to which the node belongs\n * @return {?} The ElementRef instance to use\n */\nfunction createElementRef(ElementRefToken, tNode, view) {\n    if (!R3ElementRef) {\n        // TODO: Fix class name, should be ElementRef, but there appears to be a rollup bug\n        R3ElementRef = class ElementRef_ extends ElementRefToken {\n        };\n    }\n    return new R3ElementRef(getNativeByTNode(tNode, view));\n}\n/** @type {?} */\nlet R3TemplateRef;\n/**\n * Creates a TemplateRef given a node.\n *\n * @template T\n * @param {?} TemplateRefToken\n * @param {?} ElementRefToken\n * @return {?} The TemplateRef instance to use\n */\nfunction injectTemplateRef(TemplateRefToken, ElementRefToken) {\n    return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @template T\n * @param {?} TemplateRefToken The TemplateRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a TemplateRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The TemplateRef instance to use\n */\nfunction createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3TemplateRef) {\n        // TODO: Fix class name, should be TemplateRef, but there appears to be a rollup bug\n        R3TemplateRef = class TemplateRef_ extends TemplateRefToken {\n            /**\n             * @param {?} _declarationParentView\n             * @param {?} elementRef\n             * @param {?} _tView\n             * @param {?} _renderer\n             * @param {?} _queries\n             * @param {?} _injectorIndex\n             */\n            constructor(_declarationParentView, elementRef, _tView, _renderer, _queries, _injectorIndex) {\n                super();\n                this._declarationParentView = _declarationParentView;\n                this.elementRef = elementRef;\n                this._tView = _tView;\n                this._renderer = _renderer;\n                this._queries = _queries;\n                this._injectorIndex = _injectorIndex;\n            }\n            /**\n             * @param {?} context\n             * @param {?=} container\n             * @param {?=} hostTNode\n             * @param {?=} hostView\n             * @param {?=} index\n             * @return {?}\n             */\n            createEmbeddedView(context, container$$1, hostTNode, hostView, index) {\n                /** @type {?} */\n                const lView = createEmbeddedViewAndNode(this._tView, context, this._declarationParentView, this._renderer, this._queries, this._injectorIndex);\n                if (container$$1) {\n                    insertView(lView, container$$1, (/** @type {?} */ (hostView)), (/** @type {?} */ (index)), (/** @type {?} */ (hostTNode)).index);\n                }\n                renderEmbeddedTemplate(lView, this._tView, context);\n                /** @type {?} */\n                const viewRef = new ViewRef(lView, context, -1);\n                viewRef._tViewNode = (/** @type {?} */ (lView[HOST_NODE]));\n                return viewRef;\n            }\n        };\n    }\n    if (hostTNode.type === 0 /* Container */) {\n        /** @type {?} */\n        const hostContainer = hostView[hostTNode.index];\n        ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n        return new R3TemplateRef(hostView, createElementRef(ElementRefToken, hostTNode, hostView), (/** @type {?} */ (hostTNode.tViews)), getLView()[RENDERER], hostContainer[QUERIES], hostTNode.injectorIndex);\n    }\n    else {\n        return null;\n    }\n}\n/** @type {?} */\nlet R3ViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @param {?} ViewContainerRefToken\n * @param {?} ElementRefToken\n * @return {?} The ViewContainerRef instance to use\n */\nfunction injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {\n    /** @type {?} */\n    const previousTNode = (/** @type {?} */ (getPreviousOrParentTNode()));\n    return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param {?} ViewContainerRefToken The ViewContainerRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a ViewContainerRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The ViewContainerRef instance to use\n */\nfunction createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3ViewContainerRef) {\n        // TODO: Fix class name, should be ViewContainerRef, but there appears to be a rollup bug\n        R3ViewContainerRef = class ViewContainerRef_ extends ViewContainerRefToken {\n            /**\n             * @param {?} _lContainer\n             * @param {?} _hostTNode\n             * @param {?} _hostView\n             */\n            constructor(_lContainer, _hostTNode, _hostView) {\n                super();\n                this._lContainer = _lContainer;\n                this._hostTNode = _hostTNode;\n                this._hostView = _hostView;\n                this._viewRefs = [];\n            }\n            /**\n             * @return {?}\n             */\n            get element() {\n                return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n            }\n            /**\n             * @return {?}\n             */\n            get injector() { return new NodeInjector(this._hostTNode, this._hostView); }\n            /**\n             * @deprecated No replacement\n             * @return {?}\n             */\n            get parentInjector() {\n                /** @type {?} */\n                const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n                /** @type {?} */\n                const parentView = getParentInjectorView(parentLocation, this._hostView);\n                /** @type {?} */\n                const parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);\n                return !hasParentInjector(parentLocation) || parentTNode == null ?\n                    new NodeInjector(null, this._hostView) :\n                    new NodeInjector(parentTNode, parentView);\n            }\n            /**\n             * @return {?}\n             */\n            clear() {\n                while (this._lContainer[VIEWS].length) {\n                    this.remove(0);\n                }\n            }\n            /**\n             * @param {?} index\n             * @return {?}\n             */\n            get(index) { return this._viewRefs[index] || null; }\n            /**\n             * @return {?}\n             */\n            get length() { return this._lContainer[VIEWS].length; }\n            /**\n             * @template C\n             * @param {?} templateRef\n             * @param {?=} context\n             * @param {?=} index\n             * @return {?}\n             */\n            createEmbeddedView(templateRef, context, index) {\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index);\n                /** @type {?} */\n                const viewRef = ((/** @type {?} */ (templateRef)))\n                    .createEmbeddedView(context || (/** @type {?} */ ({})), this._lContainer, this._hostTNode, this._hostView, adjustedIdx);\n                ((/** @type {?} */ (viewRef))).attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            }\n            /**\n             * @template C\n             * @param {?} componentFactory\n             * @param {?=} index\n             * @param {?=} injector\n             * @param {?=} projectableNodes\n             * @param {?=} ngModuleRef\n             * @return {?}\n             */\n            createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {\n                /** @type {?} */\n                const contextInjector = injector || this.parentInjector;\n                if (!ngModuleRef && ((/** @type {?} */ (componentFactory))).ngModule == null && contextInjector) {\n                    ngModuleRef = contextInjector.get(NgModuleRef, null);\n                }\n                /** @type {?} */\n                const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n                this.insert(componentRef.hostView, index);\n                return componentRef;\n            }\n            /**\n             * @param {?} viewRef\n             * @param {?=} index\n             * @return {?}\n             */\n            insert(viewRef, index) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n                }\n                /** @type {?} */\n                const lView = (/** @type {?} */ (((/** @type {?} */ (viewRef)))._lView));\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index);\n                insertView(lView, this._lContainer, this._hostView, adjustedIdx, this._hostTNode.index);\n                /** @type {?} */\n                const beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer[VIEWS], this._lContainer[NATIVE]);\n                addRemoveViewFromContainer(lView, true, beforeNode);\n                ((/** @type {?} */ (viewRef))).attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            }\n            /**\n             * @param {?} viewRef\n             * @param {?} newIndex\n             * @return {?}\n             */\n            move(viewRef, newIndex) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot move a destroyed View in a ViewContainer!');\n                }\n                /** @type {?} */\n                const index = this.indexOf(viewRef);\n                this.detach(index);\n                this.insert(viewRef, this._adjustIndex(newIndex));\n                return viewRef;\n            }\n            /**\n             * @param {?} viewRef\n             * @return {?}\n             */\n            indexOf(viewRef) { return this._viewRefs.indexOf(viewRef); }\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            remove(index) {\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index, -1);\n                removeView(this._lContainer, this._hostTNode, adjustedIdx);\n                this._viewRefs.splice(adjustedIdx, 1);\n            }\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            detach(index) {\n                /** @type {?} */\n                const adjustedIdx = this._adjustIndex(index, -1);\n                /** @type {?} */\n                const view = detachView(this._lContainer, adjustedIdx, !!this._hostTNode.detached);\n                /** @type {?} */\n                const wasDetached = this._viewRefs.splice(adjustedIdx, 1)[0] != null;\n                return wasDetached ? new ViewRef(view, view[CONTEXT], view[CONTAINER_INDEX]) : null;\n            }\n            /**\n             * @private\n             * @param {?=} index\n             * @param {?=} shift\n             * @return {?}\n             */\n            _adjustIndex(index, shift = 0) {\n                if (index == null) {\n                    return this._lContainer[VIEWS].length + shift;\n                }\n                if (ngDevMode) {\n                    assertGreaterThan(index, -1, 'index must be positive');\n                    // +1 because it's legal to insert at the end.\n                    assertLessThan(index, this._lContainer[VIEWS].length + 1 + shift, 'index');\n                }\n                return index;\n            }\n        };\n    }\n    ngDevMode && assertNodeOfPossibleTypes(hostTNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    /** @type {?} */\n    let lContainer;\n    /** @type {?} */\n    const slotValue = hostView[hostTNode.index];\n    if (isLContainer(slotValue)) {\n        // If the host is a container, we don't need to create a new LContainer\n        lContainer = slotValue;\n        lContainer[ACTIVE_INDEX] = -1;\n    }\n    else {\n        /** @type {?} */\n        const commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n        ngDevMode && ngDevMode.rendererCreateComment++;\n        // A container can be created on the root (topmost / bootstrapped) component and in this case we\n        // can't use LTree to insert container's marker node (both parent of a comment node and the\n        // commend node itself is located outside of elements hold by LTree). In this specific case we\n        // use low-level DOM manipulation to insert container's marker (comment) node.\n        if (isRootView(hostView)) {\n            /** @type {?} */\n            const renderer = hostView[RENDERER];\n            /** @type {?} */\n            const hostNative = (/** @type {?} */ (getNativeByTNode(hostTNode, hostView)));\n            /** @type {?} */\n            const parentOfHostNative = nativeParentNode(renderer, hostNative);\n            nativeInsertBefore(renderer, (/** @type {?} */ (parentOfHostNative)), commentNode, nativeNextSibling(renderer, hostNative));\n        }\n        else {\n            appendChild(commentNode, hostTNode, hostView);\n        }\n        hostView[hostTNode.index] = lContainer =\n            createLContainer(slotValue, hostTNode, hostView, commentNode, true);\n        addToViewTree(hostView, (/** @type {?} */ (hostTNode.index)), lContainer);\n    }\n    return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n}\n/**\n * Returns a ChangeDetectorRef (a.k.a. a ViewRef)\n * @return {?}\n */\nfunction injectChangeDetectorRef() {\n    return createViewRef(getPreviousOrParentTNode(), getLView(), null);\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param {?} hostTNode The node that is requesting a ChangeDetectorRef\n * @param {?} hostView The view to which the node belongs\n * @param {?} context The context for this change detector ref\n * @return {?} The ChangeDetectorRef to use\n */\nfunction createViewRef(hostTNode, hostView, context) {\n    if (isComponent(hostTNode)) {\n        /** @type {?} */\n        const componentIndex = hostTNode.directiveStart;\n        /** @type {?} */\n        const componentView = getComponentViewByIndex(hostTNode.index, hostView);\n        return new ViewRef(componentView, context, componentIndex);\n    }\n    else if (hostTNode.type === 3 /* Element */) {\n        /** @type {?} */\n        const hostComponentView = findComponentView(hostView);\n        return new ViewRef(hostComponentView, hostComponentView[CONTEXT], -1);\n    }\n    return (/** @type {?} */ (null));\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getOrCreateRenderer2(view) {\n    /** @type {?} */\n    const renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer)) {\n        return (/** @type {?} */ (renderer));\n    }\n    else {\n        throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n    }\n}\n/**\n * Returns a Renderer2 (or throws when application was bootstrapped with Renderer3)\n * @return {?}\n */\nfunction injectRenderer2() {\n    return getOrCreateRenderer2(getLView());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * \\@publicApi\n * @template T\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nclass ElementRef {\n    /**\n     * @param {?} nativeElement\n     */\n    constructor(nativeElement) { this.nativeElement = nativeElement; }\n}\n/**\n * \\@internal\n */\nElementRef.__NG_ELEMENT_ID__ = () => SWITCH_ELEMENT_REF_FACTORY(ElementRef);\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = injectElementRef;\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * \\@publicApi\n */\nclass RenderComponentType {\n    /**\n     * @param {?} id\n     * @param {?} templateUrl\n     * @param {?} slotCount\n     * @param {?} encapsulation\n     * @param {?} styles\n     * @param {?} animations\n     */\n    constructor(id, templateUrl, slotCount, encapsulation, styles, animations) {\n        this.id = id;\n        this.templateUrl = templateUrl;\n        this.slotCount = slotCount;\n        this.encapsulation = encapsulation;\n        this.styles = styles;\n        this.animations = animations;\n    }\n}\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n * @abstract\n */\nclass RenderDebugInfo {\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * \\@publicApi\n * @abstract\n */\nclass Renderer {\n}\n/** @type {?} */\nconst Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * \\@publicApi\n * @abstract\n */\nclass RootRenderer {\n}\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@publicApi\n * @abstract\n */\nclass RendererFactory2 {\n}\n/** @enum {number} */\nconst RendererStyleFlags2 = {\n    /**\n     * Marks a style as important.\n     */\n    Important: 1,\n    /**\n     * Marks a style as using dash case naming (this-is-dash-case).\n     */\n    DashCase: 2,\n};\nRendererStyleFlags2[RendererStyleFlags2.Important] = 'Important';\nRendererStyleFlags2[RendererStyleFlags2.DashCase] = 'DashCase';\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * \\@publicApi\n * @abstract\n */\nclass Renderer2 {\n}\n/**\n * \\@internal\n */\nRenderer2.__NG_ELEMENT_ID__ = () => SWITCH_RENDERER2_FACTORY();\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY__POST_R3__ = injectRenderer2;\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst SecurityContext = {\n    NONE: 0,\n    HTML: 1,\n    STYLE: 2,\n    SCRIPT: 3,\n    URL: 4,\n    RESOURCE_URL: 5,\n};\nSecurityContext[SecurityContext.NONE] = 'NONE';\nSecurityContext[SecurityContext.HTML] = 'HTML';\nSecurityContext[SecurityContext.STYLE] = 'STYLE';\nSecurityContext[SecurityContext.SCRIPT] = 'SCRIPT';\nSecurityContext[SecurityContext.URL] = 'URL';\nSecurityContext[SecurityContext.RESOURCE_URL] = 'RESOURCE_URL';\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * \\@publicApi\n * @abstract\n */\nclass Sanitizer {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description Represents the version of Angular\n *\n * \\@publicApi\n */\nclass Version {\n    /**\n     * @param {?} full\n     */\n    constructor(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('7.2.16');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ComponentFactoryResolver$1 extends ComponentFactoryResolver {\n    /**\n     * @param {?=} ngModule The NgModuleRef to which all resolved factories are bound.\n     */\n    constructor(ngModule) {\n        super();\n        this.ngModule = ngModule;\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    resolveComponentFactory(component) {\n        ngDevMode && assertComponentType(component);\n        /** @type {?} */\n        const componentDef = (/** @type {?} */ (getComponentDef(component)));\n        return new ComponentFactory$1(componentDef, this.ngModule);\n    }\n}\n/**\n * @param {?} map\n * @return {?}\n */\nfunction toRefArray(map) {\n    /** @type {?} */\n    const array = [];\n    for (let nonMinified in map) {\n        if (map.hasOwnProperty(nonMinified)) {\n            /** @type {?} */\n            const minified = map[nonMinified];\n            array.push({ propName: minified, templateName: nonMinified });\n        }\n    }\n    return array;\n}\n/**\n * Default {\\@link RootContext} for all components rendered with {\\@link renderComponent}.\n * @type {?}\n */\nconst ROOT_CONTEXT = new InjectionToken('ROOT_CONTEXT_TOKEN', { providedIn: 'root', factory: () => createRootContext(inject(SCHEDULER)) });\n/**\n * A change detection scheduler token for {\\@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {\\@link ROOT_CONTEXT} token.\n * @type {?}\n */\nconst SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n    providedIn: 'root',\n    factory: () => defaultScheduler,\n});\n/** @type {?} */\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n/**\n * @param {?} rootViewInjector\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction createChainedInjector(rootViewInjector, moduleInjector) {\n    return {\n        get: (token, notFoundValue) => {\n            /** @type {?} */\n            const value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n            if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n                notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n                // Return the value from the root element injector when\n                // - it provides it\n                //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                // - the module injector should not be checked\n                //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                return value;\n            }\n            return moduleInjector.get(token, notFoundValue);\n        }\n    };\n}\n/**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nclass ComponentFactory$1 extends ComponentFactory {\n    /**\n     * @param {?} componentDef The component definition.\n     * @param {?=} ngModule The NgModuleRef to which the factory is bound.\n     */\n    constructor(componentDef, ngModule) {\n        super();\n        this.componentDef = componentDef;\n        this.ngModule = ngModule;\n        this.componentType = componentDef.type;\n        this.selector = (/** @type {?} */ (componentDef.selectors[0][0]));\n        this.ngContentSelectors = [];\n    }\n    /**\n     * @return {?}\n     */\n    get inputs() {\n        return toRefArray(this.componentDef.inputs);\n    }\n    /**\n     * @return {?}\n     */\n    get outputs() {\n        return toRefArray(this.componentDef.outputs);\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        /** @type {?} */\n        const isInternalRootView = rootSelectorOrNode === undefined;\n        ngModule = ngModule || this.ngModule;\n        /** @type {?} */\n        const rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n        /** @type {?} */\n        const rendererFactory = (/** @type {?} */ (rootViewInjector.get(RendererFactory2, domRendererFactory3)));\n        /** @type {?} */\n        const sanitizer = rootViewInjector.get(Sanitizer, null);\n        /** @type {?} */\n        const hostRNode = isInternalRootView ?\n            elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) :\n            locateHostElement(rendererFactory, rootSelectorOrNode);\n        /** @type {?} */\n        const rootFlags = this.componentDef.onPush ? 8 /* Dirty */ | 128 /* IsRoot */ :\n            4 /* CheckAlways */ | 128 /* IsRoot */;\n        /** @type {?} */\n        const rootContext = !isInternalRootView ? rootViewInjector.get(ROOT_CONTEXT) : createRootContext();\n        /** @type {?} */\n        const renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n        if (rootSelectorOrNode && hostRNode) {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            isProceduralRenderer(renderer) ?\n                renderer.setAttribute(hostRNode, 'ng-version', VERSION.full) :\n                hostRNode.setAttribute('ng-version', VERSION.full);\n        }\n        // Create the root view. Uses empty TView and ContentTemplate.\n        /** @type {?} */\n        const rootLView = createLView(null, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags, rendererFactory, renderer, sanitizer, rootViewInjector);\n        // rootView is the parent when bootstrapping\n        /** @type {?} */\n        const oldLView = enterView(rootLView, null);\n        /** @type {?} */\n        let component;\n        /** @type {?} */\n        let tElementNode;\n        try {\n            if (rendererFactory.begin)\n                rendererFactory.begin();\n            /** @type {?} */\n            const componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, renderer);\n            tElementNode = (/** @type {?} */ (getTNode(0, rootLView)));\n            // Transform the arrays of native nodes into a structure that can be consumed by the\n            // projection instruction. This is needed to support the reprojection of these nodes.\n            if (projectableNodes) {\n                /** @type {?} */\n                let index = 0;\n                /** @type {?} */\n                const tView = rootLView[TVIEW];\n                /** @type {?} */\n                const projection$$1 = tElementNode.projection = [];\n                for (let i = 0; i < projectableNodes.length; i++) {\n                    /** @type {?} */\n                    const nodeList = projectableNodes[i];\n                    /** @type {?} */\n                    let firstTNode = null;\n                    /** @type {?} */\n                    let previousTNode = null;\n                    for (let j = 0; j < nodeList.length; j++) {\n                        if (tView.firstTemplatePass) {\n                            // For dynamically created components such as ComponentRef, we create a new TView for\n                            // each insert. This is not ideal since we should be sharing the TViews.\n                            // Also the logic here should be shared with `component.ts`'s `renderComponent`\n                            // method.\n                            tView.expandoStartIndex++;\n                            tView.blueprint.splice(++index + HEADER_OFFSET, 0, null);\n                            tView.data.splice(index + HEADER_OFFSET, 0, null);\n                            rootLView.splice(index + HEADER_OFFSET, 0, null);\n                        }\n                        /** @type {?} */\n                        const tNode = createNodeAtIndex(index, 3 /* Element */, (/** @type {?} */ (nodeList[j])), null, null);\n                        previousTNode ? (previousTNode.next = tNode) : (firstTNode = tNode);\n                        previousTNode = tNode;\n                    }\n                    projection$$1.push((/** @type {?} */ (firstTNode)));\n                }\n            }\n            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n            // executed here?\n            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n            component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n            addToViewTree(rootLView, HEADER_OFFSET, componentView);\n            refreshDescendantViews(rootLView);\n        }\n        finally {\n            leaveView(oldLView);\n            if (rendererFactory.end)\n                rendererFactory.end();\n        }\n        /** @type {?} */\n        const componentRef = new ComponentRef$1(this.componentType, component, createElementRef(ElementRef, tElementNode, rootLView), rootLView, tElementNode);\n        if (isInternalRootView) {\n            // The host element of the internal root view is attached to the component's host view node\n            (/** @type {?} */ (componentRef.hostView._tViewNode)).child = tElementNode;\n        }\n        return componentRef;\n    }\n}\n/** @type {?} */\nconst componentFactoryResolver = new ComponentFactoryResolver$1();\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nclass ComponentRef$1 extends ComponentRef {\n    /**\n     * @param {?} componentType\n     * @param {?} instance\n     * @param {?} location\n     * @param {?} _rootLView\n     * @param {?} _tNode\n     */\n    constructor(componentType, instance, location, _rootLView, _tNode) {\n        super();\n        this.location = location;\n        this._rootLView = _rootLView;\n        this._tNode = _tNode;\n        this.destroyCbs = [];\n        this.instance = instance;\n        this.hostView = this.changeDetectorRef = new RootViewRef(_rootLView);\n        this.hostView._tViewNode = createViewNode(-1, _rootLView);\n        this.componentType = componentType;\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return new NodeInjector(this._tNode, this._rootLView); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        (/** @type {?} */ (this.destroyCbs)).forEach(fn => fn());\n        this.destroyCbs = null;\n        this.hostView.destroy();\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        (/** @type {?} */ (this.destroyCbs)).push(callback);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n *\n * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n * please see [BAZEL.md](./docs/BAZEL.md).\n */\n/** @type {?} */\nlet _devMode = true;\n/** @type {?} */\nlet _runModeLocked = false;\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction isDevMode() {\n    _runModeLocked = true;\n    return _devMode;\n}\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * \\@publicApi\n * @return {?}\n */\nfunction enableProdMode() {\n    if (_runModeLocked) {\n        throw new Error('Cannot enable prod mode after platform setup.');\n    }\n    _devMode = false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nclass InertBodyHelper {\n    /**\n     * @param {?} defaultDoc\n     */\n    constructor(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n        this.inertBodyElement = this.inertDocument.body;\n        if (this.inertBodyElement == null) {\n            // usually there should be only one body element in the document, but IE doesn't have any, so\n            // we need to create one.\n            /** @type {?} */\n            const inertHtml = this.inertDocument.createElement('html');\n            this.inertDocument.appendChild(inertHtml);\n            this.inertBodyElement = this.inertDocument.createElement('body');\n            inertHtml.appendChild(this.inertBodyElement);\n        }\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n            // so use the XHR strategy.\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\n            return;\n        }\n        this.inertBodyElement.innerHTML =\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n            // so use the DOMParser strategy, if it is available.\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n            // fall through to the default strategy below.\n            if (isDOMParserAvailable()) {\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                return;\n            }\n        }\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n    }\n    /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @private\n     * @param {?} html\n     * @return {?}\n     */\n    getInertBodyElement_XHR(html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            html = encodeURI(html);\n        }\n        catch (_a) {\n            return null;\n        }\n        /** @type {?} */\n        const xhr = new XMLHttpRequest();\n        xhr.responseType = 'document';\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n        xhr.send(undefined);\n        /** @type {?} */\n        const body = xhr.response.body;\n        body.removeChild((/** @type {?} */ (body.firstChild)));\n        return body;\n    }\n    /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @private\n     * @param {?} html\n     * @return {?}\n     */\n    getInertBodyElement_DOMParser(html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            /** @type {?} */\n            const body = (/** @type {?} */ (new ((/** @type {?} */ (window)))\n                .DOMParser()\n                .parseFromString(html, 'text/html')\n                .body));\n            body.removeChild((/** @type {?} */ (body.firstChild)));\n            return body;\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n    /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @private\n     * @param {?} html\n     * @return {?}\n     */\n    getInertBodyElement_InertDocument(html) {\n        // Prefer using <template> element if supported.\n        /** @type {?} */\n        const templateEl = this.inertDocument.createElement('template');\n        if ('content' in templateEl) {\n            templateEl.innerHTML = html;\n            return templateEl;\n        }\n        this.inertBodyElement.innerHTML = html;\n        // Support: IE 9-11 only\n        // strip custom-namespaced attributes on IE<=11\n        if (((/** @type {?} */ (this.defaultDoc))).documentMode) {\n            this.stripCustomNsAttrs(this.inertBodyElement);\n        }\n        return this.inertBodyElement;\n    }\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @private\n     * @param {?} el\n     * @return {?}\n     */\n    stripCustomNsAttrs(el) {\n        /** @type {?} */\n        const elAttrs = el.attributes;\n        // loop backwards so that we can support removals.\n        for (let i = elAttrs.length - 1; 0 < i; i--) {\n            /** @type {?} */\n            const attrib = elAttrs.item(i);\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (attrib)).name;\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                el.removeAttribute(attrName);\n            }\n        }\n        /** @type {?} */\n        let childNode = (/** @type {?} */ (el.firstChild));\n        while (childNode) {\n            if (childNode.nodeType === Node.ELEMENT_NODE)\n                this.stripCustomNsAttrs((/** @type {?} */ (childNode)));\n            childNode = childNode.nextSibling;\n        }\n    }\n}\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n * @return {?}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!((/** @type {?} */ (window))).DOMParser;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either an allowed protocol (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n * @type {?}\n */\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/**\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n * @type {?}\n */\nconst DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {?} url\n * @return {?}\n */\nfunction _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n        return url;\n    if (isDevMode()) {\n        console.warn(`WARNING: sanitizing unsafe URL value ${url} (see http://g.co/ng/security#xss)`);\n    }\n    return 'unsafe:' + url;\n}\n/**\n * @param {?} srcset\n * @return {?}\n */\nfunction sanitizeSrcset(srcset) {\n    srcset = String(srcset);\n    return srcset.split(',').map((srcset) => _sanitizeUrl(srcset.trim())).join(', ');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags) {\n    /** @type {?} */\n    const res = {};\n    for (const t of tags.split(','))\n        res[t] = true;\n    return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge$1(...sets) {\n    /** @type {?} */\n    const res = {};\n    for (const s of sets) {\n        for (const v in s) {\n            if (s.hasOwnProperty(v))\n                res[v] = true;\n        }\n    }\n    return res;\n}\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\n/** @type {?} */\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\n/** @type {?} */\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\n/** @type {?} */\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\n/** @type {?} */\nconst OPTIONAL_END_TAG_ELEMENTS = merge$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\n/** @type {?} */\nconst BLOCK_ELEMENTS = merge$1(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\n/** @type {?} */\nconst INLINE_ELEMENTS = merge$1(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n/** @type {?} */\nconst VALID_ELEMENTS = merge$1(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\n/** @type {?} */\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n// Attributes that have special href set hence need to be sanitized\n/** @type {?} */\nconst SRCSET_ATTRS = tagSet('srcset');\n/** @type {?} */\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n/** @type {?} */\nconst VALID_ATTRS = merge$1(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\n/** @type {?} */\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n    constructor() {\n        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n        // because characters were re-encoded.\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    sanitizeChildren(el) {\n        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n        // However this code never accesses properties off of `document` before deleting its contents\n        // again, so it shouldn't be vulnerable to DOM clobbering.\n        /** @type {?} */\n        let current = (/** @type {?} */ (el.firstChild));\n        /** @type {?} */\n        let traverseContent = true;\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                traverseContent = this.startElement((/** @type {?} */ (current)));\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars((/** @type {?} */ (current.nodeValue)));\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (traverseContent && current.firstChild) {\n                current = (/** @type {?} */ (current.firstChild));\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement((/** @type {?} */ (current)));\n                }\n                /** @type {?} */\n                let next = this.checkClobberedElement(current, (/** @type {?} */ (current.nextSibling)));\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, (/** @type {?} */ (current.parentNode)));\n            }\n        }\n        return this.buf.join('');\n    }\n    /**\n     * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n     * be traversed. Element content must always be traversed (even if the element itself is not\n     * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n     *\n     * @private\n     * @param {?} element The element to sanitize.\n     * @return {?} True if the element's contents should be traversed.\n     */\n    startElement(element) {\n        /** @type {?} */\n        const tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        /** @type {?} */\n        const elAttrs = element.attributes;\n        for (let i = 0; i < elAttrs.length; i++) {\n            /** @type {?} */\n            const elAttr = elAttrs.item(i);\n            /** @type {?} */\n            const attrName = (/** @type {?} */ (elAttr)).name;\n            /** @type {?} */\n            const lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            /** @type {?} */\n            let value = (/** @type {?} */ (elAttr)).value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            if (SRCSET_ATTRS[lower])\n                value = sanitizeSrcset(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n        return true;\n    }\n    /**\n     * @private\n     * @param {?} current\n     * @return {?}\n     */\n    endElement(current) {\n        /** @type {?} */\n        const tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    }\n    /**\n     * @private\n     * @param {?} chars\n     * @return {?}\n     */\n    chars(chars) { this.buf.push(encodeEntities(chars)); }\n    /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    checkClobberedElement(node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(`Failed to sanitize html because the element is clobbered: ${((/** @type {?} */ (node))).outerHTML}`);\n        }\n        return nextNode;\n    }\n}\n// Regular Expressions for parsing tags and attributes\n/** @type {?} */\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\n/** @type {?} */\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        /** @type {?} */\n        const hi = match.charCodeAt(0);\n        /** @type {?} */\n        const low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n/** @type {?} */\nlet inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    /** @type {?} */\n    let inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n        /** @type {?} */\n        let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n        /** @type {?} */\n        let mXSSAttempts = 5;\n        /** @type {?} */\n        let parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = (/** @type {?} */ (inertBodyElement)).innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        /** @type {?} */\n        const sanitizer = new SanitizingHtmlSerializer();\n        /** @type {?} */\n        const safeHtml = sanitizer.sanitizeChildren((/** @type {?} */ (getTemplateContent((/** @type {?} */ (inertBodyElement))))) || inertBodyElement);\n        if (isDevMode() && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');\n        }\n        return safeHtml;\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            /** @type {?} */\n            const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent.firstChild) {\n                parent.removeChild(parent.firstChild);\n            }\n        }\n    }\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction getTemplateContent(el) {\n    return 'content' in ((/** @type {?} */ (el))) && isTemplateElement(el) ?\n        el.content :\n        null;\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Marks that the next string is for element.\n *\n * See `I18nMutateOpCodes` documentation.\n * @type {?}\n */\nconst ELEMENT_MARKER = {\n    marker: 'element'\n};\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Marks that the next string is for comment.\n *\n * See `I18nMutateOpCodes` documentation.\n * @type {?}\n */\nconst COMMENT_MARKER = {\n    marker: 'comment'\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MARKER = `�`;\n/** @type {?} */\nconst ICU_BLOCK_REGEX = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\n/** @type {?} */\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\n/** @type {?} */\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n/** @type {?} */\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\n/** @type {?} */\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\n// i18nPostproocess regexps\n/** @type {?} */\nconst PP_PLACEHOLDERS = /\\[(�.+?�?)\\]/g;\n/** @type {?} */\nconst PP_ICU_VARS = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\n/** @type {?} */\nconst PP_ICUS = /�I18N_EXP_(ICU(_\\d+)?)�/g;\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression into\n * keys and cases.\n * Original code from closure library, modified for Angular.\n *\n * @param {?} pattern (sub)Pattern to be broken.\n *\n * @return {?}\n */\nfunction extractParts(pattern) {\n    if (!pattern) {\n        return [];\n    }\n    /** @type {?} */\n    let prevPos = 0;\n    /** @type {?} */\n    const braceStack = [];\n    /** @type {?} */\n    const results = [];\n    /** @type {?} */\n    const braces = /[{}]/g;\n    // lastIndex doesn't get set to 0 so we have to.\n    braces.lastIndex = 0;\n    /** @type {?} */\n    let match;\n    while (match = braces.exec(pattern)) {\n        /** @type {?} */\n        const pos = match.index;\n        if (match[0] == '}') {\n            braceStack.pop();\n            if (braceStack.length == 0) {\n                // End of the block.\n                /** @type {?} */\n                const block = pattern.substring(prevPos, pos);\n                if (ICU_BLOCK_REGEX.test(block)) {\n                    results.push(parseICUBlock(block));\n                }\n                else if (block) { // Don't push empty strings\n                    results.push(block);\n                }\n                prevPos = pos + 1;\n            }\n        }\n        else {\n            if (braceStack.length == 0) {\n                /** @type {?} */\n                const substring = pattern.substring(prevPos, pos);\n                results.push(substring);\n                prevPos = pos + 1;\n            }\n            braceStack.push('{');\n        }\n    }\n    /** @type {?} */\n    const substring = pattern.substring(prevPos);\n    if (substring != '') {\n        results.push(substring);\n    }\n    return results;\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param {?} pattern Text containing an ICU expression that needs to be parsed.\n *\n * @return {?}\n */\nfunction parseICUBlock(pattern) {\n    /** @type {?} */\n    const cases = [];\n    /** @type {?} */\n    const values = [];\n    /** @type {?} */\n    let icuType = 1 /* plural */;\n    /** @type {?} */\n    let mainBinding = 0;\n    pattern = pattern.replace(ICU_BLOCK_REGEX, function (str, binding, type) {\n        if (type === 'select') {\n            icuType = 0 /* select */;\n        }\n        else {\n            icuType = 1 /* plural */;\n        }\n        mainBinding = parseInt(binding.substr(1), 10);\n        return '';\n    });\n    /** @type {?} */\n    const parts = (/** @type {?} */ (extractParts(pattern)));\n    // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n    for (let pos = 0; pos < parts.length;) {\n        /** @type {?} */\n        let key = parts[pos++].trim();\n        if (icuType === 1 /* plural */) {\n            // Key can be \"=x\", we just want \"x\"\n            key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n        }\n        if (key.length) {\n            cases.push(key);\n        }\n        /** @type {?} */\n        const blocks = (/** @type {?} */ (extractParts(parts[pos++])));\n        if (blocks.length) {\n            values.push(blocks);\n        }\n    }\n    assertGreaterThan(cases.indexOf('other'), -1, 'Missing key \"other\" in ICU statement.');\n    // TODO(ocombe): support ICU expressions in attributes, see #21615\n    return { type: icuType, mainBinding: mainBinding, cases, values };\n}\n/**\n * Removes everything inside the sub-templates of a message.\n * @param {?} message\n * @return {?}\n */\nfunction removeInnerTemplateTranslation(message) {\n    /** @type {?} */\n    let match;\n    /** @type {?} */\n    let res = '';\n    /** @type {?} */\n    let index = 0;\n    /** @type {?} */\n    let inTemplate = false;\n    /** @type {?} */\n    let tagMatched;\n    while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n        if (!inTemplate) {\n            res += message.substring(index, match.index + match[0].length);\n            tagMatched = match[1];\n            inTemplate = true;\n        }\n        else {\n            if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n                index = match.index;\n                inTemplate = false;\n            }\n        }\n    }\n    ngDevMode &&\n        assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n    res += message.substr(index);\n    return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A translated\n * message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param {?} message The message to crop\n * @param {?=} subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n * @return {?}\n */\nfunction getTranslationForTemplate(message, subTemplateIndex) {\n    if (typeof subTemplateIndex !== 'number') {\n        // We want the root template message, ignore all sub-templates\n        return removeInnerTemplateTranslation(message);\n    }\n    else {\n        // We want a specific sub-template\n        /** @type {?} */\n        const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n        /** @type {?} */\n        const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n        return removeInnerTemplateTranslation(message.substring(start, end));\n    }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param {?} str The string containing the bindings.\n * @param {?} destinationNode Index of the destination node which will receive the binding.\n * @param {?=} attrName Name of the attribute, if the string belongs to an attribute.\n * @param {?=} sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @return {?}\n */\nfunction generateBindingUpdateOpCodes(str, destinationNode, attrName, sanitizeFn = null) {\n    /** @type {?} */\n    const updateOpCodes = [null, null];\n    // Alloc space for mask and size\n    /** @type {?} */\n    const textParts = str.split(BINDING_REGEXP);\n    /** @type {?} */\n    let mask = 0;\n    for (let j = 0; j < textParts.length; j++) {\n        /** @type {?} */\n        const textValue = textParts[j];\n        if (j & 1) {\n            // Odd indexes are bindings\n            /** @type {?} */\n            const bindingIndex = parseInt(textValue, 10);\n            updateOpCodes.push(-1 - bindingIndex);\n            mask = mask | toMaskBit(bindingIndex);\n        }\n        else if (textValue !== '') {\n            // Even indexes are text\n            updateOpCodes.push(textValue);\n        }\n    }\n    updateOpCodes.push(destinationNode << 2 /* SHIFT_REF */ |\n        (attrName ? 1 /* Attr */ : 0 /* Text */));\n    if (attrName) {\n        updateOpCodes.push(attrName, sanitizeFn);\n    }\n    updateOpCodes[0] = mask;\n    updateOpCodes[1] = updateOpCodes.length - 2;\n    return updateOpCodes;\n}\n/**\n * @param {?} icuExpression\n * @param {?=} mask\n * @return {?}\n */\nfunction getBindingMask(icuExpression, mask = 0) {\n    mask = mask | toMaskBit(icuExpression.mainBinding);\n    /** @type {?} */\n    let match;\n    for (let i = 0; i < icuExpression.values.length; i++) {\n        /** @type {?} */\n        const valueArr = icuExpression.values[i];\n        for (let j = 0; j < valueArr.length; j++) {\n            /** @type {?} */\n            const value = valueArr[j];\n            if (typeof value === 'string') {\n                while (match = BINDING_REGEXP.exec(value)) {\n                    mask = mask | toMaskBit(parseInt(match[1], 10));\n                }\n            }\n            else {\n                mask = getBindingMask((/** @type {?} */ (value)), mask);\n            }\n        }\n    }\n    return mask;\n}\n/** @type {?} */\nconst i18nIndexStack = [];\n/** @type {?} */\nlet i18nIndexStackPointer = -1;\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to have\n * more than 32 bindings this will be hit very rarely. The downside of hitting this corner case is\n * that we will execute binding code more often than necessary. (penalty of performance)\n * @param {?} bindingIndex\n * @return {?}\n */\nfunction toMaskBit(bindingIndex) {\n    return 1 << Math.min(bindingIndex, 31);\n}\n/** @type {?} */\nconst parentIndexStack = [];\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param {?} index A unique index of the translation in the static block.\n * @param {?} message The translation message.\n * @param {?=} subTemplateIndex Optional sub-template index in the `message`.\n * @return {?}\n */\nfunction i18nStart(index, message, subTemplateIndex) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    i18nIndexStack[++i18nIndexStackPointer] = index;\n    if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n        i18nStartFirstPass(tView, index, message, subTemplateIndex);\n    }\n}\n/**\n * See `i18nStart` above.\n * @param {?} tView\n * @param {?} index\n * @param {?} message\n * @param {?=} subTemplateIndex\n * @return {?}\n */\nfunction i18nStartFirstPass(tView, index, message, subTemplateIndex) {\n    /** @type {?} */\n    const viewData = getLView();\n    /** @type {?} */\n    const expandoStartIndex = tView.blueprint.length - HEADER_OFFSET;\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const parentTNode = getIsParent() ? getPreviousOrParentTNode() :\n        previousOrParentTNode && previousOrParentTNode.parent;\n    /** @type {?} */\n    let parentIndex = parentTNode && parentTNode !== viewData[HOST_NODE] ?\n        parentTNode.index - HEADER_OFFSET :\n        index;\n    /** @type {?} */\n    let parentIndexPointer = 0;\n    parentIndexStack[parentIndexPointer] = parentIndex;\n    /** @type {?} */\n    const createOpCodes = [];\n    // If the previous node wasn't the direct parent then we have a translation without top level\n    // element and we need to keep a reference of the previous element if there is one\n    if (index > 0 && previousOrParentTNode !== parentTNode) {\n        // Create an OpCode to select the previous TNode\n        createOpCodes.push(previousOrParentTNode.index << 3 /* SHIFT_REF */ | 0 /* Select */);\n    }\n    /** @type {?} */\n    const updateOpCodes = [];\n    /** @type {?} */\n    const icuExpressions = [];\n    /** @type {?} */\n    const templateTranslation = getTranslationForTemplate(message, subTemplateIndex);\n    /** @type {?} */\n    const msgParts = templateTranslation.split(PH_REGEXP);\n    for (let i = 0; i < msgParts.length; i++) {\n        /** @type {?} */\n        let value = msgParts[i];\n        if (i & 1) {\n            // Odd indexes are placeholders (elements and sub-templates)\n            if (value.charAt(0) === '/') {\n                // It is a closing tag\n                if (value.charAt(1) === '#') {\n                    /** @type {?} */\n                    const phIndex = parseInt(value.substr(2), 10);\n                    parentIndex = parentIndexStack[--parentIndexPointer];\n                    createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 5 /* ElementEnd */);\n                }\n            }\n            else {\n                /** @type {?} */\n                const phIndex = parseInt(value.substr(1), 10);\n                // The value represents a placeholder that we move to the designated index\n                createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 0 /* Select */, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                if (value.charAt(0) === '#') {\n                    parentIndexStack[++parentIndexPointer] = parentIndex = phIndex;\n                }\n            }\n        }\n        else {\n            // Even indexes are text (including bindings & ICU expressions)\n            /** @type {?} */\n            const parts = value.split(ICU_REGEXP);\n            for (let j = 0; j < parts.length; j++) {\n                value = parts[j];\n                if (j & 1) {\n                    // Odd indexes are ICU expressions\n                    // Create the comment node that will anchor the ICU expression\n                    allocExpando(viewData);\n                    /** @type {?} */\n                    const icuNodeIndex = tView.blueprint.length - 1 - HEADER_OFFSET;\n                    createOpCodes.push(COMMENT_MARKER, ngDevMode ? `ICU ${icuNodeIndex}` : '', parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    // Update codes for the ICU expression\n                    /** @type {?} */\n                    const icuExpression = parseICUBlock(value.substr(1, value.length - 2));\n                    /** @type {?} */\n                    const mask = getBindingMask(icuExpression);\n                    icuStart(icuExpressions, icuExpression, icuNodeIndex, icuNodeIndex);\n                    // Since this is recursive, the last TIcu that was pushed is the one we want\n                    /** @type {?} */\n                    const tIcuIndex = icuExpressions.length - 1;\n                    updateOpCodes.push(toMaskBit(icuExpression.mainBinding), // mask of the main binding\n                    3, // skip 3 opCodes if not changed\n                    -1 - icuExpression.mainBinding, icuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, tIcuIndex, mask, // mask of all the bindings of this ICU expression\n                    2, // skip 2 opCodes if not changed\n                    icuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, tIcuIndex);\n                }\n                else if (value !== '') {\n                    // Even indexes are text (including bindings)\n                    /** @type {?} */\n                    const hasBinding = value.match(BINDING_REGEXP);\n                    // Create text nodes\n                    allocExpando(viewData);\n                    createOpCodes.push(\n                    // If there is a binding, the value will be set during update\n                    hasBinding ? '' : value, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    if (hasBinding) {\n                        addAllToArray(generateBindingUpdateOpCodes(value, tView.blueprint.length - 1 - HEADER_OFFSET), updateOpCodes);\n                    }\n                }\n            }\n        }\n    }\n    // NOTE: local var needed to properly assert the type of `TI18n`.\n    /** @type {?} */\n    const tI18n = {\n        vars: tView.blueprint.length - HEADER_OFFSET - expandoStartIndex,\n        expandoStartIndex,\n        create: createOpCodes,\n        update: updateOpCodes,\n        icus: icuExpressions.length ? icuExpressions : null,\n    };\n    tView.data[index + HEADER_OFFSET] = tI18n;\n}\n/**\n * @param {?} tNode\n * @param {?} parentTNode\n * @param {?} previousTNode\n * @return {?}\n */\nfunction appendI18nNode(tNode, parentTNode, previousTNode) {\n    ngDevMode && ngDevMode.rendererMoveNode++;\n    /** @type {?} */\n    const viewData = getLView();\n    if (!previousTNode) {\n        previousTNode = parentTNode;\n    }\n    // re-organize node tree to put this node in the correct position.\n    if (previousTNode === parentTNode && tNode !== parentTNode.child) {\n        tNode.next = parentTNode.child;\n        parentTNode.child = tNode;\n    }\n    else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {\n        tNode.next = previousTNode.next;\n        previousTNode.next = tNode;\n    }\n    else {\n        tNode.next = null;\n    }\n    if (parentTNode !== viewData[HOST_NODE]) {\n        tNode.parent = (/** @type {?} */ (parentTNode));\n    }\n    appendChild(getNativeByTNode(tNode, viewData), tNode, viewData);\n    /** @type {?} */\n    const slotValue = viewData[tNode.index];\n    if (tNode.type !== 0 /* Container */ && isLContainer(slotValue)) {\n        // Nodes that inject ViewContainerRef also have a comment node that should be moved\n        appendChild(slotValue[NATIVE], tNode, viewData);\n    }\n    return tNode;\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * \\@publicAPI\n * @param {?} message Raw translation string for post processing\n * @param {?} replacements Set of replacements that should be applied\n *\n * @return {?} Transformed string that can be consumed by i18nStart instruction\n *\n */\nfunction i18nPostprocess(message, replacements) {\n    //\n    // Step 1: resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n    //\n    /** @type {?} */\n    const matches = {};\n    /** @type {?} */\n    let result = message.replace(PP_PLACEHOLDERS, (_match, content) => {\n        if (!matches[content]) {\n            matches[content] = content.split('|');\n        }\n        if (!matches[content].length) {\n            throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n        }\n        return (/** @type {?} */ (matches[content].shift()));\n    });\n    // verify that we injected all values\n    /** @type {?} */\n    const hasUnmatchedValues = Object.keys(matches).some(key => !!matches[key].length);\n    if (hasUnmatchedValues) {\n        throw new Error(`i18n postprocess: unmatched values - ${JSON.stringify(matches)}`);\n    }\n    // return current result if no replacements specified\n    if (!Object.keys(replacements).length) {\n        return result;\n    }\n    //\n    // Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n    //\n    result = result.replace(PP_ICU_VARS, (match, start, key, _type, _idx, end) => {\n        return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n    });\n    //\n    // Step 3: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n    // in case multiple ICUs have the same placeholder name\n    //\n    result = result.replace(PP_ICUS, (match, key) => {\n        if (replacements.hasOwnProperty(key)) {\n            /** @type {?} */\n            const list = (/** @type {?} */ (replacements[key]));\n            if (!list.length) {\n                throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n            }\n            return (/** @type {?} */ (list.shift()));\n        }\n        return match;\n    });\n    return result;\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n * @return {?}\n */\nfunction i18nEnd() {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    i18nEndFirstPass(tView);\n}\n/**\n * See `i18nEnd` above.\n * @param {?} tView\n * @return {?}\n */\nfunction i18nEndFirstPass(tView) {\n    /** @type {?} */\n    const viewData = getLView();\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], viewData[TVIEW].bindingStartIndex, 'i18nEnd should be called before any binding');\n    /** @type {?} */\n    const rootIndex = i18nIndexStack[i18nIndexStackPointer--];\n    /** @type {?} */\n    const tI18n = (/** @type {?} */ (tView.data[rootIndex + HEADER_OFFSET]));\n    ngDevMode && assertDefined(tI18n, `You should call i18nStart before i18nEnd`);\n    // The last placeholder that was added before `i18nEnd`\n    /** @type {?} */\n    const previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    const visitedPlaceholders = readCreateOpCodes(rootIndex, tI18n.create, tI18n.expandoStartIndex, viewData);\n    // Remove deleted placeholders\n    // The last placeholder that was added before `i18nEnd` is `previousOrParentTNode`\n    for (let i = rootIndex + 1; i <= previousOrParentTNode.index - HEADER_OFFSET; i++) {\n        if (visitedPlaceholders.indexOf(i) === -1) {\n            removeNode(i, viewData);\n        }\n    }\n}\n/**\n * @param {?} index\n * @param {?} createOpCodes\n * @param {?} expandoStartIndex\n * @param {?} viewData\n * @return {?}\n */\nfunction readCreateOpCodes(index, createOpCodes, expandoStartIndex, viewData) {\n    /** @type {?} */\n    const renderer = getLView()[RENDERER];\n    /** @type {?} */\n    let currentTNode = null;\n    /** @type {?} */\n    let previousTNode = null;\n    /** @type {?} */\n    const visitedPlaceholders = [];\n    for (let i = 0; i < createOpCodes.length; i++) {\n        /** @type {?} */\n        const opCode = createOpCodes[i];\n        if (typeof opCode == 'string') {\n            /** @type {?} */\n            const textRNode = createTextNode(opCode, renderer);\n            ngDevMode && ngDevMode.rendererCreateTextNode++;\n            previousTNode = currentTNode;\n            currentTNode =\n                createNodeAtIndex(expandoStartIndex++, 3 /* Element */, textRNode, null, null);\n            setIsParent(false);\n        }\n        else if (typeof opCode == 'number') {\n            switch (opCode & 7 /* MASK_OPCODE */) {\n                case 1 /* AppendChild */:\n                    /** @type {?} */\n                    const destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n                    /** @type {?} */\n                    let destinationTNode;\n                    if (destinationNodeIndex === index) {\n                        // If the destination node is `i18nStart`, we don't have a\n                        // top-level node and we should use the host node instead\n                        destinationTNode = (/** @type {?} */ (viewData[HOST_NODE]));\n                    }\n                    else {\n                        destinationTNode = getTNode(destinationNodeIndex, viewData);\n                    }\n                    ngDevMode &&\n                        assertDefined((/** @type {?} */ (currentTNode)), `You need to create or select a node before you can insert it into the DOM`);\n                    previousTNode = appendI18nNode((/** @type {?} */ (currentTNode)), destinationTNode, previousTNode);\n                    destinationTNode.next = null;\n                    break;\n                case 0 /* Select */:\n                    /** @type {?} */\n                    const nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                    visitedPlaceholders.push(nodeIndex);\n                    previousTNode = currentTNode;\n                    currentTNode = getTNode(nodeIndex, viewData);\n                    if (currentTNode) {\n                        setPreviousOrParentTNode(currentTNode);\n                        if (currentTNode.type === 3 /* Element */) {\n                            setIsParent(true);\n                        }\n                    }\n                    break;\n                case 5 /* ElementEnd */:\n                    /** @type {?} */\n                    const elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                    previousTNode = currentTNode = getTNode(elementIndex, viewData);\n                    setPreviousOrParentTNode(currentTNode);\n                    setIsParent(false);\n                    break;\n                case 4 /* Attr */:\n                    /** @type {?} */\n                    const elementNodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                    /** @type {?} */\n                    const attrName = (/** @type {?} */ (createOpCodes[++i]));\n                    /** @type {?} */\n                    const attrValue = (/** @type {?} */ (createOpCodes[++i]));\n                    elementAttribute(elementNodeIndex, attrName, attrValue);\n                    break;\n                default:\n                    throw new Error(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n            }\n        }\n        else {\n            switch (opCode) {\n                case COMMENT_MARKER:\n                    /** @type {?} */\n                    const commentValue = (/** @type {?} */ (createOpCodes[++i]));\n                    ngDevMode && assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\n                    /** @type {?} */\n                    const commentRNode = renderer.createComment(commentValue);\n                    ngDevMode && ngDevMode.rendererCreateComment++;\n                    previousTNode = currentTNode;\n                    currentTNode = createNodeAtIndex(expandoStartIndex++, 5 /* IcuContainer */, commentRNode, null, null);\n                    attachPatchData(commentRNode, viewData);\n                    ((/** @type {?} */ (currentTNode))).activeCaseIndex = null;\n                    // We will add the case nodes later, during the update phase\n                    setIsParent(false);\n                    break;\n                case ELEMENT_MARKER:\n                    /** @type {?} */\n                    const tagNameValue = (/** @type {?} */ (createOpCodes[++i]));\n                    ngDevMode && assertEqual(typeof tagNameValue, 'string', `Expected \"${tagNameValue}\" to be an element node tag name`);\n                    /** @type {?} */\n                    const elementRNode = renderer.createElement(tagNameValue);\n                    ngDevMode && ngDevMode.rendererCreateElement++;\n                    previousTNode = currentTNode;\n                    currentTNode = createNodeAtIndex(expandoStartIndex++, 3 /* Element */, elementRNode, tagNameValue, null);\n                    break;\n                default:\n                    throw new Error(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n            }\n        }\n    }\n    setIsParent(false);\n    return visitedPlaceholders;\n}\n/**\n * @param {?} updateOpCodes\n * @param {?} icus\n * @param {?} bindingsStartIndex\n * @param {?} changeMask\n * @param {?} viewData\n * @param {?=} bypassCheckBit\n * @return {?}\n */\nfunction readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, viewData, bypassCheckBit = false) {\n    /** @type {?} */\n    let caseCreated = false;\n    for (let i = 0; i < updateOpCodes.length; i++) {\n        // bit code to check if we should apply the next update\n        /** @type {?} */\n        const checkBit = (/** @type {?} */ (updateOpCodes[i]));\n        // Number of opCodes to skip until next set of update codes\n        /** @type {?} */\n        const skipCodes = (/** @type {?} */ (updateOpCodes[++i]));\n        if (bypassCheckBit || (checkBit & changeMask)) {\n            // The value has been updated since last checked\n            /** @type {?} */\n            let value = '';\n            for (let j = i + 1; j <= (i + skipCodes); j++) {\n                /** @type {?} */\n                const opCode = updateOpCodes[j];\n                if (typeof opCode == 'string') {\n                    value += opCode;\n                }\n                else if (typeof opCode == 'number') {\n                    if (opCode < 0) {\n                        // It's a binding index whose value is negative\n                        value += stringify$1(viewData[bindingsStartIndex - opCode]);\n                    }\n                    else {\n                        /** @type {?} */\n                        const nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n                        /** @type {?} */\n                        let tIcuIndex;\n                        /** @type {?} */\n                        let tIcu;\n                        /** @type {?} */\n                        let icuTNode;\n                        switch (opCode & 3 /* MASK_OPCODE */) {\n                            case 1 /* Attr */:\n                                /** @type {?} */\n                                const attrName = (/** @type {?} */ (updateOpCodes[++j]));\n                                /** @type {?} */\n                                const sanitizeFn = (/** @type {?} */ (updateOpCodes[++j]));\n                                elementAttribute(nodeIndex, attrName, value, sanitizeFn);\n                                break;\n                            case 0 /* Text */:\n                                textBinding(nodeIndex, value);\n                                break;\n                            case 2 /* IcuSwitch */:\n                                tIcuIndex = (/** @type {?} */ (updateOpCodes[++j]));\n                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];\n                                icuTNode = (/** @type {?} */ (getTNode(nodeIndex, viewData)));\n                                // If there is an active case, delete the old nodes\n                                if (icuTNode.activeCaseIndex !== null) {\n                                    /** @type {?} */\n                                    const removeCodes = tIcu.remove[icuTNode.activeCaseIndex];\n                                    for (let k = 0; k < removeCodes.length; k++) {\n                                        /** @type {?} */\n                                        const removeOpCode = (/** @type {?} */ (removeCodes[k]));\n                                        switch (removeOpCode & 7 /* MASK_OPCODE */) {\n                                            case 3 /* Remove */:\n                                                /** @type {?} */\n                                                const nodeIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                removeNode(nodeIndex, viewData);\n                                                break;\n                                            case 6 /* RemoveNestedIcu */:\n                                                /** @type {?} */\n                                                const nestedIcuNodeIndex = (/** @type {?} */ (removeCodes[k + 1])) >>> 3 /* SHIFT_REF */;\n                                                /** @type {?} */\n                                                const nestedIcuTNode = (/** @type {?} */ (getTNode(nestedIcuNodeIndex, viewData)));\n                                                /** @type {?} */\n                                                const activeIndex = nestedIcuTNode.activeCaseIndex;\n                                                if (activeIndex !== null) {\n                                                    /** @type {?} */\n                                                    const nestedIcuTIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                    /** @type {?} */\n                                                    const nestedTIcu = (/** @type {?} */ (icus))[nestedIcuTIndex];\n                                                    addAllToArray(nestedTIcu.remove[activeIndex], removeCodes);\n                                                }\n                                                break;\n                                        }\n                                    }\n                                }\n                                // Update the active caseIndex\n                                /** @type {?} */\n                                const caseIndex = getCaseIndex(tIcu, value);\n                                icuTNode.activeCaseIndex = caseIndex !== -1 ? caseIndex : null;\n                                // Add the nodes for the new case\n                                readCreateOpCodes(-1, tIcu.create[caseIndex], tIcu.expandoStartIndex, viewData);\n                                caseCreated = true;\n                                break;\n                            case 3 /* IcuUpdate */:\n                                tIcuIndex = (/** @type {?} */ (updateOpCodes[++j]));\n                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];\n                                icuTNode = (/** @type {?} */ (getTNode(nodeIndex, viewData)));\n                                readUpdateOpCodes(tIcu.update[(/** @type {?} */ (icuTNode.activeCaseIndex))], icus, bindingsStartIndex, changeMask, viewData, caseCreated);\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        i += skipCodes;\n    }\n}\n/**\n * @param {?} index\n * @param {?} viewData\n * @return {?}\n */\nfunction removeNode(index, viewData) {\n    /** @type {?} */\n    const removedPhTNode = getTNode(index, viewData);\n    /** @type {?} */\n    const removedPhRNode = getNativeByIndex(index, viewData);\n    removeChild(removedPhTNode, removedPhRNode || null, viewData);\n    removedPhTNode.detached = true;\n    ngDevMode && ngDevMode.rendererRemoveNode++;\n    /** @type {?} */\n    const slotValue = (/** @type {?} */ (load(index)));\n    if (isLContainer(slotValue)) {\n        /** @type {?} */\n        const lContainer = (/** @type {?} */ (slotValue));\n        if (removedPhTNode.type !== 0 /* Container */) {\n            removeChild(removedPhTNode, lContainer[NATIVE] || null, viewData);\n        }\n        lContainer[RENDER_PARENT] = null;\n    }\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {\\@link i18nStart} and {\\@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param {?} index A unique index of the translation in the static block.\n * @param {?} message The translation message.\n * @param {?=} subTemplateIndex Optional sub-template index in the `message`.\n * @return {?}\n */\nfunction i18n(index, message, subTemplateIndex) {\n    i18nStart(index, message, subTemplateIndex);\n    i18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * @param {?} index A unique index in the static block\n * @param {?} values\n * @return {?}\n */\nfunction i18nAttributes(index, values) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, `You should only call i18nEnd on first template pass`);\n    if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n        i18nAttributesFirstPass(tView, index, values);\n    }\n}\n/**\n * See `i18nAttributes` above.\n * @param {?} tView\n * @param {?} index\n * @param {?} values\n * @return {?}\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n    /** @type {?} */\n    const previousElement = getPreviousOrParentTNode();\n    /** @type {?} */\n    const previousElementIndex = previousElement.index - HEADER_OFFSET;\n    /** @type {?} */\n    const updateOpCodes = [];\n    for (let i = 0; i < values.length; i += 2) {\n        /** @type {?} */\n        const attrName = values[i];\n        /** @type {?} */\n        const message = values[i + 1];\n        /** @type {?} */\n        const parts = message.split(ICU_REGEXP);\n        for (let j = 0; j < parts.length; j++) {\n            /** @type {?} */\n            const value = parts[j];\n            if (j & 1) ;\n            else if (value !== '') {\n                // Even indexes are text (including bindings)\n                /** @type {?} */\n                const hasBinding = !!value.match(BINDING_REGEXP);\n                if (hasBinding) {\n                    addAllToArray(generateBindingUpdateOpCodes(value, previousElementIndex, attrName), updateOpCodes);\n                }\n                else {\n                    elementAttribute(previousElementIndex, attrName, value);\n                }\n            }\n        }\n    }\n    tView.data[index + HEADER_OFFSET] = updateOpCodes;\n}\n/** @type {?} */\nlet changeMask = 0b0;\n/** @type {?} */\nlet shiftsCounter = 0;\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @template T\n * @param {?} expression The binding's new value or NO_CHANGE\n * @return {?}\n */\nfunction i18nExp(expression) {\n    if (expression !== NO_CHANGE) {\n        changeMask = changeMask | (1 << shiftsCounter);\n    }\n    shiftsCounter++;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param {?} index Index of either {\\@link i18nStart} (translation block) or {\\@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n * @return {?}\n */\nfunction i18nApply(index) {\n    if (shiftsCounter) {\n        /** @type {?} */\n        const lView = getLView();\n        /** @type {?} */\n        const tView = lView[TVIEW];\n        ngDevMode && assertDefined(tView, `tView should be defined`);\n        /** @type {?} */\n        const tI18n = tView.data[index + HEADER_OFFSET];\n        /** @type {?} */\n        let updateOpCodes;\n        /** @type {?} */\n        let icus = null;\n        if (Array.isArray(tI18n)) {\n            updateOpCodes = (/** @type {?} */ (tI18n));\n        }\n        else {\n            updateOpCodes = ((/** @type {?} */ (tI18n))).update;\n            icus = ((/** @type {?} */ (tI18n))).icus;\n        }\n        /** @type {?} */\n        const bindingsStartIndex = lView[BINDING_INDEX] - shiftsCounter - 1;\n        readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, lView);\n        // Reset changeMask & maskBit to default for the next update cycle\n        changeMask = 0b0;\n        shiftsCounter = 0;\n    }\n}\n/** @enum {number} */\nconst Plural = {\n    Zero: 0,\n    One: 1,\n    Two: 2,\n    Few: 3,\n    Many: 4,\n    Other: 5,\n};\nPlural[Plural.Zero] = 'Zero';\nPlural[Plural.One] = 'One';\nPlural[Plural.Two] = 'Two';\nPlural[Plural.Few] = 'Few';\nPlural[Plural.Many] = 'Many';\nPlural[Plural.Other] = 'Other';\n/**\n * Returns the plural case based on the locale.\n * This is a copy of the deprecated function that we used in Angular v4.\n * // TODO(ocombe): remove this once we can the real getPluralCase function\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n * @param {?} locale\n * @param {?} nLike\n * @return {?}\n */\nfunction getPluralCase(locale, nLike) {\n    if (typeof nLike === 'string') {\n        nLike = parseInt((/** @type {?} */ (nLike)), 10);\n    }\n    /** @type {?} */\n    const n = (/** @type {?} */ (nLike));\n    /** @type {?} */\n    const nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n    /** @type {?} */\n    const i = Math.floor(Math.abs(n));\n    /** @type {?} */\n    const v = nDecimal.length;\n    /** @type {?} */\n    const f = parseInt(nDecimal, 10);\n    /** @type {?} */\n    const t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n    /** @type {?} */\n    const lang = locale.split('-')[0].toLowerCase();\n    switch (lang) {\n        case 'af':\n        case 'asa':\n        case 'az':\n        case 'bem':\n        case 'bez':\n        case 'bg':\n        case 'brx':\n        case 'ce':\n        case 'cgg':\n        case 'chr':\n        case 'ckb':\n        case 'ee':\n        case 'el':\n        case 'eo':\n        case 'es':\n        case 'eu':\n        case 'fo':\n        case 'fur':\n        case 'gsw':\n        case 'ha':\n        case 'haw':\n        case 'hu':\n        case 'jgo':\n        case 'jmc':\n        case 'ka':\n        case 'kk':\n        case 'kkj':\n        case 'kl':\n        case 'ks':\n        case 'ksb':\n        case 'ky':\n        case 'lb':\n        case 'lg':\n        case 'mas':\n        case 'mgo':\n        case 'ml':\n        case 'mn':\n        case 'nb':\n        case 'nd':\n        case 'ne':\n        case 'nn':\n        case 'nnh':\n        case 'nyn':\n        case 'om':\n        case 'or':\n        case 'os':\n        case 'ps':\n        case 'rm':\n        case 'rof':\n        case 'rwk':\n        case 'saq':\n        case 'seh':\n        case 'sn':\n        case 'so':\n        case 'sq':\n        case 'ta':\n        case 'te':\n        case 'teo':\n        case 'tk':\n        case 'tr':\n        case 'ug':\n        case 'uz':\n        case 'vo':\n        case 'vun':\n        case 'wae':\n        case 'xog':\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ak':\n        case 'ln':\n        case 'mg':\n        case 'pa':\n        case 'ti':\n            if (n === Math.floor(n) && n >= 0 && n <= 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'am':\n        case 'as':\n        case 'bn':\n        case 'fa':\n        case 'gu':\n        case 'hi':\n        case 'kn':\n        case 'mr':\n        case 'zu':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ar':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)\n                return Plural.Many;\n            return Plural.Other;\n        case 'ast':\n        case 'ca':\n        case 'de':\n        case 'en':\n        case 'et':\n        case 'fi':\n        case 'fy':\n        case 'gl':\n        case 'it':\n        case 'nl':\n        case 'sv':\n        case 'sw':\n        case 'ur':\n        case 'yi':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            return Plural.Other;\n        case 'be':\n            if (n % 10 === 1 && !(n % 100 === 11))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n                !(n % 100 >= 12 && n % 100 <= 14))\n                return Plural.Few;\n            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'br':\n            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))\n                return Plural.One;\n            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))\n                return Plural.Two;\n            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n                    n % 100 >= 90 && n % 100 <= 99))\n                return Plural.Few;\n            if (!(n === 0) && n % 1e6 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'bs':\n        case 'hr':\n        case 'sr':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14) ||\n                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n                    !(f % 100 >= 12 && f % 100 <= 14))\n                return Plural.Few;\n            return Plural.Other;\n        case 'cs':\n        case 'sk':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'cy':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === 3)\n                return Plural.Few;\n            if (n === 6)\n                return Plural.Many;\n            return Plural.Other;\n        case 'da':\n            if (n === 1 || !(t === 0) && (i === 0 || i === 1))\n                return Plural.One;\n            return Plural.Other;\n        case 'dsb':\n        case 'hsb':\n            if (v === 0 && i % 100 === 1 || f % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2 || f % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ff':\n        case 'fr':\n        case 'hy':\n        case 'kab':\n            if (i === 0 || i === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'fil':\n            if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n                return Plural.One;\n            return Plural.Other;\n        case 'ga':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === Math.floor(n) && n >= 3 && n <= 6)\n                return Plural.Few;\n            if (n === Math.floor(n) && n >= 7 && n <= 10)\n                return Plural.Many;\n            return Plural.Other;\n        case 'gd':\n            if (n === 1 || n === 11)\n                return Plural.One;\n            if (n === 2 || n === 12)\n                return Plural.Two;\n            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))\n                return Plural.Few;\n            return Plural.Other;\n        case 'gv':\n            if (v === 0 && i % 10 === 1)\n                return Plural.One;\n            if (v === 0 && i % 10 === 2)\n                return Plural.Two;\n            if (v === 0 &&\n                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'he':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === 2 && v === 0)\n                return Plural.Two;\n            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'is':\n            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'ksh':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'kw':\n        case 'naq':\n        case 'se':\n        case 'smn':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            return Plural.Other;\n        case 'lag':\n            if (n === 0)\n                return Plural.Zero;\n            if ((i === 0 || i === 1) && !(n === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'lt':\n            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n                !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.Few;\n            if (!(f === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'lv':\n        case 'prg':\n            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n                return Plural.Zero;\n            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n                !(v === 2) && f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mk':\n            if (v === 0 && i % 10 === 1 || f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mt':\n            if (n === 1)\n                return Plural.One;\n            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pl':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pt':\n            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))\n                return Plural.One;\n            return Plural.Other;\n        case 'ro':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (!(v === 0) || n === 0 ||\n                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ru':\n        case 'uk':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && i % 10 === 0 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'shi':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            if (n === Math.floor(n) && n >= 2 && n <= 10)\n                return Plural.Few;\n            return Plural.Other;\n        case 'si':\n            if (n === 0 || n === 1 || i === 0 && f === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'sl':\n            if (v === 0 && i % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n                return Plural.Few;\n            return Plural.Other;\n        case 'tzm':\n            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n                return Plural.One;\n            return Plural.Other;\n        // When there is no specification, the default is always \"other\"\n        // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n        // > other (required—general plural form — also used if the language only has a single form)\n        default:\n            return Plural.Other;\n    }\n}\n/**\n * @param {?} value\n * @param {?} locale\n * @return {?}\n */\nfunction getPluralCategory(value, locale) {\n    /** @type {?} */\n    const plural = getPluralCase(locale, value);\n    switch (plural) {\n        case Plural.Zero:\n            return 'zero';\n        case Plural.One:\n            return 'one';\n        case Plural.Two:\n            return 'two';\n        case Plural.Few:\n            return 'few';\n        case Plural.Many:\n            return 'many';\n        default:\n            return 'other';\n    }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param {?} icuExpression\n * @param {?} bindingValue The value of the main binding used by this ICU expression\n * @return {?}\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n    /** @type {?} */\n    let index = icuExpression.cases.indexOf(bindingValue);\n    if (index === -1) {\n        switch (icuExpression.type) {\n            case 1 /* plural */: {\n                // TODO(ocombe): replace this hard-coded value by the real LOCALE_ID value\n                /** @type {?} */\n                const locale = 'en-US';\n                /** @type {?} */\n                const resolvedCase = getPluralCategory(bindingValue, locale);\n                index = icuExpression.cases.indexOf(resolvedCase);\n                if (index === -1 && resolvedCase !== 'other') {\n                    index = icuExpression.cases.indexOf('other');\n                }\n                break;\n            }\n            case 0 /* select */: {\n                index = icuExpression.cases.indexOf('other');\n                break;\n            }\n        }\n    }\n    return index;\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param {?} tIcus\n * @param {?} icuExpression\n * @param {?} startIndex\n * @param {?} expandoStartIndex\n * @return {?}\n */\nfunction icuStart(tIcus, icuExpression, startIndex, expandoStartIndex) {\n    /** @type {?} */\n    const createCodes = [];\n    /** @type {?} */\n    const removeCodes = [];\n    /** @type {?} */\n    const updateCodes = [];\n    /** @type {?} */\n    const vars = [];\n    /** @type {?} */\n    const childIcus = [];\n    for (let i = 0; i < icuExpression.values.length; i++) {\n        // Each value is an array of strings & other ICU expressions\n        /** @type {?} */\n        const valueArr = icuExpression.values[i];\n        /** @type {?} */\n        const nestedIcus = [];\n        for (let j = 0; j < valueArr.length; j++) {\n            /** @type {?} */\n            const value = valueArr[j];\n            if (typeof value !== 'string') {\n                // It is an nested ICU expression\n                /** @type {?} */\n                const icuIndex = nestedIcus.push((/** @type {?} */ (value))) - 1;\n                // Replace nested ICU expression by a comment node\n                valueArr[j] = `<!--�${icuIndex}�-->`;\n            }\n        }\n        /** @type {?} */\n        const icuCase = parseIcuCase(valueArr.join(''), startIndex, nestedIcus, tIcus, expandoStartIndex);\n        createCodes.push(icuCase.create);\n        removeCodes.push(icuCase.remove);\n        updateCodes.push(icuCase.update);\n        vars.push(icuCase.vars);\n        childIcus.push(icuCase.childIcus);\n    }\n    /** @type {?} */\n    const tIcu = {\n        type: icuExpression.type,\n        vars,\n        expandoStartIndex: expandoStartIndex + 1, childIcus,\n        cases: icuExpression.cases,\n        create: createCodes,\n        remove: removeCodes,\n        update: updateCodes\n    };\n    tIcus.push(tIcu);\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const worstCaseSize = Math.max(...vars);\n    for (let i = 0; i < worstCaseSize; i++) {\n        allocExpando(lView);\n    }\n}\n/**\n * Transforms a string template into an HTML template and a list of instructions used to update\n * attributes or nodes that contain bindings.\n *\n * @param {?} unsafeHtml The string to parse\n * @param {?} parentIndex\n * @param {?} nestedIcus\n * @param {?} tIcus\n * @param {?} expandoStartIndex\n * @return {?}\n */\nfunction parseIcuCase(unsafeHtml, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n    /** @type {?} */\n    const inertBodyHelper = new InertBodyHelper(document);\n    /** @type {?} */\n    const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    if (!inertBodyElement) {\n        throw new Error('Unable to generate inert body element');\n    }\n    /** @type {?} */\n    const wrapper = (/** @type {?} */ (getTemplateContent((/** @type {?} */ (inertBodyElement))))) || inertBodyElement;\n    /** @type {?} */\n    const opCodes = { vars: 0, childIcus: [], create: [], remove: [], update: [] };\n    parseNodes(wrapper.firstChild, opCodes, parentIndex, nestedIcus, tIcus, expandoStartIndex);\n    return opCodes;\n}\n/** @type {?} */\nconst NESTED_ICU = /�(\\d+)�/;\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n * @param {?} currentNode The first node to parse\n * @param {?} icuCase The data for the ICU expression case that contains those nodes\n * @param {?} parentIndex Index of the current node's parent\n * @param {?} nestedIcus Data for the nested ICU expressions that this case contains\n * @param {?} tIcus Data for all ICU expressions of the current message\n * @param {?} expandoStartIndex Expando start index for the current ICU expression\n * @return {?}\n */\nfunction parseNodes(currentNode, icuCase, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n    if (currentNode) {\n        /** @type {?} */\n        const nestedIcusToCreate = [];\n        while (currentNode) {\n            /** @type {?} */\n            const nextNode = currentNode.nextSibling;\n            /** @type {?} */\n            const newIndex = expandoStartIndex + ++icuCase.vars;\n            switch (currentNode.nodeType) {\n                case Node.ELEMENT_NODE:\n                    /** @type {?} */\n                    const element$$1 = (/** @type {?} */ (currentNode));\n                    /** @type {?} */\n                    const tagName = element$$1.tagName.toLowerCase();\n                    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                        // This isn't a valid element, we won't create an element for it\n                        icuCase.vars--;\n                    }\n                    else {\n                        icuCase.create.push(ELEMENT_MARKER, tagName, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        /** @type {?} */\n                        const elAttrs = element$$1.attributes;\n                        for (let i = 0; i < elAttrs.length; i++) {\n                            /** @type {?} */\n                            const attr = (/** @type {?} */ (elAttrs.item(i)));\n                            /** @type {?} */\n                            const lowerAttrName = attr.name.toLowerCase();\n                            /** @type {?} */\n                            const hasBinding = !!attr.value.match(BINDING_REGEXP);\n                            // we assume the input string is safe, unless it's using a binding\n                            if (hasBinding) {\n                                if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                                    if (URI_ATTRS[lowerAttrName]) {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, _sanitizeUrl), icuCase.update);\n                                    }\n                                    else if (SRCSET_ATTRS[lowerAttrName]) {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, sanitizeSrcset), icuCase.update);\n                                    }\n                                    else {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name), icuCase.update);\n                                    }\n                                }\n                                else {\n                                    ngDevMode &&\n                                        console.warn(`WARNING: ignoring unsafe attribute value ${lowerAttrName} on element ${tagName} (see http://g.co/ng/security#xss)`);\n                                }\n                            }\n                            else {\n                                icuCase.create.push(newIndex << 3 /* SHIFT_REF */ | 4 /* Attr */, attr.name, attr.value);\n                            }\n                        }\n                        // Parse the children of this node (if any)\n                        parseNodes(currentNode.firstChild, icuCase, newIndex, nestedIcus, tIcus, expandoStartIndex);\n                        // Remove the parent node after the children\n                        icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                    }\n                    break;\n                case Node.TEXT_NODE:\n                    /** @type {?} */\n                    const value = currentNode.textContent || '';\n                    /** @type {?} */\n                    const hasBinding = value.match(BINDING_REGEXP);\n                    icuCase.create.push(hasBinding ? '' : value, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                    if (hasBinding) {\n                        addAllToArray(generateBindingUpdateOpCodes(value, newIndex), icuCase.update);\n                    }\n                    break;\n                case Node.COMMENT_NODE:\n                    // Check if the comment node is a placeholder for a nested ICU\n                    /** @type {?} */\n                    const match = NESTED_ICU.exec(currentNode.textContent || '');\n                    if (match) {\n                        /** @type {?} */\n                        const nestedIcuIndex = parseInt(match[1], 10);\n                        /** @type {?} */\n                        const newLocal = ngDevMode ? `nested ICU ${nestedIcuIndex}` : '';\n                        // Create the comment node that will anchor the ICU expression\n                        icuCase.create.push(COMMENT_MARKER, newLocal, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        /** @type {?} */\n                        const nestedIcu = nestedIcus[nestedIcuIndex];\n                        nestedIcusToCreate.push([nestedIcu, newIndex]);\n                    }\n                    else {\n                        // We do not handle any other type of comment\n                        icuCase.vars--;\n                    }\n                    break;\n                default:\n                    // We do not handle any other type of element\n                    icuCase.vars--;\n            }\n            currentNode = (/** @type {?} */ (nextNode));\n        }\n        for (let i = 0; i < nestedIcusToCreate.length; i++) {\n            /** @type {?} */\n            const nestedIcu = nestedIcusToCreate[i][0];\n            /** @type {?} */\n            const nestedIcuNodeIndex = nestedIcusToCreate[i][1];\n            icuStart(tIcus, nestedIcu, nestedIcuNodeIndex, expandoStartIndex + icuCase.vars);\n            // Since this is recursive, the last TIcu that was pushed is the one we want\n            /** @type {?} */\n            const nestTIcuIndex = tIcus.length - 1;\n            icuCase.vars += Math.max(...tIcus[nestTIcuIndex].vars);\n            icuCase.childIcus.push(nestTIcuIndex);\n            /** @type {?} */\n            const mask = getBindingMask(nestedIcu);\n            icuCase.update.push(toMaskBit(nestedIcu.mainBinding), // mask of the main binding\n            3, // skip 3 opCodes if not changed\n            -1 - nestedIcu.mainBinding, nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, nestTIcuIndex, mask, // mask of all the bindings of this ICU expression\n            2, // skip 2 opCodes if not changed\n            nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, nestTIcuIndex);\n            icuCase.remove.push(nestTIcuIndex << 3 /* SHIFT_REF */ | 6 /* RemoveNestedIcu */, nestedIcuNodeIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst COMPONENT_FACTORY_RESOLVER = {\n    provide: ComponentFactoryResolver,\n    useClass: ComponentFactoryResolver$1,\n    deps: [NgModuleRef],\n};\n/**\n * @template T\n */\nclass NgModuleRef$1 extends NgModuleRef {\n    /**\n     * @param {?} ngModuleType\n     * @param {?} _parent\n     */\n    constructor(ngModuleType, _parent) {\n        super();\n        this._parent = _parent;\n        // tslint:disable-next-line:require-internal-with-underscore\n        this._bootstrapComponents = [];\n        this.injector = this;\n        this.destroyCbs = [];\n        /** @type {?} */\n        /** @nocollapse */ const ngModuleDef = getNgModuleDef(ngModuleType);\n        ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n        this._bootstrapComponents = (/** @type {?} */ (ngModuleDef)).bootstrap;\n        /** @type {?} */\n        const additionalProviders = [\n            {\n                provide: NgModuleRef,\n                useValue: this,\n            },\n            COMPONENT_FACTORY_RESOLVER\n        ];\n        this._r3Injector = createInjector(ngModuleType, _parent, additionalProviders);\n        this.instance = this.get(ngModuleType);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, injectFlags = InjectFlags.Default) {\n        if (token === Injector || token === NgModuleRef || token === INJECTOR$1) {\n            return this;\n        }\n        return this._r3Injector.get(token, notFoundValue, injectFlags);\n    }\n    /**\n     * @return {?}\n     */\n    get componentFactoryResolver() {\n        return this.get(ComponentFactoryResolver);\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        (/** @type {?} */ (this.destroyCbs)).forEach(fn => fn());\n        this.destroyCbs = null;\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n        (/** @type {?} */ (this.destroyCbs)).push(callback);\n    }\n}\n/**\n * @template T\n */\nclass NgModuleFactory$1 extends NgModuleFactory {\n    /**\n     * @param {?} moduleType\n     */\n    constructor(moduleType) {\n        super();\n        this.moduleType = moduleType;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    create(parentInjector) {\n        return new NgModuleRef$1(this.moduleType, parentInjector);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being\n * tree-shaken away during production builds.\n * @param {?} type\n * @param {?} decorators\n * @param {?} ctorParameters\n * @param {?} propDecorators\n * @return {?}\n */\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n    /** @type {?} */\n    const clazz = (/** @type {?} */ (type));\n    if (decorators !== null) {\n        if (clazz.decorators !== undefined) {\n            clazz.decorators.push(...decorators);\n        }\n        else {\n            clazz.decorators = decorators;\n        }\n    }\n    if (ctorParameters !== null) {\n        // Rather than merging, clobber the existing parameters. If other projects exist which use\n        // tsickle-style annotations and reflect over them in the same way, this could cause issues,\n        // but that is vanishingly unlikely.\n        clazz.ctorParameters = ctorParameters;\n    }\n    if (propDecorators !== null) {\n        // The property decorator objects are merged as it is possible different fields have different\n        // decorator types. Decorators on individual fields are not merged, as it's also incredibly\n        // unlikely that a field will be decorated both with an Angular decorator and a non-Angular\n        // decorator that's also been downleveled.\n        if (clazz.propDecorators !== undefined) {\n            clazz.propDecorators = Object.assign({}, clazz.propDecorators, propDecorators);\n        }\n        else {\n            clazz.propDecorators = propDecorators;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |------consts------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @template T\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns a value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} value\n */\nfunction pureFunction0(slotOffset, pureFn, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return isCreationMode() ?\n        updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n        getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns an updated value\n * @param {?} exp Updated expression value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction1(slotOffset, pureFn, exp, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated(lView, bindingIndex, exp) ?\n        updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n        getBinding(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n        updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n        getBinding(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n        updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n        getBinding(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n        updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n        getBinding(lView, bindingIndex + 4);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n        updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\n        getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n        updateBinding(lView, bindingIndex + 6, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n        getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n        updateBinding(lView, bindingIndex + 7, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n        getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?} exp8\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    const bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    const lView = getLView();\n    /** @type {?} */\n    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n        updateBinding(lView, bindingIndex + 8, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n        getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param {?} exps An array of binding values\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nfunction pureFunctionV(slotOffset, pureFn, exps, thisArg) {\n    // TODO(kara): use bindingRoot instead of bindingStartIndex when implementing host bindings\n    /** @type {?} */\n    let bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    let different = false;\n    /** @type {?} */\n    const lView = getLView();\n    for (let i = 0; i < exps.length; i++) {\n        bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n    }\n    return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n        getBinding(lView, bindingIndex);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Create a pipe.\n *\n * @param {?} index Pipe index where the pipe will be stored.\n * @param {?} pipeName The name of the pipe\n * @return {?} T the instance of the pipe.\n */\nfunction pipe(index, pipeName) {\n    /** @type {?} */\n    const tView = getLView()[TVIEW];\n    /** @type {?} */\n    let pipeDef;\n    /** @type {?} */\n    const adjustedIndex = index + HEADER_OFFSET;\n    if (tView.firstTemplatePass) {\n        pipeDef = getPipeDef$1(pipeName, tView.pipeRegistry);\n        tView.data[adjustedIndex] = pipeDef;\n        if (pipeDef.onDestroy) {\n            (tView.pipeDestroyHooks || (tView.pipeDestroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n        }\n    }\n    else {\n        pipeDef = (/** @type {?} */ (tView.data[adjustedIndex]));\n    }\n    /** @type {?} */\n    const pipeInstance = pipeDef.factory(null);\n    store(index, pipeInstance);\n    return pipeInstance;\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param {?} name Name of pipe to resolve\n * @param {?} registry Full list of available pipes\n * @return {?} Matching PipeDef\n */\nfunction getPipeDef$1(name, registry) {\n    if (registry) {\n        for (let i = registry.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const pipeDef = registry[i];\n            if (name === pipeDef.name) {\n                return pipeDef;\n            }\n        }\n    }\n    throw new Error(`The pipe '${name}' could not be found!`);\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nfunction pipeBind1(index, slotOffset, v1) {\n    /** @type {?} */\n    const pipeInstance = load(index);\n    return unwrapValue(isPure(index) ? pureFunction1(slotOffset, pipeInstance.transform, v1, pipeInstance) :\n        pipeInstance.transform(v1));\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nfunction pipeBind2(index, slotOffset, v1, v2) {\n    /** @type {?} */\n    const pipeInstance = load(index);\n    return unwrapValue(isPure(index) ? pureFunction2(slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n        pipeInstance.transform(v1, v2));\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 4rd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nfunction pipeBind3(index, slotOffset, v1, v2, v3) {\n    /** @type {?} */\n    const pipeInstance = load(index);\n    return unwrapValue(isPure(index) ? pureFunction3(slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3));\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 3rd argument to {\\@link PipeTransform#transform}.\n * @param {?} v4 4th argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nfunction pipeBind4(index, slotOffset, v1, v2, v3, v4) {\n    /** @type {?} */\n    const pipeInstance = load(index);\n    return unwrapValue(isPure(index) ?\n        pureFunction4(slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3, v4));\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} values Array of arguments to pass to {\\@link PipeTransform#transform} method.\n * @return {?}\n */\nfunction pipeBindV(index, slotOffset, values) {\n    /** @type {?} */\n    const pipeInstance = load(index);\n    return unwrapValue(isPure(index) ? pureFunctionV(slotOffset, pipeInstance.transform, values, pipeInstance) :\n        pipeInstance.transform.apply(pipeInstance, values));\n}\n/**\n * @param {?} index\n * @return {?}\n */\nfunction isPure(index) {\n    return ((/** @type {?} */ (getLView()[TVIEW].data[index + HEADER_OFFSET]))).pure;\n}\n/**\n * Unwrap the output of a pipe transformation.\n * In order to trick change detection into considering that the new value is always different from\n * the old one, the old value is overwritten by NO_CHANGE.\n *\n * @param {?} newValue the pipe transformation output.\n * @return {?}\n */\nfunction unwrapValue(newValue) {\n    if (WrappedValue.isWrapped(newValue)) {\n        newValue = WrappedValue.unwrap(newValue);\n        getLView()[getBindingRoot()] = NO_CHANGE;\n    }\n    return newValue;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * \\@publicApi\n * @template T\n */\nclass EventEmitter extends Subject {\n    // tslint:disable-line\n    /**\n     * Creates an instance of this class that can\n     * deliver events synchronously or asynchronously.\n     *\n     * @param {?=} isAsync When true, deliver events asynchronously.\n     *\n     */\n    constructor(isAsync = false) {\n        super();\n        this.__isAsync = isAsync;\n    }\n    /**\n     * Emits an event containing a given value.\n     * @param {?=} value The value to emit.\n     * @return {?}\n     */\n    emit(value) { super.next(value); }\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param {?=} generatorOrNext When supplied, a custom handler for emitted events.\n     * @param {?=} error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param {?=} complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     * @return {?}\n     */\n    subscribe(generatorOrNext, error, complete) {\n        /** @type {?} */\n        let schedulerFn;\n        /** @type {?} */\n        let errorFn = (err) => null;\n        /** @type {?} */\n        let completeFn = () => null;\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = this.__isAsync ? (value) => {\n                setTimeout(() => generatorOrNext.next(value));\n            } : (value) => { generatorOrNext.next(value); };\n            if (generatorOrNext.error) {\n                errorFn = this.__isAsync ? (err) => { setTimeout(() => generatorOrNext.error(err)); } :\n                    (err) => { generatorOrNext.error(err); };\n            }\n            if (generatorOrNext.complete) {\n                completeFn = this.__isAsync ? () => { setTimeout(() => generatorOrNext.complete()); } :\n                    () => { generatorOrNext.complete(); };\n            }\n        }\n        else {\n            schedulerFn = this.__isAsync ? (value) => { setTimeout(() => generatorOrNext(value)); } :\n                (value) => { generatorOrNext(value); };\n            if (error) {\n                errorFn =\n                    this.__isAsync ? (err) => { setTimeout(() => error(err)); } : (err) => { error(err); };\n            }\n            if (complete) {\n                completeFn =\n                    this.__isAsync ? () => { setTimeout(() => complete()); } : () => { complete(); };\n            }\n        }\n        /** @type {?} */\n        const sink = super.subscribe(schedulerFn, errorFn, completeFn);\n        if (generatorOrNext instanceof Subscription) {\n            generatorOrNext.add(sink);\n        }\n        return sink;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass TemplateRef {\n}\n/**\n * \\@internal\n */\nTemplateRef.__NG_ELEMENT_ID__ = () => SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef);\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = injectTemplateRef;\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LQueries_ {\n    /**\n     * @param {?} parent\n     * @param {?} shallow\n     * @param {?} deep\n     */\n    constructor(parent, shallow, deep) {\n        this.parent = parent;\n        this.shallow = shallow;\n        this.deep = deep;\n    }\n    /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    track(queryList, predicate, descend, read) {\n        if (descend) {\n            this.deep = createQuery(this.deep, queryList, predicate, read != null ? read : null);\n        }\n        else {\n            this.shallow = createQuery(this.shallow, queryList, predicate, read != null ? read : null);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    clone() { return new LQueries_(this, null, this.deep); }\n    /**\n     * @return {?}\n     */\n    container() {\n        /** @type {?} */\n        const shallowResults = copyQueriesToContainer(this.shallow);\n        /** @type {?} */\n        const deepResults = copyQueriesToContainer(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    }\n    /**\n     * @return {?}\n     */\n    createView() {\n        /** @type {?} */\n        const shallowResults = copyQueriesToView(this.shallow);\n        /** @type {?} */\n        const deepResults = copyQueriesToView(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    insertView(index) {\n        insertView$1(index, this.shallow);\n        insertView$1(index, this.deep);\n    }\n    /**\n     * @param {?} tNode\n     * @return {?}\n     */\n    addNode(tNode) {\n        add(this.deep, tNode);\n        if (isContentQueryHost(tNode)) {\n            add(this.shallow, tNode);\n            if (tNode.parent && isContentQueryHost(tNode.parent)) {\n                // if node has a content query and parent also has a content query\n                // both queries need to check this node for shallow matches\n                add((/** @type {?} */ (this.parent)).shallow, tNode);\n            }\n            return this.parent;\n        }\n        isRootNodeOfQuery(tNode) && add(this.shallow, tNode);\n        return this;\n    }\n    /**\n     * @return {?}\n     */\n    removeView() {\n        removeView$1(this.shallow);\n        removeView$1(this.deep);\n    }\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isRootNodeOfQuery(tNode) {\n    return tNode.parent === null || isContentQueryHost(tNode.parent);\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToContainer(query) {\n    /** @type {?} */\n    let result = null;\n    while (query) {\n        /** @type {?} */\n        const containerValues = [];\n        query.values.push(containerValues);\n        /** @type {?} */\n        const clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: containerValues,\n            containerValues: null\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToView(query) {\n    /** @type {?} */\n    let result = null;\n    while (query) {\n        /** @type {?} */\n        const clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: [],\n            containerValues: query.values\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} index\n * @param {?} query\n * @return {?}\n */\nfunction insertView$1(index, query) {\n    while (query) {\n        ngDevMode &&\n            assertDefined(query.containerValues, 'View queries need to have a pointer to container values.');\n        (/** @type {?} */ (query.containerValues)).splice(index, 0, query.values);\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction removeView$1(query) {\n    while (query) {\n        ngDevMode &&\n            assertDefined(query.containerValues, 'View queries need to have a pointer to container values.');\n        /** @type {?} */\n        const containerValues = (/** @type {?} */ (query.containerValues));\n        /** @type {?} */\n        const viewValuesIdx = containerValues.indexOf(query.values);\n        /** @type {?} */\n        const removed = containerValues.splice(viewValuesIdx, 1);\n        // mark a query as dirty only when removed view had matching modes\n        ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n        if (removed[0].length) {\n            query.list.setDirty();\n        }\n        query = query.next;\n    }\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param {?} tNode static data of a node to check\n * @param {?} selector selector to match\n * @return {?} directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n    /** @type {?} */\n    const localNames = tNode.localNames;\n    if (localNames) {\n        for (let i = 0; i < localNames.length; i += 2) {\n            if (localNames[i] === selector) {\n                return (/** @type {?} */ (localNames[i + 1]));\n            }\n        }\n    }\n    return null;\n}\n// TODO: \"read\" should be an AbstractType (FW-486)\n/**\n * @param {?} read\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction queryByReadToken(read, tNode, currentView) {\n    /** @type {?} */\n    const factoryFn = ((/** @type {?} */ (read)))[NG_ELEMENT_ID];\n    if (typeof factoryFn === 'function') {\n        return factoryFn();\n    }\n    else {\n        /** @type {?} */\n        const matchingIdx = locateDirectiveOrProvider(tNode, currentView, (/** @type {?} */ (read)), false, false);\n        if (matchingIdx !== null) {\n            return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, (/** @type {?} */ (tNode)));\n        }\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction queryByTNodeType(tNode, currentView) {\n    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n        return createElementRef(ElementRef, tNode, currentView);\n    }\n    if (tNode.type === 0 /* Container */) {\n        return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n    }\n    return null;\n}\n/**\n * @param {?} templateRefToken\n * @param {?} tNode\n * @param {?} currentView\n * @param {?} read\n * @return {?}\n */\nfunction queryByTemplateRef(templateRefToken, tNode, currentView, read) {\n    /** @type {?} */\n    const templateRefResult = ((/** @type {?} */ (templateRefToken)))[NG_ELEMENT_ID]();\n    if (read) {\n        return templateRefResult ? queryByReadToken(read, tNode, currentView) : null;\n    }\n    return templateRefResult;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @param {?} read\n * @param {?} matchingIdx\n * @return {?}\n */\nfunction queryRead(tNode, currentView, read, matchingIdx) {\n    if (read) {\n        return queryByReadToken(read, tNode, currentView);\n    }\n    if (matchingIdx > -1) {\n        return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, (/** @type {?} */ (tNode)));\n    }\n    // if read token and / or strategy is not specified,\n    // detect it using appropriate tNode type\n    return queryByTNodeType(tNode, currentView);\n}\n/**\n * @param {?} query\n * @param {?} tNode\n * @return {?}\n */\nfunction add(query, tNode) {\n    /** @type {?} */\n    const currentView = getLView();\n    while (query) {\n        /** @type {?} */\n        const predicate = query.predicate;\n        /** @type {?} */\n        const type = (/** @type {?} */ (predicate.type));\n        if (type) {\n            /** @type {?} */\n            let result = null;\n            if (type === TemplateRef) {\n                result = queryByTemplateRef(type, tNode, currentView, predicate.read);\n            }\n            else {\n                /** @type {?} */\n                const matchingIdx = locateDirectiveOrProvider(tNode, currentView, type, false, false);\n                if (matchingIdx !== null) {\n                    result = queryRead(tNode, currentView, predicate.read, matchingIdx);\n                }\n            }\n            if (result !== null) {\n                addMatch(query, result);\n            }\n        }\n        else {\n            /** @type {?} */\n            const selector = (/** @type {?} */ (predicate.selector));\n            for (let i = 0; i < selector.length; i++) {\n                /** @type {?} */\n                const matchingIdx = getIdxOfMatchingSelector(tNode, selector[i]);\n                if (matchingIdx !== null) {\n                    /** @type {?} */\n                    const result = queryRead(tNode, currentView, predicate.read, matchingIdx);\n                    if (result !== null) {\n                        addMatch(query, result);\n                    }\n                }\n            }\n        }\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @param {?} matchingValue\n * @return {?}\n */\nfunction addMatch(query, matchingValue) {\n    query.values.push(matchingValue);\n    query.list.setDirty();\n}\n/**\n * @template T\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createPredicate(predicate, read) {\n    /** @type {?} */\n    const isArray = Array.isArray(predicate);\n    return {\n        type: isArray ? null : (/** @type {?} */ (predicate)),\n        selector: isArray ? (/** @type {?} */ (predicate)) : null,\n        read: read\n    };\n}\n/**\n * @template T\n * @param {?} previous\n * @param {?} queryList\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createQuery(previous, queryList, predicate, read) {\n    return {\n        next: previous,\n        list: queryList,\n        predicate: createPredicate(predicate, read),\n        values: ((/** @type {?} */ ((/** @type {?} */ (queryList)))))._valuesTree,\n        containerValues: null\n    };\n}\n/**\n * @template T\n */\nclass QueryList_ {\n    constructor() {\n        this.dirty = true;\n        this.changes = new EventEmitter();\n        this._values = [];\n        /**\n         * \\@internal\n         */\n        this._valuesTree = [];\n    }\n    /**\n     * @return {?}\n     */\n    get length() { return this._values.length; }\n    /**\n     * @return {?}\n     */\n    get first() {\n        /** @type {?} */\n        let values = this._values;\n        return values.length ? values[0] : null;\n    }\n    /**\n     * @return {?}\n     */\n    get last() {\n        /** @type {?} */\n        let values = this._values;\n        return values.length ? values[values.length - 1] : null;\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    map(fn) { return this._values.map(fn); }\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    filter(fn) {\n        return this._values.filter(fn);\n    }\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    find(fn) {\n        return this._values.find(fn);\n    }\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    reduce(fn, init) {\n        return this._values.reduce(fn, init);\n    }\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) { this._values.forEach(fn); }\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    some(fn) {\n        return this._values.some(fn);\n    }\n    /**\n     * @return {?}\n     */\n    toArray() { return this._values.slice(0); }\n    /**\n     * @return {?}\n     */\n    [getSymbolIterator()]() { return ((/** @type {?} */ (this._values)))[getSymbolIterator()](); }\n    /**\n     * @return {?}\n     */\n    toString() { return this._values.toString(); }\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    reset(res) {\n        this._values = flatten(res);\n        ((/** @type {?} */ (this))).dirty = false;\n    }\n    /**\n     * @return {?}\n     */\n    notifyOnChanges() { ((/** @type {?} */ (this.changes))).emit(this); }\n    /**\n     * @return {?}\n     */\n    setDirty() { ((/** @type {?} */ (this))).dirty = true; }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        ((/** @type {?} */ (this.changes))).complete();\n        ((/** @type {?} */ (this.changes))).unsubscribe();\n    }\n}\n/** @type {?} */\nconst QueryList = (/** @type {?} */ (QueryList_));\n/**\n * Creates and returns a QueryList.\n *\n * @template T\n * @param {?} memoryIndex The index in memory where the QueryList should be saved. If null,\n * this is is a content query and the QueryList will be saved later through directiveCreate.\n * @param {?} predicate The type for which the query will search\n * @param {?=} descend Whether or not to descend into children\n * @param {?=} read What to save in the query\n * @return {?} QueryList<T>\n */\nfunction query(memoryIndex, predicate, descend, \n// TODO: \"read\" should be an AbstractType (FW-486)\nread) {\n    ngDevMode && assertPreviousIsParent(getIsParent());\n    /** @type {?} */\n    const queryList = new QueryList();\n    /** @type {?} */\n    const queries = getOrCreateCurrentQueries(LQueries_);\n    queries.track(queryList, predicate, descend, read);\n    storeCleanupWithContext(getLView(), queryList, queryList.destroy);\n    if (memoryIndex != null) {\n        store(memoryIndex, queryList);\n    }\n    return queryList;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n * Returns true if a query got dirty during change detection, false otherwise.\n * @param {?} queryList\n * @return {?}\n */\nfunction queryRefresh(queryList) {\n    /** @type {?} */\n    const queryListImpl = ((/** @type {?} */ ((/** @type {?} */ (queryList)))));\n    if (queryList.dirty) {\n        queryList.reset(queryListImpl._valuesTree);\n        queryList.notifyOnChanges();\n        return true;\n    }\n    return false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction templateRefExtractor(tNode, currentView) {\n    return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst BRAND = '__SANITIZER_TRUSTED_BRAND__';\n/**\n * @param {?} value\n * @param {?} type\n * @return {?}\n */\nfunction allowSanitizationBypass(value, type) {\n    return (value instanceof String && ((/** @type {?} */ (value)))[BRAND] === type);\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link htmlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedHtml `html` string which needs to be implicitly trusted.\n * @return {?} a `html` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustHtml(trustedHtml) {\n    return bypassSanitizationTrustString(trustedHtml, \"Html\" /* Html */);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link styleSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedStyle `style` string which needs to be implicitly trusted.\n * @return {?} a `style` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustStyle(trustedStyle) {\n    return bypassSanitizationTrustString(trustedStyle, \"Style\" /* Style */);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link scriptSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedScript `script` string which needs to be implicitly trusted.\n * @return {?} a `script` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustScript(trustedScript) {\n    return bypassSanitizationTrustString(trustedScript, \"Script\" /* Script */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link urlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustUrl(trustedUrl) {\n    return bypassSanitizationTrustString(trustedUrl, \"Url\" /* Url */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n    return bypassSanitizationTrustString(trustedResourceUrl, \"ResourceUrl\" /* ResourceUrl */);\n}\n/**\n * @param {?} trustedString\n * @param {?} mode\n * @return {?}\n */\nfunction bypassSanitizationTrustString(trustedString, mode) {\n    /** @type {?} */\n    const trusted = (/** @type {?} */ (new String(trustedString)));\n    trusted[BRAND] = mode;\n    return trusted;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n * @type {?}\n */\nconst VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\n/** @type {?} */\nconst TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\n/** @type {?} */\nconst COLOR_FNS = '(?:rgb|hsl)a?';\n/** @type {?} */\nconst GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\n/** @type {?} */\nconst CSS3_FNS = '(?:calc|attr)';\n/** @type {?} */\nconst FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\n/** @type {?} */\nconst SAFE_STYLE_VALUE = new RegExp(`^(${VALUES}|` +\n    `(?:${TRANSFORMATION_FNS}|${COLOR_FNS}|${GRADIENTS}|${CSS3_FNS})` +\n    `${FN_ARGS})$`, 'g');\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n * @type {?}\n */\nconst URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value) {\n    /** @type {?} */\n    let outsideSingle = true;\n    /** @type {?} */\n    let outsideDouble = true;\n    for (let i = 0; i < value.length; i++) {\n        /** @type {?} */\n        const c = value.charAt(i);\n        if (c === '\\'' && outsideDouble) {\n            outsideSingle = !outsideSingle;\n        }\n        else if (c === '\"' && outsideSingle) {\n            outsideDouble = !outsideDouble;\n        }\n    }\n    return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nfunction _sanitizeStyle(value) {\n    value = String(value).trim(); // Make sure it's actually a string.\n    if (!value)\n        return '';\n    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n    // reasoning behind this.\n    /** @type {?} */\n    const urlMatch = value.match(URL_RE);\n    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n        return value; // Safe style values.\n    }\n    if (isDevMode()) {\n        console.warn(`WARNING: sanitizing unsafe style value ${value} (see http://g.co/ng/security#xss).`);\n    }\n    return 'unsafe';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustHtml}.\n *\n * @param {?} unsafeHtml untrusted `html`, typically from the user.\n * @return {?} `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n */\nfunction sanitizeHtml(unsafeHtml) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '';\n    }\n    if (allowSanitizationBypass(unsafeHtml, \"Html\" /* Html */)) {\n        return unsafeHtml.toString();\n    }\n    return _sanitizeHtml(document, stringify$1(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustStyle}.\n *\n * @param {?} unsafeStyle untrusted `style`, typically from the user.\n * @return {?} `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n */\nfunction sanitizeStyle(unsafeStyle) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n    }\n    if (allowSanitizationBypass(unsafeStyle, \"Style\" /* Style */)) {\n        return unsafeStyle.toString();\n    }\n    return _sanitizeStyle(stringify$1(unsafeStyle));\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustUrl}.\n *\n * @param {?} unsafeUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n */\nfunction sanitizeUrl(unsafeUrl) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeUrl, \"Url\" /* Url */)) {\n        return unsafeUrl.toString();\n    }\n    return _sanitizeUrl(stringify$1(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {\\@link bypassSanitizationTrustResourceUrl}.\n *\n * @param {?} unsafeResourceUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n */\nfunction sanitizeResourceUrl(unsafeResourceUrl) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeResourceUrl, \"ResourceUrl\" /* ResourceUrl */)) {\n        return unsafeResourceUrl.toString();\n    }\n    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {\\@link\n * bypassSanitizationTrustScript}.\n *\n * @param {?} unsafeScript untrusted `script`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n */\nfunction sanitizeScript(unsafeScript) {\n    /** @type {?} */\n    const sanitizer = getSanitizer();\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '';\n    }\n    if (allowSanitizationBypass(unsafeScript, \"Script\" /* Script */)) {\n        return unsafeScript.toString();\n    }\n    throw new Error('unsafe value used in a script context');\n}\n/**\n * The default style sanitizer will handle sanitization for style properties by\n * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n * @type {?}\n */\nconst defaultStyleSanitizer = ((/** @type {?} */ (function (prop, value) {\n    if (value === undefined) {\n        return prop === 'background-image' || prop === 'background' || prop === 'border-image' ||\n            prop === 'filter' || prop === 'list-style' || prop === 'list-style-image';\n    }\n    return sanitizeStyle(value);\n})));\n/**\n * @return {?}\n */\nfunction getSanitizer() {\n    /** @type {?} */\n    const lView = getLView();\n    return lView && lView[SANITIZER];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A mapping of the \\@angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of \\@angular/core.\n * @type {?}\n */\nconst angularCoreEnv = {\n    'ɵdefineBase': defineBase,\n    'ɵdefineComponent': defineComponent,\n    'ɵdefineDirective': defineDirective,\n    'defineInjectable': defineInjectable,\n    'defineInjector': defineInjector,\n    'ɵdefineNgModule': defineNgModule,\n    'ɵdefinePipe': definePipe,\n    'ɵdirectiveInject': directiveInject,\n    'ɵgetFactoryOf': getFactoryOf,\n    'ɵgetInheritedFactory': getInheritedFactory,\n    'inject': inject,\n    'ɵinjectAttribute': injectAttribute,\n    'ɵtemplateRefExtractor': templateRefExtractor,\n    'ɵNgOnChangesFeature': NgOnChangesFeature,\n    'ɵProvidersFeature': ProvidersFeature,\n    'ɵInheritDefinitionFeature': InheritDefinitionFeature,\n    'ɵelementAttribute': elementAttribute,\n    'ɵbind': bind,\n    'ɵcontainer': container,\n    'ɵnextContext': nextContext,\n    'ɵcontainerRefreshStart': containerRefreshStart,\n    'ɵcontainerRefreshEnd': containerRefreshEnd,\n    'ɵloadQueryList': loadQueryList,\n    'ɵnamespaceHTML': namespaceHTML,\n    'ɵnamespaceMathML': namespaceMathML,\n    'ɵnamespaceSVG': namespaceSVG,\n    'ɵenableBindings': enableBindings,\n    'ɵdisableBindings': disableBindings,\n    'ɵallocHostVars': allocHostVars,\n    'ɵelementStart': elementStart,\n    'ɵelementEnd': elementEnd,\n    'ɵelement': element,\n    'ɵelementContainerStart': elementContainerStart,\n    'ɵelementContainerEnd': elementContainerEnd,\n    'ɵpureFunction0': pureFunction0,\n    'ɵpureFunction1': pureFunction1,\n    'ɵpureFunction2': pureFunction2,\n    'ɵpureFunction3': pureFunction3,\n    'ɵpureFunction4': pureFunction4,\n    'ɵpureFunction5': pureFunction5,\n    'ɵpureFunction6': pureFunction6,\n    'ɵpureFunction7': pureFunction7,\n    'ɵpureFunction8': pureFunction8,\n    'ɵpureFunctionV': pureFunctionV,\n    'ɵgetCurrentView': getCurrentView,\n    'ɵrestoreView': restoreView,\n    'ɵinterpolation1': interpolation1,\n    'ɵinterpolation2': interpolation2,\n    'ɵinterpolation3': interpolation3,\n    'ɵinterpolation4': interpolation4,\n    'ɵinterpolation5': interpolation5,\n    'ɵinterpolation6': interpolation6,\n    'ɵinterpolation7': interpolation7,\n    'ɵinterpolation8': interpolation8,\n    'ɵinterpolationV': interpolationV,\n    'ɵelementClassProp': elementClassProp,\n    'ɵlistener': listener,\n    'ɵload': load,\n    'ɵprojection': projection,\n    'ɵelementProperty': elementProperty,\n    'ɵcomponentHostSyntheticProperty': componentHostSyntheticProperty,\n    'ɵpipeBind1': pipeBind1,\n    'ɵpipeBind2': pipeBind2,\n    'ɵpipeBind3': pipeBind3,\n    'ɵpipeBind4': pipeBind4,\n    'ɵpipeBindV': pipeBindV,\n    'ɵprojectionDef': projectionDef,\n    'ɵpipe': pipe,\n    'ɵquery': query,\n    'ɵqueryRefresh': queryRefresh,\n    'ɵregisterContentQuery': registerContentQuery,\n    'ɵreference': reference,\n    'ɵelementStyling': elementStyling,\n    'ɵelementHostAttrs': elementHostAttrs,\n    'ɵelementStylingMap': elementStylingMap,\n    'ɵelementStyleProp': elementStyleProp,\n    'ɵelementStylingApply': elementStylingApply,\n    'ɵtemplate': template,\n    'ɵtext': text,\n    'ɵtextBinding': textBinding,\n    'ɵembeddedViewStart': embeddedViewStart,\n    'ɵembeddedViewEnd': embeddedViewEnd,\n    'ɵi18n': i18n,\n    'ɵi18nAttributes': i18nAttributes,\n    'ɵi18nExp': i18nExp,\n    'ɵi18nStart': i18nStart,\n    'ɵi18nEnd': i18nEnd,\n    'ɵi18nApply': i18nApply,\n    'ɵi18nPostprocess': i18nPostprocess,\n    'ɵsanitizeHtml': sanitizeHtml,\n    'ɵsanitizeStyle': sanitizeStyle,\n    'ɵdefaultStyleSanitizer': defaultStyleSanitizer,\n    'ɵsanitizeResourceUrl': sanitizeResourceUrl,\n    'ɵsanitizeScript': sanitizeScript,\n    'ɵsanitizeUrl': sanitizeUrl\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to load ng module factories.\n *\n * \\@publicApi\n * @abstract\n */\nclass NgModuleFactoryLoader {\n}\n/**\n * Map of module-id to the corresponding NgModule.\n * - In pre Ivy we track NgModuleFactory,\n * - In post Ivy we track the NgModuleType\n * @type {?}\n */\nconst modules = new Map();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * \\@publicApi\n * @param {?} id\n * @param {?} factory\n * @return {?}\n */\nfunction registerModuleFactory(id, factory) {\n    /** @type {?} */\n    const existing = (/** @type {?} */ (modules.get(id)));\n    assertNotExisting(id, existing && existing.moduleType);\n    modules.set(id, factory);\n}\n/**\n * @param {?} id\n * @param {?} type\n * @return {?}\n */\nfunction assertNotExisting(id, type) {\n    if (type) {\n        throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n    }\n}\n/**\n * @param {?} id\n * @param {?} ngModuleType\n * @return {?}\n */\nfunction registerNgModuleType(id, ngModuleType) {\n    /** @type {?} */\n    const existing = (/** @type {?} */ (modules.get(id)));\n    assertNotExisting(id, existing);\n    modules.set(id, ngModuleType);\n}\n/**\n * @param {?} id\n * @return {?}\n */\nfunction getModuleFactory__PRE_R3__(id) {\n    /** @type {?} */\n    const factory = (/** @type {?} */ (modules.get(id)));\n    if (!factory)\n        throw noModuleError(id);\n    return factory;\n}\n/**\n * @param {?} id\n * @return {?}\n */\nfunction getModuleFactory__POST_R3__(id) {\n    /** @type {?} */\n    const type = (/** @type {?} */ (modules.get(id)));\n    if (!type)\n        throw noModuleError(id);\n    return new NgModuleFactory$1(type);\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * \\@publicApi\n * @type {?}\n */\nconst getModuleFactory = getModuleFactory__PRE_R3__;\n/**\n * @param {?} id\n * @return {?}\n */\nfunction noModuleError(id) {\n    return new Error(`No module with ID ${id} loaded`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n * \\@publicApi\n * @type {?}\n */\nconst Type = Function;\n/**\n * @param {?} v\n * @return {?}\n */\nfunction isType(v) {\n    return typeof v === 'function';\n}\n// WARNING: interface has both a type and a value, skipping emit\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Attention: These regex has to hold even if the code is minified!\n * @type {?}\n */\nconst DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\n/** @type {?} */\nconst INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/** @type {?} */\nconst INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\nclass ReflectionCapabilities {\n    /**\n     * @param {?=} reflect\n     */\n    constructor(reflect) { this._reflect = reflect || _global['Reflect']; }\n    /**\n     * @return {?}\n     */\n    isReflectionEnabled() { return true; }\n    /**\n     * @template T\n     * @param {?} t\n     * @return {?}\n     */\n    factory(t) { return (...args) => new t(...args); }\n    /**\n     * \\@internal\n     * @param {?} paramTypes\n     * @param {?} paramAnnotations\n     * @return {?}\n     */\n    _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n        /** @type {?} */\n        let result;\n        if (typeof paramTypes === 'undefined') {\n            result = new Array(paramAnnotations.length);\n        }\n        else {\n            result = new Array(paramTypes.length);\n        }\n        for (let i = 0; i < result.length; i++) {\n            // TS outputs Object for parameters without types, while Traceur omits\n            // the annotations. For now we preserve the Traceur behavior to aid\n            // migration, but this can be revisited.\n            if (typeof paramTypes === 'undefined') {\n                result[i] = [];\n            }\n            else if (paramTypes[i] != Object) {\n                result[i] = [paramTypes[i]];\n            }\n            else {\n                result[i] = [];\n            }\n            if (paramAnnotations && paramAnnotations[i] != null) {\n                result[i] = result[i].concat(paramAnnotations[i]);\n            }\n        }\n        return result;\n    }\n    /**\n     * @private\n     * @param {?} type\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    _ownParameters(type, parentCtor) {\n        /** @type {?} */\n        const typeStr = type.toString();\n        // If we have no decorators, we only have function.length as metadata.\n        // In that case, to detect whether a child class declared an own constructor or not,\n        // we need to look inside of that constructor to check whether it is\n        // just calling the parent.\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n        // that sets 'design:paramtypes' to []\n        // if a class inherits from another class but has no ctor declared itself.\n        if (DELEGATE_CTOR.exec(typeStr) ||\n            (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {\n            return null;\n        }\n        // Prefer the direct API.\n        if (((/** @type {?} */ (type))).parameters && ((/** @type {?} */ (type))).parameters !== parentCtor.parameters) {\n            return ((/** @type {?} */ (type))).parameters;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        /** @type {?} */\n        const tsickleCtorParams = ((/** @type {?} */ (type))).ctorParameters;\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n            // Newer tsickle uses a function closure\n            // Retain the non-function case for compatibility with older tsickle\n            /** @type {?} */\n            const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n            /** @type {?} */\n            const paramTypes = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);\n            /** @type {?} */\n            const paramAnnotations = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // API for metadata created by invoking the decorators.\n        /** @type {?} */\n        const paramAnnotations = type.hasOwnProperty(PARAMETERS) && ((/** @type {?} */ (type)))[PARAMETERS];\n        /** @type {?} */\n        const paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n            this._reflect.getOwnMetadata('design:paramtypes', type);\n        if (paramTypes || paramAnnotations) {\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // If a class has no decorators, at least create metadata\n        // based on function.length.\n        // Note: We know that this is a real constructor as we checked\n        // the content of the constructor above.\n        return new Array(((/** @type {?} */ (type.length)))).fill(undefined);\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    parameters(type) {\n        // Note: only report metadata if we have at least one class decorator\n        // to stay in sync with the static reflector.\n        if (!isType(type)) {\n            return [];\n        }\n        /** @type {?} */\n        const parentCtor = getParentCtor(type);\n        /** @type {?} */\n        let parameters = this._ownParameters(type, parentCtor);\n        if (!parameters && parentCtor !== Object) {\n            parameters = this.parameters(parentCtor);\n        }\n        return parameters || [];\n    }\n    /**\n     * @private\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    _ownAnnotations(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (((/** @type {?} */ (typeOrFunc))).annotations && ((/** @type {?} */ (typeOrFunc))).annotations !== parentCtor.annotations) {\n            /** @type {?} */\n            let annotations = ((/** @type {?} */ (typeOrFunc))).annotations;\n            if (typeof annotations === 'function' && annotations.annotations) {\n                annotations = annotations.annotations;\n            }\n            return annotations;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (((/** @type {?} */ (typeOrFunc))).decorators && ((/** @type {?} */ (typeOrFunc))).decorators !== parentCtor.decorators) {\n            return convertTsickleDecoratorIntoMetadata(((/** @type {?} */ (typeOrFunc))).decorators);\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n            return ((/** @type {?} */ (typeOrFunc)))[ANNOTATIONS];\n        }\n        return null;\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    annotations(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return [];\n        }\n        /** @type {?} */\n        const parentCtor = getParentCtor(typeOrFunc);\n        /** @type {?} */\n        const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n        /** @type {?} */\n        const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n        return parentAnnotations.concat(ownAnnotations);\n    }\n    /**\n     * @private\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    _ownPropMetadata(typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if (((/** @type {?} */ (typeOrFunc))).propMetadata &&\n            ((/** @type {?} */ (typeOrFunc))).propMetadata !== parentCtor.propMetadata) {\n            /** @type {?} */\n            let propMetadata = ((/** @type {?} */ (typeOrFunc))).propMetadata;\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                propMetadata = propMetadata.propMetadata;\n            }\n            return propMetadata;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if (((/** @type {?} */ (typeOrFunc))).propDecorators &&\n            ((/** @type {?} */ (typeOrFunc))).propDecorators !== parentCtor.propDecorators) {\n            /** @type {?} */\n            const propDecorators = ((/** @type {?} */ (typeOrFunc))).propDecorators;\n            /** @type {?} */\n            const propMetadata = (/** @type {?} */ ({}));\n            Object.keys(propDecorators).forEach(prop => {\n                propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n            });\n            return propMetadata;\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n            return ((/** @type {?} */ (typeOrFunc)))[PROP_METADATA];\n        }\n        return null;\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    propMetadata(typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        /** @type {?} */\n        const parentCtor = getParentCtor(typeOrFunc);\n        /** @type {?} */\n        const propMetadata = {};\n        if (parentCtor !== Object) {\n            /** @type {?} */\n            const parentPropMetadata = this.propMetadata(parentCtor);\n            Object.keys(parentPropMetadata).forEach((propName) => {\n                propMetadata[propName] = parentPropMetadata[propName];\n            });\n        }\n        /** @type {?} */\n        const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n        if (ownPropMetadata) {\n            Object.keys(ownPropMetadata).forEach((propName) => {\n                /** @type {?} */\n                const decorators = [];\n                if (propMetadata.hasOwnProperty(propName)) {\n                    decorators.push(...propMetadata[propName]);\n                }\n                decorators.push(...ownPropMetadata[propName]);\n                propMetadata[propName] = decorators;\n            });\n        }\n        return propMetadata;\n    }\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    hasLifecycleHook(type, lcProperty) {\n        return type instanceof Type && lcProperty in type.prototype;\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    guards(type) { return {}; }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getter(name) { return (/** @type {?} */ (new Function('o', 'return o.' + name + ';'))); }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    setter(name) {\n        return (/** @type {?} */ (new Function('o', 'v', 'return o.' + name + ' = v;')));\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    method(name) {\n        /** @type {?} */\n        const functionBody = `if (!o.${name}) throw new Error('\"${name}\" is undefined');\n        return o.${name}.apply(o, args);`;\n        return (/** @type {?} */ (new Function('o', 'args', functionBody)));\n    }\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    importUri(type) {\n        // StaticSymbol\n        if (typeof type === 'object' && type['filePath']) {\n            return type['filePath'];\n        }\n        // Runtime type\n        return `./${stringify(type)}`;\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    resourceUri(type) { return `./${stringify(type)}`; }\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    resolveIdentifier(name, moduleUrl, members, runtime) {\n        return runtime;\n    }\n    /**\n     * @param {?} enumIdentifier\n     * @param {?} name\n     * @return {?}\n     */\n    resolveEnum(enumIdentifier, name) { return enumIdentifier[name]; }\n}\n/**\n * @param {?} decoratorInvocations\n * @return {?}\n */\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n    if (!decoratorInvocations) {\n        return [];\n    }\n    return decoratorInvocations.map(decoratorInvocation => {\n        /** @type {?} */\n        const decoratorType = decoratorInvocation.type;\n        /** @type {?} */\n        const annotationCls = decoratorType.annotationCls;\n        /** @type {?} */\n        const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n        return new annotationCls(...annotationArgs);\n    });\n}\n/**\n * @param {?} ctor\n * @return {?}\n */\nfunction getParentCtor(ctor) {\n    /** @type {?} */\n    const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n    /** @type {?} */\n    const parentCtor = parentProto ? parentProto.constructor : null;\n    // Note: We always use `Object` as the null value\n    // to simplify checking later on.\n    return parentCtor || Object;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _reflect = null;\n/**\n * @return {?}\n */\nfunction getReflect() {\n    return (_reflect = _reflect || new ReflectionCapabilities());\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction reflectDependencies(type) {\n    return convertDependencies(getReflect().parameters(type));\n}\n/**\n * @param {?} deps\n * @return {?}\n */\nfunction convertDependencies(deps) {\n    /** @type {?} */\n    const compiler = getCompilerFacade();\n    return deps.map(dep => reflectDependency(compiler, dep));\n}\n/**\n * @param {?} compiler\n * @param {?} dep\n * @return {?}\n */\nfunction reflectDependency(compiler, dep) {\n    /** @type {?} */\n    const meta = {\n        token: null,\n        host: false,\n        optional: false,\n        resolved: compiler.R3ResolvedDependencyType.Token,\n        self: false,\n        skipSelf: false,\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    function setTokenAndResolvedType(token) {\n        meta.resolved = compiler.R3ResolvedDependencyType.Token;\n        meta.token = token;\n    }\n    if (Array.isArray(dep)) {\n        if (dep.length === 0) {\n            throw new Error('Dependency array must have arguments.');\n        }\n        for (let j = 0; j < dep.length; j++) {\n            /** @type {?} */\n            const param = dep[j];\n            if (param === undefined) {\n                // param may be undefined if type of dep is not set by ngtsc\n                continue;\n            }\n            else if (param instanceof Optional || param.__proto__.ngMetadataName === 'Optional') {\n                meta.optional = true;\n            }\n            else if (param instanceof SkipSelf || param.__proto__.ngMetadataName === 'SkipSelf') {\n                meta.skipSelf = true;\n            }\n            else if (param instanceof Self || param.__proto__.ngMetadataName === 'Self') {\n                meta.self = true;\n            }\n            else if (param instanceof Host || param.__proto__.ngMetadataName === 'Host') {\n                meta.host = true;\n            }\n            else if (param instanceof Inject) {\n                meta.token = param.token;\n            }\n            else if (param instanceof Attribute) {\n                if (param.attributeName === undefined) {\n                    throw new Error(`Attribute name must be defined.`);\n                }\n                meta.token = param.attributeName;\n                meta.resolved = compiler.R3ResolvedDependencyType.Attribute;\n            }\n            else {\n                setTokenAndResolvedType(param);\n            }\n        }\n    }\n    else {\n        setTokenAndResolvedType(dep);\n    }\n    return meta;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EMPTY_ARRAY$2 = [];\n/** @type {?} */\nconst moduleQueue = [];\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n    moduleQueue.push({ moduleType, ngModule });\n}\n/** @type {?} */\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n * @return {?}\n */\nfunction flushModuleScopingQueueAsMuchAsPossible() {\n    if (!flushingModuleQueue) {\n        flushingModuleQueue = true;\n        try {\n            for (let i = moduleQueue.length - 1; i >= 0; i--) {\n                const { moduleType, ngModule } = moduleQueue[i];\n                if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n                    // dequeue\n                    moduleQueue.splice(i, 1);\n                    setScopeOnDeclaredComponents(moduleType, ngModule);\n                }\n            }\n        }\n        finally {\n            flushingModuleQueue = false;\n        }\n    }\n}\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n * @param {?} declaration\n * @return {?}\n */\nfunction isResolvedDeclaration(declaration) {\n    if (Array.isArray(declaration)) {\n        return declaration.every(isResolvedDeclaration);\n    }\n    return !!resolveForwardRef(declaration);\n}\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `\\@NgModule` decorator.\n * @param {?} moduleType\n * @param {?=} ngModule\n * @return {?}\n */\nfunction compileNgModule(moduleType, ngModule = {}) {\n    compileNgModuleDefs((/** @type {?} */ (moduleType)), ngModule);\n    // Because we don't know if all declarations have resolved yet at the moment the\n    // NgModule decorator is executing, we're enqueueing the setting of module scope\n    // on its declarations to be run at a later time when all declarations for the module,\n    // including forward refs, have resolved.\n    enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction compileNgModuleDefs(moduleType, ngModule) {\n    ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n    ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n    /** @type {?} */\n    const declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY$2);\n    /** @type {?} */\n    /** @nocollapse */ let ngModuleDef = null;\n    Object.defineProperty(moduleType, NG_MODULE_DEF, {\n        configurable: true,\n        get: () => {\n            if (ngModuleDef === null) {\n                ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, `ng://${moduleType.name}/ngModuleDef.js`, {\n                    type: moduleType,\n                    bootstrap: flatten$1(ngModule.bootstrap || EMPTY_ARRAY$2, resolveForwardRef),\n                    declarations: declarations.map(resolveForwardRef),\n                    imports: flatten$1(ngModule.imports || EMPTY_ARRAY$2, resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    exports: flatten$1(ngModule.exports || EMPTY_ARRAY$2, resolveForwardRef)\n                        .map(expandModuleWithProviders),\n                    emitInline: true,\n                });\n            }\n            return ngModuleDef;\n        }\n    });\n    if (ngModule.id) {\n        registerNgModuleType(ngModule.id, moduleType);\n    }\n    /** @type {?} */\n    /** @nocollapse */ let ngInjectorDef = null;\n    Object.defineProperty(moduleType, NG_INJECTOR_DEF, {\n        get: () => {\n            if (ngInjectorDef === null) {\n                ngDevMode && verifySemanticsOfNgModuleDef((/** @type {?} */ ((/** @type {?} */ (moduleType)))));\n                /** @type {?} */\n                const meta = {\n                    name: moduleType.name,\n                    type: moduleType,\n                    deps: reflectDependencies(moduleType),\n                    providers: ngModule.providers || EMPTY_ARRAY$2,\n                    imports: [\n                        (ngModule.imports || EMPTY_ARRAY$2).map(resolveForwardRef),\n                        (ngModule.exports || EMPTY_ARRAY$2).map(resolveForwardRef),\n                    ],\n                };\n                ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, `ng://${moduleType.name}/ngInjectorDef.js`, meta);\n            }\n            return ngInjectorDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @param {?} moduleType\n * @return {?}\n */\nfunction verifySemanticsOfNgModuleDef(moduleType) {\n    if (verifiedNgModule.get(moduleType))\n        return;\n    verifiedNgModule.set(moduleType, true);\n    moduleType = resolveForwardRef(moduleType);\n    /** @type {?} */\n    /** @nocollapse */ const ngModuleDef = getNgModuleDef(moduleType, true);\n    /** @type {?} */\n    const errors = [];\n    ngModuleDef.declarations.forEach(verifyDeclarationsHaveDefinitions);\n    /** @type {?} */\n    const combinedDeclarations = [\n        ...ngModuleDef.declarations.map(resolveForwardRef),\n        ...flatten$1(ngModuleDef.imports.map(computeCombinedExports), resolveForwardRef),\n    ];\n    ngModuleDef.exports.forEach(verifyExportsAreDeclaredOrReExported);\n    ngModuleDef.declarations.forEach(verifyDeclarationIsUnique);\n    ngModuleDef.declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n    /** @type {?} */\n    const ngModule = getAnnotation(moduleType, 'NgModule');\n    if (ngModule) {\n        ngModule.imports &&\n            flatten$1(ngModule.imports, unwrapModuleWithProvidersImports)\n                .forEach(verifySemanticsOfNgModuleDef);\n        ngModule.bootstrap && ngModule.bootstrap.forEach(verifyComponentIsPartOfNgModule);\n        ngModule.entryComponents && ngModule.entryComponents.forEach(verifyComponentIsPartOfNgModule);\n    }\n    // Throw Error if any errors were detected.\n    if (errors.length) {\n        throw new Error(errors.join('\\n'));\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyDeclarationsHaveDefinitions(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n        if (!def) {\n            errors.push(`Unexpected value '${stringify$1(type)}' declared by the module '${stringify$1(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyExportsAreDeclaredOrReExported(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' ||\n            getPipeDef(type) && 'pipe';\n        if (kind) {\n            // only checked if we are declared as Component, Directive, or Pipe\n            // Modules don't need to be declared or imported.\n            if (combinedDeclarations.lastIndexOf(type) === -1) {\n                // We are exporting something which we don't explicitly declare or import.\n                errors.push(`Can't export ${kind} ${stringify$1(type)} from ${stringify$1(moduleType)} as it was neither declared nor imported!`);\n            }\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyDeclarationIsUnique(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const existingModule = ownerNgModule.get(type);\n        if (existingModule && existingModule !== moduleType) {\n            /** @type {?} */\n            const modules = [existingModule, moduleType].map(stringify$1).sort();\n            errors.push(`Type ${stringify$1(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` +\n                `Please consider moving ${stringify$1(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` +\n                `You can also create a new NgModule that exports and includes ${stringify$1(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n        }\n        else {\n            // Mark type as having owner.\n            ownerNgModule.set(type, moduleType);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyComponentIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        /** @type {?} */\n        const existingModule = ownerNgModule.get(type);\n        if (!existingModule) {\n            errors.push(`Component ${stringify$1(type)} is not part of any NgModule or the module has not been imported into your module.`);\n        }\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function verifyComponentEntryComponentsIsPartOfNgModule(type) {\n        type = resolveForwardRef(type);\n        if (getComponentDef(type)) {\n            // We know we are component\n            /** @type {?} */\n            const component = getAnnotation(type, 'Component');\n            if (component && component.entryComponents) {\n                component.entryComponents.forEach(verifyComponentIsPartOfNgModule);\n            }\n        }\n    }\n}\n/**\n * @param {?} typeOrWithProviders\n * @return {?}\n */\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n    typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n    return ((/** @type {?} */ (typeOrWithProviders))).ngModule || typeOrWithProviders;\n}\n/**\n * @template T\n * @param {?} type\n * @param {?} name\n * @return {?}\n */\nfunction getAnnotation(type, name) {\n    /** @type {?} */\n    let annotation = null;\n    collect(type.__annotations__);\n    collect(type.decorators);\n    return annotation;\n    /**\n     * @param {?} annotations\n     * @return {?}\n     */\n    function collect(annotations) {\n        if (annotations) {\n            annotations.forEach(readAnnotation);\n        }\n    }\n    /**\n     * @param {?} decorator\n     * @return {?}\n     */\n    function readAnnotation(decorator) {\n        if (!annotation) {\n            /** @type {?} */\n            const proto = Object.getPrototypeOf(decorator);\n            if (proto.ngMetadataName == name) {\n                annotation = (/** @type {?} */ (decorator));\n            }\n            else if (decorator.type) {\n                /** @type {?} */\n                const proto = Object.getPrototypeOf(decorator.type);\n                if (proto.ngMetadataName == name) {\n                    annotation = decorator.args[0];\n                }\n            }\n        }\n    }\n}\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n * @type {?}\n */\nlet ownerNgModule = new Map();\n/** @type {?} */\nlet verifiedNgModule = new Map();\n/**\n * @return {?}\n */\nfunction resetCompiledComponents() {\n    ownerNgModule = new Map();\n    verifiedNgModule = new Map();\n    moduleQueue.length = 0;\n}\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited\n * by\n * traversing the exports of imported modules.\n * @param {?} type\n * @return {?}\n */\nfunction computeCombinedExports(type) {\n    type = resolveForwardRef(type);\n    /** @type {?} */\n    /** @nocollapse */ const ngModuleDef = getNgModuleDef(type, true);\n    return [...flatten$1(ngModuleDef.exports.map((type) => {\n            /** @type {?} */\n            /** @nocollapse */ const ngModuleDef = getNgModuleDef(type);\n            if (ngModuleDef) {\n                verifySemanticsOfNgModuleDef((/** @type {?} */ ((/** @type {?} */ (type)))));\n                return computeCombinedExports(type);\n            }\n            else {\n                return type;\n            }\n        }))];\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ngComponentDef set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n    /** @type {?} */\n    const declarations = flatten$1(ngModule.declarations || EMPTY_ARRAY$2);\n    /** @type {?} */\n    const transitiveScopes = transitiveScopesFor(moduleType);\n    declarations.forEach(declaration => {\n        if (declaration.hasOwnProperty(NG_COMPONENT_DEF)) {\n            // An `ngComponentDef` field exists - go ahead and patch the component directly.\n            /** @type {?} */\n            const component = (/** @type {?} */ (declaration));\n            /** @type {?} */\n            const componentDef = (/** @type {?} */ (getComponentDef(component)));\n            patchComponentDefWithScope(componentDef, transitiveScopes);\n        }\n        else if (!declaration.hasOwnProperty(NG_DIRECTIVE_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n            // Set `ngSelectorScope` for future reference when the component compilation finishes.\n            ((/** @type {?} */ (declaration))).ngSelectorScope = moduleType;\n        }\n    });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n * @template C\n * @param {?} componentDef\n * @param {?} transitiveScopes\n * @return {?}\n */\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\n    componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives)\n        .map(dir => getDirectiveDef(dir) || (/** @type {?} */ (getComponentDef(dir))))\n        .filter(def => !!def);\n    componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map(pipe => (/** @type {?} */ (getPipeDef(pipe))));\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. It can be called\n * on modules with components that have not fully compiled yet, but the result should not be used\n * until they have.\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\nfunction transitiveScopesFor(moduleType) {\n    if (!isNgModule(moduleType)) {\n        throw new Error(`${moduleType.name} does not have an ngModuleDef`);\n    }\n    /** @type {?} */\n    const def = (/** @type {?} */ (getNgModuleDef(moduleType)));\n    if (def.transitiveCompileScopes !== null) {\n        return def.transitiveCompileScopes;\n    }\n    /** @type {?} */\n    const scopes = {\n        compilation: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n        exported: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n    };\n    def.declarations.forEach(declared => {\n        /** @type {?} */\n        const declaredWithDefs = (/** @type {?} */ (declared));\n        if (getPipeDef(declaredWithDefs)) {\n            scopes.compilation.pipes.add(declared);\n        }\n        else {\n            // Either declared has an ngComponentDef or ngDirectiveDef, or it's a component which hasn't\n            // had its template compiled yet. In either case, it gets added to the compilation's\n            // directives.\n            scopes.compilation.directives.add(declared);\n        }\n    });\n    def.imports.forEach((imported) => {\n        /** @type {?} */\n        const importedTyped = (/** @type {?} */ (imported));\n        if (!isNgModule(importedTyped)) {\n            throw new Error(`Importing ${importedTyped.name} which does not have an ngModuleDef`);\n        }\n        // When this module imports another, the imported module's exported directives and pipes are\n        // added to the compilation scope of this module.\n        /** @type {?} */\n        const importedScope = transitiveScopesFor(importedTyped);\n        importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));\n        importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));\n    });\n    def.exports.forEach((exported) => {\n        /** @type {?} */\n        const exportedTyped = (/** @type {?} */ (exported));\n        // Either the type is a module, a pipe, or a component/directive (which may not have an\n        // ngComponentDef as it might be compiled asynchronously).\n        if (isNgModule(exportedTyped)) {\n            // When this module exports another, the exported module's exported directives and pipes are\n            // added to both the compilation and exported scopes of this module.\n            /** @type {?} */\n            const exportedScope = transitiveScopesFor(exportedTyped);\n            exportedScope.exported.directives.forEach(entry => {\n                scopes.compilation.directives.add(entry);\n                scopes.exported.directives.add(entry);\n            });\n            exportedScope.exported.pipes.forEach(entry => {\n                scopes.compilation.pipes.add(entry);\n                scopes.exported.pipes.add(entry);\n            });\n        }\n        else if (getPipeDef(exportedTyped)) {\n            scopes.exported.pipes.add(exportedTyped);\n        }\n        else {\n            scopes.exported.directives.add(exportedTyped);\n        }\n    });\n    def.transitiveCompileScopes = scopes;\n    return scopes;\n}\n/**\n * @template T\n * @param {?} values\n * @param {?=} mapFn\n * @return {?}\n */\nfunction flatten$1(values, mapFn) {\n    /** @type {?} */\n    const out = [];\n    values.forEach(value => {\n        if (Array.isArray(value)) {\n            out.push(...flatten$1(value, mapFn));\n        }\n        else {\n            out.push(mapFn ? mapFn(value) : value);\n        }\n    });\n    return out;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction expandModuleWithProviders(value) {\n    if (isModuleWithProviders(value)) {\n        return value.ngModule;\n    }\n    return value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isModuleWithProviders(value) {\n    return ((/** @type {?} */ (value))).ngModule !== undefined;\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isNgModule(value) {\n    return !!getNgModuleDef(value);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * ngComponentDef onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction compileComponent(type, metadata) {\n    /** @type {?} */\n    /** @nocollapse */ let ngComponentDef = null;\n    // Metadata may have resources which need to be resolved.\n    maybeQueueResolutionOfComponentResources(metadata);\n    Object.defineProperty(type, NG_COMPONENT_DEF, {\n        get: () => {\n            /** @type {?} */\n            const compiler = getCompilerFacade();\n            if (ngComponentDef === null) {\n                if (componentNeedsResolution(metadata)) {\n                    /** @type {?} */\n                    const error = [`Component '${stringify$1(type)}' is not resolved:`];\n                    if (metadata.templateUrl) {\n                        error.push(` - templateUrl: ${stringify$1(metadata.templateUrl)}`);\n                    }\n                    if (metadata.styleUrls && metadata.styleUrls.length) {\n                        error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);\n                    }\n                    error.push(`Did you run and wait for 'resolveComponentResources()'?`);\n                    throw new Error(error.join('\\n'));\n                }\n                /** @type {?} */\n                const meta = Object.assign({}, directiveMetadata(type, metadata), { template: metadata.template || '', preserveWhitespaces: metadata.preserveWhitespaces || false, styles: metadata.styles || EMPTY_ARRAY, animations: metadata.animations, viewQueries: extractQueriesMetadata(type, getReflect().propMetadata(type), isViewQuery), directives: [], changeDetection: metadata.changeDetection, pipes: new Map(), encapsulation: metadata.encapsulation || ViewEncapsulation.Emulated, interpolation: metadata.interpolation, viewProviders: metadata.viewProviders || null });\n                ngComponentDef = compiler.compileComponent(angularCoreEnv, `ng://${stringify$1(type)}/template.html`, meta);\n                // When NgModule decorator executed, we enqueued the module definition such that\n                // it would only dequeue and add itself as module scope to all of its declarations,\n                // but only if  if all of its declarations had resolved. This call runs the check\n                // to see if any modules that are in the queue can be dequeued and add scope to\n                // their declarations.\n                flushModuleScopingQueueAsMuchAsPossible();\n                // If component compilation is async, then the @NgModule annotation which declares the\n                // component may execute and set an ngSelectorScope property on the component type. This\n                // allows the component to patch itself with directiveDefs from the module after it\n                // finishes compiling.\n                if (hasSelectorScope(type)) {\n                    /** @type {?} */\n                    const scopes = transitiveScopesFor(type.ngSelectorScope);\n                    patchComponentDefWithScope(ngComponentDef, scopes);\n                }\n            }\n            return ngComponentDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nfunction hasSelectorScope(component) {\n    return ((/** @type {?} */ (component))).ngSelectorScope !== undefined;\n}\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * ngDirectiveDef onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n * @param {?} type\n * @param {?} directive\n * @return {?}\n */\nfunction compileDirective(type, directive) {\n    /** @type {?} */\n    /** @nocollapse */ let ngDirectiveDef = null;\n    Object.defineProperty(type, NG_DIRECTIVE_DEF, {\n        get: () => {\n            if (ngDirectiveDef === null) {\n                /** @type {?} */\n                const facade = directiveMetadata((/** @type {?} */ (type)), directive);\n                ngDirectiveDef = getCompilerFacade().compileDirective(angularCoreEnv, `ng://${type && type.name}/ngDirectiveDef.js`, facade);\n            }\n            return ngDirectiveDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction extendsDirectlyFromObject(type) {\n    return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction directiveMetadata(type, metadata) {\n    // Reflect inputs and outputs.\n    /** @type {?} */\n    const propMetadata = getReflect().propMetadata(type);\n    return {\n        name: type.name,\n        type: type,\n        typeArgumentCount: 0,\n        selector: (/** @type {?} */ (metadata.selector)),\n        deps: reflectDependencies(type),\n        host: metadata.host || EMPTY_OBJ,\n        propMetadata: propMetadata,\n        inputs: metadata.inputs || EMPTY_ARRAY,\n        outputs: metadata.outputs || EMPTY_ARRAY,\n        queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n        lifecycle: {\n            usesOnChanges: type.prototype.ngOnChanges !== undefined,\n        },\n        typeSourceSpan: (/** @type {?} */ (null)),\n        usesInheritance: !extendsDirectlyFromObject(type),\n        exportAs: metadata.exportAs || null,\n        providers: metadata.providers || null,\n    };\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction convertToR3QueryPredicate(selector) {\n    return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n}\n/**\n * @param {?} propertyName\n * @param {?} ann\n * @return {?}\n */\nfunction convertToR3QueryMetadata(propertyName, ann) {\n    return {\n        propertyName: propertyName,\n        predicate: convertToR3QueryPredicate(ann.selector),\n        descendants: ann.descendants,\n        first: ann.first,\n        read: ann.read ? ann.read : null\n    };\n}\n/**\n * @param {?} type\n * @param {?} propMetadata\n * @param {?} isQueryAnn\n * @return {?}\n */\nfunction extractQueriesMetadata(type, propMetadata, isQueryAnn) {\n    /** @type {?} */\n    const queriesMeta = [];\n    for (const field in propMetadata) {\n        if (propMetadata.hasOwnProperty(field)) {\n            propMetadata[field].forEach(ann => {\n                if (isQueryAnn(ann)) {\n                    if (!ann.selector) {\n                        throw new Error(`Can't construct a query for the property \"${field}\" of ` +\n                            `\"${stringify$1(type)}\" since the query selector wasn't defined.`);\n                    }\n                    queriesMeta.push(convertToR3QueryMetadata(field, ann));\n                }\n            });\n        }\n    }\n    return queriesMeta;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isContentQuery(value) {\n    /** @type {?} */\n    const name = value.ngMetadataName;\n    return name === 'ContentChild' || name === 'ContentChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isViewQuery(value) {\n    /** @type {?} */\n    const name = value.ngMetadataName;\n    return name === 'ViewChild' || name === 'ViewChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction splitByComma(value) {\n    return value.split(',').map(piece => piece.trim());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\nfunction compilePipe(type, meta) {\n    /** @type {?} */\n    /** @nocollapse */ let ngPipeDef = null;\n    Object.defineProperty(type, NG_PIPE_DEF, {\n        get: () => {\n            if (ngPipeDef === null) {\n                ngPipeDef = getCompilerFacade().compilePipe(angularCoreEnv, `ng://${stringify$1(type)}/ngPipeDef.js`, {\n                    type: type,\n                    name: type.name,\n                    deps: reflectDependencies(type),\n                    pipeName: meta.name,\n                    pure: meta.pure !== undefined ? meta.pure : true\n                });\n            }\n            return ngPipeDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Type of the Directive metadata.\n *\n * \\@publicApi\n * @type {?}\n */\nconst Directive = makeDecorator('Directive', (dir = {}) => dir, undefined, undefined, (type, meta) => SWITCH_COMPILE_DIRECTIVE(type, meta));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Component decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Component = makeDecorator('Component', (c = {}) => (Object.assign({ changeDetection: ChangeDetectionStrategy.Default }, c)), Directive, undefined, (type, meta) => SWITCH_COMPILE_COMPONENT(type, meta));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Pipe = makeDecorator('Pipe', (p) => (Object.assign({ pure: true }, p)), undefined, undefined, (type, meta) => SWITCH_COMPILE_PIPE(type, meta));\n// WARNING: interface has both a type and a value, skipping emit\n/** @type {?} */\nconst initializeBaseDef = (target) => {\n    /** @type {?} */\n    const constructor = target.constructor;\n    /** @nocollapse @type {?} */\n    const inheritedBaseDef = constructor.ngBaseDef;\n    /** @type {?} */\n    const baseDef = constructor.ngBaseDef = {\n        inputs: {},\n        outputs: {},\n        declaredInputs: {},\n    };\n    if (inheritedBaseDef) {\n        fillProperties(baseDef.inputs, inheritedBaseDef.inputs);\n        fillProperties(baseDef.outputs, inheritedBaseDef.outputs);\n        fillProperties(baseDef.declaredInputs, inheritedBaseDef.declaredInputs);\n    }\n};\n/**\n * Does the work of creating the `ngBaseDef` property for the `Input` and `Output` decorators.\n * \\@param key \"inputs\" or \"outputs\"\n * @type {?}\n */\nconst updateBaseDefFromIOProp = (getProp) => (target, name, ...args) => {\n    /** @type {?} */\n    const constructor = target.constructor;\n    if (!constructor.hasOwnProperty(NG_BASE_DEF)) {\n        initializeBaseDef(target);\n    }\n    /** @nocollapse @type {?} */\n    const baseDef = constructor.ngBaseDef;\n    /** @type {?} */\n    const defProp = getProp(baseDef);\n    defProp[name] = args[0];\n};\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Input = makePropDecorator('Input', (bindingPropertyName) => ({ bindingPropertyName }), undefined, updateBaseDefFromIOProp(baseDef => baseDef.inputs || {}));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Output = makePropDecorator('Output', (bindingPropertyName) => ({ bindingPropertyName }), undefined, updateBaseDefFromIOProp(baseDef => baseDef.outputs || {}));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst HostBinding = makePropDecorator('HostBinding', (hostPropertyName) => ({ hostPropertyName }));\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Binds a CSS event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * \\@usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```\n * \\@Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n * \\@HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *  }\n * }\n *\n * \\@Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n * ```\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst HostListener = makePropDecorator('HostListener', (eventName, args) => ({ eventName, args }));\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT__POST_R3__ = compileComponent;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE__POST_R3__ = compileDirective;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE__POST_R3__ = compilePipe;\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__PRE_R3__;\n/** @type {?} */\nconst SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__PRE_R3__;\n/** @type {?} */\nconst SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nconst ɵ0$2 = getClosureSafeProperty;\n/** @type {?} */\nconst USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: ɵ0$2 });\n/** @type {?} */\nconst EMPTY_ARRAY$3 = [];\n/**\n * @param {?} type\n * @param {?=} provider\n * @return {?}\n */\nfunction convertInjectableProviderToFactory(type, provider) {\n    if (!provider) {\n        /** @type {?} */\n        const reflectionCapabilities = new ReflectionCapabilities();\n        /** @type {?} */\n        const deps = reflectionCapabilities.parameters(type);\n        // TODO - convert to flags.\n        return () => new type(...injectArgs((/** @type {?} */ (deps))));\n    }\n    if (USE_VALUE$1 in provider) {\n        /** @type {?} */\n        const valueProvider = ((/** @type {?} */ (provider)));\n        return () => valueProvider.useValue;\n    }\n    else if (((/** @type {?} */ (provider))).useExisting) {\n        /** @type {?} */\n        const existingProvider = ((/** @type {?} */ (provider)));\n        return () => inject(existingProvider.useExisting);\n    }\n    else if (((/** @type {?} */ (provider))).useFactory) {\n        /** @type {?} */\n        const factoryProvider = ((/** @type {?} */ (provider)));\n        return () => factoryProvider.useFactory(...injectArgs(factoryProvider.deps || EMPTY_ARRAY$3));\n    }\n    else if (((/** @type {?} */ (provider))).useClass) {\n        /** @type {?} */\n        const classProvider = ((/** @type {?} */ (provider)));\n        /** @type {?} */\n        let deps = ((/** @type {?} */ (provider))).deps;\n        if (!deps) {\n            /** @type {?} */\n            const reflectionCapabilities = new ReflectionCapabilities();\n            deps = reflectionCapabilities.parameters(type);\n        }\n        return () => new classProvider.useClass(...injectArgs(deps));\n    }\n    else {\n        /** @type {?} */\n        let deps = ((/** @type {?} */ (provider))).deps;\n        if (!deps) {\n            /** @type {?} */\n            const reflectionCapabilities = new ReflectionCapabilities();\n            deps = reflectionCapabilities.parameters(type);\n        }\n        return () => new type(...injectArgs((/** @type {?} */ (deps))));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * \\@publicApi\n * @type {?}\n */\nconst CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\n/**\n * Defines a schema that allows any property on any element.\n *\n * \\@publicApi\n * @type {?}\n */\nconst NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst NgModule = makeDecorator('NgModule', (ngModule) => ngModule, undefined, undefined, \n/**\n * Decorator that marks the following class as an NgModule, and supplies\n * configuration metadata for it.\n *\n * * The `declarations` and `entryComponents` options configure the compiler\n * with information about what belongs to the NgModule.\n * * The `providers` options configures the NgModule's injector to provide\n * dependencies the NgModule members.\n * * The `imports` and `exports` options bring in members from other modules, and make\n * this module's members available to others.\n */\n(type, meta) => SWITCH_COMPILE_NGMODULE(type, meta));\n/**\n * @param {?} moduleType\n * @param {?} metadata\n * @return {?}\n */\nfunction preR3NgModuleCompile(moduleType, metadata) {\n    /** @type {?} */\n    let imports = (metadata && metadata.imports) || [];\n    if (metadata && metadata.exports) {\n        imports = [...imports, metadata.exports];\n    }\n    /** @nocollapse */ moduleType.ngInjectorDef = defineInjector({\n        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),\n        providers: metadata && metadata.providers,\n        imports: imports,\n    });\n}\n/** @type {?} */\nconst SWITCH_COMPILE_NGMODULE__POST_R3__ = compileNgModule;\n/** @type {?} */\nconst SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;\n/** @type {?} */\nconst SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * `ngInjectableDef` onto the injectable type.\n * @param {?} type\n * @param {?=} srcMeta\n * @return {?}\n */\nfunction compileInjectable(type, srcMeta) {\n    /** @type {?} */\n    let def = null;\n    // if NG_INJECTABLE_DEF is already defined on this class then don't overwrite it\n    if (type.hasOwnProperty(NG_INJECTABLE_DEF))\n        return;\n    Object.defineProperty(type, NG_INJECTABLE_DEF, {\n        get: () => {\n            if (def === null) {\n                // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n                /** @type {?} */\n                const meta = srcMeta || { providedIn: null };\n                /** @type {?} */\n                const hasAProvider = isUseClassProvider(meta) || isUseFactoryProvider(meta) ||\n                    isUseValueProvider(meta) || isUseExistingProvider(meta);\n                /** @type {?} */\n                const compilerMeta = {\n                    name: type.name,\n                    type: type,\n                    typeArgumentCount: 0,\n                    providedIn: meta.providedIn,\n                    ctorDeps: reflectDependencies(type),\n                    userDeps: undefined\n                };\n                if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n                    compilerMeta.userDeps = convertDependencies(meta.deps);\n                }\n                if (!hasAProvider) {\n                    // In the case the user specifies a type provider, treat it as {provide: X, useClass: X}.\n                    // The deps will have been reflected above, causing the factory to create the class by\n                    // calling\n                    // its constructor with injected deps.\n                    compilerMeta.useClass = type;\n                }\n                else if (isUseClassProvider(meta)) {\n                    // The user explicitly specified useClass, and may or may not have provided deps.\n                    compilerMeta.useClass = meta.useClass;\n                }\n                else if (isUseValueProvider(meta)) {\n                    // The user explicitly specified useValue.\n                    compilerMeta.useValue = meta.useValue;\n                }\n                else if (isUseFactoryProvider(meta)) {\n                    // The user explicitly specified useFactory.\n                    compilerMeta.useFactory = meta.useFactory;\n                }\n                else if (isUseExistingProvider(meta)) {\n                    // The user explicitly specified useExisting.\n                    compilerMeta.useExisting = meta.useExisting;\n                }\n                else {\n                    // Can't happen - either hasAProvider will be false, or one of the providers will be set.\n                    throw new Error(`Unreachable state.`);\n                }\n                def = getCompilerFacade().compileInjectable(angularCoreEnv, `ng://${type.name}/ngInjectableDef.js`, compilerMeta);\n            }\n            return def;\n        },\n    });\n}\nconst ɵ0$3 = getClosureSafeProperty;\n/** @type {?} */\nconst USE_VALUE$2 = getClosureSafeProperty({ provide: String, useValue: ɵ0$3 });\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseClassProvider(meta) {\n    return ((/** @type {?} */ (meta))).useClass !== undefined;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseValueProvider(meta) {\n    return USE_VALUE$2 in meta;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseFactoryProvider(meta) {\n    return ((/** @type {?} */ (meta))).useFactory !== undefined;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseExistingProvider(meta) {\n    return ((/** @type {?} */ (meta))).useExisting !== undefined;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * Injectable decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n * @type {?}\n */\nconst Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (type, meta) => SWITCH_COMPILE_INJECTABLE((/** @type {?} */ (type)), meta));\n/**\n * Supports \\@Injectable() in JIT mode for Render2.\n * @param {?} injectableType\n * @param {?} options\n * @return {?}\n */\nfunction render2CompileInjectable(injectableType, options) {\n    if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {\n        /** @nocollapse */ injectableType.ngInjectableDef = defineInjectable({\n            providedIn: options.providedIn,\n            factory: convertInjectableProviderToFactory(injectableType, options),\n        });\n    }\n}\n/** @type {?} */\nconst SWITCH_COMPILE_INJECTABLE__POST_R3__ = compileInjectable;\n/** @type {?} */\nconst SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;\n/** @type {?} */\nconst SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ERROR_DEBUG_CONTEXT = 'ngDebugContext';\n/** @type {?} */\nconst ERROR_ORIGINAL_ERROR = 'ngOriginalError';\n/** @type {?} */\nconst ERROR_LOGGER = 'ngErrorLogger';\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getDebugContext(error) {\n    return ((/** @type {?} */ (error)))[ERROR_DEBUG_CONTEXT];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getOriginalError(error) {\n    return ((/** @type {?} */ (error)))[ERROR_ORIGINAL_ERROR];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction getErrorLogger(error) {\n    return ((/** @type {?} */ (error)))[ERROR_LOGGER] || defaultErrorLogger;\n}\n/**\n * @param {?} console\n * @param {...?} values\n * @return {?}\n */\nfunction defaultErrorLogger(console, ...values) {\n    ((/** @type {?} */ (console.error)))(...values);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * \\@publicApi\n */\nclass ErrorHandler {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._console = console;\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    handleError(error) {\n        /** @type {?} */\n        const originalError = this._findOriginalError(error);\n        /** @type {?} */\n        const context = this._findContext(error);\n        // Note: Browser consoles show the place from where console.error was called.\n        // We can use this to give users additional information about the error.\n        /** @type {?} */\n        const errorLogger = getErrorLogger(error);\n        errorLogger(this._console, `ERROR`, error);\n        if (originalError) {\n            errorLogger(this._console, `ORIGINAL ERROR`, originalError);\n        }\n        if (context) {\n            errorLogger(this._console, 'ERROR CONTEXT', context);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    _findContext(error) {\n        if (error) {\n            return getDebugContext(error) ? getDebugContext(error) :\n                this._findContext(getOriginalError(error));\n        }\n        return null;\n    }\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    _findOriginalError(error) {\n        /** @type {?} */\n        let e = getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e;\n    }\n}\n/**\n * @param {?} message\n * @param {?} originalError\n * @return {?}\n */\nfunction wrappedError(message, originalError) {\n    /** @type {?} */\n    const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;\n    /** @type {?} */\n    const error = Error(msg);\n    ((/** @type {?} */ (error)))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction findFirstClosedCycle(keys) {\n    /** @type {?} */\n    const res = [];\n    for (let i = 0; i < keys.length; ++i) {\n        if (res.indexOf(keys[i]) > -1) {\n            res.push(keys[i]);\n            return res;\n        }\n        res.push(keys[i]);\n    }\n    return res;\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction constructResolvingPath(keys) {\n    if (keys.length > 1) {\n        /** @type {?} */\n        const reversed = findFirstClosedCycle(keys.slice().reverse());\n        /** @type {?} */\n        const tokenStrs = reversed.map(k => stringify(k.token));\n        return ' (' + tokenStrs.join(' -> ') + ')';\n    }\n    return '';\n}\n/**\n * @param {?} injector\n * @param {?} key\n * @param {?} constructResolvingMessage\n * @param {?=} originalError\n * @return {?}\n */\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n    /** @type {?} */\n    const keys = [key];\n    /** @type {?} */\n    const errMsg = constructResolvingMessage(keys);\n    /** @type {?} */\n    const error = (/** @type {?} */ ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg))));\n    error.addKey = addKey;\n    error.keys = keys;\n    error.injectors = [injector];\n    error.constructResolvingMessage = constructResolvingMessage;\n    ((/** @type {?} */ (error)))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n/**\n * @this {?}\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction addKey(injector, key) {\n    this.injectors.push(injector);\n    this.keys.push(key);\n    // Note: This updated message won't be reflected in the `.stack` property\n    this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction noProviderError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        /** @type {?} */\n        const first = stringify(keys[0].token);\n        return `No provider for ${first}!${constructResolvingPath(keys)}`;\n    });\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction cyclicDependencyError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\n    });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n * @param {?} injector\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} key\n * @return {?}\n */\nfunction instantiationError(injector, originalException, originalStack, key) {\n    return injectionError(injector, key, function (keys) {\n        /** @type {?} */\n        const first = stringify(keys[0].token);\n        return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;\n    }, originalException);\n}\n/**\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n * creation.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n * @param {?} provider\n * @return {?}\n */\nfunction invalidProviderError(provider) {\n    return Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n * @param {?} typeOrFunc\n * @param {?} params\n * @return {?}\n */\nfunction noAnnotationError(typeOrFunc, params) {\n    /** @type {?} */\n    const signature = [];\n    for (let i = 0, ii = params.length; i < ii; i++) {\n        /** @type {?} */\n        const parameter = params[i];\n        if (!parameter || parameter.length == 0) {\n            signature.push('?');\n        }\n        else {\n            signature.push(parameter.map(stringify).join(' '));\n        }\n    }\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n        signature.join(', ') + '). ' +\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n * @param {?} index\n * @return {?}\n */\nfunction outOfBoundsError(index) {\n    return Error(`Index ${index} is out-of-bounds.`);\n}\n// TODO: add a working example after alpha38 is released\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n * @param {?} provider1\n * @param {?} provider2\n * @return {?}\n */\nfunction mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n    return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * \\@publicApi\n */\nclass ReflectiveKey {\n    /**\n     * Private\n     * @param {?} token\n     * @param {?} id\n     */\n    constructor(token, id) {\n        this.token = token;\n        this.id = id;\n        if (!token) {\n            throw new Error('Token must be defined!');\n        }\n        this.displayName = stringify(this.token);\n    }\n    /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    static get(token) {\n        return _globalKeyRegistry.get(resolveForwardRef(token));\n    }\n    /**\n     * @return {?} the number of keys registered in the system.\n     */\n    static get numberOfKeys() { return _globalKeyRegistry.numberOfKeys; }\n}\nclass KeyRegistry {\n    constructor() {\n        this._allKeys = new Map();\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    get(token) {\n        if (token instanceof ReflectiveKey)\n            return token;\n        if (this._allKeys.has(token)) {\n            return (/** @type {?} */ (this._allKeys.get(token)));\n        }\n        /** @type {?} */\n        const newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n        this._allKeys.set(token, newKey);\n        return newKey;\n    }\n    /**\n     * @return {?}\n     */\n    get numberOfKeys() { return this._allKeys.size; }\n}\n/** @type {?} */\nconst _globalKeyRegistry = new KeyRegistry();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nclass Reflector {\n    /**\n     * @param {?} reflectionCapabilities\n     */\n    constructor(reflectionCapabilities) {\n        this.reflectionCapabilities = reflectionCapabilities;\n    }\n    /**\n     * @param {?} caps\n     * @return {?}\n     */\n    updateCapabilities(caps) { this.reflectionCapabilities = caps; }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    factory(type) { return this.reflectionCapabilities.factory(type); }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    parameters(typeOrFunc) {\n        return this.reflectionCapabilities.parameters(typeOrFunc);\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    annotations(typeOrFunc) {\n        return this.reflectionCapabilities.annotations(typeOrFunc);\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    propMetadata(typeOrFunc) {\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n    }\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    hasLifecycleHook(type, lcProperty) {\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getter(name) { return this.reflectionCapabilities.getter(name); }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    setter(name) { return this.reflectionCapabilities.setter(name); }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    method(name) { return this.reflectionCapabilities.method(name); }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    importUri(type) { return this.reflectionCapabilities.importUri(type); }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    resourceUri(type) { return this.reflectionCapabilities.resourceUri(type); }\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    resolveIdentifier(name, moduleUrl, members, runtime) {\n        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n    }\n    /**\n     * @param {?} identifier\n     * @param {?} name\n     * @return {?}\n     */\n    resolveEnum(identifier, name) {\n        return this.reflectionCapabilities.resolveEnum(identifier, name);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The {\\@link Reflector} used internally in Angular to access metadata\n * about symbols.\n * @type {?}\n */\nconst reflector = new Reflector(new ReflectionCapabilities());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nclass ReflectiveDependency {\n    /**\n     * @param {?} key\n     * @param {?} optional\n     * @param {?} visibility\n     */\n    constructor(key, optional, visibility) {\n        this.key = key;\n        this.optional = optional;\n        this.visibility = visibility;\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    static fromKey(key) {\n        return new ReflectiveDependency(key, false, null);\n    }\n}\n/** @type {?} */\nconst _EMPTY_LIST = [];\nclass ResolvedReflectiveProvider_ {\n    /**\n     * @param {?} key\n     * @param {?} resolvedFactories\n     * @param {?} multiProvider\n     */\n    constructor(key, resolvedFactories, multiProvider) {\n        this.key = key;\n        this.resolvedFactories = resolvedFactories;\n        this.multiProvider = multiProvider;\n        this.resolvedFactory = this.resolvedFactories[0];\n    }\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@publicApi\n */\nclass ResolvedReflectiveFactory {\n    /**\n     * @param {?} factory\n     * @param {?} dependencies\n     */\n    constructor(factory, dependencies) {\n        this.factory = factory;\n        this.dependencies = dependencies;\n    }\n}\n/**\n * Resolve a single provider.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveFactory(provider) {\n    /** @type {?} */\n    let factoryFn;\n    /** @type {?} */\n    let resolvedDeps;\n    if (provider.useClass) {\n        /** @type {?} */\n        const useClass = resolveForwardRef(provider.useClass);\n        factoryFn = reflector.factory(useClass);\n        resolvedDeps = _dependenciesFor(useClass);\n    }\n    else if (provider.useExisting) {\n        factoryFn = (aliasInstance) => aliasInstance;\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n    }\n    else if (provider.useFactory) {\n        factoryFn = provider.useFactory;\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n    }\n    else {\n        factoryFn = () => provider.useValue;\n        resolvedDeps = _EMPTY_LIST;\n    }\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveProvider(provider) {\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n * @param {?} providers\n * @return {?}\n */\nfunction resolveReflectiveProviders(providers) {\n    /** @type {?} */\n    const normalized = _normalizeProviders(providers, []);\n    /** @type {?} */\n    const resolved = normalized.map(resolveReflectiveProvider);\n    /** @type {?} */\n    const resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n    return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n * @param {?} providers\n * @param {?} normalizedProvidersMap\n * @return {?}\n */\nfunction mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n    for (let i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        const provider = providers[i];\n        /** @type {?} */\n        const existing = normalizedProvidersMap.get(provider.key.id);\n        if (existing) {\n            if (provider.multiProvider !== existing.multiProvider) {\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n            }\n            if (provider.multiProvider) {\n                for (let j = 0; j < provider.resolvedFactories.length; j++) {\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                }\n            }\n            else {\n                normalizedProvidersMap.set(provider.key.id, provider);\n            }\n        }\n        else {\n            /** @type {?} */\n            let resolvedProvider;\n            if (provider.multiProvider) {\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n            }\n            else {\n                resolvedProvider = provider;\n            }\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n        }\n    }\n    return normalizedProvidersMap;\n}\n/**\n * @param {?} providers\n * @param {?} res\n * @return {?}\n */\nfunction _normalizeProviders(providers, res) {\n    providers.forEach(b => {\n        if (b instanceof Type) {\n            res.push({ provide: b, useClass: b });\n        }\n        else if (b && typeof b == 'object' && ((/** @type {?} */ (b))).provide !== undefined) {\n            res.push((/** @type {?} */ (b)));\n        }\n        else if (b instanceof Array) {\n            _normalizeProviders(b, res);\n        }\n        else {\n            throw invalidProviderError(b);\n        }\n    });\n    return res;\n}\n/**\n * @param {?} typeOrFunc\n * @param {?=} dependencies\n * @return {?}\n */\nfunction constructDependencies(typeOrFunc, dependencies) {\n    if (!dependencies) {\n        return _dependenciesFor(typeOrFunc);\n    }\n    else {\n        /** @type {?} */\n        const params = dependencies.map(t => [t]);\n        return dependencies.map(t => _extractToken(typeOrFunc, t, params));\n    }\n}\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nfunction _dependenciesFor(typeOrFunc) {\n    /** @type {?} */\n    const params = reflector.parameters(typeOrFunc);\n    if (!params)\n        return [];\n    if (params.some(p => p == null)) {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n    return params.map(p => _extractToken(typeOrFunc, p, params));\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} metadata\n * @param {?} params\n * @return {?}\n */\nfunction _extractToken(typeOrFunc, metadata, params) {\n    /** @type {?} */\n    let token = null;\n    /** @type {?} */\n    let optional = false;\n    if (!Array.isArray(metadata)) {\n        if (metadata instanceof Inject) {\n            return _createDependency(metadata.token, optional, null);\n        }\n        else {\n            return _createDependency(metadata, optional, null);\n        }\n    }\n    /** @type {?} */\n    let visibility = null;\n    for (let i = 0; i < metadata.length; ++i) {\n        /** @type {?} */\n        const paramMetadata = metadata[i];\n        if (paramMetadata instanceof Type) {\n            token = paramMetadata;\n        }\n        else if (paramMetadata instanceof Inject) {\n            token = paramMetadata.token;\n        }\n        else if (paramMetadata instanceof Optional) {\n            optional = true;\n        }\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n            visibility = paramMetadata;\n        }\n        else if (paramMetadata instanceof InjectionToken) {\n            token = paramMetadata;\n        }\n    }\n    token = resolveForwardRef(token);\n    if (token != null) {\n        return _createDependency(token, optional, visibility);\n    }\n    else {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n}\n/**\n * @param {?} token\n * @param {?} optional\n * @param {?} visibility\n * @return {?}\n */\nfunction _createDependency(token, optional, visibility) {\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Threshold for the dynamic version\n/** @type {?} */\nconst UNDEFINED = new Object();\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * \\@publicApi\n * @abstract\n */\nclass ReflectiveInjector {\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *  /\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * @param {?} providers\n     * @return {?}\n     */\n    static resolve(providers) {\n        return resolveReflectiveProviders(providers);\n    }\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *  /\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    static resolveAndCreate(providers, parent) {\n        /** @type {?} */\n        const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n    }\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *  /\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    static fromResolvedProviders(providers, parent) {\n        return new ReflectiveInjector_(providers, parent);\n    }\n}\nclass ReflectiveInjector_ {\n    /**\n     * Private\n     * @param {?} _providers\n     * @param {?=} _parent\n     */\n    constructor(_providers, _parent) {\n        /**\n         * \\@internal\n         */\n        this._constructionCounter = 0;\n        this._providers = _providers;\n        this.parent = _parent || null;\n        /** @type {?} */\n        const len = _providers.length;\n        this.keyIds = new Array(len);\n        this.objs = new Array(len);\n        for (let i = 0; i < len; i++) {\n            this.keyIds[i] = _providers[i].key.id;\n            this.objs[i] = UNDEFINED;\n        }\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n    }\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    resolveAndCreateChild(providers) {\n        /** @type {?} */\n        const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\n    }\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    createChildFromResolved(providers) {\n        /** @type {?} */\n        const inj = new ReflectiveInjector_(providers);\n        ((/** @type {?} */ (inj))).parent = this;\n        return inj;\n    }\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    resolveAndInstantiate(provider) {\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n    }\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    instantiateResolved(provider) {\n        return this._instantiateProvider(provider);\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    getProviderAtIndex(index) {\n        if (index < 0 || index >= this._providers.length) {\n            throw outOfBoundsError(index);\n        }\n        return this._providers[index];\n    }\n    /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    _new(provider) {\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n            throw cyclicDependencyError(this, provider.key);\n        }\n        return this._instantiateProvider(provider);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getMaxNumberOfObjects() { return this.objs.length; }\n    /**\n     * @private\n     * @param {?} provider\n     * @return {?}\n     */\n    _instantiateProvider(provider) {\n        if (provider.multiProvider) {\n            /** @type {?} */\n            const res = new Array(provider.resolvedFactories.length);\n            for (let i = 0; i < provider.resolvedFactories.length; ++i) {\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n            }\n            return res;\n        }\n        else {\n            return this._instantiate(provider, provider.resolvedFactories[0]);\n        }\n    }\n    /**\n     * @private\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    _instantiate(provider, ResolvedReflectiveFactory$$1) {\n        /** @type {?} */\n        const factory = ResolvedReflectiveFactory$$1.factory;\n        /** @type {?} */\n        let deps;\n        try {\n            deps =\n                ResolvedReflectiveFactory$$1.dependencies.map(dep => this._getByReflectiveDependency(dep));\n        }\n        catch (e) {\n            if (e.addKey) {\n                e.addKey(this, provider.key);\n            }\n            throw e;\n        }\n        /** @type {?} */\n        let obj;\n        try {\n            obj = factory(...deps);\n        }\n        catch (e) {\n            throw instantiationError(this, e, e.stack, provider.key);\n        }\n        return obj;\n    }\n    /**\n     * @private\n     * @param {?} dep\n     * @return {?}\n     */\n    _getByReflectiveDependency(dep) {\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    _getByKey(key, visibility, notFoundValue) {\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\n            return this;\n        }\n        if (visibility instanceof Self) {\n            return this._getByKeySelf(key, notFoundValue);\n        }\n        else {\n            return this._getByKeyDefault(key, notFoundValue, visibility);\n        }\n    }\n    /**\n     * @private\n     * @param {?} keyId\n     * @return {?}\n     */\n    _getObjByKeyId(keyId) {\n        for (let i = 0; i < this.keyIds.length; i++) {\n            if (this.keyIds[i] === keyId) {\n                if (this.objs[i] === UNDEFINED) {\n                    this.objs[i] = this._new(this._providers[i]);\n                }\n                return this.objs[i];\n            }\n        }\n        return UNDEFINED;\n    }\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    _throwOrNull(key, notFoundValue) {\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\n            return notFoundValue;\n        }\n        else {\n            throw noProviderError(this, key);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    _getByKeySelf(key, notFoundValue) {\n        /** @type {?} */\n        const obj = this._getObjByKeyId(key.id);\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n    }\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    _getByKeyDefault(key, notFoundValue, visibility) {\n        /** @type {?} */\n        let inj;\n        if (visibility instanceof SkipSelf) {\n            inj = this.parent;\n        }\n        else {\n            inj = this;\n        }\n        while (inj instanceof ReflectiveInjector_) {\n            /** @type {?} */\n            const inj_ = (/** @type {?} */ (inj));\n            /** @type {?} */\n            const obj = inj_._getObjByKeyId(key.id);\n            if (obj !== UNDEFINED)\n                return obj;\n            inj = inj_.parent;\n        }\n        if (inj !== null) {\n            return inj.get(key.token, notFoundValue);\n        }\n        else {\n            return this._throwOrNull(key, notFoundValue);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get displayName() {\n        /** @type {?} */\n        const providers = _mapProviders(this, (b) => ' \"' + b.key.displayName + '\" ')\n            .join(', ');\n        return `ReflectiveInjector(providers: [${providers}])`;\n    }\n    /**\n     * @return {?}\n     */\n    toString() { return this.displayName; }\n}\nReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\n/**\n * @param {?} injector\n * @param {?} fn\n * @return {?}\n */\nfunction _mapProviders(injector, fn) {\n    /** @type {?} */\n    const res = new Array(injector._providers.length);\n    for (let i = 0; i < injector._providers.length; ++i) {\n        res[i] = fn(injector.getProviderAtIndex(i));\n    }\n    return res;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine if the argument is shaped like a Promise\n * @param {?} obj\n * @return {?}\n */\nfunction isPromise(obj) {\n    // allow any Promise/A+ compliant thenable.\n    // It's up to the caller to ensure that obj.then conforms to the spec\n    return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is an Observable\n * @param {?} obj\n * @return {?}\n */\nfunction isObservable(obj) {\n    // TODO: use isObservable once we update pass rxjs 6.1\n    // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03\n    return !!obj && typeof obj.subscribe === 'function';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A function that will be executed when an application is initialized.\n *\n * \\@publicApi\n * @type {?}\n */\nconst APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n *\n * \\@publicApi\n */\nclass ApplicationInitStatus {\n    /**\n     * @param {?} appInits\n     */\n    constructor(appInits) {\n        this.appInits = appInits;\n        this.initialized = false;\n        this.done = false;\n        this.donePromise = new Promise((res, rej) => {\n            this.resolve = res;\n            this.reject = rej;\n        });\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    runInitializers() {\n        if (this.initialized) {\n            return;\n        }\n        /** @type {?} */\n        const asyncInitPromises = [];\n        /** @type {?} */\n        const complete = () => {\n            ((/** @type {?} */ (this))).done = true;\n            this.resolve();\n        };\n        if (this.appInits) {\n            for (let i = 0; i < this.appInits.length; i++) {\n                /** @type {?} */\n                const initResult = this.appInits[i]();\n                if (isPromise(initResult)) {\n                    asyncInitPromises.push(initResult);\n                }\n            }\n        }\n        Promise.all(asyncInitPromises).then(() => { complete(); }).catch(e => { this.reject(e); });\n        if (asyncInitPromises.length === 0) {\n            complete();\n        }\n        this.initialized = true;\n    }\n}\nApplicationInitStatus.ɵfac = function ApplicationInitStatus_Factory(t) { return new (t || ApplicationInitStatus)(ɵɵinject(APP_INITIALIZER, 8)); };\nApplicationInitStatus.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: ApplicationInitStatus, factory: ApplicationInitStatus.ɵfac });\n/** @nocollapse */\nApplicationInitStatus.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{\n        type: Injectable\n    }], function () { return [{ type: Array, decorators: [{\n                type: Inject,\n                args: [APP_INITIALIZER]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {\\@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\\@link Injector}\n * using this token.\n * \\@publicApi\n * @type {?}\n */\nconst APP_ID = new InjectionToken('AppId');\n/**\n * @return {?}\n */\nfunction _appIdRandomProviderFactory() {\n    return `${_randomChar()}${_randomChar()}${_randomChar()}`;\n}\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * \\@publicApi\n * @type {?}\n */\nconst APP_ID_RANDOM_PROVIDER = {\n    provide: APP_ID,\n    useFactory: _appIdRandomProviderFactory,\n    deps: (/** @type {?} */ ([])),\n};\n/**\n * @return {?}\n */\nfunction _randomChar() {\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/**\n * A function that will be executed when a platform is initialized.\n * \\@publicApi\n * @type {?}\n */\nconst PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/**\n * A token that indicates an opaque platform id.\n * \\@publicApi\n * @type {?}\n */\nconst PLATFORM_ID = new InjectionToken('Platform ID');\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * \\@publicApi\n * @type {?}\n */\nconst APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n/**\n * A token which indicates the root directory of the application\n * \\@publicApi\n * @type {?}\n */\nconst PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass Console {\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    log(message) {\n        // tslint:disable-next-line:no-console\n        console.log(message);\n    }\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    warn(message) {\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n    }\n}\nConsole.ɵfac = function Console_Factory(t) { return new (t || Console)(); };\nConsole.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: Console, factory: Console.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Console, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@publicApi\n * @template T\n */\nclass ModuleWithComponentFactories {\n    /**\n     * @param {?} ngModuleFactory\n     * @param {?} componentFactories\n     */\n    constructor(ngModuleFactory, componentFactories) {\n        this.ngModuleFactory = ngModuleFactory;\n        this.componentFactories = componentFactories;\n    }\n}\n/**\n * @return {?}\n */\nfunction _throwError() {\n    throw new Error(`Runtime compiler is not loaded`);\n}\n/** @type {?} */\nconst Compiler_compileModuleSync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleSync__POST_R3__ = function (moduleType) {\n    return new NgModuleFactory$1(moduleType);\n};\n/** @type {?} */\nconst Compiler_compileModuleSync = Compiler_compileModuleSync__PRE_R3__;\n/** @type {?} */\nconst Compiler_compileModuleAsync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleAsync__POST_R3__ = function (moduleType) {\n    return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n};\n/** @type {?} */\nconst Compiler_compileModuleAsync = Compiler_compileModuleAsync__PRE_R3__;\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsSync__POST_R3__ = function (moduleType) {\n    return new ModuleWithComponentFactories(Compiler_compileModuleSync__POST_R3__(moduleType), []);\n};\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__PRE_R3__;\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = (/** @type {?} */ (_throwError));\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = function (moduleType) {\n    return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n};\n/** @type {?} */\nconst Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__PRE_R3__;\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {\\@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `\\@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * \\@publicApi\n */\nclass Compiler {\n    constructor() {\n        /**\n         * Compiles the given NgModule and all of its components. All templates of the components listed\n         * in `entryComponents` have to be inlined.\n         */\n        this.compileModuleSync = Compiler_compileModuleSync;\n        /**\n         * Compiles the given NgModule and all of its components\n         */\n        this.compileModuleAsync = Compiler_compileModuleAsync;\n        /**\n         * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;\n        /**\n         * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;\n    }\n    /**\n     * Clears all caches.\n     * @return {?}\n     */\n    clearCache() { }\n    /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    clearCacheFor(type) { }\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     * @param {?} moduleType\n     * @return {?}\n     */\n    getModuleId(moduleType) { return undefined; }\n}\nCompiler.ɵfac = function Compiler_Factory(t) { return new (t || Compiler)(); };\nCompiler.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: Compiler, factory: Compiler.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Compiler, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * \\@publicApi\n * @type {?}\n */\nconst COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * \\@publicApi\n * @abstract\n */\nclass CompilerFactory {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet trace;\n/** @type {?} */\nlet events;\n/**\n * @return {?}\n */\nfunction detectWTF() {\n    /** @type {?} */\n    const wtf = ((/** @type {?} */ (_global)))['wtf'];\n    if (wtf) {\n        trace = wtf['trace'];\n        if (trace) {\n            events = trace['events'];\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} signature\n * @param {?=} flags\n * @return {?}\n */\nfunction createScope(signature, flags = null) {\n    return events.createScope(signature, flags);\n}\n/**\n * @template T\n * @param {?} scope\n * @param {?=} returnValue\n * @return {?}\n */\nfunction leave(scope, returnValue) {\n    trace.leaveScope(scope, returnValue);\n    return returnValue;\n}\n/**\n * @param {?} rangeType\n * @param {?} action\n * @return {?}\n */\nfunction startTimeRange(rangeType, action) {\n    return trace.beginTimeRange(rangeType, action);\n}\n/**\n * @param {?} range\n * @return {?}\n */\nfunction endTimeRange(range) {\n    trace.endTimeRange(range);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * True if WTF is enabled.\n * @type {?}\n */\nconst wtfEnabled = detectWTF();\n/**\n * @param {?=} arg0\n * @param {?=} arg1\n * @return {?}\n */\nfunction noopScope(arg0, arg1) {\n    return null;\n}\n/**\n * Create trace scope.\n *\n * Scopes must be strictly nested and are analogous to stack frames, but\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\n * nesting. You may want to use\n * [Event\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n * as they are defined in WTF.\n *\n * Used to mark scope entry. The return value is used to leave the scope.\n *\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n *\n *     someMethod() {\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n *        // DO SOME WORK HERE\n *        return wtfLeave(s, 123); // Return value 123\n *     }\n *\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n * negatively impact the performance of your application. For this reason we recommend that\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n * an exception is expected during normal execution while profiling.\n *\n * \\@publicApi\n * @type {?}\n */\nconst wtfCreateScope = wtfEnabled ? createScope : (signature, flags) => noopScope;\n/**\n * Used to mark end of Scope.\n *\n * - `scope` to end.\n * - `returnValue` (optional) to be passed to the WTF.\n *\n * Returns the `returnValue for easy chaining.\n * \\@publicApi\n * @type {?}\n */\nconst wtfLeave = wtfEnabled ? leave : (s, r) => r;\n/**\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n * enabled.\n *\n *     someMethod() {\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n *        var future = new Future.delay(5).then((_) {\n *          wtfEndTimeRange(s);\n *        });\n *     }\n * \\@publicApi\n * @type {?}\n */\nconst wtfStartTimeRange = wtfEnabled ? startTimeRange : (rangeType, action) => null;\n/**\n * Ends a async time range operation.\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n * enabled.\n * \\@publicApi\n * @type {?}\n */\nconst wtfEndTimeRange = wtfEnabled ? endTimeRange : (r) => null;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nclass NgZone {\n    /**\n     * @param {?} __0\n     */\n    constructor({ enableLongStackTrace = false }) {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        /**\n         * Whether there are no outstanding microtasks or macrotasks.\n         */\n        this.isStable = true;\n        /**\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n         */\n        this.onUnstable = new EventEmitter(false);\n        /**\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n         * For this reason this event can fire multiple times per VM Turn.\n         */\n        this.onMicrotaskEmpty = new EventEmitter(false);\n        /**\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n         * implies we are about to relinquish VM turn.\n         * This event gets called just once.\n         */\n        this.onStable = new EventEmitter(false);\n        /**\n         * Notifies that an error has been delivered.\n         */\n        this.onError = new EventEmitter(false);\n        if (typeof Zone == 'undefined') {\n            throw new Error(`In this configuration Angular requires Zone.js`);\n        }\n        Zone.assertZonePatched();\n        /** @type {?} */\n        const self = (/** @type {?} */ ((/** @type {?} */ (this))));\n        self._nesting = 0;\n        self._outer = self._inner = Zone.current;\n        if (((/** @type {?} */ (Zone)))['wtfZoneSpec']) {\n            self._inner = self._inner.fork(((/** @type {?} */ (Zone)))['wtfZoneSpec']);\n        }\n        if (((/** @type {?} */ (Zone)))['TaskTrackingZoneSpec']) {\n            self._inner = self._inner.fork(new ((/** @type {?} */ (((/** @type {?} */ (Zone)))['TaskTrackingZoneSpec']))));\n        }\n        if (enableLongStackTrace && ((/** @type {?} */ (Zone)))['longStackTraceZoneSpec']) {\n            self._inner = self._inner.fork(((/** @type {?} */ (Zone)))['longStackTraceZoneSpec']);\n        }\n        forkInnerZoneWithAngularBehavior(self);\n    }\n    /**\n     * @return {?}\n     */\n    static isInAngularZone() { return Zone.current.get('isAngularZone') === true; }\n    /**\n     * @return {?}\n     */\n    static assertInAngularZone() {\n        if (!NgZone.isInAngularZone()) {\n            throw new Error('Expected to be in Angular Zone, but it is not!');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    static assertNotInAngularZone() {\n        if (NgZone.isInAngularZone()) {\n            throw new Error('Expected to not be in Angular Zone, but it is!');\n        }\n    }\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    run(fn, applyThis, applyArgs) {\n        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._inner.run(fn, applyThis, applyArgs)));\n    }\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    runTask(fn, applyThis, applyArgs, name) {\n        /** @type {?} */\n        const zone = ((/** @type {?} */ ((/** @type {?} */ (this)))))._inner;\n        /** @type {?} */\n        const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop$1, noop$1);\n        try {\n            return (/** @type {?} */ (zone.runTask(task, applyThis, applyArgs)));\n        }\n        finally {\n            zone.cancelTask(task);\n        }\n    }\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    runGuarded(fn, applyThis, applyArgs) {\n        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._inner.runGuarded(fn, applyThis, applyArgs)));\n    }\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    runOutsideAngular(fn) {\n        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._outer.run(fn)));\n    }\n}\n/**\n * @return {?}\n */\nfunction noop$1() { }\n/** @type {?} */\nconst EMPTY_PAYLOAD = {};\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction checkStable(zone) {\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n        try {\n            zone._nesting++;\n            zone.onMicrotaskEmpty.emit(null);\n        }\n        finally {\n            zone._nesting--;\n            if (!zone.hasPendingMicrotasks) {\n                try {\n                    zone.runOutsideAngular(() => zone.onStable.emit(null));\n                }\n                finally {\n                    zone.isStable = true;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction forkInnerZoneWithAngularBehavior(zone) {\n    zone._inner = zone._inner.fork({\n        name: 'angular',\n        properties: (/** @type {?} */ ({ 'isAngularZone': true })),\n        onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {\n            try {\n                onEnter(zone);\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {\n            try {\n                onEnter(zone);\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onHasTask: (delegate, current, target, hasTaskState) => {\n            delegate.hasTask(target, hasTaskState);\n            if (current === target) {\n                // We are only interested in hasTask events which originate from our zone\n                // (A child hasTask event is not interesting to us)\n                if (hasTaskState.change == 'microTask') {\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\n                    checkStable(zone);\n                }\n                else if (hasTaskState.change == 'macroTask') {\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                }\n            }\n        },\n        onHandleError: (delegate, current, target, error) => {\n            delegate.handleError(target, error);\n            zone.runOutsideAngular(() => zone.onError.emit(error));\n            return false;\n        }\n    });\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onEnter(zone) {\n    zone._nesting++;\n    if (zone.isStable) {\n        zone.isStable = false;\n        zone.onUnstable.emit(null);\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onLeave(zone) {\n    zone._nesting--;\n    checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nclass NoopNgZone {\n    constructor() {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        this.isStable = true;\n        this.onUnstable = new EventEmitter();\n        this.onMicrotaskEmpty = new EventEmitter();\n        this.onStable = new EventEmitter();\n        this.onError = new EventEmitter();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    run(fn) { return fn(); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    runGuarded(fn) { return fn(); }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    runOutsideAngular(fn) { return fn(); }\n    /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    runTask(fn) { return fn(); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * \\@publicApi\n */\nclass Testability {\n    /**\n     * @param {?} _ngZone\n     */\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._pendingCount = 0;\n        this._isZoneStable = true;\n        /**\n         * Whether any work was done since the last 'whenStable' callback. This is\n         * useful to detect if this could have potentially destabilized another\n         * component while it is stabilizing.\n         * \\@internal\n         */\n        this._didWork = false;\n        this._callbacks = [];\n        this.taskTrackingZone = null;\n        this._watchAngularEvents();\n        _ngZone.run(() => {\n            this.taskTrackingZone =\n                typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _watchAngularEvents() {\n        this._ngZone.onUnstable.subscribe({\n            next: () => {\n                this._didWork = true;\n                this._isZoneStable = false;\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            this._ngZone.onStable.subscribe({\n                next: () => {\n                    NgZone.assertNotInAngularZone();\n                    scheduleMicroTask(() => {\n                        this._isZoneStable = true;\n                        this._runCallbacksIfReady();\n                    });\n                }\n            });\n        });\n    }\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     * @return {?}\n     */\n    increasePendingRequestCount() {\n        this._pendingCount += 1;\n        this._didWork = true;\n        return this._pendingCount;\n    }\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    decreasePendingRequestCount() {\n        this._pendingCount -= 1;\n        if (this._pendingCount < 0) {\n            throw new Error('pending async requests below zero');\n        }\n        this._runCallbacksIfReady();\n        return this._pendingCount;\n    }\n    /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    isStable() {\n        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _runCallbacksIfReady() {\n        if (this.isStable()) {\n            // Schedules the call backs in a new frame so that it is always async.\n            scheduleMicroTask(() => {\n                while (this._callbacks.length !== 0) {\n                    /** @type {?} */\n                    let cb = (/** @type {?} */ (this._callbacks.pop()));\n                    clearTimeout(cb.timeoutId);\n                    cb.doneCb(this._didWork);\n                }\n                this._didWork = false;\n            });\n        }\n        else {\n            // Still not stable, send updates.\n            /** @type {?} */\n            let pending = this.getPendingTasks();\n            this._callbacks = this._callbacks.filter((cb) => {\n                if (cb.updateCb && cb.updateCb(pending)) {\n                    clearTimeout(cb.timeoutId);\n                    return false;\n                }\n                return true;\n            });\n            this._didWork = true;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    getPendingTasks() {\n        if (!this.taskTrackingZone) {\n            return [];\n        }\n        // Copy the tasks data so that we don't leak tasks.\n        return this.taskTrackingZone.macroTasks.map((t) => {\n            return {\n                source: t.source,\n                // From TaskTrackingZone:\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                creationLocation: (/** @type {?} */ (((/** @type {?} */ (t))).creationLocation)),\n                data: t.data\n            };\n        });\n    }\n    /**\n     * @private\n     * @param {?} cb\n     * @param {?=} timeout\n     * @param {?=} updateCb\n     * @return {?}\n     */\n    addCallback(cb, timeout, updateCb) {\n        /** @type {?} */\n        let timeoutId = -1;\n        if (timeout && timeout > 0) {\n            timeoutId = setTimeout(() => {\n                this._callbacks = this._callbacks.filter((cb) => cb.timeoutId !== timeoutId);\n                cb(this._didWork, this.getPendingTasks());\n            }, timeout);\n        }\n        this._callbacks.push((/** @type {?} */ ({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb })));\n    }\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     * @return {?}\n     */\n    whenStable(doneCb, timeout, updateCb) {\n        if (updateCb && !this.taskTrackingZone) {\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\n                'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n        }\n        // These arguments are 'Function' above to keep the public API simple.\n        this.addCallback((/** @type {?} */ (doneCb)), timeout, (/** @type {?} */ (updateCb)));\n        this._runCallbacksIfReady();\n    }\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    getPendingRequestCount() { return this._pendingCount; }\n    /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    findProviders(using, provider, exactMatch) {\n        // TODO(juliemr): implement.\n        return [];\n    }\n}\nTestability.ɵfac = function Testability_Factory(t) { return new (t || Testability)(ɵɵinject(NgZone)); };\nTestability.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: Testability, factory: Testability.ɵfac });\n/** @nocollapse */\nTestability.ctorParameters = () => [\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Testability, [{\n        type: Injectable\n    }], function () { return [{ type: NgZone }]; }, null); })();\n/**\n * A global registry of {\\@link Testability} instances for specific elements.\n * \\@publicApi\n */\nclass TestabilityRegistry {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._applications = new Map();\n        _testabilityGetter.addToWindow(this);\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    registerApplication(token, testability) {\n        this._applications.set(token, testability);\n    }\n    /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    unregisterApplication(token) { this._applications.delete(token); }\n    /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    unregisterAllApplications() { this._applications.clear(); }\n    /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    getTestability(elem) { return this._applications.get(elem) || null; }\n    /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    getAllTestabilities() { return Array.from(this._applications.values()); }\n    /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    getAllRootElements() { return Array.from(this._applications.keys()); }\n    /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    findTestabilityInTree(elem, findInAncestors = true) {\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n    }\n}\nTestabilityRegistry.ɵfac = function TestabilityRegistry_Factory(t) { return new (t || TestabilityRegistry)(); };\nTestabilityRegistry.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: TestabilityRegistry, factory: TestabilityRegistry.ɵfac });\n/** @nocollapse */\nTestabilityRegistry.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\nclass _NoopGetTestability {\n    /**\n     * @param {?} registry\n     * @return {?}\n     */\n    addToWindow(registry) { }\n    /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    findTestabilityInTree(registry, elem, findInAncestors) {\n        return null;\n    }\n}\n/**\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n * \\@publicApi\n * @param {?} getter\n * @return {?}\n */\nfunction setTestabilityGetter(getter) {\n    _testabilityGetter = getter;\n}\n/** @type {?} */\nlet _testabilityGetter = new _NoopGetTestability();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _platform;\n/** @type {?} */\nlet compileNgModuleFactory = compileNgModuleFactory__PRE_R3__;\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nfunction compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {\n    /** @type {?} */\n    const compilerFactory = injector.get(CompilerFactory);\n    /** @type {?} */\n    const compiler = compilerFactory.createCompiler([options]);\n    return compiler.compileModuleAsync(moduleType);\n}\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nfunction compileNgModuleFactory__POST_R3__(injector, options, moduleType) {\n    ngDevMode && assertNgModuleType(moduleType);\n    return Promise.resolve(new NgModuleFactory$1(moduleType));\n}\n/** @type {?} */\nconst ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@publicApi\n */\nclass NgProbeToken {\n    /**\n     * @param {?} name\n     * @param {?} token\n     */\n    constructor(name, token) {\n        this.name = name;\n        this.token = token;\n    }\n}\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * \\@publicApi\n * @param {?} injector\n * @return {?}\n */\nfunction createPlatform(injector) {\n    if (_platform && !_platform.destroyed &&\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n    }\n    _platform = injector.get(PlatformRef);\n    /** @type {?} */\n    const inits = injector.get(PLATFORM_INITIALIZER, null);\n    if (inits)\n        inits.forEach((init) => init());\n    return _platform;\n}\n/**\n * Creates a factory for a platform\n *\n * \\@publicApi\n * @param {?} parentPlatformFactory\n * @param {?} name\n * @param {?=} providers\n * @return {?}\n */\nfunction createPlatformFactory(parentPlatformFactory, name, providers = []) {\n    /** @type {?} */\n    const desc = `Platform: ${name}`;\n    /** @type {?} */\n    const marker = new InjectionToken(desc);\n    return (extraProviders = []) => {\n        /** @type {?} */\n        let platform = getPlatform();\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            if (parentPlatformFactory) {\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n            }\n            else {\n                /** @type {?} */\n                const injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\n                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n            }\n        }\n        return assertPlatform(marker);\n    };\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * \\@publicApi\n * @param {?} requiredToken\n * @return {?}\n */\nfunction assertPlatform(requiredToken) {\n    /** @type {?} */\n    const platform = getPlatform();\n    if (!platform) {\n        throw new Error('No platform exists!');\n    }\n    if (!platform.injector.get(requiredToken, null)) {\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n    }\n    return platform;\n}\n/**\n * Destroy the existing platform.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction destroyPlatform() {\n    if (_platform && !_platform.destroyed) {\n        _platform.destroy();\n    }\n}\n/**\n * Returns the current platform.\n *\n * \\@publicApi\n * @return {?}\n */\nfunction getPlatform() {\n    return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\n *\n * \\@publicApi\n */\nclass PlatformRef {\n    /**\n     * \\@internal\n     * @param {?} _injector\n     */\n    constructor(_injector) {\n        this._injector = _injector;\n        this._modules = [];\n        this._destroyListeners = [];\n        this._destroyed = false;\n    }\n    /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    bootstrapModuleFactory(moduleFactory, options) {\n        // Note: We need to create the NgZone _before_ we instantiate the module,\n        // as instantiating the module creates some providers eagerly.\n        // So we create a mini parent injector that just contains the new NgZone and\n        // pass that as parent to the NgModuleFactory.\n        /** @type {?} */\n        const ngZoneOption = options ? options.ngZone : undefined;\n        /** @type {?} */\n        const ngZone = getNgZone(ngZoneOption);\n        /** @type {?} */\n        const providers = [{ provide: NgZone, useValue: ngZone }];\n        // Attention: Don't use ApplicationRef.run here,\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n        return ngZone.run(() => {\n            /** @type {?} */\n            const ngZoneInjector = Injector.create({ providers: providers, parent: this.injector, name: moduleFactory.moduleType.name });\n            /** @type {?} */\n            const moduleRef = (/** @type {?} */ (moduleFactory.create(ngZoneInjector)));\n            /** @type {?} */\n            const exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n            if (!exceptionHandler) {\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n            }\n            moduleRef.onDestroy(() => remove(this._modules, moduleRef));\n            (/** @type {?} */ (ngZone)).runOutsideAngular(() => (/** @type {?} */ (ngZone)).onError.subscribe({ next: (error) => { exceptionHandler.handleError(error); } }));\n            return _callAndReportToErrorHandler(exceptionHandler, (/** @type {?} */ (ngZone)), () => {\n                /** @type {?} */\n                const initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                initStatus.runInitializers();\n                return initStatus.donePromise.then(() => {\n                    this._moduleDoBootstrap(moduleRef);\n                    return moduleRef;\n                });\n            });\n        });\n    }\n    /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    bootstrapModule(moduleType, compilerOptions = []) {\n        /** @type {?} */\n        const options = optionsReducer({}, compilerOptions);\n        return compileNgModuleFactory(this.injector, options, moduleType)\n            .then(moduleFactory => this.bootstrapModuleFactory(moduleFactory, options));\n    }\n    /**\n     * @private\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    _moduleDoBootstrap(moduleRef) {\n        /** @type {?} */\n        const appRef = (/** @type {?} */ (moduleRef.injector.get(ApplicationRef)));\n        if (moduleRef._bootstrapComponents.length > 0) {\n            moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n        }\n        else if (moduleRef.instance.ngDoBootstrap) {\n            moduleRef.instance.ngDoBootstrap(appRef);\n        }\n        else {\n            throw new Error(`The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n                `Please define one of these.`);\n        }\n        this._modules.push(moduleRef);\n    }\n    /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { this._destroyListeners.push(callback); }\n    /**\n     * Retrieve the platform {\\@link Injector}, which is the parent injector for\n     * every Angular application on the page and provides singleton providers.\n     * @return {?}\n     */\n    get injector() { return this._injector; }\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    destroy() {\n        if (this._destroyed) {\n            throw new Error('The platform has already been destroyed!');\n        }\n        this._modules.slice().forEach(module => module.destroy());\n        this._destroyListeners.forEach(listener => listener());\n        this._destroyed = true;\n    }\n    /**\n     * @return {?}\n     */\n    get destroyed() { return this._destroyed; }\n}\nPlatformRef.ɵfac = function PlatformRef_Factory(t) { return new (t || PlatformRef)(ɵɵinject(Injector)); };\nPlatformRef.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: PlatformRef, factory: PlatformRef.ɵfac });\n/** @nocollapse */\nPlatformRef.ctorParameters = () => [\n    { type: Injector }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(PlatformRef, [{\n        type: Injectable\n    }], function () { return [{ type: Injector }]; }, null); })();\n/**\n * @param {?=} ngZoneOption\n * @return {?}\n */\nfunction getNgZone(ngZoneOption) {\n    /** @type {?} */\n    let ngZone;\n    if (ngZoneOption === 'noop') {\n        ngZone = new NoopNgZone();\n    }\n    else {\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n            new NgZone({ enableLongStackTrace: isDevMode() });\n    }\n    return ngZone;\n}\n/**\n * @param {?} errorHandler\n * @param {?} ngZone\n * @param {?} callback\n * @return {?}\n */\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n    try {\n        /** @type {?} */\n        const result = callback();\n        if (isPromise(result)) {\n            return result.catch((e) => {\n                ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n                // rethrow as the exception handler might not do it\n                throw e;\n            });\n        }\n        return result;\n    }\n    catch (e) {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n    }\n}\n/**\n * @template T\n * @param {?} dst\n * @param {?} objs\n * @return {?}\n */\nfunction optionsReducer(dst, objs) {\n    if (Array.isArray(objs)) {\n        dst = objs.reduce(optionsReducer, dst);\n    }\n    else {\n        dst = Object.assign({}, dst, ((/** @type {?} */ (objs))));\n    }\n    return dst;\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * \\@usageNotes\n *\n * {\\@a is-stable-examples}\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * \\@publicApi\n */\nclass ApplicationRef {\n    /**\n     * \\@internal\n     * @param {?} _zone\n     * @param {?} _console\n     * @param {?} _injector\n     * @param {?} _exceptionHandler\n     * @param {?} _componentFactoryResolver\n     * @param {?} _initStatus\n     */\n    constructor(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n        this._zone = _zone;\n        this._console = _console;\n        this._injector = _injector;\n        this._exceptionHandler = _exceptionHandler;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._initStatus = _initStatus;\n        this._bootstrapListeners = [];\n        this._views = [];\n        this._runningTick = false;\n        this._enforceNoNewChanges = false;\n        this._stable = true;\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         */\n        this.componentTypes = [];\n        /**\n         * Get a list of components registered to this application.\n         */\n        this.components = [];\n        this._enforceNoNewChanges = isDevMode();\n        this._zone.onMicrotaskEmpty.subscribe({ next: () => { this._zone.run(() => { this.tick(); }); } });\n        /** @type {?} */\n        const isCurrentlyStable = new Observable((observer) => {\n            this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&\n                !this._zone.hasPendingMicrotasks;\n            this._zone.runOutsideAngular(() => {\n                observer.next(this._stable);\n                observer.complete();\n            });\n        });\n        /** @type {?} */\n        const isStable = new Observable((observer) => {\n            // Create the subscription to onStable outside the Angular Zone so that\n            // the callback is run outside the Angular Zone.\n            /** @type {?} */\n            let stableSub;\n            this._zone.runOutsideAngular(() => {\n                stableSub = this._zone.onStable.subscribe(() => {\n                    NgZone.assertNotInAngularZone();\n                    // Check whether there are no pending macro/micro tasks in the next tick\n                    // to allow for NgZone to update the state.\n                    scheduleMicroTask(() => {\n                        if (!this._stable && !this._zone.hasPendingMacrotasks &&\n                            !this._zone.hasPendingMicrotasks) {\n                            this._stable = true;\n                            observer.next(true);\n                        }\n                    });\n                });\n            });\n            /** @type {?} */\n            const unstableSub = this._zone.onUnstable.subscribe(() => {\n                NgZone.assertInAngularZone();\n                if (this._stable) {\n                    this._stable = false;\n                    this._zone.runOutsideAngular(() => { observer.next(false); });\n                }\n            });\n            return () => {\n                stableSub.unsubscribe();\n                unstableSub.unsubscribe();\n            };\n        });\n        ((/** @type {?} */ (this))).isStable =\n            merge(isCurrentlyStable, isStable.pipe(share()));\n    }\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * \\@usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    bootstrap(componentOrFactory, rootSelectorOrNode) {\n        if (!this._initStatus.done) {\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n        }\n        /** @type {?} */\n        let componentFactory;\n        if (componentOrFactory instanceof ComponentFactory) {\n            componentFactory = componentOrFactory;\n        }\n        else {\n            componentFactory =\n                (/** @type {?} */ (this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));\n        }\n        this.componentTypes.push(componentFactory.componentType);\n        // Create a factory associated with the current module if it's not bound to some other\n        /** @type {?} */\n        const ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\n            null :\n            this._injector.get(NgModuleRef);\n        /** @type {?} */\n        const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n        /** @type {?} */\n        const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n        compRef.onDestroy(() => { this._unloadComponent(compRef); });\n        /** @type {?} */\n        const testability = compRef.injector.get(Testability, null);\n        if (testability) {\n            compRef.injector.get(TestabilityRegistry)\n                .registerApplication(compRef.location.nativeElement, testability);\n        }\n        this._loadComponent(compRef);\n        if (isDevMode()) {\n            this._console.log(`Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);\n        }\n        return compRef;\n    }\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    tick() {\n        if (this._runningTick) {\n            throw new Error('ApplicationRef.tick is called recursively');\n        }\n        /** @type {?} */\n        const scope = ApplicationRef._tickScope();\n        try {\n            this._runningTick = true;\n            this._views.forEach((view) => view.detectChanges());\n            if (this._enforceNoNewChanges) {\n                this._views.forEach((view) => view.checkNoChanges());\n            }\n        }\n        catch (e) {\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n            this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\n        }\n        finally {\n            this._runningTick = false;\n            wtfLeave(scope);\n        }\n    }\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    attachView(viewRef) {\n        /** @type {?} */\n        const view = ((/** @type {?} */ (viewRef)));\n        this._views.push(view);\n        view.attachToAppRef(this);\n    }\n    /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    detachView(viewRef) {\n        /** @type {?} */\n        const view = ((/** @type {?} */ (viewRef)));\n        remove(this._views, view);\n        view.detachFromAppRef();\n    }\n    /**\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _loadComponent(componentRef) {\n        this.attachView(componentRef.hostView);\n        this.tick();\n        this.components.push(componentRef);\n        // Get the listeners lazily to prevent DI cycles.\n        /** @type {?} */\n        const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n        listeners.forEach((listener) => listener(componentRef));\n    }\n    /**\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    _unloadComponent(componentRef) {\n        this.detachView(componentRef.hostView);\n        remove(this.components, componentRef);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // TODO(alxhub): Dispose of the NgZone.\n        this._views.slice().forEach((view) => view.destroy());\n    }\n    /**\n     * Returns the number of attached views.\n     * @return {?}\n     */\n    get viewCount() { return this._views.length; }\n}\nApplicationRef.ɵfac = function ApplicationRef_Factory(t) { return new (t || ApplicationRef)(ɵɵinject(NgZone), ɵɵinject(Console), ɵɵinject(Injector), ɵɵinject(ErrorHandler), ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationInitStatus)); };\nApplicationRef.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: ApplicationRef, factory: ApplicationRef.ɵfac });\n/**\n * \\@internal\n */\nApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\n/** @nocollapse */\nApplicationRef.ctorParameters = () => [\n    { type: NgZone },\n    { type: Console },\n    { type: Injector },\n    { type: ErrorHandler },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationInitStatus }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationRef, [{\n        type: Injectable\n    }], function () { return [{ type: NgZone }, { type: Console }, { type: Injector }, { type: ErrorHandler }, { type: ComponentFactoryResolver }, { type: ApplicationInitStatus }]; }, null); })();\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n    /** @type {?} */\n    const index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * \\@publicApi\n * @template T\n */\nclass QueryList$1 {\n    constructor() {\n        this.dirty = true;\n        this._results = [];\n        this.changes = new EventEmitter();\n        this.length = 0;\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    map(fn) { return this._results.map(fn); }\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    filter(fn) {\n        return this._results.filter(fn);\n    }\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    find(fn) {\n        return this._results.find(fn);\n    }\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    reduce(fn, init) {\n        return this._results.reduce(fn, init);\n    }\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) { this._results.forEach(fn); }\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    some(fn) {\n        return this._results.some(fn);\n    }\n    /**\n     * @return {?}\n     */\n    toArray() { return this._results.slice(); }\n    /**\n     * @return {?}\n     */\n    [getSymbolIterator()]() { return ((/** @type {?} */ (this._results)))[getSymbolIterator()](); }\n    /**\n     * @return {?}\n     */\n    toString() { return this._results.toString(); }\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    reset(res) {\n        this._results = flatten$2(res);\n        ((/** @type {?} */ (this))).dirty = false;\n        ((/** @type {?} */ (this))).length = this._results.length;\n        ((/** @type {?} */ (this))).last = this._results[this.length - 1];\n        ((/** @type {?} */ (this))).first = this._results[0];\n    }\n    /**\n     * @return {?}\n     */\n    notifyOnChanges() { ((/** @type {?} */ (this.changes))).emit(this); }\n    /**\n     * internal\n     * @return {?}\n     */\n    setDirty() { ((/** @type {?} */ (this))).dirty = true; }\n    /**\n     * internal\n     * @return {?}\n     */\n    destroy() {\n        ((/** @type {?} */ (this.changes))).complete();\n        ((/** @type {?} */ (this.changes))).unsubscribe();\n    }\n}\n/**\n * @template T\n * @param {?} list\n * @return {?}\n */\nfunction flatten$2(list) {\n    return list.reduce((flat, item) => {\n        /** @type {?} */\n        const flatItem = Array.isArray(item) ? flatten$2(item) : item;\n        return ((/** @type {?} */ (flat))).concat(flatItem);\n    }, []);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _SEPARATOR = '#';\n/** @type {?} */\nconst FACTORY_CLASS_SUFFIX = 'NgFactory';\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@publicApi\n * @abstract\n */\nclass SystemJsNgModuleLoaderConfig {\n}\n/** @type {?} */\nconst DEFAULT_CONFIG = {\n    factoryPathPrefix: '',\n    factoryPathSuffix: '.ngfactory',\n};\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * \\@publicApi\n */\nclass SystemJsNgModuleLoader {\n    /**\n     * @param {?} _compiler\n     * @param {?=} config\n     */\n    constructor(_compiler, config) {\n        this._compiler = _compiler;\n        this._config = config || DEFAULT_CONFIG;\n    }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    load(path) {\n        /** @type {?} */\n        const offlineMode = this._compiler instanceof Compiler;\n        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n    }\n    /**\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n    loadAndCompile(path) {\n        let [module, exportName] = path.split(_SEPARATOR);\n        if (exportName === undefined) {\n            exportName = 'default';\n        }\n        return System.import(module)\n            .then((module) => module[exportName])\n            .then((type) => checkNotEmpty(type, module, exportName))\n            .then((type) => this._compiler.compileModuleAsync(type));\n    }\n    /**\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n    loadFactory(path) {\n        let [module, exportName] = path.split(_SEPARATOR);\n        /** @type {?} */\n        let factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n        if (exportName === undefined) {\n            exportName = 'default';\n            factoryClassSuffix = '';\n        }\n        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n            .then((module) => module[exportName + factoryClassSuffix])\n            .then((factory) => checkNotEmpty(factory, module, exportName));\n    }\n}\nSystemJsNgModuleLoader.ɵfac = function SystemJsNgModuleLoader_Factory(t) { return new (t || SystemJsNgModuleLoader)(ɵɵinject(Compiler), ɵɵinject(SystemJsNgModuleLoaderConfig, 8)); };\nSystemJsNgModuleLoader.ɵprov = /*@__PURE__*/ ɵɵdefineInjectable({ token: SystemJsNgModuleLoader, factory: SystemJsNgModuleLoader.ɵfac });\n/** @nocollapse */\nSystemJsNgModuleLoader.ctorParameters = () => [\n    { type: Compiler },\n    { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(SystemJsNgModuleLoader, [{\n        type: Injectable\n    }], function () { return [{ type: Compiler }, { type: SystemJsNgModuleLoaderConfig, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\n/**\n * @param {?} value\n * @param {?} modulePath\n * @param {?} exportName\n * @return {?}\n */\nfunction checkNotEmpty(value, modulePath, exportName) {\n    if (!value) {\n        throw new Error(`Cannot find '${exportName}' in '${modulePath}'`);\n    }\n    return value;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nclass ViewContainerRef {\n}\n/**\n * \\@internal\n */\nViewContainerRef.__NG_ELEMENT_ID__ = () => SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef);\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = injectViewContainerRef;\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base class for Angular Views, provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n *\n * \\@usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * \\@publicApi\n * @abstract\n */\nclass ChangeDetectorRef {\n}\n/**\n * \\@internal\n */\nChangeDetectorRef.__NG_ELEMENT_ID__ = () => SWITCH_CHANGE_DETECTOR_REF_FACTORY();\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = injectChangeDetectorRef;\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = (...args) => { };\n/** @type {?} */\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nclass ViewRef$1 extends ChangeDetectorRef {\n}\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * \\@usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@publicApi\n * @abstract\n * @template C\n */\nclass EmbeddedViewRef extends ViewRef$1 {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass EventListener {\n    /**\n     * @param {?} name\n     * @param {?} callback\n     */\n    constructor(name, callback) {\n        this.name = name;\n        this.callback = callback;\n    }\n}\n// WARNING: interface has both a type and a value, skipping emit\nclass DebugNode__PRE_R3__ {\n    /**\n     * @param {?} nativeNode\n     * @param {?} parent\n     * @param {?} _debugContext\n     */\n    constructor(nativeNode, parent, _debugContext) {\n        this.listeners = [];\n        this.parent = null;\n        this._debugContext = _debugContext;\n        this.nativeNode = nativeNode;\n        if (parent && parent instanceof DebugElement__PRE_R3__) {\n            parent.addChild(this);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return this._debugContext.injector; }\n    /**\n     * @return {?}\n     */\n    get componentInstance() { return this._debugContext.component; }\n    /**\n     * @return {?}\n     */\n    get context() { return this._debugContext.context; }\n    /**\n     * @return {?}\n     */\n    get references() { return this._debugContext.references; }\n    /**\n     * @return {?}\n     */\n    get providerTokens() { return this._debugContext.providerTokens; }\n}\n// WARNING: interface has both a type and a value, skipping emit\nclass DebugElement__PRE_R3__ extends DebugNode__PRE_R3__ {\n    /**\n     * @param {?} nativeNode\n     * @param {?} parent\n     * @param {?} _debugContext\n     */\n    constructor(nativeNode, parent, _debugContext) {\n        super(nativeNode, parent, _debugContext);\n        this.properties = {};\n        this.attributes = {};\n        this.classes = {};\n        this.styles = {};\n        this.childNodes = [];\n        this.nativeElement = nativeNode;\n    }\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    addChild(child) {\n        if (child) {\n            this.childNodes.push(child);\n            ((/** @type {?} */ (child))).parent = this;\n        }\n    }\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    removeChild(child) {\n        /** @type {?} */\n        const childIndex = this.childNodes.indexOf(child);\n        if (childIndex !== -1) {\n            ((/** @type {?} */ (child))).parent = null;\n            this.childNodes.splice(childIndex, 1);\n        }\n    }\n    /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    insertChildrenAfter(child, newChildren) {\n        /** @type {?} */\n        const siblingIndex = this.childNodes.indexOf(child);\n        if (siblingIndex !== -1) {\n            this.childNodes.splice(siblingIndex + 1, 0, ...newChildren);\n            newChildren.forEach(c => {\n                if (c.parent) {\n                    ((/** @type {?} */ (c.parent))).removeChild(c);\n                }\n                ((/** @type {?} */ (child))).parent = this;\n            });\n        }\n    }\n    /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    insertBefore(refChild, newChild) {\n        /** @type {?} */\n        const refIndex = this.childNodes.indexOf(refChild);\n        if (refIndex === -1) {\n            this.addChild(newChild);\n        }\n        else {\n            if (newChild.parent) {\n                ((/** @type {?} */ (newChild.parent))).removeChild(newChild);\n            }\n            ((/** @type {?} */ (newChild))).parent = this;\n            this.childNodes.splice(refIndex, 0, newChild);\n        }\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    query(predicate) {\n        /** @type {?} */\n        const results = this.queryAll(predicate);\n        return results[0] || null;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAll(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryElementChildren(this, predicate, matches);\n        return matches;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAllNodes(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryNodeChildren(this, predicate, matches);\n        return matches;\n    }\n    /**\n     * @return {?}\n     */\n    get children() {\n        return (/** @type {?} */ (this\n            .childNodes //\n            .filter((node) => node instanceof DebugElement__PRE_R3__)));\n    }\n    /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    triggerEventHandler(eventName, eventObj) {\n        this.listeners.forEach((listener) => {\n            if (listener.name == eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    }\n}\n/**\n * \\@publicApi\n * @param {?} debugEls\n * @return {?}\n */\nfunction asNativeElements(debugEls) {\n    return debugEls.map((el) => el.nativeElement);\n}\n/**\n * @param {?} element\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryElementChildren(element, predicate, matches) {\n    element.childNodes.forEach(node => {\n        if (node instanceof DebugElement__PRE_R3__) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            _queryElementChildren(node, predicate, matches);\n        }\n    });\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryNodeChildren(parentNode, predicate, matches) {\n    if (parentNode instanceof DebugElement__PRE_R3__) {\n        parentNode.childNodes.forEach(node => {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement__PRE_R3__) {\n                _queryNodeChildren(node, predicate, matches);\n            }\n        });\n    }\n}\nclass DebugNode__POST_R3__ {\n    /**\n     * @param {?} nativeNode\n     */\n    constructor(nativeNode) { this.nativeNode = nativeNode; }\n    /**\n     * @return {?}\n     */\n    get parent() {\n        /** @type {?} */\n        const parent = (/** @type {?} */ (this.nativeNode.parentNode));\n        return parent ? new DebugElement__POST_R3__(parent) : null;\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return getInjector(this.nativeNode); }\n    /**\n     * @return {?}\n     */\n    get componentInstance() {\n        /** @type {?} */\n        const nativeElement = this.nativeNode;\n        return nativeElement && getComponent((/** @type {?} */ (nativeElement)));\n    }\n    /**\n     * @return {?}\n     */\n    get context() { return getContext((/** @type {?} */ (this.nativeNode))); }\n    /**\n     * @return {?}\n     */\n    get listeners() {\n        return getListeners((/** @type {?} */ (this.nativeNode))).filter(isBrowserEvents);\n    }\n    /**\n     * @return {?}\n     */\n    get references() { return getLocalRefs(this.nativeNode); }\n    /**\n     * @return {?}\n     */\n    get providerTokens() { return getInjectionTokens((/** @type {?} */ (this.nativeNode))); }\n}\nclass DebugElement__POST_R3__ extends DebugNode__POST_R3__ {\n    /**\n     * @param {?} nativeNode\n     */\n    constructor(nativeNode) {\n        ngDevMode && assertDomNode(nativeNode);\n        super(nativeNode);\n    }\n    /**\n     * @return {?}\n     */\n    get nativeElement() {\n        return this.nativeNode.nodeType == Node.ELEMENT_NODE ? (/** @type {?} */ (this.nativeNode)) : null;\n    }\n    /**\n     * @return {?}\n     */\n    get name() { return (/** @type {?} */ (this.nativeElement)).nodeName; }\n    /**\n     * @return {?}\n     */\n    get properties() {\n        /** @type {?} */\n        const context = (/** @type {?} */ (loadLContext(this.nativeNode)));\n        /** @type {?} */\n        const lView = context.lView;\n        /** @type {?} */\n        const tView = lView[TVIEW];\n        /** @type {?} */\n        const tNode = (/** @type {?} */ (tView.data[context.nodeIndex]));\n        /** @type {?} */\n        const properties = {};\n        // TODO: https://angular-team.atlassian.net/browse/FW-681\n        // Missing implementation here...\n        return properties;\n    }\n    /**\n     * @return {?}\n     */\n    get attributes() {\n        /** @type {?} */\n        const attributes = {};\n        /** @type {?} */\n        const element = this.nativeElement;\n        if (element) {\n            /** @type {?} */\n            const eAttrs = element.attributes;\n            for (let i = 0; i < eAttrs.length; i++) {\n                /** @type {?} */\n                const attr = eAttrs[i];\n                attributes[attr.name] = attr.value;\n            }\n        }\n        return attributes;\n    }\n    /**\n     * @return {?}\n     */\n    get classes() {\n        /** @type {?} */\n        const classes = {};\n        /** @type {?} */\n        const element = this.nativeElement;\n        if (element) {\n            /** @type {?} */\n            const lContext = loadLContextFromNode(element);\n            /** @type {?} */\n            const lNode = lContext.lView[lContext.nodeIndex];\n            /** @type {?} */\n            const stylingContext = getStylingContext(lContext.nodeIndex, lContext.lView);\n            if (stylingContext) {\n                for (let i = 9 /* SingleStylesStartPosition */; i < lNode.length; i += 4 /* Size */) {\n                    if (isClassBasedValue(lNode, i)) {\n                        /** @type {?} */\n                        const className = getProp(lNode, i);\n                        /** @type {?} */\n                        const value = getValue(lNode, i);\n                        if (typeof value == 'boolean') {\n                            // we want to ignore `null` since those don't overwrite the values.\n                            classes[className] = value;\n                        }\n                    }\n                }\n            }\n            else {\n                // Fallback, just read DOM.\n                /** @type {?} */\n                const eClasses = element.classList;\n                for (let i = 0; i < eClasses.length; i++) {\n                    classes[eClasses[i]] = true;\n                }\n            }\n        }\n        return classes;\n    }\n    /**\n     * @return {?}\n     */\n    get styles() {\n        /** @type {?} */\n        const styles = {};\n        /** @type {?} */\n        const element = this.nativeElement;\n        if (element) {\n            /** @type {?} */\n            const lContext = loadLContextFromNode(element);\n            /** @type {?} */\n            const lNode = lContext.lView[lContext.nodeIndex];\n            /** @type {?} */\n            const stylingContext = getStylingContext(lContext.nodeIndex, lContext.lView);\n            if (stylingContext) {\n                for (let i = 9 /* SingleStylesStartPosition */; i < lNode.length; i += 4 /* Size */) {\n                    if (!isClassBasedValue(lNode, i)) {\n                        /** @type {?} */\n                        const styleName = getProp(lNode, i);\n                        /** @type {?} */\n                        const value = (/** @type {?} */ (getValue(lNode, i)));\n                        if (value !== null) {\n                            // we want to ignore `null` since those don't overwrite the values.\n                            styles[styleName] = value;\n                        }\n                    }\n                }\n            }\n            else {\n                // Fallback, just read DOM.\n                /** @type {?} */\n                const eStyles = ((/** @type {?} */ (element))).style;\n                for (let i = 0; i < eStyles.length; i++) {\n                    /** @type {?} */\n                    const name = eStyles.item(i);\n                    styles[name] = eStyles.getPropertyValue(name);\n                }\n            }\n        }\n        return styles;\n    }\n    /**\n     * @return {?}\n     */\n    get childNodes() {\n        /** @type {?} */\n        const childNodes = this.nativeNode.childNodes;\n        /** @type {?} */\n        const children = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            /** @type {?} */\n            const element = childNodes[i];\n            children.push(getDebugNode__POST_R3__(element));\n        }\n        return children;\n    }\n    /**\n     * @return {?}\n     */\n    get children() {\n        /** @type {?} */\n        const nativeElement = this.nativeElement;\n        if (!nativeElement)\n            return [];\n        /** @type {?} */\n        const childNodes = nativeElement.children;\n        /** @type {?} */\n        const children = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            /** @type {?} */\n            const element = childNodes[i];\n            children.push(getDebugNode__POST_R3__(element));\n        }\n        return children;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    query(predicate) {\n        /** @type {?} */\n        const results = this.queryAll(predicate);\n        return results[0] || null;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAll(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryNodeChildrenR3(this, predicate, matches, true);\n        return matches;\n    }\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    queryAllNodes(predicate) {\n        /** @type {?} */\n        const matches = [];\n        _queryNodeChildrenR3(this, predicate, matches, false);\n        return matches;\n    }\n    /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    triggerEventHandler(eventName, eventObj) {\n        this.listeners.forEach((listener) => {\n            if (listener.name === eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    }\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @param {?} elementsOnly\n * @return {?}\n */\nfunction _queryNodeChildrenR3(parentNode, predicate, matches, elementsOnly) {\n    if (parentNode instanceof DebugElement__POST_R3__) {\n        parentNode.childNodes.forEach(node => {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement__POST_R3__) {\n                if (elementsOnly ? node.nativeElement : true) {\n                    _queryNodeChildrenR3(node, predicate, matches, elementsOnly);\n                }\n            }\n        });\n    }\n}\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\n/** @type {?} */\nconst _nativeNodeToDebugNode = new Map();\n/**\n * @param {?} nativeNode\n * @return {?}\n */\nfunction getDebugNode__PRE_R3__(nativeNode) {\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n/**\n * @param {?} nativeNode\n * @return {?}\n */\nfunction getDebugNode__POST_R3__(nativeNode) {\n    if (nativeNode instanceof Node) {\n        return nativeNode.nodeType == Node.ELEMENT_NODE ?\n            new DebugElement__POST_R3__((/** @type {?} */ (nativeNode))) :\n            new DebugNode__POST_R3__(nativeNode);\n    }\n    return null;\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst getDebugNode = getDebugNode__PRE_R3__;\n/**\n * @param {?} node\n * @return {?}\n */\nfunction indexDebugNode(node) {\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction removeDebugNodeFromIndex(node) {\n    _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n/**\n * \\@publicApi\n * @type {?}\n */\nconst DebugNode = (/** @type {?} */ (DebugNode__PRE_R3__));\n/**\n * \\@publicApi\n * @type {?}\n */\nconst DebugElement = (/** @type {?} */ (DebugElement__PRE_R3__));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DefaultIterableDifferFactory {\n    constructor() { }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    supports(obj) { return isListLikeIterable(obj); }\n    /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    create(trackByFn) {\n        return new DefaultIterableDiffer(trackByFn);\n    }\n}\n/** @type {?} */\nconst trackByIdentity = (index, item) => item;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * \\@publicApi\n * @template V\n */\nclass DefaultIterableDiffer {\n    /**\n     * @param {?=} trackByFn\n     */\n    constructor(trackByFn) {\n        this.length = 0;\n        // Keeps track of the used records at any point in time (during & across `_check()` calls)\n        this._linkedRecords = null;\n        // Keeps track of the removed records at any point in time during `_check()` calls.\n        this._unlinkedRecords = null;\n        this._previousItHead = null;\n        this._itHead = null;\n        this._itTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._movesHead = null;\n        this._movesTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n        // Keeps track of records where custom track by is the same, but item identity has changed\n        this._identityChangesHead = null;\n        this._identityChangesTail = null;\n        this._trackByFn = trackByFn || trackByIdentity;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._itHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachOperation(fn) {\n        /** @type {?} */\n        let nextIt = this._itHead;\n        /** @type {?} */\n        let nextRemove = this._removalsHead;\n        /** @type {?} */\n        let addRemoveOffset = 0;\n        /** @type {?} */\n        let moveOffsets = null;\n        while (nextIt || nextRemove) {\n            // Figure out which is the next record to process\n            // Order: remove, add, move\n            /** @type {?} */\n            const record = !nextRemove ||\n                nextIt &&\n                    (/** @type {?} */ (nextIt.currentIndex)) <\n                        getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n                (/** @type {?} */ (nextIt)) :\n                nextRemove;\n            /** @type {?} */\n            const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n            /** @type {?} */\n            const currentIndex = record.currentIndex;\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n            if (record === nextRemove) {\n                addRemoveOffset--;\n                nextRemove = nextRemove._nextRemoved;\n            }\n            else {\n                nextIt = (/** @type {?} */ (nextIt))._next;\n                if (record.previousIndex == null) {\n                    addRemoveOffset++;\n                }\n                else {\n                    // INVARIANT:  currentIndex < previousIndex\n                    if (!moveOffsets)\n                        moveOffsets = [];\n                    /** @type {?} */\n                    const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                    /** @type {?} */\n                    const localCurrentIndex = (/** @type {?} */ (currentIndex)) - addRemoveOffset;\n                    if (localMovePreviousIndex != localCurrentIndex) {\n                        for (let i = 0; i < localMovePreviousIndex; i++) {\n                            /** @type {?} */\n                            const offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                            /** @type {?} */\n                            const index = offset + i;\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                moveOffsets[i] = offset + 1;\n                            }\n                        }\n                        /** @type {?} */\n                        const previousIndex = record.previousIndex;\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                    }\n                }\n            }\n            if (adjPreviousIndex !== currentIndex) {\n                fn(record, adjPreviousIndex, currentIndex);\n            }\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachPreviousItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachAddedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachMovedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachRemovedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachIdentityChange(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    diff(collection) {\n        if (collection == null)\n            collection = [];\n        if (!isListLikeIterable(collection)) {\n            throw new Error(`Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\n        }\n        if (this.check(collection)) {\n            return this;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onDestroy() { }\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    check(collection) {\n        this._reset();\n        /** @type {?} */\n        let record = this._itHead;\n        /** @type {?} */\n        let mayBeDirty = false;\n        /** @type {?} */\n        let index;\n        /** @type {?} */\n        let item;\n        /** @type {?} */\n        let itemTrackBy;\n        if (Array.isArray(collection)) {\n            ((/** @type {?} */ (this))).length = collection.length;\n            for (let index = 0; index < this.length; index++) {\n                item = collection[index];\n                itemTrackBy = this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n            }\n        }\n        else {\n            index = 0;\n            iterateListLike(collection, (item) => {\n                itemTrackBy = this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n                index++;\n            });\n            ((/** @type {?} */ (this))).length = index;\n        }\n        this._truncate(record);\n        ((/** @type {?} */ (this))).collection = collection;\n        return this.isDirty;\n    }\n    /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n       * changes.\n       */\n    /**\n     * @return {?}\n     */\n    get isDirty() {\n        return this._additionsHead !== null || this._movesHead !== null ||\n            this._removalsHead !== null || this._identityChangesHead !== null;\n    }\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    _reset() {\n        if (this.isDirty) {\n            /** @type {?} */\n            let record;\n            /** @type {?} */\n            let nextRecord;\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._additionsHead = this._additionsTail = null;\n            for (record = this._movesHead; record !== null; record = nextRecord) {\n                record.previousIndex = record.currentIndex;\n                nextRecord = record._nextMoved;\n            }\n            this._movesHead = this._movesTail = null;\n            this._removalsHead = this._removalsTail = null;\n            this._identityChangesHead = this._identityChangesTail = null;\n            // TODO(vicb): when assert gets supported\n            // assert(!this.isDirty);\n        }\n    }\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    _mismatch(record, item, itemTrackBy, index) {\n        // The previous record after which we will append the current one.\n        /** @type {?} */\n        let previousRecord;\n        if (record === null) {\n            previousRecord = this._itTail;\n        }\n        else {\n            previousRecord = record._prev;\n            // Remove the record from the collection since we know it does not match the item.\n            this._remove(record);\n        }\n        // Attempt to see if we have seen the item before.\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n        if (record !== null) {\n            // We have seen this before, we need to move it forward in the collection.\n            // But first we need to check if identity changed, so we can update in view if necessary\n            if (!looseIdentical(record.item, item))\n                this._addIdentityChange(record, item);\n            this._moveAfter(record, previousRecord, index);\n        }\n        else {\n            // Never seen it, check evicted list.\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (record !== null) {\n                // It is an item which we have evicted earlier: reinsert it back into the list.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._reinsertAfter(record, previousRecord, index);\n            }\n            else {\n                // It is a new item: add it.\n                record =\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n            }\n        }\n        return record;\n    }\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    _verifyReinsertion(record, item, itemTrackBy, index) {\n        /** @type {?} */\n        let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n        if (reinsertRecord !== null) {\n            record = this._reinsertAfter(reinsertRecord, (/** @type {?} */ (record._prev)), index);\n        }\n        else if (record.currentIndex != index) {\n            record.currentIndex = index;\n            this._addToMoves(record, index);\n        }\n        return record;\n    }\n    /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    _truncate(record) {\n        // Anything after that needs to be removed;\n        while (record !== null) {\n            /** @type {?} */\n            const nextRecord = record._next;\n            this._addToRemovals(this._unlink(record));\n            record = nextRecord;\n        }\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.clear();\n        }\n        if (this._additionsTail !== null) {\n            this._additionsTail._nextAdded = null;\n        }\n        if (this._movesTail !== null) {\n            this._movesTail._nextMoved = null;\n        }\n        if (this._itTail !== null) {\n            this._itTail._next = null;\n        }\n        if (this._removalsTail !== null) {\n            this._removalsTail._nextRemoved = null;\n        }\n        if (this._identityChangesTail !== null) {\n            this._identityChangesTail._nextIdentityChange = null;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _reinsertAfter(record, prevRecord, index) {\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.remove(record);\n        }\n        /** @type {?} */\n        const prev = record._prevRemoved;\n        /** @type {?} */\n        const next = record._nextRemoved;\n        if (prev === null) {\n            this._removalsHead = next;\n        }\n        else {\n            prev._nextRemoved = next;\n        }\n        if (next === null) {\n            this._removalsTail = prev;\n        }\n        else {\n            next._prevRemoved = prev;\n        }\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _moveAfter(record, prevRecord, index) {\n        this._unlink(record);\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _addAfter(record, prevRecord, index) {\n        this._insertAfter(record, prevRecord, index);\n        if (this._additionsTail === null) {\n            // TODO(vicb):\n            // assert(this._additionsHead === null);\n            this._additionsTail = this._additionsHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_additionsTail._nextAdded === null);\n            // assert(record._nextAdded === null);\n            this._additionsTail = this._additionsTail._nextAdded = record;\n        }\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    _insertAfter(record, prevRecord, index) {\n        // TODO(vicb):\n        // assert(record != prevRecord);\n        // assert(record._next === null);\n        // assert(record._prev === null);\n        // TODO(vicb):\n        // assert(record != prevRecord);\n        // assert(record._next === null);\n        // assert(record._prev === null);\n        /** @type {?} */\n        const next = prevRecord === null ? this._itHead : prevRecord._next;\n        // TODO(vicb):\n        // assert(next != record);\n        // assert(prevRecord != record);\n        record._next = next;\n        record._prev = prevRecord;\n        if (next === null) {\n            this._itTail = record;\n        }\n        else {\n            next._prev = record;\n        }\n        if (prevRecord === null) {\n            this._itHead = record;\n        }\n        else {\n            prevRecord._next = record;\n        }\n        if (this._linkedRecords === null) {\n            this._linkedRecords = new _DuplicateMap();\n        }\n        this._linkedRecords.put(record);\n        record.currentIndex = index;\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    _remove(record) {\n        return this._addToRemovals(this._unlink(record));\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    _unlink(record) {\n        if (this._linkedRecords !== null) {\n            this._linkedRecords.remove(record);\n        }\n        /** @type {?} */\n        const prev = record._prev;\n        /** @type {?} */\n        const next = record._next;\n        // TODO(vicb):\n        // assert((record._prev = null) === null);\n        // assert((record._next = null) === null);\n        if (prev === null) {\n            this._itHead = next;\n        }\n        else {\n            prev._next = next;\n        }\n        if (next === null) {\n            this._itTail = prev;\n        }\n        else {\n            next._prev = prev;\n        }\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    _addToMoves(record, toIndex) {\n        // TODO(vicb):\n        // assert(record._nextMoved === null);\n        if (record.previousIndex === toIndex) {\n            return record;\n        }\n        if (this._movesTail === null) {\n            // TODO(vicb):\n            // assert(_movesHead === null);\n            this._movesTail = this._movesHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_movesTail._nextMoved === null);\n            this._movesTail = this._movesTail._nextMoved = record;\n        }\n        return record;\n    }\n    /**\n     * @private\n     * @param {?} record\n     * @return {?}\n     */\n    _addToRemovals(record) {\n        if (this._unlinkedRecords === null) {\n            this._unlinkedRecords = new _DuplicateMap();\n        }\n        this._unlinkedRecords.put(record);\n        record.currentIndex = null;\n        record._nextRemoved = null;\n        if (this._removalsTail === null) {\n            // TODO(vicb):\n            // assert(_removalsHead === null);\n            this._removalsTail = this._removalsHead = record;\n            record._prevRemoved = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_removalsTail._nextRemoved === null);\n            // assert(record._nextRemoved === null);\n            record._prevRemoved = this._removalsTail;\n            this._removalsTail = this._removalsTail._nextRemoved = record;\n        }\n        return record;\n    }\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    _addIdentityChange(record, item) {\n        record.item = item;\n        if (this._identityChangesTail === null) {\n            this._identityChangesTail = this._identityChangesHead = record;\n        }\n        else {\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n        }\n        return record;\n    }\n}\n/**\n * @template V\n */\nclass IterableChangeRecord_ {\n    /**\n     * @param {?} item\n     * @param {?} trackById\n     */\n    constructor(item, trackById) {\n        this.item = item;\n        this.trackById = trackById;\n        this.currentIndex = null;\n        this.previousIndex = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prevDup = null;\n        /**\n         * \\@internal\n         */\n        this._nextDup = null;\n        /**\n         * \\@internal\n         */\n        this._prevRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextMoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextIdentityChange = null;\n    }\n}\n// A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item\n/**\n * @template V\n */\nclass _DuplicateItemRecordList {\n    constructor() {\n        /**\n         * \\@internal\n         */\n        this._head = null;\n        /**\n         * \\@internal\n         */\n        this._tail = null;\n    }\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    add(record) {\n        if (this._head === null) {\n            this._head = this._tail = record;\n            record._nextDup = null;\n            record._prevDup = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(record.item ==  _head.item ||\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n            (/** @type {?} */ (this._tail))._nextDup = record;\n            record._prevDup = this._tail;\n            record._nextDup = null;\n            this._tail = record;\n        }\n    }\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n    /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    get(trackById, atOrAfterIndex) {\n        /** @type {?} */\n        let record;\n        for (record = this._head; record !== null; record = record._nextDup) {\n            if ((atOrAfterIndex === null || atOrAfterIndex <= (/** @type {?} */ (record.currentIndex))) &&\n                looseIdentical(record.trackById, trackById)) {\n                return record;\n            }\n        }\n        return null;\n    }\n    /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    remove(record) {\n        // TODO(vicb):\n        // assert(() {\n        //  // verify that the record being removed is in the list.\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n        //    if (identical(cursor, record)) return true;\n        //  }\n        //  return false;\n        //});\n        // TODO(vicb):\n        // assert(() {\n        //  // verify that the record being removed is in the list.\n        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n        //    if (identical(cursor, record)) return true;\n        //  }\n        //  return false;\n        //});\n        /** @type {?} */\n        const prev = record._prevDup;\n        /** @type {?} */\n        const next = record._nextDup;\n        if (prev === null) {\n            this._head = next;\n        }\n        else {\n            prev._nextDup = next;\n        }\n        if (next === null) {\n            this._tail = prev;\n        }\n        else {\n            next._prevDup = prev;\n        }\n        return this._head === null;\n    }\n}\n/**\n * @template V\n */\nclass _DuplicateMap {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    put(record) {\n        /** @type {?} */\n        const key = record.trackById;\n        /** @type {?} */\n        let duplicates = this.map.get(key);\n        if (!duplicates) {\n            duplicates = new _DuplicateItemRecordList();\n            this.map.set(key, duplicates);\n        }\n        duplicates.add(record);\n    }\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    get(trackById, atOrAfterIndex) {\n        /** @type {?} */\n        const key = trackById;\n        /** @type {?} */\n        const recordList = this.map.get(key);\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n    }\n    /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    remove(record) {\n        /** @type {?} */\n        const key = record.trackById;\n        /** @type {?} */\n        const recordList = (/** @type {?} */ (this.map.get(key)));\n        // Remove the list of duplicates when it gets empty\n        if (recordList.remove(record)) {\n            this.map.delete(key);\n        }\n        return record;\n    }\n    /**\n     * @return {?}\n     */\n    get isEmpty() { return this.map.size === 0; }\n    /**\n     * @return {?}\n     */\n    clear() { this.map.clear(); }\n}\n/**\n * @param {?} item\n * @param {?} addRemoveOffset\n * @param {?} moveOffsets\n * @return {?}\n */\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n    /** @type {?} */\n    const previousIndex = item.previousIndex;\n    if (previousIndex === null)\n        return previousIndex;\n    /** @type {?} */\n    let moveOffset = 0;\n    if (moveOffsets && previousIndex < moveOffsets.length) {\n        moveOffset = moveOffsets[previousIndex];\n    }\n    return previousIndex + addRemoveOffset + moveOffset;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template K, V\n */\nclass DefaultKeyValueDifferFactory {\n    constructor() { }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    supports(obj) { return obj instanceof Map || isJsObject(obj); }\n    /**\n     * @template K, V\n     * @return {?}\n     */\n    create() { return new DefaultKeyValueDiffer(); }\n}\n/**\n * @template K, V\n */\nclass DefaultKeyValueDiffer {\n    constructor() {\n        this._records = new Map();\n        this._mapHead = null;\n        // _appendAfter is used in the check loop\n        this._appendAfter = null;\n        this._previousMapHead = null;\n        this._changesHead = null;\n        this._changesTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n    }\n    /**\n     * @return {?}\n     */\n    get isDirty() {\n        return this._additionsHead !== null || this._changesHead !== null ||\n            this._removalsHead !== null;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._mapHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachPreviousItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachChangedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachAddedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEachRemovedItem(fn) {\n        /** @type {?} */\n        let record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    }\n    /**\n     * @param {?=} map\n     * @return {?}\n     */\n    diff(map) {\n        if (!map) {\n            map = new Map();\n        }\n        else if (!(map instanceof Map || isJsObject(map))) {\n            throw new Error(`Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\n        }\n        return this.check(map) ? this : null;\n    }\n    /**\n     * @return {?}\n     */\n    onDestroy() { }\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    check(map) {\n        this._reset();\n        /** @type {?} */\n        let insertBefore = this._mapHead;\n        this._appendAfter = null;\n        this._forEach(map, (value, key) => {\n            if (insertBefore && insertBefore.key === key) {\n                this._maybeAddToChanges(insertBefore, value);\n                this._appendAfter = insertBefore;\n                insertBefore = insertBefore._next;\n            }\n            else {\n                /** @type {?} */\n                const record = this._getOrCreateRecordForKey(key, value);\n                insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n            }\n        });\n        // Items remaining at the end of the list have been deleted\n        if (insertBefore) {\n            if (insertBefore._prev) {\n                insertBefore._prev._next = null;\n            }\n            this._removalsHead = insertBefore;\n            for (let record = insertBefore; record !== null; record = record._nextRemoved) {\n                if (record === this._mapHead) {\n                    this._mapHead = null;\n                }\n                this._records.delete(record.key);\n                record._nextRemoved = record._next;\n                record.previousValue = record.currentValue;\n                record.currentValue = null;\n                record._prev = null;\n                record._next = null;\n            }\n        }\n        // Make sure tails have no next records from previous runs\n        if (this._changesTail)\n            this._changesTail._nextChanged = null;\n        if (this._additionsTail)\n            this._additionsTail._nextAdded = null;\n        return this.isDirty;\n    }\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @private\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    _insertBeforeOrAppend(before, record) {\n        if (before) {\n            /** @type {?} */\n            const prev = before._prev;\n            record._next = before;\n            record._prev = prev;\n            before._prev = record;\n            if (prev) {\n                prev._next = record;\n            }\n            if (before === this._mapHead) {\n                this._mapHead = record;\n            }\n            this._appendAfter = before;\n            return before;\n        }\n        if (this._appendAfter) {\n            this._appendAfter._next = record;\n            record._prev = this._appendAfter;\n        }\n        else {\n            this._mapHead = record;\n        }\n        this._appendAfter = record;\n        return null;\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    _getOrCreateRecordForKey(key, value) {\n        if (this._records.has(key)) {\n            /** @type {?} */\n            const record = (/** @type {?} */ (this._records.get(key)));\n            this._maybeAddToChanges(record, value);\n            /** @type {?} */\n            const prev = record._prev;\n            /** @type {?} */\n            const next = record._next;\n            if (prev) {\n                prev._next = next;\n            }\n            if (next) {\n                next._prev = prev;\n            }\n            record._next = null;\n            record._prev = null;\n            return record;\n        }\n        /** @type {?} */\n        const record = new KeyValueChangeRecord_(key);\n        this._records.set(key, record);\n        record.currentValue = value;\n        this._addToAdditions(record);\n        return record;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _reset() {\n        if (this.isDirty) {\n            /** @type {?} */\n            let record;\n            // let `_previousMapHead` contain the state of the map before the changes\n            this._previousMapHead = this._mapHead;\n            for (record = this._previousMapHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            // Update `record.previousValue` with the value of the item before the changes\n            // We need to update all changed items (that's those which have been added and changed)\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                record.previousValue = record.currentValue;\n            }\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                record.previousValue = record.currentValue;\n            }\n            this._changesHead = this._changesTail = null;\n            this._additionsHead = this._additionsTail = null;\n            this._removalsHead = null;\n        }\n    }\n    // Add the record or a given key to the list of changes only when the value has actually changed\n    /**\n     * @private\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    _maybeAddToChanges(record, newValue) {\n        if (!looseIdentical(newValue, record.currentValue)) {\n            record.previousValue = record.currentValue;\n            record.currentValue = newValue;\n            this._addToChanges(record);\n        }\n    }\n    /**\n     * @private\n     * @param {?} record\n     * @return {?}\n     */\n    _addToAdditions(record) {\n        if (this._additionsHead === null) {\n            this._additionsHead = this._additionsTail = record;\n        }\n        else {\n            (/** @type {?} */ (this._additionsTail))._nextAdded = record;\n            this._additionsTail = record;\n        }\n    }\n    /**\n     * @private\n     * @param {?} record\n     * @return {?}\n     */\n    _addToChanges(record) {\n        if (this._changesHead === null) {\n            this._changesHead = this._changesTail = record;\n        }\n        else {\n            (/** @type {?} */ (this._changesTail))._nextChanged = record;\n            this._changesTail = record;\n        }\n    }\n    /**\n     * \\@internal\n     * @private\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    _forEach(obj, fn) {\n        if (obj instanceof Map) {\n            obj.forEach(fn);\n        }\n        else {\n            Object.keys(obj).forEach(k => fn(obj[k], k));\n        }\n    }\n}\n/**\n * @template K, V\n */\nclass KeyValueChangeRecord_ {\n    /**\n     * @param {?} key\n     */\n    constructor(key) {\n        this.key = key;\n        this.previousValue = null;\n        this.currentValue = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextChanged = null;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * \\@publicApi\n */\nclass IterableDiffers {\n    /**\n     * @param {?} factories\n     */\n    constructor(factories) { this.factories = factories; }\n    /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    static create(factories, parent) {\n        if (parent != null) {\n            /** @type {?} */\n            const copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new IterableDiffers(factories);\n    }\n    /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    static extend(factories) {\n        return {\n            provide: IterableDiffers,\n            useFactory: (parent) => {\n                if (!parent) {\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                    // to\n                    // bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\n                }\n                return IterableDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n        };\n    }\n    /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    find(iterable) {\n        /** @type {?} */\n        const factory = this.factories.find(f => f.supports(iterable));\n        if (factory != null) {\n            return factory;\n        }\n        else {\n            throw new Error(`Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);\n        }\n    }\n}\n/** @nocollapse */\n/** @nocollapse */ IterableDiffers.ngInjectableDef = defineInjectable({\n    providedIn: 'root',\n    factory: () => new IterableDiffers([new DefaultIterableDifferFactory()])\n});\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getTypeNameForDebugging(type) {\n    return type['name'] || typeof type;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * \\@publicApi\n */\nclass KeyValueDiffers {\n    /**\n     * @param {?} factories\n     */\n    constructor(factories) { this.factories = factories; }\n    /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    static create(factories, parent) {\n        if (parent) {\n            /** @type {?} */\n            const copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new KeyValueDiffers(factories);\n    }\n    /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    static extend(factories) {\n        return {\n            provide: KeyValueDiffers,\n            useFactory: (parent) => {\n                if (!parent) {\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                    // to bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                }\n                return KeyValueDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n        };\n    }\n    /**\n     * @param {?} kv\n     * @return {?}\n     */\n    find(kv) {\n        /** @type {?} */\n        const factory = this.factories.find(f => f.supports(kv));\n        if (factory) {\n            return factory;\n        }\n        throw new Error(`Cannot find a differ supporting object '${kv}'`);\n    }\n}\n/** @nocollapse */\n/** @nocollapse */ KeyValueDiffers.ngInjectableDef = defineInjectable({\n    providedIn: 'root',\n    factory: () => new KeyValueDiffers([new DefaultKeyValueDifferFactory()])\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Structural diffing for `Object`s and `Map`s.\n * @type {?}\n */\nconst keyValDiff = [new DefaultKeyValueDifferFactory()];\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n * @type {?}\n */\nconst iterableDiff = [new DefaultIterableDifferFactory()];\n/** @type {?} */\nconst defaultIterableDiffers = new IterableDiffers(iterableDiff);\n/** @type {?} */\nconst defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _CORE_PLATFORM_PROVIDERS = [\n    // Set a default platform name for platforms that don't set it explicitly.\n    { provide: PLATFORM_ID, useValue: 'unknown' },\n    { provide: PlatformRef, deps: [Injector] },\n    { provide: TestabilityRegistry, deps: [] },\n    { provide: Console, deps: [] },\n];\n/**\n * This platform has to be included in any other platform\n *\n * \\@publicApi\n * @type {?}\n */\nconst platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst LOCALE_ID = new InjectionToken('LocaleId');\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst TRANSLATIONS = new InjectionToken('Translations');\n/**\n * Provide this token at bootstrap to set the format of your {\\@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/** @enum {number} */\nconst MissingTranslationStrategy = {\n    Error: 0,\n    Warning: 1,\n    Ignore: 2,\n};\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = 'Error';\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = 'Warning';\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = 'Ignore';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction _iterableDiffersFactory() {\n    return defaultIterableDiffers;\n}\n/**\n * @return {?}\n */\nfunction _keyValueDiffersFactory() {\n    return defaultKeyValueDiffers;\n}\n/**\n * @param {?=} locale\n * @return {?}\n */\nfunction _localeFactory(locale) {\n    return locale || 'en-US';\n}\n/**\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n * @type {?}\n */\nconst APPLICATION_MODULE_PROVIDERS = [\n    {\n        provide: ApplicationRef,\n        useClass: ApplicationRef,\n        deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n    },\n    {\n        provide: ApplicationInitStatus,\n        useClass: ApplicationInitStatus,\n        deps: [[new Optional(), APP_INITIALIZER]]\n    },\n    { provide: Compiler, useClass: Compiler, deps: [] },\n    APP_ID_RANDOM_PROVIDER,\n    { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },\n    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },\n    {\n        provide: LOCALE_ID,\n        useFactory: _localeFactory,\n        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n    },\n];\n/**\n * Configures the root injector for an app with\n * providers of `\\@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * \\@publicApi\n */\nclass ApplicationModule {\n    // Inject ApplicationRef to make it eager...\n    /**\n     * @param {?} appRef\n     */\n    constructor(appRef) { }\n}\nApplicationModule.ɵfac = function ApplicationModule_Factory(t) { return new (t || ApplicationModule)(ɵɵinject(ApplicationRef)); };\nApplicationModule.ɵmod = /*@__PURE__*/ ɵɵdefineNgModule({ type: ApplicationModule });\nApplicationModule.ɵinj = /*@__PURE__*/ ɵɵdefineInjector({ providers: APPLICATION_MODULE_PROVIDERS });\n/** @nocollapse */\nApplicationModule.ctorParameters = () => [\n    { type: ApplicationRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationModule, [{\n        type: NgModule,\n        args: [{ providers: APPLICATION_MODULE_PROVIDERS }]\n    }], function () { return [{ type: ApplicationRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst SWITCH_IVY_ENABLED__POST_R3__ = true;\n/** @type {?} */\nconst SWITCH_IVY_ENABLED__PRE_R3__ = false;\n/** @type {?} */\nconst ivyEnabled = SWITCH_IVY_ENABLED__PRE_R3__;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Called before each cycle of a view's check to detect whether this is in the\n// initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit\n// lifecycle methods. Returns true if this check cycle should call lifecycle\n// methods.\n/**\n * @param {?} view\n * @param {?} priorInitState\n * @param {?} newInitState\n * @return {?}\n */\nfunction shiftInitState(view, priorInitState, newInitState) {\n    // Only update the InitState if we are currently in the prior state.\n    // For example, only move into CallingInit if we are in BeforeInit. Only\n    // move into CallingContentInit if we are in CallingInit. Normally this will\n    // always be true because of how checkCycle is called in checkAndUpdateView.\n    // However, if checkAndUpdateView is called recursively or if an exception is\n    // thrown while checkAndUpdateView is running, checkAndUpdateView starts over\n    // from the beginning. This ensures the state is monotonically increasing,\n    // terminating in the AfterInit state, which ensures the Init methods are called\n    // at least once and only once.\n    /** @type {?} */\n    const state = view.state;\n    /** @type {?} */\n    const initState = state & 1792 /* InitState_Mask */;\n    if (initState === priorInitState) {\n        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\n        view.initIndex = -1;\n        return true;\n    }\n    return initState === newInitState;\n}\n// Returns true if the lifecycle init method should be called for the node with\n// the given init index.\n/**\n * @param {?} view\n * @param {?} initState\n * @param {?} index\n * @return {?}\n */\nfunction shouldCallLifecycleInitHook(view, initState, index) {\n    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n        view.initIndex = index + 1;\n        return true;\n    }\n    return false;\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asTextData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asElementData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asProviderData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asPureExpressionData(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction asQueryList(view, index) {\n    return (/** @type {?} */ (view.nodes[index]));\n}\n/**\n * @abstract\n */\nclass DebugContext {\n}\n// WARNING: interface has both a type and a value, skipping emit\n/**\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n * @type {?}\n */\nconst Services = {\n    setCurrentNode: (/** @type {?} */ (undefined)),\n    createRootView: (/** @type {?} */ (undefined)),\n    createEmbeddedView: (/** @type {?} */ (undefined)),\n    createComponentView: (/** @type {?} */ (undefined)),\n    createNgModuleRef: (/** @type {?} */ (undefined)),\n    overrideProvider: (/** @type {?} */ (undefined)),\n    overrideComponentView: (/** @type {?} */ (undefined)),\n    clearOverrides: (/** @type {?} */ (undefined)),\n    checkAndUpdateView: (/** @type {?} */ (undefined)),\n    checkNoChangesView: (/** @type {?} */ (undefined)),\n    destroyView: (/** @type {?} */ (undefined)),\n    resolveDep: (/** @type {?} */ (undefined)),\n    createDebugContext: (/** @type {?} */ (undefined)),\n    handleEvent: (/** @type {?} */ (undefined)),\n    updateDirectives: (/** @type {?} */ (undefined)),\n    updateRenderer: (/** @type {?} */ (undefined)),\n    dirtyParentQueries: (/** @type {?} */ (undefined)),\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} context\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} isFirstCheck\n * @return {?}\n */\nfunction expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n    /** @type {?} */\n    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;\n    if (isFirstCheck) {\n        msg +=\n            ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n                ` Has it been created in a change detection hook ?`;\n    }\n    return viewDebugError(msg, context);\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction viewWrappedDebugError(err, context) {\n    if (!(err instanceof Error)) {\n        // errors that are not Error instances don't have a stack,\n        // so it is ok to wrap them into a new Error object...\n        err = new Error(err.toString());\n    }\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} msg\n * @param {?} context\n * @return {?}\n */\nfunction viewDebugError(msg, context) {\n    /** @type {?} */\n    const err = new Error(msg);\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction _addDebugContext(err, context) {\n    ((/** @type {?} */ (err)))[ERROR_DEBUG_CONTEXT] = context;\n    ((/** @type {?} */ (err)))[ERROR_LOGGER] = context.logError.bind(context);\n}\n/**\n * @param {?} err\n * @return {?}\n */\nfunction isViewDebugError(err) {\n    return !!getDebugContext(err);\n}\n/**\n * @param {?} action\n * @return {?}\n */\nfunction viewDestroyedError(action) {\n    return new Error(`ViewDestroyedError: Attempt to use a destroyed view: ${action}`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NOOP = () => { };\n/** @type {?} */\nconst _tokenKeyCache = new Map();\n/**\n * @param {?} token\n * @return {?}\n */\nfunction tokenKey(token) {\n    /** @type {?} */\n    let key = _tokenKeyCache.get(token);\n    if (!key) {\n        key = stringify(token) + '_' + _tokenKeyCache.size;\n        _tokenKeyCache.set(token, key);\n    }\n    return key;\n}\n/**\n * @param {?} view\n * @param {?} nodeIdx\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction unwrapValue$1(view, nodeIdx, bindingIdx, value) {\n    if (WrappedValue.isWrapped(value)) {\n        value = WrappedValue.unwrap(value);\n        /** @type {?} */\n        const globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n        /** @type {?} */\n        const oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n    }\n    return value;\n}\n/** @type {?} */\nconst UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\n/** @type {?} */\nconst EMPTY_RENDERER_TYPE_ID = '$$empty';\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} values\n * @return {?}\n */\nfunction createRendererType2(values) {\n    return {\n        id: UNDEFINED_RENDERER_TYPE_ID,\n        styles: values.styles,\n        encapsulation: values.encapsulation,\n        data: values.data\n    };\n}\n/** @type {?} */\nlet _renderCompCount$1 = 0;\n/**\n * @param {?=} type\n * @return {?}\n */\nfunction resolveRendererType2(type) {\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n        // first time we see this RendererType2. Initialize it...\n        /** @type {?} */\n        const isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\n            type.styles.length || Object.keys(type.data).length);\n        if (isFilled) {\n            type.id = `c${_renderCompCount$1++}`;\n        }\n        else {\n            type.id = EMPTY_RENDERER_TYPE_ID;\n        }\n    }\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n        type = null;\n    }\n    return type || null;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkBinding(view, def, bindingIdx, value) {\n    /** @type {?} */\n    const oldValues = view.oldValues;\n    if ((view.state & 2 /* FirstCheck */) ||\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateBinding(view, def, bindingIdx, value) {\n    if (checkBinding(view, def, bindingIdx, value)) {\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkBindingNoChanges(view, def, bindingIdx, value) {\n    /** @type {?} */\n    const oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\n        /** @type {?} */\n        const bindingName = def.bindings[bindingIdx].name;\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), `${bindingName}: ${oldValue}`, `${bindingName}: ${value}`, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markParentViewsForCheck(view) {\n    /** @type {?} */\n    let currView = view;\n    while (currView) {\n        if (currView.def.flags & 2 /* OnPush */) {\n            currView.state |= 8 /* ChecksEnabled */;\n        }\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} endView\n * @return {?}\n */\nfunction markParentViewsForCheckProjectedViews(view, endView) {\n    /** @type {?} */\n    let currView = view;\n    while (currView && currView !== endView) {\n        currView.state |= 64 /* CheckProjectedViews */;\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction dispatchEvent(view, nodeIndex, eventName, event) {\n    try {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        const startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n            asElementData(view, nodeIndex).componentView :\n            view;\n        markParentViewsForCheck(startView);\n        return Services.handleEvent(view, nodeIndex, eventName, event);\n    }\n    catch (e) {\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n        view.root.errorHandler.handleError(e);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction declaredViewContainer(view) {\n    if (view.parent) {\n        /** @type {?} */\n        const parentView = view.parent;\n        return asElementData(parentView, (/** @type {?} */ (view.parentNodeDef)).nodeIndex);\n    }\n    return null;\n}\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n * @param {?} view\n * @return {?}\n */\nfunction viewParentEl(view) {\n    /** @type {?} */\n    const parentView = view.parent;\n    if (parentView) {\n        return (/** @type {?} */ (view.parentNodeDef)).parent;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction renderNode(view, def) {\n    switch (def.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return asElementData(view, def.nodeIndex).renderElement;\n        case 2 /* TypeText */:\n            return asTextData(view, def.nodeIndex).renderText;\n    }\n}\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\nfunction elementEventFullName(target, name) {\n    return target ? `${target}:${name}` : name;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction isComponentView(view) {\n    return !!view.parent && !!((/** @type {?} */ (view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction isEmbeddedView(view) {\n    return !!view.parent && !((/** @type {?} */ (view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} queryId\n * @return {?}\n */\nfunction filterQueryId(queryId) {\n    return 1 << (queryId % 32);\n}\n/**\n * @param {?} matchedQueriesDsl\n * @return {?}\n */\nfunction splitMatchedQueriesDsl(matchedQueriesDsl) {\n    /** @type {?} */\n    const matchedQueries = {};\n    /** @type {?} */\n    let matchedQueryIds = 0;\n    /** @type {?} */\n    const references = {};\n    if (matchedQueriesDsl) {\n        matchedQueriesDsl.forEach(([queryId, valueType]) => {\n            if (typeof queryId === 'number') {\n                matchedQueries[queryId] = valueType;\n                matchedQueryIds |= filterQueryId(queryId);\n            }\n            else {\n                references[queryId] = valueType;\n            }\n        });\n    }\n    return { matchedQueries, references, matchedQueryIds };\n}\n/**\n * @param {?} deps\n * @param {?=} sourceName\n * @return {?}\n */\nfunction splitDepsDsl(deps, sourceName) {\n    return deps.map(value => {\n        /** @type {?} */\n        let token;\n        /** @type {?} */\n        let flags;\n        if (Array.isArray(value)) {\n            [flags, token] = value;\n        }\n        else {\n            flags = 0 /* None */;\n            token = value;\n        }\n        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n        }\n        return { flags, token, tokenKey: tokenKey(token) };\n    });\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction getParentRenderElement(view, renderHost, def) {\n    /** @type {?} */\n    let renderParent = def.renderParent;\n    if (renderParent) {\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n            ((/** @type {?} */ (renderParent.element)).componentRendererType &&\n                (/** @type {?} */ ((/** @type {?} */ (renderParent.element)).componentRendererType)).encapsulation ===\n                    ViewEncapsulation.Native)) {\n            // only children of non components, or children of components with native encapsulation should\n            // be attached.\n            return asElementData(view, (/** @type {?} */ (def.renderParent)).nodeIndex).renderElement;\n        }\n    }\n    else {\n        return renderHost;\n    }\n}\n/** @type {?} */\nconst DEFINITION_CACHE = new WeakMap();\n/**\n * @template D\n * @param {?} factory\n * @return {?}\n */\nfunction resolveDefinition(factory) {\n    /** @type {?} */\n    let value = (/** @type {?} */ ((/** @type {?} */ (DEFINITION_CACHE.get(factory)))));\n    if (!value) {\n        value = factory(() => NOOP);\n        value.factory = factory;\n        DEFINITION_CACHE.set(factory, value);\n    }\n    return value;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction rootRenderNodes(view) {\n    /** @type {?} */\n    const renderNodes = [];\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n    return renderNodes;\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n    // We need to re-compute the parent node in case the nodes have been moved around manually\n    if (action === 3 /* RemoveChild */) {\n        parentNode = view.renderer.parentNode(renderNode(view, (/** @type {?} */ (view.def.lastRenderRootNode))));\n    }\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n    for (let i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n}\n/**\n * @param {?} view\n * @param {?} ngContentIndex\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    let compView = view;\n    while (compView && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    /** @type {?} */\n    const hostView = (/** @type {?} */ (compView)).parent;\n    /** @type {?} */\n    const hostElDef = viewParentEl((/** @type {?} */ (compView)));\n    /** @type {?} */\n    const startIndex = (/** @type {?} */ (hostElDef)).nodeIndex + 1;\n    /** @type {?} */\n    const endIndex = (/** @type {?} */ (hostElDef)).nodeIndex + (/** @type {?} */ (hostElDef)).childCount;\n    for (let i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        const nodeDef = (/** @type {?} */ (hostView)).def.nodes[i];\n        if (nodeDef.ngContentIndex === ngContentIndex) {\n            visitRenderNode((/** @type {?} */ (hostView)), nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n    if (!(/** @type {?} */ (hostView)).parent) {\n        // a root view\n        /** @type {?} */\n        const projectedNodes = view.root.projectableNodes[ngContentIndex];\n        if (projectedNodes) {\n            for (let i = 0; i < projectedNodes.length; i++) {\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\n        visitProjectedRenderNodes(view, (/** @type {?} */ (nodeDef.ngContent)).index, action, parentNode, nextSibling, target);\n    }\n    else {\n        /** @type {?} */\n        const rn = renderNode(view, nodeDef);\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n            // Note: we might need to do both actions.\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                /** @type {?} */\n                const compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n            }\n        }\n        else {\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n        }\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            /** @type {?} */\n            const embeddedViews = (/** @type {?} */ (asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;\n            for (let k = 0; k < embeddedViews.length; k++) {\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n            }\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && !(/** @type {?} */ (nodeDef.element)).name) {\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    const renderer = view.renderer;\n    switch (action) {\n        case 1 /* AppendChild */:\n            renderer.appendChild(parentNode, renderNode);\n            break;\n        case 2 /* InsertBefore */:\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\n            break;\n        case 3 /* RemoveChild */:\n            renderer.removeChild(parentNode, renderNode);\n            break;\n        case 0 /* Collect */:\n            (/** @type {?} */ (target)).push(renderNode);\n            break;\n    }\n}\n/** @type {?} */\nconst NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n/**\n * @param {?} name\n * @return {?}\n */\nfunction splitNamespace(name) {\n    if (name[0] === ':') {\n        /** @type {?} */\n        const match = (/** @type {?} */ (name.match(NS_PREFIX_RE)));\n        return [match[1], match[2]];\n    }\n    return ['', name];\n}\n/**\n * @param {?} bindings\n * @return {?}\n */\nfunction calcBindingFlags(bindings) {\n    /** @type {?} */\n    let flags = 0;\n    for (let i = 0; i < bindings.length; i++) {\n        flags |= bindings[i].flags;\n    }\n    return flags;\n}\n/**\n * @param {?} valueCount\n * @param {?} constAndInterp\n * @return {?}\n */\nfunction interpolate(valueCount, constAndInterp) {\n    /** @type {?} */\n    let result = '';\n    for (let i = 0; i < valueCount * 2; i = i + 2) {\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n    }\n    return result + constAndInterp[valueCount * 2];\n}\n/**\n * @param {?} valueCount\n * @param {?} c0\n * @param {?} a1\n * @param {?} c1\n * @param {?=} a2\n * @param {?=} c2\n * @param {?=} a3\n * @param {?=} c3\n * @param {?=} a4\n * @param {?=} c4\n * @param {?=} a5\n * @param {?=} c5\n * @param {?=} a6\n * @param {?=} c6\n * @param {?=} a7\n * @param {?=} c7\n * @param {?=} a8\n * @param {?=} c8\n * @param {?=} a9\n * @param {?=} c9\n * @return {?}\n */\nfunction inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n    switch (valueCount) {\n        case 1:\n            return c0 + _toStringWithNull(a1) + c1;\n        case 2:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n        case 3:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3;\n        case 4:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4;\n        case 5:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n        case 6:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n        case 7:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7;\n        case 8:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n        case 9:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n        default:\n            throw new Error(`Does not support more than 9 expressions`);\n    }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction _toStringWithNull(v) {\n    return v != null ? v.toString() : '';\n}\n/** @type {?} */\nconst EMPTY_ARRAY$4 = [];\n/** @type {?} */\nconst EMPTY_MAP = {};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?=} handleEvent\n * @param {?=} templateFactory\n * @return {?}\n */\nfunction anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n    flags |= 1 /* TypeElement */;\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\n    /** @type {?} */\n    const template = templateFactory ? resolveDefinition(templateFactory) : null;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        flags,\n        checkIndex: -1,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: {\n            ns: null,\n            name: null,\n            attrs: null, template,\n            componentProvider: null,\n            componentView: null,\n            componentRendererType: null,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?} namespaceAndName\n * @param {?=} fixedAttrs\n * @param {?=} bindings\n * @param {?=} outputs\n * @param {?=} handleEvent\n * @param {?=} componentView\n * @param {?=} componentRendererType\n * @return {?}\n */\nfunction elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs = [], bindings, outputs, handleEvent, componentView, componentRendererType) {\n    if (!handleEvent) {\n        handleEvent = NOOP;\n    }\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\n    /** @type {?} */\n    let ns = (/** @type {?} */ (null));\n    /** @type {?} */\n    let name = (/** @type {?} */ (null));\n    if (namespaceAndName) {\n        [ns, name] = splitNamespace(namespaceAndName);\n    }\n    bindings = bindings || [];\n    /** @type {?} */\n    const bindingDefs = new Array(bindings.length);\n    for (let i = 0; i < bindings.length; i++) {\n        const [bindingFlags, namespaceAndName, suffixOrSecurityContext] = bindings[i];\n        const [ns, name] = splitNamespace(namespaceAndName);\n        /** @type {?} */\n        let securityContext = (/** @type {?} */ (undefined));\n        /** @type {?} */\n        let suffix = (/** @type {?} */ (undefined));\n        switch (bindingFlags & 15 /* Types */) {\n            case 4 /* TypeElementStyle */:\n                suffix = (/** @type {?} */ (suffixOrSecurityContext));\n                break;\n            case 1 /* TypeElementAttribute */:\n            case 8 /* TypeProperty */:\n                securityContext = (/** @type {?} */ (suffixOrSecurityContext));\n                break;\n        }\n        bindingDefs[i] =\n            { flags: bindingFlags, ns, name, nonMinifiedName: name, securityContext, suffix };\n    }\n    outputs = outputs || [];\n    /** @type {?} */\n    const outputDefs = new Array(outputs.length);\n    for (let i = 0; i < outputs.length; i++) {\n        const [target, eventName] = outputs[i];\n        outputDefs[i] = {\n            type: 0 /* ElementOutput */,\n            target: (/** @type {?} */ (target)), eventName,\n            propName: null\n        };\n    }\n    fixedAttrs = fixedAttrs || [];\n    /** @type {?} */\n    const attrs = (/** @type {?} */ (fixedAttrs.map(([namespaceAndName, value]) => {\n        const [ns, name] = splitNamespace(namespaceAndName);\n        return [ns, name, value];\n    })));\n    componentRendererType = resolveRendererType2(componentRendererType);\n    if (componentView) {\n        flags |= 33554432 /* ComponentView */;\n    }\n    flags |= 1 /* TypeElement */;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,\n        bindings: bindingDefs,\n        bindingFlags: calcBindingFlags(bindingDefs),\n        outputs: outputDefs,\n        element: {\n            ns,\n            name,\n            attrs,\n            template: null,\n            // will bet set by the view definition\n            componentProvider: null,\n            componentView: componentView || null,\n            componentRendererType: componentRendererType,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP,\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction createElement(view, renderHost, def) {\n    /** @type {?} */\n    const elDef = (/** @type {?} */ (def.element));\n    /** @type {?} */\n    const rootSelectorOrNode = view.root.selectorOrNode;\n    /** @type {?} */\n    const renderer = view.renderer;\n    /** @type {?} */\n    let el;\n    if (view.parent || !rootSelectorOrNode) {\n        if (elDef.name) {\n            el = renderer.createElement(elDef.name, elDef.ns);\n        }\n        else {\n            el = renderer.createComment('');\n        }\n        /** @type {?} */\n        const parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, el);\n        }\n    }\n    else {\n        // when using native Shadow DOM, do not clear the root element contents to allow slot projection\n        /** @type {?} */\n        const preserveContent = (!!elDef.componentRendererType &&\n            elDef.componentRendererType.encapsulation === ViewEncapsulation.ShadowDom);\n        el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);\n    }\n    if (elDef.attrs) {\n        for (let i = 0; i < elDef.attrs.length; i++) {\n            const [ns, name, value] = elDef.attrs[i];\n            renderer.setAttribute(el, name, value, ns);\n        }\n    }\n    return el;\n}\n/**\n * @param {?} view\n * @param {?} compView\n * @param {?} def\n * @param {?} el\n * @return {?}\n */\nfunction listenToElementOutputs(view, compView, def, el) {\n    for (let i = 0; i < def.outputs.length; i++) {\n        /** @type {?} */\n        const output = def.outputs[i];\n        /** @type {?} */\n        const handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n        /** @type {?} */\n        let listenTarget = output.target;\n        /** @type {?} */\n        let listenerView = view;\n        if (output.target === 'component') {\n            listenTarget = null;\n            listenerView = compView;\n        }\n        /** @type {?} */\n        const disposable = (/** @type {?} */ (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)));\n        (/** @type {?} */ (view.disposables))[def.outputIndex + i] = disposable;\n    }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction renderEventHandlerClosure(view, index, eventName) {\n    return (event) => dispatchEvent(view, index, eventName, event);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const bindLen = def.bindings.length;\n    /** @type {?} */\n    let changed = false;\n    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n        changed = true;\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateElementDynamic(view, def, values) {\n    /** @type {?} */\n    let changed = false;\n    for (let i = 0; i < values.length; i++) {\n        if (checkAndUpdateElementValue(view, def, i, values[i]))\n            changed = true;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\n    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n        return false;\n    }\n    /** @type {?} */\n    const binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    const elData = asElementData(view, def.nodeIndex);\n    /** @type {?} */\n    const renderNode$$1 = elData.renderElement;\n    /** @type {?} */\n    const name = (/** @type {?} */ (binding.name));\n    switch (binding.flags & 15 /* Types */) {\n        case 1 /* TypeElementAttribute */:\n            setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);\n            break;\n        case 2 /* TypeElementClass */:\n            setElementClass(view, renderNode$$1, name, value);\n            break;\n        case 4 /* TypeElementStyle */:\n            setElementStyle(view, binding, renderNode$$1, name, value);\n            break;\n        case 8 /* TypeProperty */:\n            /** @type {?} */\n            const bindView = (def.flags & 33554432 /* ComponentView */ &&\n                binding.flags & 32 /* SyntheticHostProperty */) ?\n                elData.componentView :\n                view;\n            setElementProperty(bindView, binding, renderNode$$1, name, value);\n            break;\n    }\n    return true;\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementAttribute(view, binding, renderNode$$1, ns, name, value) {\n    /** @type {?} */\n    const securityContext = binding.securityContext;\n    /** @type {?} */\n    let renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    renderValue = renderValue != null ? renderValue.toString() : null;\n    /** @type {?} */\n    const renderer = view.renderer;\n    if (value != null) {\n        renderer.setAttribute(renderNode$$1, name, renderValue, ns);\n    }\n    else {\n        renderer.removeAttribute(renderNode$$1, name, ns);\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementClass(view, renderNode$$1, name, value) {\n    /** @type {?} */\n    const renderer = view.renderer;\n    if (value) {\n        renderer.addClass(renderNode$$1, name);\n    }\n    else {\n        renderer.removeClass(renderNode$$1, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementStyle(view, binding, renderNode$$1, name, value) {\n    /** @type {?} */\n    let renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, (/** @type {?} */ (value)));\n    if (renderValue != null) {\n        renderValue = renderValue.toString();\n        /** @type {?} */\n        const unit = binding.suffix;\n        if (unit != null) {\n            renderValue = renderValue + unit;\n        }\n    }\n    else {\n        renderValue = null;\n    }\n    /** @type {?} */\n    const renderer = view.renderer;\n    if (renderValue != null) {\n        renderer.setStyle(renderNode$$1, name, renderValue);\n    }\n    else {\n        renderer.removeStyle(renderNode$$1, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementProperty(view, binding, renderNode$$1, name, value) {\n    /** @type {?} */\n    const securityContext = binding.securityContext;\n    /** @type {?} */\n    let renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    view.renderer.setProperty(renderNode$$1, name, renderValue);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst UNDEFINED_VALUE = new Object();\n/** @type {?} */\nconst InjectorRefTokenKey = tokenKey(Injector);\n/** @type {?} */\nconst INJECTORRefTokenKey = tokenKey(INJECTOR$1);\n/** @type {?} */\nconst NgModuleRefTokenKey = tokenKey(NgModuleRef);\n/**\n * @param {?} flags\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nfunction moduleProvideDef(flags, token, value, deps) {\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    const depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the module definition\n        index: -1,\n        deps: depDefs, flags, token, value\n    };\n}\n/**\n * @param {?} providers\n * @return {?}\n */\nfunction moduleDef(providers) {\n    /** @type {?} */\n    const providersByKey = {};\n    /** @type {?} */\n    const modules = [];\n    /** @type {?} */\n    let isRoot = false;\n    for (let i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        const provider = providers[i];\n        if (provider.token === APP_ROOT && provider.value === true) {\n            isRoot = true;\n        }\n        if (provider.flags & 1073741824 /* TypeNgModule */) {\n            modules.push(provider.token);\n        }\n        provider.index = i;\n        providersByKey[tokenKey(provider.token)] = provider;\n    }\n    return {\n        // Will be filled later...\n        factory: null,\n        providersByKey,\n        providers,\n        modules,\n        isRoot,\n    };\n}\n/**\n * @param {?} data\n * @return {?}\n */\nfunction initNgModule(data) {\n    /** @type {?} */\n    const def = data._def;\n    /** @type {?} */\n    const providers = data._providers = new Array(def.providers.length);\n    for (let i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        const provDef = def.providers[i];\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\n            // Make sure the provider has not been already initialized outside this loop.\n            if (providers[i] === undefined) {\n                providers[i] = _createProviderInstance(data, provDef);\n            }\n        }\n    }\n}\n/**\n * @param {?} data\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nfunction resolveNgModuleDep(data, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n    /** @type {?} */\n    const former = setCurrentInjector(data);\n    try {\n        if (depDef.flags & 8 /* Value */) {\n            return depDef.token;\n        }\n        if (depDef.flags & 2 /* Optional */) {\n            notFoundValue = null;\n        }\n        if (depDef.flags & 1 /* SkipSelf */) {\n            return data._parent.get(depDef.token, notFoundValue);\n        }\n        /** @type {?} */\n        const tokenKey$$1 = depDef.tokenKey;\n        switch (tokenKey$$1) {\n            case InjectorRefTokenKey:\n            case INJECTORRefTokenKey:\n            case NgModuleRefTokenKey:\n                return data;\n        }\n        /** @type {?} */\n        const providerDef = data._def.providersByKey[tokenKey$$1];\n        /** @type {?} */\n        let injectableDef;\n        if (providerDef) {\n            /** @type {?} */\n            let providerInstance = data._providers[providerDef.index];\n            if (providerInstance === undefined) {\n                providerInstance = data._providers[providerDef.index] =\n                    _createProviderInstance(data, providerDef);\n            }\n            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n        }\n        else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {\n            /** @type {?} */\n            const index = data._providers.length;\n            data._def.providersByKey[depDef.tokenKey] = {\n                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n                value: injectableDef.factory,\n                deps: [], index,\n                token: depDef.token,\n            };\n            data._providers[index] = UNDEFINED_VALUE;\n            return (data._providers[index] =\n                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n        }\n        else if (depDef.flags & 4 /* Self */) {\n            return notFoundValue;\n        }\n        return data._parent.get(depDef.token, notFoundValue);\n    }\n    finally {\n        setCurrentInjector(former);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} scope\n * @return {?}\n */\nfunction moduleTransitivelyPresent(ngModule, scope) {\n    return ngModule._def.modules.indexOf(scope) > -1;\n}\n/**\n * @param {?} ngModule\n * @param {?} def\n * @return {?}\n */\nfunction targetsModule(ngModule, def) {\n    return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\n        def.providedIn === 'root' && ngModule._def.isRoot);\n}\n/**\n * @param {?} ngModule\n * @param {?} providerDef\n * @return {?}\n */\nfunction _createProviderInstance(ngModule, providerDef) {\n    /** @type {?} */\n    let injectable;\n    switch (providerDef.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 1024 /* TypeFactoryProvider */:\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 2048 /* TypeUseExistingProvider */:\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n            break;\n        case 256 /* TypeValueProvider */:\n            injectable = providerDef.value;\n            break;\n    }\n    // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\n    // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\n    // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\n    // set (ngOnDestroy was detected statically).\n    if (injectable !== UNDEFINED_VALUE && injectable != null && typeof injectable === 'object' &&\n        !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\n        providerDef.flags |= 131072 /* OnDestroy */;\n    }\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\n}\n/**\n * @param {?} ngModule\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction _createClass(ngModule, ctor, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = new Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return new ctor(...depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction _callFactory(ngModule, factory, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return factory(...depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} lifecycles\n * @return {?}\n */\nfunction callNgModuleLifecycle(ngModule, lifecycles) {\n    /** @type {?} */\n    const def = ngModule._def;\n    /** @type {?} */\n    const destroyed = new Set();\n    for (let i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        const provDef = def.providers[i];\n        if (provDef.flags & 131072 /* OnDestroy */) {\n            /** @type {?} */\n            const instance = ngModule._providers[i];\n            if (instance && instance !== UNDEFINED_VALUE) {\n                /** @type {?} */\n                const onDestroy = instance.ngOnDestroy;\n                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\n                    onDestroy.apply(instance);\n                    destroyed.add(instance);\n                }\n            }\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} parentView\n * @param {?} elementData\n * @param {?} viewIndex\n * @param {?} view\n * @return {?}\n */\nfunction attachEmbeddedView(parentView, elementData, viewIndex, view) {\n    /** @type {?} */\n    let embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n    if (viewIndex === null || viewIndex === undefined) {\n        viewIndex = embeddedViews.length;\n    }\n    view.viewContainerParent = parentView;\n    addToArray(embeddedViews, (/** @type {?} */ (viewIndex)), view);\n    attachProjectedView(elementData, view);\n    Services.dirtyParentQueries(view);\n    /** @type {?} */\n    const prevView = (/** @type {?} */ (viewIndex)) > 0 ? embeddedViews[(/** @type {?} */ (viewIndex)) - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n}\n/**\n * @param {?} vcElementData\n * @param {?} view\n * @return {?}\n */\nfunction attachProjectedView(vcElementData, view) {\n    /** @type {?} */\n    const dvcElementData = declaredViewContainer(view);\n    if (!dvcElementData || dvcElementData === vcElementData ||\n        view.state & 16 /* IsProjectedView */) {\n        return;\n    }\n    // Note: For performance reasons, we\n    // - add a view to template._projectedViews only 1x throughout its lifetime,\n    //   and remove it not until the view is destroyed.\n    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n    //    nested projected views as well, even across component boundaries).\n    // - don't track the insertion order of views in the projected views array\n    //   (hard, as when the views of the same template are inserted different view containers)\n    view.state |= 16 /* IsProjectedView */;\n    /** @type {?} */\n    let projectedViews = dvcElementData.template._projectedViews;\n    if (!projectedViews) {\n        projectedViews = dvcElementData.template._projectedViews = [];\n    }\n    projectedViews.push(view);\n    // Note: we are changing the NodeDef here as we cannot calculate\n    // the fact whether a template is used for projection during compilation.\n    markNodeAsProjectedTemplate((/** @type {?} */ (view.parent)).def, (/** @type {?} */ (view.parentNodeDef)));\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeDef\n * @return {?}\n */\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n        return;\n    }\n    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n    nodeDef.flags |= 4 /* ProjectedTemplate */;\n    /** @type {?} */\n    let parentNodeDef = nodeDef.parent;\n    while (parentNodeDef) {\n        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n        parentNodeDef = parentNodeDef.parent;\n    }\n}\n/**\n * @param {?} elementData\n * @param {?=} viewIndex\n * @return {?}\n */\nfunction detachEmbeddedView(elementData, viewIndex) {\n    /** @type {?} */\n    const embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n    if (viewIndex == null || viewIndex >= embeddedViews.length) {\n        viewIndex = embeddedViews.length - 1;\n    }\n    if (viewIndex < 0) {\n        return null;\n    }\n    /** @type {?} */\n    const view = embeddedViews[viewIndex];\n    view.viewContainerParent = null;\n    removeFromArray(embeddedViews, viewIndex);\n    // See attachProjectedView for why we don't update projectedViews here.\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    return view;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction detachProjectedView(view) {\n    if (!(view.state & 16 /* IsProjectedView */)) {\n        return;\n    }\n    /** @type {?} */\n    const dvcElementData = declaredViewContainer(view);\n    if (dvcElementData) {\n        /** @type {?} */\n        const projectedViews = dvcElementData.template._projectedViews;\n        if (projectedViews) {\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\n            Services.dirtyParentQueries(view);\n        }\n    }\n}\n/**\n * @param {?} elementData\n * @param {?} oldViewIndex\n * @param {?} newViewIndex\n * @return {?}\n */\nfunction moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n    /** @type {?} */\n    const embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n    /** @type {?} */\n    const view = embeddedViews[oldViewIndex];\n    removeFromArray(embeddedViews, oldViewIndex);\n    if (newViewIndex == null) {\n        newViewIndex = embeddedViews.length;\n    }\n    addToArray(embeddedViews, newViewIndex, view);\n    // Note: Don't need to change projectedViews as the order in there\n    // as always invalid...\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    /** @type {?} */\n    const prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n    return view;\n}\n/**\n * @param {?} elementData\n * @param {?} prevView\n * @param {?} view\n * @return {?}\n */\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\n    /** @type {?} */\n    const prevRenderNode = prevView ? renderNode(prevView, (/** @type {?} */ (prevView.def.lastRenderRootNode))) :\n        elementData.renderElement;\n    /** @type {?} */\n    const parentNode = view.renderer.parentNode(prevRenderNode);\n    /** @type {?} */\n    const nextSibling = view.renderer.nextSibling(prevRenderNode);\n    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction renderDetachView(view) {\n    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction addToArray(arr, index, value) {\n    // perf: array.push is faster than array.splice!\n    if (index >= arr.length) {\n        arr.push(value);\n    }\n    else {\n        arr.splice(index, 0, value);\n    }\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction removeFromArray(arr, index) {\n    // perf: array.pop is faster than array.splice!\n    if (index >= arr.length - 1) {\n        arr.pop();\n    }\n    else {\n        arr.splice(index, 1);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EMPTY_CONTEXT = new Object();\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} selector\n * @param {?} componentType\n * @param {?} viewDefFactory\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} ngContentSelectors\n * @return {?}\n */\nfunction createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n}\n/**\n * @param {?} componentFactory\n * @return {?}\n */\nfunction getComponentViewDefinitionFactory(componentFactory) {\n    return ((/** @type {?} */ (componentFactory))).viewDefFactory;\n}\nclass ComponentFactory_ extends ComponentFactory {\n    /**\n     * @param {?} selector\n     * @param {?} componentType\n     * @param {?} viewDefFactory\n     * @param {?} _inputs\n     * @param {?} _outputs\n     * @param {?} ngContentSelectors\n     */\n    constructor(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        super();\n        this.selector = selector;\n        this.componentType = componentType;\n        this._inputs = _inputs;\n        this._outputs = _outputs;\n        this.ngContentSelectors = ngContentSelectors;\n        this.viewDefFactory = viewDefFactory;\n    }\n    /**\n     * @return {?}\n     */\n    get inputs() {\n        /** @type {?} */\n        const inputsArr = [];\n        /** @type {?} */\n        const inputs = (/** @type {?} */ (this._inputs));\n        for (let propName in inputs) {\n            /** @type {?} */\n            const templateName = inputs[propName];\n            inputsArr.push({ propName, templateName });\n        }\n        return inputsArr;\n    }\n    /**\n     * @return {?}\n     */\n    get outputs() {\n        /** @type {?} */\n        const outputsArr = [];\n        for (let propName in this._outputs) {\n            /** @type {?} */\n            const templateName = this._outputs[propName];\n            outputsArr.push({ propName, templateName });\n        }\n        return outputsArr;\n    }\n    /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        if (!ngModule) {\n            throw new Error('ngModule should be provided');\n        }\n        /** @type {?} */\n        const viewDef = resolveDefinition(this.viewDefFactory);\n        /** @type {?} */\n        const componentNodeIndex = (/** @type {?} */ ((/** @type {?} */ (viewDef.nodes[0].element)).componentProvider)).nodeIndex;\n        /** @type {?} */\n        const view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n        /** @type {?} */\n        const component = asProviderData(view, componentNodeIndex).instance;\n        if (rootSelectorOrNode) {\n            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n        }\n        return new ComponentRef_(view, new ViewRef_(view), component);\n    }\n}\nclass ComponentRef_ extends ComponentRef {\n    /**\n     * @param {?} _view\n     * @param {?} _viewRef\n     * @param {?} _component\n     */\n    constructor(_view, _viewRef, _component) {\n        super();\n        this._view = _view;\n        this._viewRef = _viewRef;\n        this._component = _component;\n        this._elDef = this._view.def.nodes[0];\n        this.hostView = _viewRef;\n        this.changeDetectorRef = _viewRef;\n        this.instance = _component;\n    }\n    /**\n     * @return {?}\n     */\n    get location() {\n        return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return new Injector_(this._view, this._elDef); }\n    /**\n     * @return {?}\n     */\n    get componentType() { return (/** @type {?} */ (this._component.constructor)); }\n    /**\n     * @return {?}\n     */\n    destroy() { this._viewRef.destroy(); }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { this._viewRef.onDestroy(callback); }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} elData\n * @return {?}\n */\nfunction createViewContainerData(view, elDef, elData) {\n    return new ViewContainerRef_(view, elDef, elData);\n}\nclass ViewContainerRef_ {\n    /**\n     * @param {?} _view\n     * @param {?} _elDef\n     * @param {?} _data\n     */\n    constructor(_view, _elDef, _data) {\n        this._view = _view;\n        this._elDef = _elDef;\n        this._data = _data;\n        /**\n         * \\@internal\n         */\n        this._embeddedViews = [];\n    }\n    /**\n     * @return {?}\n     */\n    get element() { return new ElementRef(this._data.renderElement); }\n    /**\n     * @return {?}\n     */\n    get injector() { return new Injector_(this._view, this._elDef); }\n    /**\n     * @deprecated No replacement\n     * @return {?}\n     */\n    get parentInjector() {\n        /** @type {?} */\n        let view = this._view;\n        /** @type {?} */\n        let elDef = this._elDef.parent;\n        while (!elDef && view) {\n            elDef = viewParentEl(view);\n            view = (/** @type {?} */ (view.parent));\n        }\n        return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n    }\n    /**\n     * @return {?}\n     */\n    clear() {\n        /** @type {?} */\n        const len = this._embeddedViews.length;\n        for (let i = len - 1; i >= 0; i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (detachEmbeddedView(this._data, i)));\n            Services.destroyView(view);\n        }\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    get(index) {\n        /** @type {?} */\n        const view = this._embeddedViews[index];\n        if (view) {\n            /** @type {?} */\n            const ref = new ViewRef_(view);\n            ref.attachToViewContainerRef(this);\n            return ref;\n        }\n        return null;\n    }\n    /**\n     * @return {?}\n     */\n    get length() { return this._embeddedViews.length; }\n    /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    createEmbeddedView(templateRef, context, index) {\n        /** @type {?} */\n        const viewRef = templateRef.createEmbeddedView(context || (/** @type {?} */ ({})));\n        this.insert(viewRef, index);\n        return viewRef;\n    }\n    /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {\n        /** @type {?} */\n        const contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n            ngModuleRef = contextInjector.get(NgModuleRef);\n        }\n        /** @type {?} */\n        const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n    }\n    /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    insert(viewRef, index) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        const viewRef_ = (/** @type {?} */ (viewRef));\n        /** @type {?} */\n        const viewData = viewRef_._view;\n        attachEmbeddedView(this._view, this._data, index, viewData);\n        viewRef_.attachToViewContainerRef(this);\n        return viewRef;\n    }\n    /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    move(viewRef, currentIndex) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        const previousIndex = this._embeddedViews.indexOf(viewRef._view);\n        moveEmbeddedView(this._data, previousIndex, currentIndex);\n        return viewRef;\n    }\n    /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    indexOf(viewRef) {\n        return this._embeddedViews.indexOf(((/** @type {?} */ (viewRef)))._view);\n    }\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    remove(index) {\n        /** @type {?} */\n        const viewData = detachEmbeddedView(this._data, index);\n        if (viewData) {\n            Services.destroyView(viewData);\n        }\n    }\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    detach(index) {\n        /** @type {?} */\n        const view = detachEmbeddedView(this._data, index);\n        return view ? new ViewRef_(view) : null;\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createChangeDetectorRef(view) {\n    return new ViewRef_(view);\n}\nclass ViewRef_ {\n    /**\n     * @param {?} _view\n     */\n    constructor(_view) {\n        this._view = _view;\n        this._viewContainerRef = null;\n        this._appRef = null;\n    }\n    /**\n     * @return {?}\n     */\n    get rootNodes() { return rootRenderNodes(this._view); }\n    /**\n     * @return {?}\n     */\n    get context() { return this._view.context; }\n    /**\n     * @return {?}\n     */\n    get destroyed() { return (this._view.state & 128 /* Destroyed */) !== 0; }\n    /**\n     * @return {?}\n     */\n    markForCheck() { markParentViewsForCheck(this._view); }\n    /**\n     * @return {?}\n     */\n    detach() { this._view.state &= ~4 /* Attached */; }\n    /**\n     * @return {?}\n     */\n    detectChanges() {\n        /** @type {?} */\n        const fs = this._view.root.rendererFactory;\n        if (fs.begin) {\n            fs.begin();\n        }\n        try {\n            Services.checkAndUpdateView(this._view);\n        }\n        finally {\n            if (fs.end) {\n                fs.end();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    checkNoChanges() { Services.checkNoChangesView(this._view); }\n    /**\n     * @return {?}\n     */\n    reattach() { this._view.state |= 4 /* Attached */; }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) {\n        if (!this._view.disposables) {\n            this._view.disposables = [];\n        }\n        this._view.disposables.push((/** @type {?} */ (callback)));\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n        }\n        Services.destroyView(this._view);\n    }\n    /**\n     * @return {?}\n     */\n    detachFromAppRef() {\n        this._appRef = null;\n        renderDetachView(this._view);\n        Services.dirtyParentQueries(this._view);\n    }\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    attachToAppRef(appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    }\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    attachToViewContainerRef(vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createTemplateData(view, def) {\n    return new TemplateRef_(view, def);\n}\nclass TemplateRef_ extends TemplateRef {\n    /**\n     * @param {?} _parentView\n     * @param {?} _def\n     */\n    constructor(_parentView, _def) {\n        super();\n        this._parentView = _parentView;\n        this._def = _def;\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    createEmbeddedView(context) {\n        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, (/** @type {?} */ ((/** @type {?} */ (this._def.element)).template)), context));\n    }\n    /**\n     * @return {?}\n     */\n    get elementRef() {\n        return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @return {?}\n */\nfunction createInjector$1(view, elDef) {\n    return new Injector_(view, elDef);\n}\nclass Injector_ {\n    /**\n     * @param {?} view\n     * @param {?} elDef\n     */\n    constructor(view, elDef) {\n        this.view = view;\n        this.elDef = elDef;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n        /** @type {?} */\n        const allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token, tokenKey: tokenKey(token) }, notFoundValue);\n    }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nfunction nodeValue(view, index) {\n    /** @type {?} */\n    const def = view.def.nodes[index];\n    if (def.flags & 1 /* TypeElement */) {\n        /** @type {?} */\n        const elData = asElementData(view, def.nodeIndex);\n        return (/** @type {?} */ (def.element)).template ? elData.template : elData.renderElement;\n    }\n    else if (def.flags & 2 /* TypeText */) {\n        return asTextData(view, def.nodeIndex).renderText;\n    }\n    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n        return asProviderData(view, def.nodeIndex).instance;\n    }\n    throw new Error(`Illegal state: read nodeValue for node index ${index}`);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createRendererV1(view) {\n    return new RendererAdapter(view.renderer);\n}\nclass RendererAdapter {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    selectRootElement(selectorOrNode) {\n        return this.delegate.selectRootElement(selectorOrNode);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    createElement(parent, namespaceAndName) {\n        const [ns, name] = splitNamespace(namespaceAndName);\n        /** @type {?} */\n        const el = this.delegate.createElement(name, ns);\n        if (parent) {\n            this.delegate.appendChild(parent, el);\n        }\n        return el;\n    }\n    /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    createViewRoot(hostElement) { return hostElement; }\n    /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    createTemplateAnchor(parentElement) {\n        /** @type {?} */\n        const comment = this.delegate.createComment('');\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, comment);\n        }\n        return comment;\n    }\n    /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    createText(parentElement, value) {\n        /** @type {?} */\n        const node = this.delegate.createText(value);\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, node);\n        }\n        return node;\n    }\n    /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    projectNodes(parentElement, nodes) {\n        for (let i = 0; i < nodes.length; i++) {\n            this.delegate.appendChild(parentElement, nodes[i]);\n        }\n    }\n    /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    attachViewAfter(node, viewRootNodes) {\n        /** @type {?} */\n        const parentElement = this.delegate.parentNode(node);\n        /** @type {?} */\n        const nextSibling = this.delegate.nextSibling(node);\n        for (let i = 0; i < viewRootNodes.length; i++) {\n            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n        }\n    }\n    /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    detachView(viewRootNodes) {\n        for (let i = 0; i < viewRootNodes.length; i++) {\n            /** @type {?} */\n            const node = viewRootNodes[i];\n            /** @type {?} */\n            const parentElement = this.delegate.parentNode(node);\n            this.delegate.removeChild(parentElement, node);\n        }\n    }\n    /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    destroyView(hostElement, viewAllNodes) {\n        for (let i = 0; i < viewAllNodes.length; i++) {\n            (/** @type {?} */ (this.delegate.destroyNode))(viewAllNodes[i]);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(renderElement, name, callback) {\n        return this.delegate.listen(renderElement, name, (/** @type {?} */ (callback)));\n    }\n    /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    listenGlobal(target, name, callback) {\n        return this.delegate.listen(target, name, (/** @type {?} */ (callback)));\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    setElementProperty(renderElement, propertyName, propertyValue) {\n        this.delegate.setProperty(renderElement, propertyName, propertyValue);\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?=} attributeValue\n     * @return {?}\n     */\n    setElementAttribute(renderElement, namespaceAndName, attributeValue) {\n        const [ns, name] = splitNamespace(namespaceAndName);\n        if (attributeValue != null) {\n            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n        }\n        else {\n            this.delegate.removeAttribute(renderElement, name, ns);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    setBindingDebugInfo(renderElement, propertyName, propertyValue) { }\n    /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    setElementClass(renderElement, className, isAdd) {\n        if (isAdd) {\n            this.delegate.addClass(renderElement, className);\n        }\n        else {\n            this.delegate.removeClass(renderElement, className);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    setElementStyle(renderElement, styleName, styleValue) {\n        if (styleValue != null) {\n            this.delegate.setStyle(renderElement, styleName, styleValue);\n        }\n        else {\n            this.delegate.removeStyle(renderElement, styleName);\n        }\n    }\n    /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    invokeElementMethod(renderElement, methodName, args) {\n        ((/** @type {?} */ (renderElement)))[methodName].apply(renderElement, args);\n    }\n    /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    setText(renderNode$$1, text) { this.delegate.setValue(renderNode$$1, text); }\n    /**\n     * @return {?}\n     */\n    animate() { throw new Error('Renderer.animate is no longer supported!'); }\n}\n/**\n * @param {?} moduleType\n * @param {?} parent\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n}\nclass NgModuleRef_ {\n    /**\n     * @param {?} _moduleType\n     * @param {?} _parent\n     * @param {?} _bootstrapComponents\n     * @param {?} _def\n     */\n    constructor(_moduleType, _parent, _bootstrapComponents, _def) {\n        this._moduleType = _moduleType;\n        this._parent = _parent;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._def = _def;\n        this._destroyListeners = [];\n        this._destroyed = false;\n        this.injector = this;\n        initNgModule(this);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, injectFlags = InjectFlags.Default) {\n        /** @type {?} */\n        let flags = 0 /* None */;\n        if (injectFlags & InjectFlags.SkipSelf) {\n            flags |= 1 /* SkipSelf */;\n        }\n        else if (injectFlags & InjectFlags.Self) {\n            flags |= 4 /* Self */;\n        }\n        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\n    }\n    /**\n     * @return {?}\n     */\n    get instance() { return this.get(this._moduleType); }\n    /**\n     * @return {?}\n     */\n    get componentFactoryResolver() { return this.get(ComponentFactoryResolver); }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        if (this._destroyed) {\n            throw new Error(`The ng module ${stringify(this.instance.constructor)} has already been destroyed.`);\n        }\n        this._destroyed = true;\n        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n        this._destroyListeners.forEach((listener) => listener());\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    onDestroy(callback) { this._destroyListeners.push(callback); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RendererV1TokenKey = tokenKey(Renderer);\n/** @type {?} */\nconst Renderer2TokenKey = tokenKey(Renderer2);\n/** @type {?} */\nconst ElementRefTokenKey = tokenKey(ElementRef);\n/** @type {?} */\nconst ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n/** @type {?} */\nconst TemplateRefTokenKey = tokenKey(TemplateRef);\n/** @type {?} */\nconst ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\n/** @type {?} */\nconst InjectorRefTokenKey$1 = tokenKey(Injector);\n/** @type {?} */\nconst INJECTORRefTokenKey$1 = tokenKey(INJECTOR$1);\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} childCount\n * @param {?} ctor\n * @param {?} deps\n * @param {?=} props\n * @param {?=} outputs\n * @return {?}\n */\nfunction directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n    /** @type {?} */\n    const bindings = [];\n    if (props) {\n        for (let prop in props) {\n            const [bindingIndex, nonMinifiedName] = props[prop];\n            bindings[bindingIndex] = {\n                flags: 8 /* TypeProperty */,\n                name: prop, nonMinifiedName,\n                ns: null,\n                securityContext: null,\n                suffix: null\n            };\n        }\n    }\n    /** @type {?} */\n    const outputDefs = [];\n    if (outputs) {\n        for (let propName in outputs) {\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName, target: null, eventName: outputs[propName] });\n        }\n    }\n    flags |= 16384 /* TypeDirective */;\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\n/**\n * @param {?} flags\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction pipeDef(flags, ctor, deps) {\n    flags |= 16 /* TypePipe */;\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\n/**\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nfunction providerDef(flags, matchedQueries, token, value, deps) {\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} childCount\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @param {?=} bindings\n * @param {?=} outputs\n * @return {?}\n */\nfunction _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);\n    if (!outputs) {\n        outputs = [];\n    }\n    if (!bindings) {\n        bindings = [];\n    }\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    const depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references,\n        ngContentIndex: -1, childCount, bindings,\n        bindingFlags: calcBindingFlags(bindings), outputs,\n        element: null,\n        provider: { token, value, deps: depDefs },\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createProviderInstance(view, def) {\n    return _createProviderInstance$1(view, def);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createPipeInstance(view, def) {\n    // deps are looked up from component.\n    /** @type {?} */\n    let compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    // pipes can see the private services of the component\n    /** @type {?} */\n    const allowPrivateServices = true;\n    // pipes are always eager and classes!\n    return createClass((/** @type {?} */ (compView.parent)), (/** @type {?} */ (viewParentEl(compView))), allowPrivateServices, (/** @type {?} */ (def.provider)).value, (/** @type {?} */ (def.provider)).deps);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createDirectiveInstance(view, def) {\n    // components can see other private services, other directives can't.\n    /** @type {?} */\n    const allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n    // directives are always eager and classes!\n    /** @type {?} */\n    const instance = createClass(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (def.provider)).value, (/** @type {?} */ (def.provider)).deps);\n    if (def.outputs.length) {\n        for (let i = 0; i < def.outputs.length; i++) {\n            /** @type {?} */\n            const output = def.outputs[i];\n            /** @type {?} */\n            const outputObservable = instance[(/** @type {?} */ (output.propName))];\n            if (isObservable(outputObservable)) {\n                /** @type {?} */\n                const subscription = outputObservable.subscribe(eventHandlerClosure(view, (/** @type {?} */ (def.parent)).nodeIndex, output.eventName));\n                (/** @type {?} */ (view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n            }\n            else {\n                throw new Error(`@Output ${output.propName} not initialized in '${instance.constructor.name}'.`);\n            }\n        }\n    }\n    return instance;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction eventHandlerClosure(view, index, eventName) {\n    return (event) => dispatchEvent(view, index, eventName, event);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    const directive = providerData.instance;\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    let changes = (/** @type {?} */ (undefined));\n    /** @type {?} */\n    const bindLen = def.bindings.length;\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 0, v0, changes);\n    }\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 1, v1, changes);\n    }\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 2, v2, changes);\n    }\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 3, v3, changes);\n    }\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 4, v4, changes);\n    }\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 5, v5, changes);\n    }\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 6, v6, changes);\n    }\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 7, v7, changes);\n    }\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 8, v8, changes);\n    }\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 9, v9, changes);\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateDirectiveDynamic(view, def, values) {\n    /** @type {?} */\n    const providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    const directive = providerData.instance;\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    let changes = (/** @type {?} */ (undefined));\n    for (let i = 0; i < values.length; i++) {\n        if (checkBinding(view, def, i, values[i])) {\n            changed = true;\n            changes = updateProp(view, providerData, def, i, values[i], changes);\n        }\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction _createProviderInstance$1(view, def) {\n    // private services can see other private services\n    /** @type {?} */\n    const allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n    /** @type {?} */\n    const providerDef = def.provider;\n    switch (def.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            return createClass(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).value, (/** @type {?} */ (providerDef)).deps);\n        case 1024 /* TypeFactoryProvider */:\n            return callFactory(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).value, (/** @type {?} */ (providerDef)).deps);\n        case 2048 /* TypeUseExistingProvider */:\n            return resolveDep(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).deps[0]);\n        case 256 /* TypeValueProvider */:\n            return (/** @type {?} */ (providerDef)).value;\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = new Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return new ctor(...depValues);\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n    /** @type {?} */\n    const len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            const depValues = Array(len);\n            for (let i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return factory(...depValues);\n    }\n}\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\n/** @type {?} */\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1 = {};\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nfunction resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {\n    if (depDef.flags & 8 /* Value */) {\n        return depDef.token;\n    }\n    /** @type {?} */\n    const startView = view;\n    if (depDef.flags & 2 /* Optional */) {\n        notFoundValue = null;\n    }\n    /** @type {?} */\n    const tokenKey$$1 = depDef.tokenKey;\n    if (tokenKey$$1 === ChangeDetectorRefTokenKey) {\n        // directives on the same element as a component should be able to control the change detector\n        // of that component as well.\n        allowPrivateServices = !!(elDef && (/** @type {?} */ (elDef.element)).componentView);\n    }\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n        allowPrivateServices = false;\n        elDef = (/** @type {?} */ (elDef.parent));\n    }\n    /** @type {?} */\n    let searchView = view;\n    while (searchView) {\n        if (elDef) {\n            switch (tokenKey$$1) {\n                case RendererV1TokenKey: {\n                    /** @type {?} */\n                    const compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createRendererV1(compView);\n                }\n                case Renderer2TokenKey: {\n                    /** @type {?} */\n                    const compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return compView.renderer;\n                }\n                case ElementRefTokenKey:\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                case ViewContainerRefTokenKey:\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                case TemplateRefTokenKey: {\n                    if ((/** @type {?} */ (elDef.element)).template) {\n                        return asElementData(searchView, elDef.nodeIndex).template;\n                    }\n                    break;\n                }\n                case ChangeDetectorRefTokenKey: {\n                    /** @type {?} */\n                    let cdView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createChangeDetectorRef(cdView);\n                }\n                case InjectorRefTokenKey$1:\n                case INJECTORRefTokenKey$1:\n                    return createInjector$1(searchView, elDef);\n                default:\n                    /** @type {?} */\n                    const providerDef = (/** @type {?} */ ((allowPrivateServices ? (/** @type {?} */ (elDef.element)).allProviders :\n                        (/** @type {?} */ (elDef.element)).publicProviders)))[tokenKey$$1];\n                    if (providerDef) {\n                        /** @type {?} */\n                        let providerData = asProviderData(searchView, providerDef.nodeIndex);\n                        if (!providerData) {\n                            providerData = { instance: _createProviderInstance$1(searchView, providerDef) };\n                            searchView.nodes[providerDef.nodeIndex] = (/** @type {?} */ (providerData));\n                        }\n                        return providerData.instance;\n                    }\n            }\n        }\n        allowPrivateServices = isComponentView(searchView);\n        elDef = (/** @type {?} */ (viewParentEl(searchView)));\n        searchView = (/** @type {?} */ (searchView.parent));\n        if (depDef.flags & 4 /* Self */) {\n            searchView = null;\n        }\n    }\n    /** @type {?} */\n    const value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1 ||\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n    }\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @return {?}\n */\nfunction findCompView(view, elDef, allowPrivateServices) {\n    /** @type {?} */\n    let compView;\n    if (allowPrivateServices) {\n        compView = asElementData(view, elDef.nodeIndex).componentView;\n    }\n    else {\n        compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n    }\n    return compView;\n}\n/**\n * @param {?} view\n * @param {?} providerData\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @param {?} changes\n * @return {?}\n */\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n    if (def.flags & 32768 /* Component */) {\n        /** @type {?} */\n        const compView = asElementData(view, (/** @type {?} */ (def.parent)).nodeIndex).componentView;\n        if (compView.def.flags & 2 /* OnPush */) {\n            compView.state |= 8 /* ChecksEnabled */;\n        }\n    }\n    /** @type {?} */\n    const binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    const propName = (/** @type {?} */ (binding.name));\n    // Note: This is still safe with Closure Compiler as\n    // the user passed in the property name as an object has to `providerDef`,\n    // so Closure Compiler will have renamed the property correctly already.\n    providerData.instance[propName] = value;\n    if (def.flags & 524288 /* OnChanges */) {\n        changes = changes || {};\n        /** @type {?} */\n        const oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n        /** @type {?} */\n        const binding = def.bindings[bindingIdx];\n        changes[(/** @type {?} */ (binding.nonMinifiedName))] =\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n    }\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return changes;\n}\n// This function calls the ngAfterContentCheck, ngAfterContentInit,\n// ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node\n// flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are\n// called during a pre-order traversal of the view tree (that is calling the\n// parent hooks before the child hooks) these events are sent in using a\n// post-order traversal of the tree (children before parents). This changes the\n// meaning of initIndex in the view state. For ngOnInit, initIndex tracks the\n// expected nodeIndex which a ngOnInit should be called. When sending\n// ngAfterContentInit and ngAfterViewInit it is the expected count of\n// ngAfterContentInit or ngAfterViewInit methods that have been called. This\n// ensure that despite being called recursively or after picking up after an\n// exception, the ngAfterContentInit or ngAfterViewInit will be called on the\n// correct nodes. Consider for example, the following (where E is an element\n// and D is a directive)\n//  Tree:       pre-order index  post-order index\n//    E1        0                6\n//      E2      1                1\n//       D3     2                0\n//      E4      3                5\n//       E5     4                4\n//        E6    5                2\n//        E7    6                3\n// As can be seen, the post-order index has an unclear relationship to the\n// pre-order index (postOrderIndex === preOrderIndex - parentCount +\n// childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit\n// are stable (will be the same for the same view regardless of exceptions or\n// recursion) we just need to count them which will roughly correspond to the\n// post-order index (it skips elements and directives that do not have\n// lifecycle hooks).\n//\n// For example, if an exception is raised in the E6.onAfterViewInit() the\n// initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to\n// initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will\n// not have their ngAfterViewInit() called but, starting with E7, the rest of\n// the view will begin getting ngAfterViewInit() called until a check and\n// pass is complete.\n//\n// This algorthim also handles recursion. Consider if E4's ngAfterViewInit()\n// indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected\n// initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.\n// D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.\n// When the recursion returns the initIndex will be 7 so E1 is skipped as it\n// has already been called in the recursively called checkAnUpdateView().\n/**\n * @param {?} view\n * @param {?} lifecycles\n * @return {?}\n */\nfunction callLifecycleHooksChildrenFirst(view, lifecycles) {\n    if (!(view.def.nodeFlags & lifecycles)) {\n        return;\n    }\n    /** @type {?} */\n    const nodes = view.def.nodes;\n    /** @type {?} */\n    let initIndex = 0;\n    for (let i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = nodes[i];\n        /** @type {?} */\n        let parent = nodeDef.parent;\n        if (!parent && nodeDef.flags & lifecycles) {\n            // matching root node (e.g. a pipe)\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        if ((nodeDef.childFlags & lifecycles) === 0) {\n            // no child matches one of the lifecycles\n            i += nodeDef.childCount;\n        }\n        while (parent && (parent.flags & 1 /* TypeElement */) &&\n            i === parent.nodeIndex + parent.childCount) {\n            // last child of an element\n            if (parent.directChildFlags & lifecycles) {\n                initIndex = callElementProvidersLifecycles(view, parent, lifecycles, initIndex);\n            }\n            parent = parent.parent;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n    for (let i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & lifecycles) {\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        // only visit direct children\n        i += nodeDef.childCount;\n    }\n    return initIndex;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\n    /** @type {?} */\n    const providerData = asProviderData(view, index);\n    if (!providerData) {\n        return;\n    }\n    /** @type {?} */\n    const provider = providerData.instance;\n    if (!provider) {\n        return;\n    }\n    Services.setCurrentNode(view, index);\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n        provider.ngAfterContentInit();\n    }\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\n        provider.ngAfterContentChecked();\n    }\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n        provider.ngAfterViewInit();\n    }\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\n        provider.ngAfterViewChecked();\n    }\n    if (lifecycles & 131072 /* OnDestroy */) {\n        provider.ngOnDestroy();\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} flags\n * @param {?} id\n * @param {?} bindings\n * @return {?}\n */\nfunction queryDef(flags, id, bindings) {\n    /** @type {?} */\n    let bindingDefs = [];\n    for (let propName in bindings) {\n        /** @type {?} */\n        const bindingType = bindings[propName];\n        bindingDefs.push({ propName, bindingType });\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        // TODO(vicb): check\n        checkIndex: -1, flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        ngContentIndex: -1,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: { id, filterId: filterQueryId(id), bindings: bindingDefs },\n        ngContent: null\n    };\n}\n/**\n * @return {?}\n */\nfunction createQuery$1() {\n    return new QueryList$1();\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction dirtyParentQueries(view) {\n    /** @type {?} */\n    const queryIds = view.def.nodeMatchedQueries;\n    while (view.parent && isEmbeddedView(view)) {\n        /** @type {?} */\n        let tplDef = (/** @type {?} */ (view.parentNodeDef));\n        view = view.parent;\n        // content queries\n        /** @type {?} */\n        const end = tplDef.nodeIndex + tplDef.childCount;\n        for (let i = 0; i <= end; i++) {\n            /** @type {?} */\n            const nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n                ((/** @type {?} */ (nodeDef.query)).filterId & queryIds) === (/** @type {?} */ (nodeDef.query)).filterId) {\n                asQueryList(view, i).setDirty();\n            }\n            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n                // skip elements that don't contain the template element or no query.\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    // view queries\n    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n        for (let i = 0; i < view.def.nodes.length; i++) {\n            /** @type {?} */\n            const nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n                asQueryList(view, i).setDirty();\n            }\n            // only visit the root nodes\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkAndUpdateQuery(view, nodeDef) {\n    /** @type {?} */\n    const queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (!queryList.dirty) {\n        return;\n    }\n    /** @type {?} */\n    let directiveInstance;\n    /** @type {?} */\n    let newValues = (/** @type {?} */ (undefined));\n    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n        /** @type {?} */\n        const elementDef = (/** @type {?} */ ((/** @type {?} */ (nodeDef.parent)).parent));\n        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, (/** @type {?} */ (nodeDef.query)), []);\n        directiveInstance = asProviderData(view, (/** @type {?} */ (nodeDef.parent)).nodeIndex).instance;\n    }\n    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, (/** @type {?} */ (nodeDef.query)), []);\n        directiveInstance = view.component;\n    }\n    queryList.reset(newValues);\n    /** @type {?} */\n    const bindings = (/** @type {?} */ (nodeDef.query)).bindings;\n    /** @type {?} */\n    let notify = false;\n    for (let i = 0; i < bindings.length; i++) {\n        /** @type {?} */\n        const binding = bindings[i];\n        /** @type {?} */\n        let boundValue;\n        switch (binding.bindingType) {\n            case 0 /* First */:\n                boundValue = queryList.first;\n                break;\n            case 1 /* All */:\n                boundValue = queryList;\n                notify = true;\n                break;\n        }\n        directiveInstance[binding.propName] = boundValue;\n    }\n    if (notify) {\n        queryList.notifyOnChanges();\n    }\n}\n/**\n * @param {?} view\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} queryDef\n * @param {?} values\n * @return {?}\n */\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n    for (let i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        /** @type {?} */\n        const valueType = nodeDef.matchedQueries[queryDef.id];\n        if (valueType != null) {\n            values.push(getQueryValue(view, nodeDef, valueType));\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && (/** @type {?} */ (nodeDef.element)).template &&\n            ((/** @type {?} */ ((/** @type {?} */ (nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===\n                queryDef.filterId) {\n            /** @type {?} */\n            const elementData = asElementData(view, i);\n            // check embedded views that were attached at the place of their template,\n            // but process child nodes first if some match the query (see issue #16568)\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n                i += nodeDef.childCount;\n            }\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                /** @type {?} */\n                const embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;\n                for (let k = 0; k < embeddedViews.length; k++) {\n                    /** @type {?} */\n                    const embeddedView = embeddedViews[k];\n                    /** @type {?} */\n                    const dvc = declaredViewContainer(embeddedView);\n                    if (dvc && dvc === elementData) {\n                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            /** @type {?} */\n            const projectedViews = elementData.template._projectedViews;\n            if (projectedViews) {\n                for (let k = 0; k < projectedViews.length; k++) {\n                    /** @type {?} */\n                    const projectedView = projectedViews[k];\n                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                }\n            }\n        }\n        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n            // if no child matches the query, skip the children.\n            i += nodeDef.childCount;\n        }\n    }\n    return values;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} queryValueType\n * @return {?}\n */\nfunction getQueryValue(view, nodeDef, queryValueType) {\n    if (queryValueType != null) {\n        // a match\n        switch (queryValueType) {\n            case 1 /* RenderElement */:\n                return asElementData(view, nodeDef.nodeIndex).renderElement;\n            case 0 /* ElementRef */:\n                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n            case 2 /* TemplateRef */:\n                return asElementData(view, nodeDef.nodeIndex).template;\n            case 3 /* ViewContainerRef */:\n                return asElementData(view, nodeDef.nodeIndex).viewContainer;\n            case 4 /* Provider */:\n                return asProviderData(view, nodeDef.nodeIndex).instance;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} ngContentIndex\n * @param {?} index\n * @return {?}\n */\nfunction ngContentDef(ngContentIndex, index) {\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: -1,\n        flags: 8 /* TypeNgContent */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex,\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: { index }\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction appendNgContent(view, renderHost, def) {\n    /** @type {?} */\n    const parentEl = getParentRenderElement(view, renderHost, def);\n    if (!parentEl) {\n        // Nothing to do if there is no parent element.\n        return;\n    }\n    /** @type {?} */\n    const ngContentIndex = (/** @type {?} */ (def.ngContent)).index;\n    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nfunction purePipeDef(checkIndex, argCount) {\n    // argCount + 1 to include the pipe as first arg\n    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n}\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nfunction pureArrayDef(checkIndex, argCount) {\n    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n}\n/**\n * @param {?} checkIndex\n * @param {?} propToIndex\n * @return {?}\n */\nfunction pureObjectDef(checkIndex, propToIndex) {\n    /** @type {?} */\n    const keys = Object.keys(propToIndex);\n    /** @type {?} */\n    const nbKeys = keys.length;\n    /** @type {?} */\n    const propertyNames = new Array(nbKeys);\n    for (let i = 0; i < nbKeys; i++) {\n        /** @type {?} */\n        const key = keys[i];\n        /** @type {?} */\n        const index = propToIndex[key];\n        propertyNames[index] = key;\n    }\n    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n}\n/**\n * @param {?} flags\n * @param {?} checkIndex\n * @param {?} propertyNames\n * @return {?}\n */\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\n    /** @type {?} */\n    const bindings = new Array(propertyNames.length);\n    for (let i = 0; i < propertyNames.length; i++) {\n        /** @type {?} */\n        const prop = propertyNames[i];\n        bindings[i] = {\n            flags: 8 /* TypeProperty */,\n            name: prop,\n            ns: null,\n            nonMinifiedName: prop,\n            securityContext: null,\n            suffix: null\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        ngContentIndex: -1,\n        childCount: 0, bindings,\n        bindingFlags: calcBindingFlags(bindings),\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction createPureExpression(view, def) {\n    return { value: undefined };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    const bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        const data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        let value;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = new Array(bindings.length);\n                if (bindLen > 0)\n                    value[0] = v0;\n                if (bindLen > 1)\n                    value[1] = v1;\n                if (bindLen > 2)\n                    value[2] = v2;\n                if (bindLen > 3)\n                    value[3] = v3;\n                if (bindLen > 4)\n                    value[4] = v4;\n                if (bindLen > 5)\n                    value[5] = v5;\n                if (bindLen > 6)\n                    value[6] = v6;\n                if (bindLen > 7)\n                    value[7] = v7;\n                if (bindLen > 8)\n                    value[8] = v8;\n                if (bindLen > 9)\n                    value[9] = v9;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                if (bindLen > 0)\n                    value[(/** @type {?} */ (bindings[0].name))] = v0;\n                if (bindLen > 1)\n                    value[(/** @type {?} */ (bindings[1].name))] = v1;\n                if (bindLen > 2)\n                    value[(/** @type {?} */ (bindings[2].name))] = v2;\n                if (bindLen > 3)\n                    value[(/** @type {?} */ (bindings[3].name))] = v3;\n                if (bindLen > 4)\n                    value[(/** @type {?} */ (bindings[4].name))] = v4;\n                if (bindLen > 5)\n                    value[(/** @type {?} */ (bindings[5].name))] = v5;\n                if (bindLen > 6)\n                    value[(/** @type {?} */ (bindings[6].name))] = v6;\n                if (bindLen > 7)\n                    value[(/** @type {?} */ (bindings[7].name))] = v7;\n                if (bindLen > 8)\n                    value[(/** @type {?} */ (bindings[8].name))] = v8;\n                if (bindLen > 9)\n                    value[(/** @type {?} */ (bindings[9].name))] = v9;\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                const pipe = v0;\n                switch (bindLen) {\n                    case 1:\n                        value = pipe.transform(v0);\n                        break;\n                    case 2:\n                        value = pipe.transform(v1);\n                        break;\n                    case 3:\n                        value = pipe.transform(v1, v2);\n                        break;\n                    case 4:\n                        value = pipe.transform(v1, v2, v3);\n                        break;\n                    case 5:\n                        value = pipe.transform(v1, v2, v3, v4);\n                        break;\n                    case 6:\n                        value = pipe.transform(v1, v2, v3, v4, v5);\n                        break;\n                    case 7:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                        break;\n                    case 8:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                        break;\n                    case 9:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                        break;\n                    case 10:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                        break;\n                }\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdatePureExpressionDynamic(view, def, values) {\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    let changed = false;\n    for (let i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        const data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        let value;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = values;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                for (let i = 0; i < values.length; i++) {\n                    value[(/** @type {?} */ (bindings[i].name))] = values[i];\n                }\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                const pipe = values[0];\n                /** @type {?} */\n                const params = values.slice(1);\n                value = ((/** @type {?} */ (pipe.transform)))(...params);\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} checkIndex\n * @param {?} ngContentIndex\n * @param {?} staticText\n * @return {?}\n */\nfunction textDef(checkIndex, ngContentIndex, staticText) {\n    /** @type {?} */\n    const bindings = new Array(staticText.length - 1);\n    for (let i = 1; i < staticText.length; i++) {\n        bindings[i - 1] = {\n            flags: 8 /* TypeProperty */,\n            name: null,\n            ns: null,\n            nonMinifiedName: null,\n            securityContext: null,\n            suffix: staticText[i],\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex,\n        flags: 2 /* TypeText */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex,\n        childCount: 0, bindings,\n        bindingFlags: 8 /* TypeProperty */,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: { prefix: staticText[0] },\n        query: null,\n        ngContent: null,\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nfunction createText(view, renderHost, def) {\n    /** @type {?} */\n    let renderNode$$1;\n    /** @type {?} */\n    const renderer = view.renderer;\n    renderNode$$1 = renderer.createText((/** @type {?} */ (def.text)).prefix);\n    /** @type {?} */\n    const parentEl = getParentRenderElement(view, renderHost, def);\n    if (parentEl) {\n        renderer.appendChild(parentEl, renderNode$$1);\n    }\n    return { renderText: renderNode$$1 };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    let changed = false;\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    const bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        let value = (/** @type {?} */ (def.text)).prefix;\n        if (bindLen > 0)\n            value += _addInterpolationPart(v0, bindings[0]);\n        if (bindLen > 1)\n            value += _addInterpolationPart(v1, bindings[1]);\n        if (bindLen > 2)\n            value += _addInterpolationPart(v2, bindings[2]);\n        if (bindLen > 3)\n            value += _addInterpolationPart(v3, bindings[3]);\n        if (bindLen > 4)\n            value += _addInterpolationPart(v4, bindings[4]);\n        if (bindLen > 5)\n            value += _addInterpolationPart(v5, bindings[5]);\n        if (bindLen > 6)\n            value += _addInterpolationPart(v6, bindings[6]);\n        if (bindLen > 7)\n            value += _addInterpolationPart(v7, bindings[7]);\n        if (bindLen > 8)\n            value += _addInterpolationPart(v8, bindings[8]);\n        if (bindLen > 9)\n            value += _addInterpolationPart(v9, bindings[9]);\n        /** @type {?} */\n        const renderNode$$1 = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode$$1, value);\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateTextDynamic(view, def, values) {\n    /** @type {?} */\n    const bindings = def.bindings;\n    /** @type {?} */\n    let changed = false;\n    for (let i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        let value = '';\n        for (let i = 0; i < values.length; i++) {\n            value = value + _addInterpolationPart(values[i], bindings[i]);\n        }\n        value = (/** @type {?} */ (def.text)).prefix + value;\n        /** @type {?} */\n        const renderNode$$1 = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode$$1, value);\n    }\n    return changed;\n}\n/**\n * @param {?} value\n * @param {?} binding\n * @return {?}\n */\nfunction _addInterpolationPart(value, binding) {\n    /** @type {?} */\n    const valueStr = value != null ? value.toString() : '';\n    return valueStr + binding.suffix;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} flags\n * @param {?} nodes\n * @param {?=} updateDirectives\n * @param {?=} updateRenderer\n * @return {?}\n */\nfunction viewDef(flags, nodes, updateDirectives, updateRenderer) {\n    // clone nodes and set auto calculated values\n    /** @type {?} */\n    let viewBindingCount = 0;\n    /** @type {?} */\n    let viewDisposableCount = 0;\n    /** @type {?} */\n    let viewNodeFlags = 0;\n    /** @type {?} */\n    let viewRootNodeFlags = 0;\n    /** @type {?} */\n    let viewMatchedQueries = 0;\n    /** @type {?} */\n    let currentParent = null;\n    /** @type {?} */\n    let currentRenderParent = null;\n    /** @type {?} */\n    let currentElementHasPublicProviders = false;\n    /** @type {?} */\n    let currentElementHasPrivateProviders = false;\n    /** @type {?} */\n    let lastRenderRootNode = null;\n    for (let i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        const node = nodes[i];\n        node.nodeIndex = i;\n        node.parent = currentParent;\n        node.bindingIndex = viewBindingCount;\n        node.outputIndex = viewDisposableCount;\n        node.renderParent = currentRenderParent;\n        viewNodeFlags |= node.flags;\n        viewMatchedQueries |= node.matchedQueryIds;\n        if (node.element) {\n            /** @type {?} */\n            const elDef = node.element;\n            elDef.publicProviders =\n                currentParent ? (/** @type {?} */ (currentParent.element)).publicProviders : Object.create(null);\n            elDef.allProviders = elDef.publicProviders;\n            // Note: We assume that all providers of an element are before any child element!\n            currentElementHasPublicProviders = false;\n            currentElementHasPrivateProviders = false;\n            if (node.element.template) {\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        validateNode(currentParent, node, nodes.length);\n        viewBindingCount += node.bindings.length;\n        viewDisposableCount += node.outputs.length;\n        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n            lastRenderRootNode = node;\n        }\n        if (node.flags & 20224 /* CatProvider */) {\n            if (!currentElementHasPublicProviders) {\n                currentElementHasPublicProviders = true;\n                // Use prototypical inheritance to not get O(n^2) complexity...\n                (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders =\n                    Object.create((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders);\n                (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).allProviders = (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders;\n            }\n            /** @type {?} */\n            const isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n            /** @type {?} */\n            const isComponent = (node.flags & 32768 /* Component */) !== 0;\n            if (!isPrivateService || isComponent) {\n                (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders))[tokenKey((/** @type {?} */ (node.provider)).token)] = node;\n            }\n            else {\n                if (!currentElementHasPrivateProviders) {\n                    currentElementHasPrivateProviders = true;\n                    // Use prototypical inheritance to not get O(n^2) complexity...\n                    (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).allProviders =\n                        Object.create((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders);\n                }\n                (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).allProviders))[tokenKey((/** @type {?} */ (node.provider)).token)] = node;\n            }\n            if (isComponent) {\n                (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).componentProvider = node;\n            }\n        }\n        if (currentParent) {\n            currentParent.childFlags |= node.flags;\n            currentParent.directChildFlags |= node.flags;\n            currentParent.childMatchedQueries |= node.matchedQueryIds;\n            if (node.element && node.element.template) {\n                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        else {\n            viewRootNodeFlags |= node.flags;\n        }\n        if (node.childCount > 0) {\n            currentParent = node;\n            if (!isNgContainer(node)) {\n                currentRenderParent = node;\n            }\n        }\n        else {\n            // When the current node has no children, check if it is the last children of its parent.\n            // When it is, propagate the flags up.\n            // The loop is required because an element could be the last transitive children of several\n            // elements. We loop to either the root or the highest opened element (= with remaining\n            // children)\n            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n                /** @type {?} */\n                const newParent = currentParent.parent;\n                if (newParent) {\n                    newParent.childFlags |= currentParent.childFlags;\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                }\n                currentParent = newParent;\n                // We also need to update the render parent & account for ng-container\n                if (currentParent && isNgContainer(currentParent)) {\n                    currentRenderParent = currentParent.renderParent;\n                }\n                else {\n                    currentRenderParent = currentParent;\n                }\n            }\n        }\n    }\n    /** @type {?} */\n    const handleEvent = (view, nodeIndex, eventName, event) => (/** @type {?} */ ((/** @type {?} */ (nodes[nodeIndex].element)).handleEvent))(view, eventName, event);\n    return {\n        // Will be filled later...\n        factory: null,\n        nodeFlags: viewNodeFlags,\n        rootNodeFlags: viewRootNodeFlags,\n        nodeMatchedQueries: viewMatchedQueries, flags,\n        nodes: nodes,\n        updateDirectives: updateDirectives || NOOP,\n        updateRenderer: updateRenderer || NOOP, handleEvent,\n        bindingCount: viewBindingCount,\n        outputCount: viewDisposableCount, lastRenderRootNode\n    };\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isNgContainer(node) {\n    return (node.flags & 1 /* TypeElement */) !== 0 && (/** @type {?} */ (node.element)).name === null;\n}\n/**\n * @param {?} parent\n * @param {?} node\n * @param {?} nodeCount\n * @return {?}\n */\nfunction validateNode(parent, node, nodeCount) {\n    /** @type {?} */\n    const template = node.element && node.element.template;\n    if (template) {\n        if (!template.lastRenderRootNode) {\n            throw new Error(`Illegal State: Embedded templates without nodes are not allowed!`);\n        }\n        if (template.lastRenderRootNode &&\n            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n            throw new Error(`Illegal State: Last root node of a template can't have embedded views, at index ${node.nodeIndex}!`);\n        }\n    }\n    if (node.flags & 20224 /* CatProvider */) {\n        /** @type {?} */\n        const parentFlags = parent ? parent.flags : 0;\n        if ((parentFlags & 1 /* TypeElement */) === 0) {\n            throw new Error(`Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index ${node.nodeIndex}!`);\n        }\n    }\n    if (node.query) {\n        if (node.flags & 67108864 /* TypeContentQuery */ &&\n            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n            throw new Error(`Illegal State: Content Query nodes need to be children of directives, at index ${node.nodeIndex}!`);\n        }\n        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n            throw new Error(`Illegal State: View Query nodes have to be top level nodes, at index ${node.nodeIndex}!`);\n        }\n    }\n    if (node.childCount) {\n        /** @type {?} */\n        const parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n            throw new Error(`Illegal State: childCount of node leads outside of parent, at index ${node.nodeIndex}!`);\n        }\n    }\n}\n/**\n * @param {?} parent\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction createEmbeddedView(parent, anchorDef$$1, viewDef, context) {\n    // embedded views are seen as siblings to the anchor, so we need\n    // to get the parent of the anchor and use it as parentIndex.\n    /** @type {?} */\n    const view = createView(parent.root, parent.renderer, parent, anchorDef$$1, viewDef);\n    initView(view, parent.component, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} root\n * @param {?} def\n * @param {?=} context\n * @return {?}\n */\nfunction createRootView(root, def, context) {\n    /** @type {?} */\n    const view = createView(root, root.renderer, null, null, def);\n    initView(view, context, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction createComponentView(parentView, nodeDef, viewDef, hostElement) {\n    /** @type {?} */\n    const rendererType = (/** @type {?} */ (nodeDef.element)).componentRendererType;\n    /** @type {?} */\n    let compRenderer;\n    if (!rendererType) {\n        compRenderer = parentView.root.renderer;\n    }\n    else {\n        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n    }\n    return createView(parentView.root, compRenderer, parentView, (/** @type {?} */ (nodeDef.element)).componentProvider, viewDef);\n}\n/**\n * @param {?} root\n * @param {?} renderer\n * @param {?} parent\n * @param {?} parentNodeDef\n * @param {?} def\n * @return {?}\n */\nfunction createView(root, renderer, parent, parentNodeDef, def) {\n    /** @type {?} */\n    const nodes = new Array(def.nodes.length);\n    /** @type {?} */\n    const disposables = def.outputCount ? new Array(def.outputCount) : null;\n    /** @type {?} */\n    const view = {\n        def,\n        parent,\n        viewContainerParent: null, parentNodeDef,\n        context: null,\n        component: null, nodes,\n        state: 13 /* CatInit */, root, renderer,\n        oldValues: new Array(def.bindingCount), disposables,\n        initIndex: -1\n    };\n    return view;\n}\n/**\n * @param {?} view\n * @param {?} component\n * @param {?} context\n * @return {?}\n */\nfunction initView(view, component, context) {\n    view.component = component;\n    view.context = context;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createViewNodes(view) {\n    /** @type {?} */\n    let renderHost;\n    if (isComponentView(view)) {\n        /** @type {?} */\n        const hostDef = view.parentNodeDef;\n        renderHost = asElementData((/** @type {?} */ (view.parent)), (/** @type {?} */ ((/** @type {?} */ (hostDef)).parent)).nodeIndex).renderElement;\n    }\n    /** @type {?} */\n    const def = view.def;\n    /** @type {?} */\n    const nodes = view.nodes;\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        Services.setCurrentNode(view, i);\n        /** @type {?} */\n        let nodeData;\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                /** @type {?} */\n                const el = (/** @type {?} */ (createElement(view, renderHost, nodeDef)));\n                /** @type {?} */\n                let componentView = (/** @type {?} */ (undefined));\n                if (nodeDef.flags & 33554432 /* ComponentView */) {\n                    /** @type {?} */\n                    const compViewDef = resolveDefinition((/** @type {?} */ ((/** @type {?} */ (nodeDef.element)).componentView)));\n                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n                }\n                listenToElementOutputs(view, componentView, nodeDef, el);\n                nodeData = (/** @type {?} */ ({\n                    renderElement: el,\n                    componentView,\n                    viewContainer: null,\n                    template: (/** @type {?} */ (nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined\n                }));\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n                }\n                break;\n            case 2 /* TypeText */:\n                nodeData = (/** @type {?} */ (createText(view, renderHost, nodeDef)));\n                break;\n            case 512 /* TypeClassProvider */:\n            case 1024 /* TypeFactoryProvider */:\n            case 2048 /* TypeUseExistingProvider */:\n            case 256 /* TypeValueProvider */: {\n                nodeData = nodes[i];\n                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n                    /** @type {?} */\n                    const instance = createProviderInstance(view, nodeDef);\n                    nodeData = (/** @type {?} */ ({ instance }));\n                }\n                break;\n            }\n            case 16 /* TypePipe */: {\n                /** @type {?} */\n                const instance = createPipeInstance(view, nodeDef);\n                nodeData = (/** @type {?} */ ({ instance }));\n                break;\n            }\n            case 16384 /* TypeDirective */: {\n                nodeData = nodes[i];\n                if (!nodeData) {\n                    /** @type {?} */\n                    const instance = createDirectiveInstance(view, nodeDef);\n                    nodeData = (/** @type {?} */ ({ instance }));\n                }\n                if (nodeDef.flags & 32768 /* Component */) {\n                    /** @type {?} */\n                    const compView = asElementData(view, (/** @type {?} */ (nodeDef.parent)).nodeIndex).componentView;\n                    initView(compView, nodeData.instance, nodeData.instance);\n                }\n                break;\n            }\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                nodeData = (/** @type {?} */ (createPureExpression(view, nodeDef)));\n                break;\n            case 67108864 /* TypeContentQuery */:\n            case 134217728 /* TypeViewQuery */:\n                nodeData = (/** @type {?} */ (createQuery$1()));\n                break;\n            case 8 /* TypeNgContent */:\n                appendNgContent(view, renderHost, nodeDef);\n                // no runtime data needed for NgContent...\n                nodeData = undefined;\n                break;\n        }\n        nodes[i] = nodeData;\n    }\n    // Create the ViewData.nodes of component views after we created everything else,\n    // so that e.g. ng-content works\n    execComponentViewsAction(view, ViewAction.CreateViewNodes);\n    // fill static content and view queries\n    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction checkNoChangesView(view) {\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 1 /* CheckNoChanges */);\n    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n    Services.updateRenderer(view, 1 /* CheckNoChanges */);\n    execComponentViewsAction(view, ViewAction.CheckNoChanges);\n    // Note: We don't check queries for changes as we didn't do this in v2.x.\n    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction checkAndUpdateView(view) {\n    if (view.state & 1 /* BeforeFirstCheck */) {\n        view.state &= ~1 /* BeforeFirstCheck */;\n        view.state |= 2 /* FirstCheck */;\n    }\n    else {\n        view.state &= ~2 /* FirstCheck */;\n    }\n    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    /** @type {?} */\n    let callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n    if (view.def.flags & 2 /* OnPush */) {\n        view.state &= ~8 /* ChecksEnabled */;\n    }\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markProjectedViewsForCheck(view) {\n    /** @type {?} */\n    const def = view.def;\n    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n        return;\n    }\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n            /** @type {?} */\n            const projectedViews = asElementData(view, i).template._projectedViews;\n            if (projectedViews) {\n                for (let i = 0; i < projectedViews.length; i++) {\n                    /** @type {?} */\n                    const projectedView = projectedViews[i];\n                    projectedView.state |= 32 /* CheckProjectedView */;\n                    markParentViewsForCheckProjectedViews(projectedView, view);\n                }\n            }\n        }\n        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementDynamic(view, nodeDef, values);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextDynamic(view, nodeDef, values);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        checkNoChangesNodeDynamic(view, nodeDef, v0);\n    }\n    // Returning false is ok here as we would have thrown in case of a change.\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const bindLen = nodeDef.bindings.length;\n    if (bindLen > 0)\n        checkBindingNoChanges(view, nodeDef, 0, v0);\n    if (bindLen > 1)\n        checkBindingNoChanges(view, nodeDef, 1, v1);\n    if (bindLen > 2)\n        checkBindingNoChanges(view, nodeDef, 2, v2);\n    if (bindLen > 3)\n        checkBindingNoChanges(view, nodeDef, 3, v3);\n    if (bindLen > 4)\n        checkBindingNoChanges(view, nodeDef, 4, v4);\n    if (bindLen > 5)\n        checkBindingNoChanges(view, nodeDef, 5, v5);\n    if (bindLen > 6)\n        checkBindingNoChanges(view, nodeDef, 6, v6);\n    if (bindLen > 7)\n        checkBindingNoChanges(view, nodeDef, 7, v7);\n    if (bindLen > 8)\n        checkBindingNoChanges(view, nodeDef, 8, v8);\n    if (bindLen > 9)\n        checkBindingNoChanges(view, nodeDef, 9, v9);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\n    for (let i = 0; i < values.length; i++) {\n        checkBindingNoChanges(view, nodeDef, i, values[i]);\n    }\n}\n/**\n * Workaround https://github.com/angular/tsickle/issues/497\n * @suppress {misplacedTypeAnnotation}\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkNoChangesQuery(view, nodeDef) {\n    /** @type {?} */\n    const queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (queryList.dirty) {\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), `Query ${(/** @type {?} */ (nodeDef.query)).id} not dirty`, `Query ${(/** @type {?} */ (nodeDef.query)).id} dirty`, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyView(view) {\n    if (view.state & 128 /* Destroyed */) {\n        return;\n    }\n    execEmbeddedViewsAction(view, ViewAction.Destroy);\n    execComponentViewsAction(view, ViewAction.Destroy);\n    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n    if (view.disposables) {\n        for (let i = 0; i < view.disposables.length; i++) {\n            view.disposables[i]();\n        }\n    }\n    detachProjectedView(view);\n    if (view.renderer.destroyNode) {\n        destroyViewNodes(view);\n    }\n    if (isComponentView(view)) {\n        view.renderer.destroy();\n    }\n    view.state |= 128 /* Destroyed */;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyViewNodes(view) {\n    /** @type {?} */\n    const len = view.def.nodes.length;\n    for (let i = 0; i < len; i++) {\n        /** @type {?} */\n        const def = view.def.nodes[i];\n        if (def.flags & 1 /* TypeElement */) {\n            (/** @type {?} */ (view.renderer.destroyNode))(asElementData(view, i).renderElement);\n        }\n        else if (def.flags & 2 /* TypeText */) {\n            (/** @type {?} */ (view.renderer.destroyNode))(asTextData(view, i).renderText);\n        }\n        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n            asQueryList(view, i).destroy();\n        }\n    }\n}\n/** @enum {number} */\nconst ViewAction = {\n    CreateViewNodes: 0,\n    CheckNoChanges: 1,\n    CheckNoChangesProjectedViews: 2,\n    CheckAndUpdate: 3,\n    CheckAndUpdateProjectedViews: 4,\n    Destroy: 5,\n};\nViewAction[ViewAction.CreateViewNodes] = 'CreateViewNodes';\nViewAction[ViewAction.CheckNoChanges] = 'CheckNoChanges';\nViewAction[ViewAction.CheckNoChangesProjectedViews] = 'CheckNoChangesProjectedViews';\nViewAction[ViewAction.CheckAndUpdate] = 'CheckAndUpdate';\nViewAction[ViewAction.CheckAndUpdateProjectedViews] = 'CheckAndUpdateProjectedViews';\nViewAction[ViewAction.Destroy] = 'Destroy';\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execComponentViewsAction(view, action) {\n    /** @type {?} */\n    const def = view.def;\n    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n        return;\n    }\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\n            // a leaf\n            callViewAction(asElementData(view, i).componentView, action);\n        }\n        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execEmbeddedViewsAction(view, action) {\n    /** @type {?} */\n    const def = view.def;\n    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n        return;\n    }\n    for (let i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = def.nodes[i];\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            // a leaf\n            /** @type {?} */\n            const embeddedViews = (/** @type {?} */ (asElementData(view, i).viewContainer))._embeddedViews;\n            for (let k = 0; k < embeddedViews.length; k++) {\n                callViewAction(embeddedViews[k], action);\n            }\n        }\n        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction callViewAction(view, action) {\n    /** @type {?} */\n    const viewState = view.state;\n    switch (action) {\n        case ViewAction.CheckNoChanges:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckNoChangesProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdate:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdateProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.Destroy:\n            // Note: destroyView recurses over all views,\n            // so we don't need to special case projected views here.\n            destroyView(view);\n            break;\n        case ViewAction.CreateViewNodes:\n            createViewNodes(view);\n            break;\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execProjectedViewsAction(view, action) {\n    execEmbeddedViewsAction(view, action);\n    execComponentViewsAction(view, action);\n}\n/**\n * @param {?} view\n * @param {?} queryFlags\n * @param {?} staticDynamicQueryFlag\n * @param {?} checkType\n * @return {?}\n */\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n        return;\n    }\n    /** @type {?} */\n    const nodeCount = view.def.nodes.length;\n    for (let i = 0; i < nodeCount; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n            Services.setCurrentNode(view, nodeDef.nodeIndex);\n            switch (checkType) {\n                case 0 /* CheckAndUpdate */:\n                    checkAndUpdateQuery(view, nodeDef);\n                    break;\n                case 1 /* CheckNoChanges */:\n                    checkNoChangesQuery(view, nodeDef);\n                    break;\n            }\n        }\n        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n            // no child has a matching query\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet initialized = false;\n/**\n * @return {?}\n */\nfunction initServicesIfNeeded() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    /** @type {?} */\n    const services = isDevMode() ? createDebugServices() : createProdServices();\n    Services.setCurrentNode = services.setCurrentNode;\n    Services.createRootView = services.createRootView;\n    Services.createEmbeddedView = services.createEmbeddedView;\n    Services.createComponentView = services.createComponentView;\n    Services.createNgModuleRef = services.createNgModuleRef;\n    Services.overrideProvider = services.overrideProvider;\n    Services.overrideComponentView = services.overrideComponentView;\n    Services.clearOverrides = services.clearOverrides;\n    Services.checkAndUpdateView = services.checkAndUpdateView;\n    Services.checkNoChangesView = services.checkNoChangesView;\n    Services.destroyView = services.destroyView;\n    Services.resolveDep = resolveDep;\n    Services.createDebugContext = services.createDebugContext;\n    Services.handleEvent = services.handleEvent;\n    Services.updateDirectives = services.updateDirectives;\n    Services.updateRenderer = services.updateRenderer;\n    Services.dirtyParentQueries = dirtyParentQueries;\n}\n/**\n * @return {?}\n */\nfunction createProdServices() {\n    return {\n        setCurrentNode: () => { },\n        createRootView: createProdRootView,\n        createEmbeddedView: createEmbeddedView,\n        createComponentView: createComponentView,\n        createNgModuleRef: createNgModuleRef,\n        overrideProvider: NOOP,\n        overrideComponentView: NOOP,\n        clearOverrides: NOOP,\n        checkAndUpdateView: checkAndUpdateView,\n        checkNoChangesView: checkNoChangesView,\n        destroyView: destroyView,\n        createDebugContext: (view, nodeIndex) => new DebugContext_(view, nodeIndex),\n        handleEvent: (view, nodeIndex, eventName, event) => view.def.handleEvent(view, nodeIndex, eventName, event),\n        updateDirectives: (view, checkType) => view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view),\n        updateRenderer: (view, checkType) => view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view),\n    };\n}\n/**\n * @return {?}\n */\nfunction createDebugServices() {\n    return {\n        setCurrentNode: debugSetCurrentNode,\n        createRootView: debugCreateRootView,\n        createEmbeddedView: debugCreateEmbeddedView,\n        createComponentView: debugCreateComponentView,\n        createNgModuleRef: debugCreateNgModuleRef,\n        overrideProvider: debugOverrideProvider,\n        overrideComponentView: debugOverrideComponentView,\n        clearOverrides: debugClearOverrides,\n        checkAndUpdateView: debugCheckAndUpdateView,\n        checkNoChangesView: debugCheckNoChangesView,\n        destroyView: debugDestroyView,\n        createDebugContext: (view, nodeIndex) => new DebugContext_(view, nodeIndex),\n        handleEvent: debugHandleEvent,\n        updateDirectives: debugUpdateDirectives,\n        updateRenderer: debugUpdateRenderer,\n    };\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    const rendererFactory = ngModule.injector.get(RendererFactory2);\n    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    const rendererFactory = ngModule.injector.get(RendererFactory2);\n    /** @type {?} */\n    const root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n    /** @type {?} */\n    const defWithOverride = applyProviderOverridesToView(def);\n    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n}\n/**\n * @param {?} elInjector\n * @param {?} ngModule\n * @param {?} rendererFactory\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @return {?}\n */\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n    /** @type {?} */\n    const sanitizer = ngModule.injector.get(Sanitizer);\n    /** @type {?} */\n    const errorHandler = ngModule.injector.get(ErrorHandler);\n    /** @type {?} */\n    const renderer = rendererFactory.createRenderer(null, null);\n    return {\n        ngModule,\n        injector: elInjector, projectableNodes,\n        selectorOrNode: rootSelectorOrNode, sanitizer, rendererFactory, renderer, errorHandler\n    };\n}\n/**\n * @param {?} parentView\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef$$1, context) {\n    /** @type {?} */\n    const defWithOverride = applyProviderOverridesToView(viewDef$$1);\n    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction debugCreateComponentView(parentView, nodeDef, viewDef$$1, hostElement) {\n    /** @type {?} */\n    const overrideComponentView = viewDefOverrides.get((/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (nodeDef.element)).componentProvider)).provider)).token);\n    if (overrideComponentView) {\n        viewDef$$1 = overrideComponentView;\n    }\n    else {\n        viewDef$$1 = applyProviderOverridesToView(viewDef$$1);\n    }\n    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef$$1, hostElement]);\n}\n/**\n * @param {?} moduleType\n * @param {?} parentInjector\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n    /** @type {?} */\n    const defWithOverride = applyProviderOverridesToNgModule(def);\n    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n}\n/** @type {?} */\nconst providerOverrides = new Map();\n/** @type {?} */\nconst providerOverridesWithScope = new Map();\n/** @type {?} */\nconst viewDefOverrides = new Map();\n/**\n * @param {?} override\n * @return {?}\n */\nfunction debugOverrideProvider(override) {\n    providerOverrides.set(override.token, override);\n    /** @type {?} */\n    let injectableDef;\n    if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) &&\n        typeof injectableDef.providedIn === 'function') {\n        providerOverridesWithScope.set((/** @type {?} */ (override.token)), override);\n    }\n}\n/**\n * @param {?} comp\n * @param {?} compFactory\n * @return {?}\n */\nfunction debugOverrideComponentView(comp, compFactory) {\n    /** @type {?} */\n    const hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n    /** @type {?} */\n    const compViewDef = resolveDefinition((/** @type {?} */ ((/** @type {?} */ (hostViewDef.nodes[0].element)).componentView)));\n    viewDefOverrides.set(comp, compViewDef);\n}\n/**\n * @return {?}\n */\nfunction debugClearOverrides() {\n    providerOverrides.clear();\n    providerOverridesWithScope.clear();\n    viewDefOverrides.clear();\n}\n// Notes about the algorithm:\n// 1) Locate the providers of an element and check if one of them was overwritten\n// 2) Change the providers of that element\n//\n// We only create new datastructures if we need to, to keep perf impact\n// reasonable.\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToView(def) {\n    if (providerOverrides.size === 0) {\n        return def;\n    }\n    /** @type {?} */\n    const elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n    if (elementIndicesWithOverwrittenProviders.length === 0) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = (/** @type {?} */ (def.factory))(() => NOOP);\n    for (let i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n    }\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function findElementIndicesWithOverwrittenProviders(def) {\n        /** @type {?} */\n        const elIndicesWithOverwrittenProviders = [];\n        /** @type {?} */\n        let lastElementDef = null;\n        for (let i = 0; i < def.nodes.length; i++) {\n            /** @type {?} */\n            const nodeDef = def.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                lastElementDef = nodeDef;\n            }\n            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n                providerOverrides.has((/** @type {?} */ (nodeDef.provider)).token)) {\n                elIndicesWithOverwrittenProviders.push((/** @type {?} */ (lastElementDef)).nodeIndex);\n                lastElementDef = null;\n            }\n        }\n        return elIndicesWithOverwrittenProviders;\n    }\n    /**\n     * @param {?} viewDef\n     * @param {?} elIndex\n     * @return {?}\n     */\n    function applyProviderOverridesToElement(viewDef$$1, elIndex) {\n        for (let i = elIndex + 1; i < viewDef$$1.nodes.length; i++) {\n            /** @type {?} */\n            const nodeDef = viewDef$$1.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                // stop at the next element\n                return;\n            }\n            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n                /** @type {?} */\n                const provider = (/** @type {?} */ (nodeDef.provider));\n                /** @type {?} */\n                const override = providerOverrides.get(provider.token);\n                if (override) {\n                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                    provider.deps = splitDepsDsl(override.deps);\n                    provider.value = override.value;\n                }\n            }\n        }\n    }\n}\n// Notes about the algorithm:\n// We only create new datastructures if we need to, to keep perf impact\n// reasonable.\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToNgModule(def) {\n    const { hasOverrides, hasDeprecatedOverrides } = calcHasOverrides(def);\n    if (!hasOverrides) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = (/** @type {?} */ (def.factory))(() => NOOP);\n    applyProviderOverrides(def);\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function calcHasOverrides(def) {\n        /** @type {?} */\n        let hasOverrides = false;\n        /** @type {?} */\n        let hasDeprecatedOverrides = false;\n        if (providerOverrides.size === 0) {\n            return { hasOverrides, hasDeprecatedOverrides };\n        }\n        def.providers.forEach(node => {\n            /** @type {?} */\n            const override = providerOverrides.get(node.token);\n            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n                hasOverrides = true;\n                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n            }\n        });\n        def.modules.forEach(module => {\n            providerOverridesWithScope.forEach((override, token) => {\n                if ((/** @type {?} */ (getInjectableDef(token))).providedIn === module) {\n                    hasOverrides = true;\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                }\n            });\n        });\n        return { hasOverrides, hasDeprecatedOverrides };\n    }\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function applyProviderOverrides(def) {\n        for (let i = 0; i < def.providers.length; i++) {\n            /** @type {?} */\n            const provider = def.providers[i];\n            if (hasDeprecatedOverrides) {\n                // We had a bug where me made\n                // all providers lazy. Keep this logic behind a flag\n                // for migrating existing users.\n                provider.flags |= 4096 /* LazyProvider */;\n            }\n            /** @type {?} */\n            const override = providerOverrides.get(provider.token);\n            if (override) {\n                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                provider.deps = splitDepsDsl(override.deps);\n                provider.value = override.value;\n            }\n        }\n        if (providerOverridesWithScope.size > 0) {\n            /** @type {?} */\n            let moduleSet = new Set(def.modules);\n            providerOverridesWithScope.forEach((override, token) => {\n                if (moduleSet.has((/** @type {?} */ (getInjectableDef(token))).providedIn)) {\n                    /** @type {?} */\n                    let provider = {\n                        token: token,\n                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\n                        deps: splitDepsDsl(override.deps),\n                        value: override.value,\n                        index: def.providers.length,\n                    };\n                    def.providers.push(provider);\n                    def.providersByKey[tokenKey(token)] = provider;\n                }\n            });\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[checkIndex];\n    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    const nodeDef = view.def.nodes[checkIndex];\n    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckAndUpdateView(view) {\n    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckNoChangesView(view) {\n    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugDestroyView(view) {\n    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n}\n/** @enum {number} */\nconst DebugAction = {\n    create: 0,\n    detectChanges: 1,\n    checkNoChanges: 2,\n    destroy: 3,\n    handleEvent: 4,\n};\nDebugAction[DebugAction.create] = 'create';\nDebugAction[DebugAction.detectChanges] = 'detectChanges';\nDebugAction[DebugAction.checkNoChanges] = 'checkNoChanges';\nDebugAction[DebugAction.destroy] = 'destroy';\nDebugAction[DebugAction.handleEvent] = 'handleEvent';\n/** @type {?} */\nlet _currentAction;\n/** @type {?} */\nlet _currentView;\n/** @type {?} */\nlet _currentNodeIndex;\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction debugSetCurrentNode(view, nodeIndex) {\n    _currentView = view;\n    _currentNodeIndex = nodeIndex;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\n    debugSetCurrentNode(view, nodeIndex);\n    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateDirectives(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n    return view.def.updateDirectives(debugCheckDirectivesFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckDirectivesFn(view, nodeIndex, argStyle, ...values) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateRenderer(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckRenderNodeFn(view, nodeIndex, argStyle, ...values) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} givenValues\n * @return {?}\n */\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n    /** @type {?} */\n    const changed = ((/** @type {?} */ (checkAndUpdateNode)))(view, nodeDef, argStyle, ...givenValues);\n    if (changed) {\n        /** @type {?} */\n        const values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            /** @type {?} */\n            const bindingValues = {};\n            for (let i = 0; i < nodeDef.bindings.length; i++) {\n                /** @type {?} */\n                const binding = nodeDef.bindings[i];\n                /** @type {?} */\n                const value = values[i];\n                if (binding.flags & 8 /* TypeProperty */) {\n                    bindingValues[normalizeDebugBindingName((/** @type {?} */ (binding.nonMinifiedName)))] =\n                        normalizeDebugBindingValue(value);\n                }\n            }\n            /** @type {?} */\n            const elDef = (/** @type {?} */ (nodeDef.parent));\n            /** @type {?} */\n            const el = asElementData(view, elDef.nodeIndex).renderElement;\n            if (!(/** @type {?} */ (elDef.element)).name) {\n                // a comment.\n                view.renderer.setValue(el, `bindings=${JSON.stringify(bindingValues, null, 2)}`);\n            }\n            else {\n                // a regular element.\n                for (let attr in bindingValues) {\n                    /** @type {?} */\n                    const value = bindingValues[attr];\n                    if (value != null) {\n                        view.renderer.setAttribute(el, attr, value);\n                    }\n                    else {\n                        view.renderer.removeAttribute(el, attr);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} values\n * @return {?}\n */\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n    ((/** @type {?} */ (checkNoChangesNode)))(view, nodeDef, argStyle, ...values);\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextDirectiveWithBinding(view, nodeIndex) {\n    for (let i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\n    for (let i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        const nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\nclass DebugContext_ {\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     */\n    constructor(view, nodeIndex) {\n        this.view = view;\n        this.nodeIndex = nodeIndex;\n        if (nodeIndex == null) {\n            this.nodeIndex = nodeIndex = 0;\n        }\n        this.nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        let elDef = this.nodeDef;\n        /** @type {?} */\n        let elView = view;\n        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n            elDef = (/** @type {?} */ (elDef.parent));\n        }\n        if (!elDef) {\n            while (!elDef && elView) {\n                elDef = (/** @type {?} */ (viewParentEl(elView)));\n                elView = (/** @type {?} */ (elView.parent));\n            }\n        }\n        this.elDef = elDef;\n        this.elView = elView;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    get elOrCompView() {\n        // Has to be done lazily as we use the DebugContext also during creation of elements...\n        return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n    }\n    /**\n     * @return {?}\n     */\n    get injector() { return createInjector$1(this.elView, this.elDef); }\n    /**\n     * @return {?}\n     */\n    get component() { return this.elOrCompView.component; }\n    /**\n     * @return {?}\n     */\n    get context() { return this.elOrCompView.context; }\n    /**\n     * @return {?}\n     */\n    get providerTokens() {\n        /** @type {?} */\n        const tokens = [];\n        if (this.elDef) {\n            for (let i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                /** @type {?} */\n                const childDef = this.elView.def.nodes[i];\n                if (childDef.flags & 20224 /* CatProvider */) {\n                    tokens.push((/** @type {?} */ (childDef.provider)).token);\n                }\n                i += childDef.childCount;\n            }\n        }\n        return tokens;\n    }\n    /**\n     * @return {?}\n     */\n    get references() {\n        /** @type {?} */\n        const references = {};\n        if (this.elDef) {\n            collectReferences(this.elView, this.elDef, references);\n            for (let i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                /** @type {?} */\n                const childDef = this.elView.def.nodes[i];\n                if (childDef.flags & 20224 /* CatProvider */) {\n                    collectReferences(this.elView, childDef, references);\n                }\n                i += childDef.childCount;\n            }\n        }\n        return references;\n    }\n    /**\n     * @return {?}\n     */\n    get componentRenderElement() {\n        /** @type {?} */\n        const elData = findHostElement(this.elOrCompView);\n        return elData ? elData.renderElement : undefined;\n    }\n    /**\n     * @return {?}\n     */\n    get renderNode() {\n        return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n            renderNode(this.elView, this.elDef);\n    }\n    /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    logError(console, ...values) {\n        /** @type {?} */\n        let logViewDef;\n        /** @type {?} */\n        let logNodeIndex;\n        if (this.nodeDef.flags & 2 /* TypeText */) {\n            logViewDef = this.view.def;\n            logNodeIndex = this.nodeDef.nodeIndex;\n        }\n        else {\n            logViewDef = this.elView.def;\n            logNodeIndex = this.elDef.nodeIndex;\n        }\n        // Note: we only generate a log function for text and element nodes\n        // to make the generated code as small as possible.\n        /** @type {?} */\n        const renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n        /** @type {?} */\n        let currRenderNodeIndex = -1;\n        /** @type {?} */\n        let nodeLogger = () => {\n            currRenderNodeIndex++;\n            if (currRenderNodeIndex === renderNodeIndex) {\n                return console.error.bind(console, ...values);\n            }\n            else {\n                return NOOP;\n            }\n        };\n        (/** @type {?} */ (logViewDef.factory))(nodeLogger);\n        if (currRenderNodeIndex < renderNodeIndex) {\n            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n            ((/** @type {?} */ (console.error)))(...values);\n        }\n    }\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction getRenderNodeIndex(viewDef$$1, nodeIndex) {\n    /** @type {?} */\n    let renderNodeIndex = -1;\n    for (let i = 0; i <= nodeIndex; i++) {\n        /** @type {?} */\n        const nodeDef = viewDef$$1.nodes[i];\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            renderNodeIndex++;\n        }\n    }\n    return renderNodeIndex;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction findHostElement(view) {\n    while (view && !isComponentView(view)) {\n        view = (/** @type {?} */ (view.parent));\n    }\n    if (view.parent) {\n        return asElementData(view.parent, (/** @type {?} */ (viewParentEl(view))).nodeIndex);\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} references\n * @return {?}\n */\nfunction collectReferences(view, nodeDef, references) {\n    for (let refName in nodeDef.references) {\n        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n    }\n}\n/**\n * @param {?} action\n * @param {?} fn\n * @param {?} self\n * @param {?} args\n * @return {?}\n */\nfunction callWithDebugContext(action, fn, self, args) {\n    /** @type {?} */\n    const oldAction = _currentAction;\n    /** @type {?} */\n    const oldView = _currentView;\n    /** @type {?} */\n    const oldNodeIndex = _currentNodeIndex;\n    try {\n        _currentAction = action;\n        /** @type {?} */\n        const result = fn.apply(self, args);\n        _currentView = oldView;\n        _currentNodeIndex = oldNodeIndex;\n        _currentAction = oldAction;\n        return result;\n    }\n    catch (e) {\n        if (isViewDebugError(e) || !_currentView) {\n            throw e;\n        }\n        throw viewWrappedDebugError(e, (/** @type {?} */ (getCurrentDebugContext())));\n    }\n}\n/**\n * @return {?}\n */\nfunction getCurrentDebugContext() {\n    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n}\nclass DebugRendererFactory2 {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    createRenderer(element, renderData) {\n        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n    }\n    /**\n     * @return {?}\n     */\n    begin() {\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    end() {\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    whenRenderingDone() {\n        if (this.delegate.whenRenderingDone) {\n            return this.delegate.whenRenderingDone();\n        }\n        return Promise.resolve(null);\n    }\n}\nclass DebugRenderer2 {\n    /**\n     * @param {?} delegate\n     */\n    constructor(delegate) {\n        this.delegate = delegate;\n        /**\n         * Factory function used to create a `DebugContext` when a node is created.\n         *\n         * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n         *\n         * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n         * or a Render context.\n         */\n        this.debugContextFactory = getCurrentDebugContext;\n        this.data = this.delegate.data;\n    }\n    /**\n     * @private\n     * @param {?} nativeElement\n     * @return {?}\n     */\n    createDebugContext(nativeElement) { return this.debugContextFactory(nativeElement); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    destroyNode(node) {\n        removeDebugNodeFromIndex((/** @type {?} */ (getDebugNode(node))));\n        if (this.delegate.destroyNode) {\n            this.delegate.destroyNode(node);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    destroy() { this.delegate.destroy(); }\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    createElement(name, namespace) {\n        /** @type {?} */\n        const el = this.delegate.createElement(name, namespace);\n        /** @type {?} */\n        const debugCtx = this.createDebugContext(el);\n        if (debugCtx) {\n            /** @type {?} */\n            const debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);\n            ((/** @type {?} */ (debugEl))).name = name;\n            indexDebugNode(debugEl);\n        }\n        return el;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createComment(value) {\n        /** @type {?} */\n        const comment = this.delegate.createComment(value);\n        /** @type {?} */\n        const debugCtx = this.createDebugContext(comment);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));\n        }\n        return comment;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    createText(value) {\n        /** @type {?} */\n        const text = this.delegate.createText(value);\n        /** @type {?} */\n        const debugCtx = this.createDebugContext(text);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));\n        }\n        return text;\n    }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    appendChild(parent, newChild) {\n        /** @type {?} */\n        const debugEl = getDebugNode(parent);\n        /** @type {?} */\n        const debugChildEl = getDebugNode(newChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.addChild(debugChildEl);\n        }\n        this.delegate.appendChild(parent, newChild);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    insertBefore(parent, newChild, refChild) {\n        /** @type {?} */\n        const debugEl = getDebugNode(parent);\n        /** @type {?} */\n        const debugChildEl = getDebugNode(newChild);\n        /** @type {?} */\n        const debugRefEl = (/** @type {?} */ (getDebugNode(refChild)));\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.insertBefore(debugRefEl, debugChildEl);\n        }\n        this.delegate.insertBefore(parent, newChild, refChild);\n    }\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    removeChild(parent, oldChild) {\n        /** @type {?} */\n        const debugEl = getDebugNode(parent);\n        /** @type {?} */\n        const debugChildEl = getDebugNode(oldChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.removeChild(debugChildEl);\n        }\n        this.delegate.removeChild(parent, oldChild);\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    selectRootElement(selectorOrNode, preserveContent) {\n        /** @type {?} */\n        const el = this.delegate.selectRootElement(selectorOrNode, preserveContent);\n        /** @type {?} */\n        const debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));\n        }\n        return el;\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    setAttribute(el, name, value, namespace) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            /** @type {?} */\n            const fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = value;\n        }\n        this.delegate.setAttribute(el, name, value, namespace);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    removeAttribute(el, name, namespace) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            /** @type {?} */\n            const fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = null;\n        }\n        this.delegate.removeAttribute(el, name, namespace);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    addClass(el, name) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.classes[name] = true;\n        }\n        this.delegate.addClass(el, name);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    removeClass(el, name) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.classes[name] = false;\n        }\n        this.delegate.removeClass(el, name);\n    }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    setStyle(el, style, value, flags) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.styles[style] = value;\n        }\n        this.delegate.setStyle(el, style, value, flags);\n    }\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    removeStyle(el, style, flags) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.styles[style] = null;\n        }\n        this.delegate.removeStyle(el, style, flags);\n    }\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    setProperty(el, name, value) {\n        /** @type {?} */\n        const debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.properties[name] = value;\n        }\n        this.delegate.setProperty(el, name, value);\n    }\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    listen(target, eventName, callback) {\n        if (typeof target !== 'string') {\n            /** @type {?} */\n            const debugEl = getDebugNode(target);\n            if (debugEl) {\n                debugEl.listeners.push(new EventListener(eventName, callback));\n            }\n        }\n        return this.delegate.listen(target, eventName, callback);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    parentNode(node) { return this.delegate.parentNode(node); }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    nextSibling(node) { return this.delegate.nextSibling(node); }\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    setValue(node, value) { return this.delegate.setValue(node, value); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} override\n * @return {?}\n */\nfunction overrideProvider(override) {\n    initServicesIfNeeded();\n    return Services.overrideProvider(override);\n}\n/**\n * @param {?} comp\n * @param {?} componentFactory\n * @return {?}\n */\nfunction overrideComponentView(comp, componentFactory) {\n    initServicesIfNeeded();\n    return Services.overrideComponentView(comp, componentFactory);\n}\n/**\n * @return {?}\n */\nfunction clearOverrides() {\n    initServicesIfNeeded();\n    return Services.clearOverrides();\n}\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\n/**\n * @param {?} ngModuleType\n * @param {?} bootstrapComponents\n * @param {?} defFactory\n * @return {?}\n */\nfunction createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction cloneNgModuleDefinition(def) {\n    /** @type {?} */\n    const providers = Array.from(def.providers);\n    /** @type {?} */\n    const modules = Array.from(def.modules);\n    /** @type {?} */\n    const providersByKey = {};\n    for (const key in def.providersByKey) {\n        providersByKey[key] = def.providersByKey[key];\n    }\n    return {\n        factory: def.factory,\n        isRoot: def.isRoot, providers, modules, providersByKey,\n    };\n}\nclass NgModuleFactory_ extends NgModuleFactory {\n    /**\n     * @param {?} moduleType\n     * @param {?} _bootstrapComponents\n     * @param {?} _ngModuleDefFactory\n     */\n    constructor(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        super();\n        this.moduleType = moduleType;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._ngModuleDefFactory = _ngModuleDefFactory;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    create(parentInjector) {\n        initServicesIfNeeded();\n        // Clone the NgModuleDefinition so that any tree shakeable provider definition\n        // added to this instance of the NgModuleRef doesn't affect the cached copy.\n        // See https://github.com/angular/angular/issues/25018.\n        /** @type {?} */\n        const def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));\n        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APPLICATION_MODULE_PROVIDERS as ɵangular_packages_core_core_t, _iterableDiffersFactory as ɵangular_packages_core_core_q, _keyValueDiffersFactory as ɵangular_packages_core_core_r, _localeFactory as ɵangular_packages_core_core_s, _appIdRandomProviderFactory as ɵangular_packages_core_core_h, DefaultIterableDifferFactory as ɵangular_packages_core_core_o, DefaultKeyValueDifferFactory as ɵangular_packages_core_core_p, DebugElement__PRE_R3__ as ɵangular_packages_core_core_n, DebugNode__PRE_R3__ as ɵangular_packages_core_core_m, NullInjector as ɵangular_packages_core_core_c, injectInjectorOnly as ɵangular_packages_core_core_d, ReflectiveInjector_ as ɵangular_packages_core_core_e, ReflectiveDependency as ɵangular_packages_core_core_f, resolveReflectiveProviders as ɵangular_packages_core_core_g, getModuleFactory__PRE_R3__ as ɵangular_packages_core_core_l, wtfEnabled as ɵangular_packages_core_core_u, createScope as ɵangular_packages_core_core_w, detectWTF as ɵangular_packages_core_core_v, endTimeRange as ɵangular_packages_core_core_z, leave as ɵangular_packages_core_core_x, startTimeRange as ɵangular_packages_core_core_y, injectAttributeImpl as ɵangular_packages_core_core_bc, NG_INJECTABLE_DEF as ɵangular_packages_core_core_bj, getLView as ɵangular_packages_core_core_bd, getPreviousOrParentTNode as ɵangular_packages_core_core_be, nextContextImpl as ɵangular_packages_core_core_bf, BoundPlayerFactory as ɵangular_packages_core_core_bi, loadInternal as ɵangular_packages_core_core_bm, createElementRef as ɵangular_packages_core_core_i, createTemplateRef as ɵangular_packages_core_core_j, createViewRef as ɵangular_packages_core_core_k, makeParamDecorator as ɵangular_packages_core_core_a, makePropDecorator as ɵangular_packages_core_core_b, getClosureSafeProperty as ɵangular_packages_core_core_bk, _def as ɵangular_packages_core_core_ba, DebugContext as ɵangular_packages_core_core_bb, createPlatform, assertPlatform, destroyPlatform, getPlatform, PlatformRef, ApplicationRef, createPlatformFactory, NgProbeToken, enableProdMode, isDevMode, APP_ID, PACKAGE_ROOT_URL, PLATFORM_INITIALIZER, PLATFORM_ID, APP_BOOTSTRAP_LISTENER, APP_INITIALIZER, ApplicationInitStatus, DebugElement, DebugNode, asNativeElements, getDebugNode, Testability, TestabilityRegistry, setTestabilityGetter, TRANSLATIONS, TRANSLATIONS_FORMAT, LOCALE_ID, MissingTranslationStrategy, ApplicationModule, wtfCreateScope, wtfLeave, wtfStartTimeRange, wtfEndTimeRange, Type, EventEmitter, ErrorHandler, Sanitizer, SecurityContext, ANALYZE_FOR_ENTRY_COMPONENTS, Attribute, ContentChild, ContentChildren, Query, ViewChild, ViewChildren, Component, Directive, HostBinding, HostListener, Input, Output, Pipe, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, NgModule, ViewEncapsulation, Version, VERSION, defineInjectable, defineInjector, forwardRef, resolveForwardRef, Injectable, INJECTOR$1 as INJECTOR, Injector, inject, inject as ɵinject, InjectFlags, ReflectiveInjector, createInjector, ResolvedReflectiveFactory, ReflectiveKey, InjectionToken, Inject, Optional, Self, SkipSelf, Host, NgZone, NoopNgZone as ɵNoopNgZone, RenderComponentType, Renderer, Renderer2, RendererFactory2, RendererStyleFlags2, RootRenderer, COMPILER_OPTIONS, Compiler, CompilerFactory, ModuleWithComponentFactories, ComponentFactory, ComponentFactory as ɵComponentFactory, ComponentRef, ComponentFactoryResolver, ElementRef, NgModuleFactory, NgModuleRef, NgModuleFactoryLoader, getModuleFactory, QueryList$1 as QueryList, SystemJsNgModuleLoader, SystemJsNgModuleLoaderConfig, TemplateRef, ViewContainerRef, EmbeddedViewRef, ViewRef$1 as ViewRef, ChangeDetectionStrategy, ChangeDetectorRef, DefaultIterableDiffer, IterableDiffers, KeyValueDiffers, SimpleChange, WrappedValue, platformCore, ALLOW_MULTIPLE_PLATFORMS as ɵALLOW_MULTIPLE_PLATFORMS, APP_ID_RANDOM_PROVIDER as ɵAPP_ID_RANDOM_PROVIDER, defaultIterableDiffers as ɵdefaultIterableDiffers, defaultKeyValueDiffers as ɵdefaultKeyValueDiffers, devModeEqual as ɵdevModeEqual, isListLikeIterable as ɵisListLikeIterable, ChangeDetectorStatus as ɵChangeDetectorStatus, isDefaultChangeDetectionStrategy as ɵisDefaultChangeDetectionStrategy, Console as ɵConsole, getInjectableDef as ɵgetInjectableDef, setCurrentInjector as ɵsetCurrentInjector, APP_ROOT as ɵAPP_ROOT, ivyEnabled as ɵivyEnabled, CodegenComponentFactoryResolver as ɵCodegenComponentFactoryResolver, resolveComponentResources as ɵresolveComponentResources, ReflectionCapabilities as ɵReflectionCapabilities, RenderDebugInfo as ɵRenderDebugInfo, _sanitizeHtml as ɵ_sanitizeHtml, _sanitizeStyle as ɵ_sanitizeStyle, _sanitizeUrl as ɵ_sanitizeUrl, _global as ɵglobal, looseIdentical as ɵlooseIdentical, stringify as ɵstringify, makeDecorator as ɵmakeDecorator, isObservable as ɵisObservable, isPromise as ɵisPromise, clearOverrides as ɵclearOverrides, initServicesIfNeeded as ɵinitServicesIfNeeded, overrideComponentView as ɵoverrideComponentView, overrideProvider as ɵoverrideProvider, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR$1 as ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, defineBase as ɵdefineBase, defineComponent as ɵdefineComponent, defineDirective as ɵdefineDirective, definePipe as ɵdefinePipe, defineNgModule as ɵdefineNgModule, detectChanges as ɵdetectChanges, renderComponent as ɵrenderComponent, ComponentFactory$1 as ɵRender3ComponentFactory, ComponentRef$1 as ɵRender3ComponentRef, directiveInject as ɵdirectiveInject, injectAttribute as ɵinjectAttribute, getFactoryOf as ɵgetFactoryOf, getInheritedFactory as ɵgetInheritedFactory, templateRefExtractor as ɵtemplateRefExtractor, ProvidersFeature as ɵProvidersFeature, InheritDefinitionFeature as ɵInheritDefinitionFeature, NgOnChangesFeature as ɵNgOnChangesFeature, LifecycleHooksFeature as ɵLifecycleHooksFeature, NgModuleRef$1 as ɵRender3NgModuleRef, markDirty as ɵmarkDirty, NgModuleFactory$1 as ɵNgModuleFactory, NO_CHANGE as ɵNO_CHANGE, container as ɵcontainer, nextContext as ɵnextContext, elementStart as ɵelementStart, namespaceHTML as ɵnamespaceHTML, namespaceMathML as ɵnamespaceMathML, namespaceSVG as ɵnamespaceSVG, element as ɵelement, listener as ɵlistener, text as ɵtext, embeddedViewStart as ɵembeddedViewStart, query as ɵquery, registerContentQuery as ɵregisterContentQuery, projection as ɵprojection, bind as ɵbind, interpolation1 as ɵinterpolation1, interpolation2 as ɵinterpolation2, interpolation3 as ɵinterpolation3, interpolation4 as ɵinterpolation4, interpolation5 as ɵinterpolation5, interpolation6 as ɵinterpolation6, interpolation7 as ɵinterpolation7, interpolation8 as ɵinterpolation8, interpolationV as ɵinterpolationV, pipeBind1 as ɵpipeBind1, pipeBind2 as ɵpipeBind2, pipeBind3 as ɵpipeBind3, pipeBind4 as ɵpipeBind4, pipeBindV as ɵpipeBindV, pureFunction0 as ɵpureFunction0, pureFunction1 as ɵpureFunction1, pureFunction2 as ɵpureFunction2, pureFunction3 as ɵpureFunction3, pureFunction4 as ɵpureFunction4, pureFunction5 as ɵpureFunction5, pureFunction6 as ɵpureFunction6, pureFunction7 as ɵpureFunction7, pureFunction8 as ɵpureFunction8, pureFunctionV as ɵpureFunctionV, getCurrentView as ɵgetCurrentView, getHostElement as ɵgetHostElement, restoreView as ɵrestoreView, containerRefreshStart as ɵcontainerRefreshStart, containerRefreshEnd as ɵcontainerRefreshEnd, queryRefresh as ɵqueryRefresh, loadQueryList as ɵloadQueryList, elementEnd as ɵelementEnd, elementProperty as ɵelementProperty, componentHostSyntheticProperty as ɵcomponentHostSyntheticProperty, projectionDef as ɵprojectionDef, reference as ɵreference, enableBindings as ɵenableBindings, disableBindings as ɵdisableBindings, allocHostVars as ɵallocHostVars, elementAttribute as ɵelementAttribute, elementContainerStart as ɵelementContainerStart, elementContainerEnd as ɵelementContainerEnd, elementStyling as ɵelementStyling, elementHostAttrs as ɵelementHostAttrs, elementStylingMap as ɵelementStylingMap, elementStyleProp as ɵelementStyleProp, elementStylingApply as ɵelementStylingApply, elementClassProp as ɵelementClassProp, textBinding as ɵtextBinding, template as ɵtemplate, embeddedViewEnd as ɵembeddedViewEnd, store as ɵstore, load as ɵload, pipe as ɵpipe, whenRendered as ɵwhenRendered, i18n as ɵi18n, i18nAttributes as ɵi18nAttributes, i18nExp as ɵi18nExp, i18nStart as ɵi18nStart, i18nEnd as ɵi18nEnd, i18nApply as ɵi18nApply, i18nPostprocess as ɵi18nPostprocess, setClassMetadata as ɵsetClassMetadata, compileComponent as ɵcompileComponent, compileDirective as ɵcompileDirective, compileNgModule as ɵcompileNgModule, compileNgModuleDefs as ɵcompileNgModuleDefs, patchComponentDefWithScope as ɵpatchComponentDefWithScope, resetCompiledComponents as ɵresetCompiledComponents, compilePipe as ɵcompilePipe, sanitizeHtml as ɵsanitizeHtml, sanitizeStyle as ɵsanitizeStyle, defaultStyleSanitizer as ɵdefaultStyleSanitizer, sanitizeScript as ɵsanitizeScript, sanitizeUrl as ɵsanitizeUrl, sanitizeResourceUrl as ɵsanitizeResourceUrl, bypassSanitizationTrustHtml as ɵbypassSanitizationTrustHtml, bypassSanitizationTrustStyle as ɵbypassSanitizationTrustStyle, bypassSanitizationTrustScript as ɵbypassSanitizationTrustScript, bypassSanitizationTrustUrl as ɵbypassSanitizationTrustUrl, bypassSanitizationTrustResourceUrl as ɵbypassSanitizationTrustResourceUrl, getLContext as ɵgetLContext, bindPlayerFactory as ɵbindPlayerFactory, addPlayer as ɵaddPlayer, getPlayers as ɵgetPlayers, compileNgModuleFactory__POST_R3__ as ɵcompileNgModuleFactory__POST_R3__, SWITCH_COMPILE_COMPONENT__POST_R3__ as ɵSWITCH_COMPILE_COMPONENT__POST_R3__, SWITCH_COMPILE_DIRECTIVE__POST_R3__ as ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__, SWITCH_COMPILE_PIPE__POST_R3__ as ɵSWITCH_COMPILE_PIPE__POST_R3__, SWITCH_COMPILE_NGMODULE__POST_R3__ as ɵSWITCH_COMPILE_NGMODULE__POST_R3__, getDebugNode__POST_R3__ as ɵgetDebugNode__POST_R3__, SWITCH_COMPILE_INJECTABLE__POST_R3__ as ɵSWITCH_COMPILE_INJECTABLE__POST_R3__, SWITCH_IVY_ENABLED__POST_R3__ as ɵSWITCH_IVY_ENABLED__POST_R3__, SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ as ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__, Compiler_compileModuleSync__POST_R3__ as ɵCompiler_compileModuleSync__POST_R3__, Compiler_compileModuleAsync__POST_R3__ as ɵCompiler_compileModuleAsync__POST_R3__, Compiler_compileModuleAndAllComponentsSync__POST_R3__ as ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__, Compiler_compileModuleAndAllComponentsAsync__POST_R3__ as ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__, SWITCH_ELEMENT_REF_FACTORY__POST_R3__ as ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__, SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ as ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__, SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ as ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__, SWITCH_RENDERER2_FACTORY__POST_R3__ as ɵSWITCH_RENDERER2_FACTORY__POST_R3__, getModuleFactory__POST_R3__ as ɵgetModuleFactory__POST_R3__, publishGlobalUtil as ɵpublishGlobalUtil, publishDefaultGlobalUtils as ɵpublishDefaultGlobalUtils, SWITCH_INJECTOR_FACTORY__POST_R3__ as ɵSWITCH_INJECTOR_FACTORY__POST_R3__, registerModuleFactory as ɵregisterModuleFactory, EMPTY_ARRAY$4 as ɵEMPTY_ARRAY, EMPTY_MAP as ɵEMPTY_MAP, anchorDef as ɵand, createComponentFactory as ɵccf, createNgModuleFactory as ɵcmf, createRendererType2 as ɵcrt, directiveDef as ɵdid, elementDef as ɵeld, elementEventFullName as ɵelementEventFullName, getComponentViewDefinitionFactory as ɵgetComponentViewDefinitionFactory, inlineInterpolate as ɵinlineInterpolate, interpolate as ɵinterpolate, moduleDef as ɵmod, moduleProvideDef as ɵmpd, ngContentDef as ɵncd, nodeValue as ɵnov, pipeDef as ɵpid, providerDef as ɵprd, pureArrayDef as ɵpad, pureObjectDef as ɵpod, purePipeDef as ɵppd, queryDef as ɵqud, textDef as ɵted, unwrapValue$1 as ɵunv, viewDef as ɵvid };\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,OAAO,EAAEC,YAAY,EAAEC,UAAU,EAAEC,KAAK,QAAQ,MAAM;AAC/D,SAASC,KAAK,QAAQ,gBAAgB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,sBAAsB,CAACC,wBAAwB,EAAE;EACtD,KAAK,IAAIC,GAAG,IAAID,wBAAwB,EAAE;IACtC,IAAIA,wBAAwB,CAACC,GAAG,CAAC,KAAM,gBAAkBF,sBAAwB,EAAE;MAC/E,OAAOE,GAAG;IACd;EACJ;EACA,MAAMC,KAAK,CAAC,mDAAmD,CAAC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAc,CAACC,MAAM,EAAEC,MAAM,EAAE;EACpC,KAAK,MAAMJ,GAAG,IAAII,MAAM,EAAE;IACtB,IAAIA,MAAM,CAACC,cAAc,CAACL,GAAG,CAAC,IAAI,CAACG,MAAM,CAACE,cAAc,CAACL,GAAG,CAAC,EAAE;MAC3DG,MAAM,CAACH,GAAG,CAAC,GAAGI,MAAM,CAACJ,GAAG,CAAC;IAC7B;EACJ;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMM,gBAAgB,GAAGR,sBAAsB,CAAC;EAAES,cAAc,EAAET;AAAuB,CAAC,CAAC;AAC3F;AACA,MAAMU,gBAAgB,GAAGV,sBAAsB,CAAC;EAAEW,cAAc,EAAEX;AAAuB,CAAC,CAAC;AAC3F;AACA,MAAMY,iBAAiB,GAAGZ,sBAAsB,CAAC;EAAEa,eAAe,EAAEb;AAAuB,CAAC,CAAC;AAC7F;AACA,MAAMc,eAAe,GAAGd,sBAAsB,CAAC;EAAEe,aAAa,EAAEf;AAAuB,CAAC,CAAC;AACzF;AACA,MAAMgB,WAAW,GAAGhB,sBAAsB,CAAC;EAAEiB,SAAS,EAAEjB;AAAuB,CAAC,CAAC;AACjF;AACA,MAAMkB,aAAa,GAAGlB,sBAAsB,CAAC;EAAEmB,WAAW,EAAEnB;AAAuB,CAAC,CAAC;AACrF;AACA,MAAMoB,WAAW,GAAGpB,sBAAsB,CAAC;EAAEqB,SAAS,EAAErB;AAAuB,CAAC,CAAC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsB,aAAa,GAAGtB,sBAAsB,CAAC;EAAEuB,iBAAiB,EAAEvB;AAAuB,CAAC,CAAC;;AAE3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwB,gBAAgB,CAACC,IAAI,EAAE;EAC5B,OAAQ,kBAAoB,gBAAkB;MAC1CC,UAAU,EAAG,gBAAkBD,IAAI,CAACC,UAAU,IAAM,IAAI;MAAEC,OAAO,EAAEF,IAAI,CAACE,OAAO;MAAEC,KAAK,EAAEC;IAC5F;EAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAc,CAACC,OAAO,EAAE;EAC7B,OAAQ,kBAAoB,gBAAkB;MAC1CJ,OAAO,EAAEI,OAAO,CAACJ,OAAO;MAAEK,SAAS,EAAED,OAAO,CAACC,SAAS,IAAI,EAAE;MAAEC,OAAO,EAAEF,OAAO,CAACE,OAAO,IAAI;IAC9F;EAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgB,CAACC,IAAI,EAAE;EAC5B,OAAOA,IAAI,IAAIA,IAAI,CAAC5B,cAAc,CAACK,iBAAiB,CAAC,GAAK,gBAAkBuB,IAAI,CAAIvB,iBAAiB,CAAC,GAAG,IAAI;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASwB,cAAc,CAACD,IAAI,EAAE;EAC1B,OAAOA,IAAI,IAAIA,IAAI,CAAC5B,cAAc,CAACO,eAAe,CAAC,GAAK,gBAAkBqB,IAAI,CAAIrB,eAAe,CAAC,GAAG,IAAI;AAC7G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuB,cAAc,CAAC;EACjB;AACJ;AACA;AACA;EACIC,WAAW,CAACC,KAAK,EAAER,OAAO,EAAE;IACxB,IAAI,CAACQ,KAAK,GAAGA,KAAK;IAClB;AACR;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,gBAAgB;IACtC,IAAIT,OAAO,KAAKF,SAAS,EAAE;MACvB,kBAAmB,IAAI,CAAChB,eAAe,GAAGW,gBAAgB,CAAC;QACvDE,UAAU,EAAEK,OAAO,CAACL,UAAU,IAAI,MAAM;QACxCC,OAAO,EAAEI,OAAO,CAACJ;MACrB,CAAC,CAAC;IACN,CAAC,MACI;MACD,kBAAmB,IAAI,CAACd,eAAe,GAAGgB,SAAS;IACvD;EACJ;EACA;AACJ;AACA;EACIY,QAAQ,GAAG;IAAE,OAAQ,kBAAiB,IAAI,CAACF,KAAM,EAAC;EAAE;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMG,WAAW,GAAG,iBAAiB;AACrC;AACA,MAAMC,UAAU,GAAG,gBAAgB;AACnC;AACA,MAAMC,aAAa,GAAG,oBAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAa,CAACC,IAAI,EAAEC,KAAK,EAAEC,WAAW,EAAEC,oBAAoB,EAAEC,MAAM,EAAE;EAC3E;EACA,MAAMC,QAAQ,GAAGC,gBAAgB,CAACL,KAAK,CAAC;EACxC;AACJ;AACA;AACA;EACI,SAASM,gBAAgB,CAAC,GAAGC,IAAI,EAAE;IAC/B,IAAI,IAAI,YAAYD,gBAAgB,EAAE;MAClCF,QAAQ,CAACI,IAAI,CAAC,IAAI,EAAE,GAAGD,IAAI,CAAC;MAC5B,OAAO,IAAI;IACf;IACA;IACA,MAAME,kBAAkB,GAAG,IAAM,gBAAkBH,gBAAgB,CAAI,GAAGC,IAAI,CAAC;IAC/E,OAAO,SAASG,aAAa,CAACC,GAAG,EAAE;MAC/B,IAAIR,MAAM,EACNA,MAAM,CAACQ,GAAG,EAAE,GAAGJ,IAAI,CAAC;MACxB;MACA;MACA;MACA,MAAMK,WAAW,GAAGD,GAAG,CAACnD,cAAc,CAACmC,WAAW,CAAC,GAC7C,gBAAkBgB,GAAG,CAAIhB,WAAW,CAAC,GACvCkB,MAAM,CAACC,cAAc,CAACH,GAAG,EAAEhB,WAAW,EAAE;QAAEd,KAAK,EAAE;MAAG,CAAC,CAAC,CAACc,WAAW,CAAC;MACvEiB,WAAW,CAACG,IAAI,CAACN,kBAAkB,CAAC;MACpC,IAAIP,oBAAoB,EACpBA,oBAAoB,CAACS,GAAG,CAAC;MAC7B,OAAOA,GAAG;IACd,CAAC;EACL;EACA,IAAIV,WAAW,EAAE;IACbK,gBAAgB,CAACU,SAAS,GAAGH,MAAM,CAACI,MAAM,CAAChB,WAAW,CAACe,SAAS,CAAC;EACrE;EACAV,gBAAgB,CAACU,SAAS,CAACvB,cAAc,GAAGM,IAAI;EAC9C,gBAAkBO,gBAAgB,CAAIY,aAAa,GAAGZ,gBAAgB;EACxE,OAAQ,iBAAkBA;EAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA,SAASD,gBAAgB,CAACL,KAAK,EAAE;EAC7B,OAAO,SAASmB,IAAI,CAAC,GAAGZ,IAAI,EAAE;IAC1B,IAAIP,KAAK,EAAE;MACP;MACA,MAAMoB,MAAM,GAAGpB,KAAK,CAAC,GAAGO,IAAI,CAAC;MAC7B,KAAK,MAAMc,QAAQ,IAAID,MAAM,EAAE;QAC3B,IAAI,CAACC,QAAQ,CAAC,GAAGD,MAAM,CAACC,QAAQ,CAAC;MACrC;IACJ;EACJ,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkB,CAACvB,IAAI,EAAEC,KAAK,EAAEC,WAAW,EAAE;EAClD;EACA,MAAMG,QAAQ,GAAGC,gBAAgB,CAACL,KAAK,CAAC;EACxC;AACJ;AACA;AACA;EACI,SAASuB,qBAAqB,CAAC,GAAGhB,IAAI,EAAE;IACpC,IAAI,IAAI,YAAYgB,qBAAqB,EAAE;MACvCnB,QAAQ,CAACoB,KAAK,CAAC,IAAI,EAAEjB,IAAI,CAAC;MAC1B,OAAO,IAAI;IACf;IACA;IACA,MAAME,kBAAkB,GAAG,IAAM,gBAAkBc,qBAAqB,CAAI,GAAGhB,IAAI,CAAC;IAClF,gBAAkBkB,cAAc,CAAIC,UAAU,GAAGjB,kBAAkB;IACrE,OAAOgB,cAAc;IACrB;AACR;AACA;AACA;AACA;AACA;IACQ,SAASA,cAAc,CAACd,GAAG,EAAEgB,SAAS,EAAEC,KAAK,EAAE;MAC3C;MACA;MACA;MACA,MAAMC,UAAU,GAAGlB,GAAG,CAACnD,cAAc,CAACoC,UAAU,CAAC,GAC3C,gBAAkBe,GAAG,CAAIf,UAAU,CAAC,GACtCiB,MAAM,CAACC,cAAc,CAACH,GAAG,EAAEf,UAAU,EAAE;QAAEf,KAAK,EAAE;MAAG,CAAC,CAAC,CAACe,UAAU,CAAC;MACrE;MACA;MACA,OAAOiC,UAAU,CAACC,MAAM,IAAIF,KAAK,EAAE;QAC/BC,UAAU,CAACd,IAAI,CAAC,IAAI,CAAC;MACzB;MACA,CAACc,UAAU,CAACD,KAAK,CAAC,GAAGC,UAAU,CAACD,KAAK,CAAC,IAAI,EAAE,EAAEb,IAAI,CAACN,kBAAkB,CAAC;MACtE,OAAOE,GAAG;IACd;EACJ;EACA,IAAIV,WAAW,EAAE;IACbsB,qBAAqB,CAACP,SAAS,GAAGH,MAAM,CAACI,MAAM,CAAChB,WAAW,CAACe,SAAS,CAAC;EAC1E;EACAO,qBAAqB,CAACP,SAAS,CAACvB,cAAc,GAAGM,IAAI;EACnD,gBAAkBwB,qBAAqB,CAAIL,aAAa,GAAGK,qBAAqB;EAClF,OAAOA,qBAAqB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,iBAAiB,CAAChC,IAAI,EAAEC,KAAK,EAAEC,WAAW,EAAEC,oBAAoB,EAAE;EACvE;EACA,MAAME,QAAQ,GAAGC,gBAAgB,CAACL,KAAK,CAAC;EACxC;AACJ;AACA;AACA;EACI,SAASgC,oBAAoB,CAAC,GAAGzB,IAAI,EAAE;IACnC,IAAI,IAAI,YAAYyB,oBAAoB,EAAE;MACtC5B,QAAQ,CAACoB,KAAK,CAAC,IAAI,EAAEjB,IAAI,CAAC;MAC1B,OAAO,IAAI;IACf;IACA;IACA,MAAM0B,iBAAiB,GAAG,IAAM,gBAAkBD,oBAAoB,CAAI,GAAGzB,IAAI,CAAC;IAClF;AACR;AACA;AACA;AACA;IACQ,SAAS2B,aAAa,CAAC5E,MAAM,EAAEyC,IAAI,EAAE;MACjC;MACA,MAAMR,WAAW,GAAGjC,MAAM,CAACiC,WAAW;MACtC;MACA;MACA;MACA,MAAM4C,IAAI,GAAG5C,WAAW,CAAC/B,cAAc,CAACqC,aAAa,CAAC,GAChD,gBAAkBN,WAAW,CAAIM,aAAa,CAAC,GACjDgB,MAAM,CAACC,cAAc,CAACvB,WAAW,EAAEM,aAAa,EAAE;QAAEhB,KAAK,EAAE,CAAC;MAAE,CAAC,CAAC,CAACgB,aAAa,CAAC;MACnFsC,IAAI,CAACpC,IAAI,CAAC,GAAGoC,IAAI,CAAC3E,cAAc,CAACuC,IAAI,CAAC,IAAIoC,IAAI,CAACpC,IAAI,CAAC,IAAI,EAAE;MAC1DoC,IAAI,CAACpC,IAAI,CAAC,CAACqC,OAAO,CAACH,iBAAiB,CAAC;MACrC,IAAI/B,oBAAoB,EACpBA,oBAAoB,CAAC5C,MAAM,EAAEyC,IAAI,EAAE,GAAGQ,IAAI,CAAC;IACnD;IACA,OAAO2B,aAAa;EACxB;EACA,IAAIjC,WAAW,EAAE;IACb+B,oBAAoB,CAAChB,SAAS,GAAGH,MAAM,CAACI,MAAM,CAAChB,WAAW,CAACe,SAAS,CAAC;EACzE;EACAgB,oBAAoB,CAAChB,SAAS,CAACvB,cAAc,GAAGM,IAAI;EAClD,gBAAkBiC,oBAAoB,CAAId,aAAa,GAAGc,oBAAoB;EAChF,OAAOA,oBAAoB;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,4BAA4B,GAAG,IAAI/C,cAAc,CAAC,2BAA2B,CAAC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgD,SAAS,GAAGhB,kBAAkB,CAAC,WAAW,EAAGiB,aAAa,KAAM;EAAEA;AAAc,CAAC,CAAC,CAAC;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,CAAC;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAGV,iBAAiB,CAAC,iBAAiB,EAAE,CAACW,QAAQ,EAAEC,IAAI,GAAG,CAAC,CAAC,KAAM9B,MAAM,CAAC+B,MAAM,CAAC;EAAEF,QAAQ;EAAEG,KAAK,EAAE,KAAK;EAAEC,WAAW,EAAE,KAAK;EAAEC,WAAW,EAAE;AAAM,CAAC,EAAEJ,IAAI,CAAE,EAAEH,KAAK,CAAC;AACvL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMQ,YAAY,GAAGjB,iBAAiB,CAAC,cAAc,EAAE,CAACW,QAAQ,EAAEC,IAAI,GAAG,CAAC,CAAC,KAAM9B,MAAM,CAAC+B,MAAM,CAAC;EAAEF,QAAQ;EAAEG,KAAK,EAAE,IAAI;EAAEC,WAAW,EAAE,KAAK;EAAEC,WAAW,EAAE;AAAK,CAAC,EAAEJ,IAAI,CAAE,EAAEH,KAAK,CAAC;AAC/K;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMS,YAAY,GAAGlB,iBAAiB,CAAC,cAAc,EAAE,CAACW,QAAQ,EAAEC,IAAI,GAAG,CAAC,CAAC,KAAM9B,MAAM,CAAC+B,MAAM,CAAC;EAAEF,QAAQ;EAAEG,KAAK,EAAE,KAAK;EAAEC,WAAW,EAAE,IAAI;EAAEC,WAAW,EAAE;AAAK,CAAC,EAAEJ,IAAI,CAAE,EAAEH,KAAK,CAAC;AAC/K;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMU,SAAS,GAAGnB,iBAAiB,CAAC,WAAW,EAAE,CAACW,QAAQ,EAAEC,IAAI,KAAM9B,MAAM,CAAC+B,MAAM,CAAC;EAAEF,QAAQ;EAAEG,KAAK,EAAE,IAAI;EAAEC,WAAW,EAAE,IAAI;EAAEC,WAAW,EAAE;AAAK,CAAC,EAAEJ,IAAI,CAAE,EAAEH,KAAK,CAAC;;AAEnK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMW,uBAAuB,GAAG;EAC5B;AACJ;AACA;AACA;AACA;AACA;EACIC,MAAM,EAAE,CAAC;EACT;AACJ;AACA;AACA;EACIC,OAAO,EAAE;AACb,CAAC;AACDF,uBAAuB,CAACA,uBAAuB,CAACC,MAAM,CAAC,GAAG,QAAQ;AAClED,uBAAuB,CAACA,uBAAuB,CAACE,OAAO,CAAC,GAAG,SAAS;AACpE;AACA,MAAMC,oBAAoB,GAAG;EACzB;AACJ;AACA;AACA;EACIC,SAAS,EAAE,CAAC;EACZ;AACJ;AACA;AACA;EACIC,OAAO,EAAE,CAAC;EACV;AACJ;AACA;AACA;EACIC,WAAW,EAAE,CAAC;EACd;AACJ;AACA;AACA;EACIC,QAAQ,EAAE,CAAC;EACX;AACJ;AACA;AACA;AACA;EACIC,OAAO,EAAE,CAAC;EACV;AACJ;AACA;EACIC,SAAS,EAAE;AACf,CAAC;AACDN,oBAAoB,CAACA,oBAAoB,CAACC,SAAS,CAAC,GAAG,WAAW;AAClED,oBAAoB,CAACA,oBAAoB,CAACE,OAAO,CAAC,GAAG,SAAS;AAC9DF,oBAAoB,CAACA,oBAAoB,CAACG,WAAW,CAAC,GAAG,aAAa;AACtEH,oBAAoB,CAACA,oBAAoB,CAACI,QAAQ,CAAC,GAAG,UAAU;AAChEJ,oBAAoB,CAACA,oBAAoB,CAACK,OAAO,CAAC,GAAG,SAAS;AAC9DL,oBAAoB,CAACA,oBAAoB,CAACM,SAAS,CAAC,GAAG,WAAW;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gCAAgC,CAACC,uBAAuB,EAAE;EAC/D,OAAOA,uBAAuB,IAAI,IAAI,IAClCA,uBAAuB,KAAKX,uBAAuB,CAACE,OAAO;AACnE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMU,QAAQ,GAAG,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAM;AACxD;AACA,MAAMC,MAAM,GAAG,OAAOC,IAAI,KAAK,WAAW,IAAI,OAAOC,iBAAiB,KAAK,WAAW,IAClFD,IAAI,YAAYC,iBAAiB,IAAID,IAAI;AAC7C;AACA,MAAME,QAAQ,GAAG,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAM;AACxD;AACA;AACA;AACA,MAAMC,OAAO,GAAGF,QAAQ,IAAIL,QAAQ,IAAIE,MAAM;AAC9C;AACA,MAAMM,OAAO,GAAGC,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC;AAClC;AACA,IAAIC,eAAe,GAAG,IAAI;AAC1B;AACA;AACA;AACA,SAASC,iBAAiB,GAAG;EACzB,IAAI,CAACD,eAAe,EAAE;IAClB;IACA,MAAME,MAAM,GAAGN,OAAO,CAAC,QAAQ,CAAC;IAChC,IAAIM,MAAM,IAAIA,MAAM,CAACC,QAAQ,EAAE;MAC3BH,eAAe,GAAGE,MAAM,CAACC,QAAQ;IACrC,CAAC,MACI;MACD;MACA;MACA,MAAMC,IAAI,GAAGjE,MAAM,CAACkE,mBAAmB,CAACC,GAAG,CAAChE,SAAS,CAAC;MACtD,KAAK,IAAIiE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAAChD,MAAM,EAAE,EAAEmD,CAAC,EAAE;QAClC;QACA,MAAM9H,GAAG,GAAG2H,IAAI,CAACG,CAAC,CAAC;QACnB,IAAI9H,GAAG,KAAK,SAAS,IAAIA,GAAG,KAAK,MAAM,IACjC,gBAAkB6H,GAAG,CAAIhE,SAAS,CAAC7D,GAAG,CAAC,KAAK6H,GAAG,CAAChE,SAAS,CAAC,SAAS,CAAC,EAAE;UACxE0D,eAAe,GAAGvH,GAAG;QACzB;MACJ;IACJ;EACJ;EACA,OAAOuH,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA,SAASQ,iBAAiB,CAACC,EAAE,EAAE;EAC3B,IAAI,OAAOC,IAAI,KAAK,WAAW,EAAE;IAC7B;IACAb,OAAO,CAACc,IAAI,CAAC,MAAM;MAAEF,EAAE,IAAIA,EAAE,CAAC3D,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;IAAE,CAAC,CAAC;EACvD,CAAC,MACI;IACD4D,IAAI,CAACE,OAAO,CAACJ,iBAAiB,CAAC,mBAAmB,EAAEC,EAAE,CAAC;EAC3D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,cAAc,CAACC,CAAC,EAAEC,CAAC,EAAE;EAC1B,OAAOD,CAAC,KAAKC,CAAC,IAAI,OAAOD,CAAC,KAAK,QAAQ,IAAI,OAAOC,CAAC,KAAK,QAAQ,IAAIC,KAAK,CAACF,CAAC,CAAC,IAAIE,KAAK,CAACD,CAAC,CAAC;AAC5F;AACA;AACA;AACA;AACA;AACA,SAASE,SAAS,CAACC,KAAK,EAAE;EACtB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,OAAOA,KAAK;EAChB;EACA,IAAIA,KAAK,YAAYC,KAAK,EAAE;IACxB,OAAO,GAAG,GAAGD,KAAK,CAACE,GAAG,CAACH,SAAS,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG;EACtD;EACA,IAAIH,KAAK,IAAI,IAAI,EAAE;IACf,OAAO,EAAE,GAAGA,KAAK;EACrB;EACA,IAAIA,KAAK,CAACI,cAAc,EAAE;IACtB,OAAQ,GAAEJ,KAAK,CAACI,cAAe,EAAC;EACpC;EACA,IAAIJ,KAAK,CAAC7F,IAAI,EAAE;IACZ,OAAQ,GAAE6F,KAAK,CAAC7F,IAAK,EAAC;EAC1B;EACA;EACA,MAAMkG,GAAG,GAAGL,KAAK,CAAClG,QAAQ,EAAE;EAC5B,IAAIuG,GAAG,IAAI,IAAI,EAAE;IACb,OAAO,EAAE,GAAGA,GAAG;EACnB;EACA;EACA,MAAMC,YAAY,GAAGD,GAAG,CAACE,OAAO,CAAC,IAAI,CAAC;EACtC,OAAOD,YAAY,KAAK,CAAC,CAAC,GAAGD,GAAG,GAAGA,GAAG,CAACG,SAAS,CAAC,CAAC,EAAEF,YAAY,CAAC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,aAAa,CAAClB,EAAE,EAAE;EACvB,OAAO,EAAE,GAAG;IAAEzF,QAAQ,EAAEyF;EAAG,CAAC;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMmB,eAAe,GAAGrJ,sBAAsB,CAAC;EAAEqJ,eAAe,EAAErJ;AAAuB,CAAC,CAAC;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsJ,UAAU,CAACC,YAAY,EAAE;EAC5B,gBAAkBA,YAAY,CAAIF,eAAe,GAAGC,UAAU;EAC9D,gBAAkBC,YAAY,CAAI9G,QAAQ,GAAG,YAAY;IAAE,OAAOiG,SAAS,CAAC,IAAI,EAAE,CAAC;EAAE,CAAC;EACxF,OAAS,kBAAmB,gBAAkBa;EAAY;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiB,CAACrH,IAAI,EAAE;EAC7B;EACA,MAAM+F,EAAE,GAAG/F,IAAI;EACf,IAAI,OAAO+F,EAAE,KAAK,UAAU,IAAIA,EAAE,CAAC3H,cAAc,CAAC8I,eAAe,CAAC,IAC9DnB,EAAE,CAACmB,eAAe,KAAKC,UAAU,EAAE;IACnC,OAAOpB,EAAE,EAAE;EACf,CAAC,MACI;IACD,OAAO/F,IAAI;EACf;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsH,yBAAyB,CAACC,gBAAgB,EAAE;EACjD;EACA;EACA,MAAMC,UAAU,GAAG,EAAE;EACrB;EACA;EACA,MAAMC,MAAM,GAAG,IAAI7B,GAAG,EAAE;EACxB;AACJ;AACA;AACA;EACI,SAAS8B,qBAAqB,CAACC,GAAG,EAAE;IAChC;IACA,IAAIxC,OAAO,GAAGsC,MAAM,CAACG,GAAG,CAACD,GAAG,CAAC;IAC7B,IAAI,CAACxC,OAAO,EAAE;MACV;MACA,MAAM0C,IAAI,GAAGN,gBAAgB,CAACI,GAAG,CAAC;MAClCF,MAAM,CAACK,GAAG,CAACH,GAAG,EAAExC,OAAO,GAAG0C,IAAI,CAAC5B,IAAI,CAAC8B,cAAc,CAAC,CAAC;MACpDP,UAAU,CAAC7F,IAAI,CAACwD,OAAO,CAAC;IAC5B;IACA,OAAOA,OAAO;EAClB;EACA6C,gCAAgC,CAACC,OAAO,CAAEC,SAAS,IAAK;IACpD,IAAIA,SAAS,CAACC,WAAW,EAAE;MACvBT,qBAAqB,CAACQ,SAAS,CAACC,WAAW,CAAC,CAAClC,IAAI,CAAEmC,QAAQ,IAAK;QAC5DF,SAAS,CAACE,QAAQ,GAAGA,QAAQ;QAC7BF,SAAS,CAACC,WAAW,GAAGzI,SAAS;MACrC,CAAC,CAAC;IACN;IACA;IACA,MAAM2I,SAAS,GAAGH,SAAS,CAACG,SAAS;IACrC;IACA,MAAMC,MAAM,GAAGJ,SAAS,CAACI,MAAM,KAAKJ,SAAS,CAACI,MAAM,GAAG,EAAE,CAAC;IAC1D;IACA,MAAMC,WAAW,GAAGL,SAAS,CAACI,MAAM,CAAC5F,MAAM;IAC3C2F,SAAS,IAAIA,SAAS,CAACJ,OAAO,CAAC,CAACO,QAAQ,EAAEhG,KAAK,KAAK;MAChD8F,MAAM,CAAC3G,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;MACjB+F,qBAAqB,CAACc,QAAQ,CAAC,CAACvC,IAAI,CAAEwC,KAAK,IAAK;QAC5CH,MAAM,CAACC,WAAW,GAAG/F,KAAK,CAAC,GAAGiG,KAAK;QACnCJ,SAAS,CAACK,MAAM,CAACL,SAAS,CAACtB,OAAO,CAACyB,QAAQ,CAAC,EAAE,CAAC,CAAC;QAChD,IAAIH,SAAS,CAAC3F,MAAM,IAAI,CAAC,EAAE;UACvBwF,SAAS,CAACG,SAAS,GAAG3I,SAAS;QACnC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,CAAC;EACFsI,gCAAgC,CAACW,KAAK,EAAE;EACxC,OAAOvD,OAAO,CAACwD,GAAG,CAACpB,UAAU,CAAC,CAACvB,IAAI,CAAC,MAAM,IAAI,CAAC;AACnD;AACA;AACA,MAAM+B,gCAAgC,GAAG,IAAIa,GAAG,EAAE;AAClD;AACA;AACA;AACA;AACA,SAASC,wCAAwC,CAACC,QAAQ,EAAE;EACxD,IAAIC,wBAAwB,CAACD,QAAQ,CAAC,EAAE;IACpCf,gCAAgC,CAACiB,GAAG,CAACF,QAAQ,CAAC;EAClD;AACJ;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAwB,CAACd,SAAS,EAAE;EACzC,OAAOA,SAAS,CAACC,WAAW,IAAID,SAAS,CAACG,SAAS,IAAIH,SAAS,CAACG,SAAS,CAAC3F,MAAM;AACrF;AACA;AACA;AACA;AACA;AACA,SAASqF,cAAc,CAACmB,QAAQ,EAAE;EAC9B,OAAO,OAAOA,QAAQ,IAAI,QAAQ,GAAGA,QAAQ,GAAGA,QAAQ,CAACC,IAAI,EAAE;AACnE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG;EACtB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,QAAQ,EAAE,CAAC;EACX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAM,EAAE,CAAC;EACT;AACJ;AACA;EACIC,IAAI,EAAE,CAAC;EACP;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,SAAS,EAAE;AACf,CAAC;AACDJ,iBAAiB,CAACA,iBAAiB,CAACC,QAAQ,CAAC,GAAG,UAAU;AAC1DD,iBAAiB,CAACA,iBAAiB,CAACE,MAAM,CAAC,GAAG,QAAQ;AACtDF,iBAAiB,CAACA,iBAAiB,CAACG,IAAI,CAAC,GAAG,MAAM;AAClDH,iBAAiB,CAACA,iBAAiB,CAACI,SAAS,CAAC,GAAG,WAAW;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,0BAA0B,GAAG;EAClC;EACA,MAAMC,WAAW,GAAG;IAChBC,iBAAiB,EAAE,CAAC;IACpBC,KAAK,EAAE,CAAC;IACRC,KAAK,EAAE,CAAC;IACRC,sBAAsB,EAAE,CAAC;IACzBC,eAAe,EAAE,CAAC;IAClBC,qBAAqB,EAAE,CAAC;IACxBC,wBAAwB,EAAE,CAAC;IAC3BC,oBAAoB,EAAE,CAAC;IACvBC,uBAAuB,EAAE,CAAC;IAC1BC,mBAAmB,EAAE,CAAC;IACtBC,oBAAoB,EAAE,CAAC;IACvBC,gBAAgB,EAAE,CAAC;IACnBC,mBAAmB,EAAE,CAAC;IACtBC,gBAAgB,EAAE,CAAC;IACnBC,mBAAmB,EAAE,CAAC;IACtBC,eAAe,EAAE,CAAC;IAClBC,mBAAmB,EAAE,CAAC;IACtBC,gBAAgB,EAAE,CAAC;IACnBC,kBAAkB,EAAE,CAAC;IACrBC,qBAAqB,EAAE;EAC3B,CAAC;EACD;EACA;EACA,IAAI,OAAOlG,MAAM,IAAI,WAAW,EAAE;IAC9B;IACE,gBAAkBA,MAAM,CAAI,WAAW,CAAC,GAAG8E,WAAW;EAC5D;EACA,IAAI,OAAOzE,MAAM,IAAI,WAAW,EAAE;IAC9B;IACE,gBAAkBA,MAAM,CAAI,WAAW,CAAC,GAAGyE,WAAW;EAC5D;EACA,IAAI,OAAO5E,IAAI,IAAI,WAAW,EAAE;IAC5B;IACE,gBAAkBA,IAAI,CAAI,WAAW,CAAC,GAAG4E,WAAW;EAC1D;EACA,OAAOA,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,OAAOqB,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAE;EAC/CtB,0BAA0B,EAAE;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuB,SAAS,GAAG,CAAC,CAAC;AACpB;AACA,MAAMC,WAAW,GAAG,EAAE;AACtB;AACA,IAAI,OAAOF,SAAS,KAAK,WAAW,IAAIA,SAAS,EAAE;EAC/CtJ,MAAM,CAACyJ,MAAM,CAACF,SAAS,CAAC;EACxBvJ,MAAM,CAACyJ,MAAM,CAACD,WAAW,CAAC;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAIE,gBAAgB,GAAG,CAAC;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAe,CAACC,mBAAmB,EAAE;EAC1C;EACA,MAAMrL,IAAI,GAAGqL,mBAAmB,CAACrL,IAAI;EACrC;EACA,MAAMsL,aAAa,GAAGtL,IAAI,CAAC4B,SAAS;EACpC;EACA,MAAM2J,cAAc,GAAI,gBAAkB,CAAC,CAAG;EAC9C;EACA,MAAMC,GAAG,GAAG;IACRxL,IAAI,EAAEA,IAAI;IACVyL,iBAAiB,EAAE,IAAI;IACvBC,MAAM,EAAEL,mBAAmB,CAACK,MAAM;IAClCC,IAAI,EAAEN,mBAAmB,CAACM,IAAI;IAC9BnM,OAAO,EAAE6L,mBAAmB,CAAC7L,OAAO;IACpC4I,QAAQ,EAAEiD,mBAAmB,CAACjD,QAAQ,IAAK,gBAAkB,IAAM;IACnEwD,YAAY,EAAEP,mBAAmB,CAACO,YAAY,IAAI,IAAI;IACtDC,cAAc,EAAER,mBAAmB,CAACQ,cAAc,IAAI,IAAI;IAC1DC,qBAAqB,EAAET,mBAAmB,CAACS,qBAAqB,IAAI,IAAI;IACxEC,UAAU,EAAEV,mBAAmB,CAACU,UAAU,IAAI,IAAI;IAClDR,cAAc,EAAEA,cAAc;IAC9BS,MAAM,EAAG,gBAAkB,IAAM;IACjC;IACAC,OAAO,EAAG,gBAAkB,IAAM;IAClC;IACAC,QAAQ,EAAEb,mBAAmB,CAACa,QAAQ,IAAI,IAAI;IAC9CC,MAAM,EAAEb,aAAa,CAACc,QAAQ,IAAI,IAAI;IACtCC,OAAO,EAAEf,aAAa,CAACgB,SAAS,IAAI,IAAI;IACxCC,gBAAgB,EAAEjB,aAAa,CAACkB,kBAAkB,IAAI,IAAI;IAC1DC,mBAAmB,EAAEnB,aAAa,CAACoB,qBAAqB,IAAI,IAAI;IAChEC,aAAa,EAAErB,aAAa,CAACsB,eAAe,IAAI,IAAI;IACpDC,gBAAgB,EAAEvB,aAAa,CAACwB,kBAAkB,IAAI,IAAI;IAC1DC,SAAS,EAAEzB,aAAa,CAAC0B,WAAW,IAAI,IAAI;IAC5CC,MAAM,EAAE5B,mBAAmB,CAAC6B,eAAe,KAAKnJ,uBAAuB,CAACC,MAAM;IAC9EmJ,aAAa,EAAG,gBAAkB,IAAM;IACxC;IACAC,QAAQ,EAAG,gBAAkB,IAAM;IACnC;IACAC,SAAS,EAAEhC,mBAAmB,CAACgC,SAAS;IACxCC,SAAS,EAAEjC,mBAAmB,CAACiC,SAAS,IAAI,IAAI;IAChDC,QAAQ,EAAElC,mBAAmB,CAACkC,QAAQ,IAAI,IAAI;IAC9ChK,IAAI,EAAE8H,mBAAmB,CAAC9H,IAAI,IAAI,CAAC,CAAC;IACpC;IACA;IACAiK,aAAa,EAAEnC,mBAAmB,CAACmC,aAAa,IAAIpE,iBAAiB,CAACC,QAAQ;IAC9EoE,EAAE,EAAE,GAAG;IACPnF,MAAM,EAAE+C,mBAAmB,CAAC/C,MAAM,IAAI2C,WAAW;IACjDyC,CAAC,EAAG,gBAAkB;EAC1B,CAAC;EACDlC,GAAG,CAACkC,CAAC,GAAI,gBAAkBzG,aAAa,CAAC,MAAM;IAC3C;IACA,MAAM0G,cAAc,GAAI,gBAAkBtC,mBAAmB,CAACuC,UAAY;IAC1E;IACA,MAAMC,OAAO,GAAGxC,mBAAmB,CAACkC,QAAQ;IAC5C;IACA,MAAMO,SAAS,GAAI,gBAAkBzC,mBAAmB,CAAC0C,KAAO;IAChEvC,GAAG,CAACiC,EAAE,IAAItC,gBAAgB,EAAE;IAC5BK,GAAG,CAACQ,MAAM,GAAGgC,YAAY,CAAC3C,mBAAmB,CAACW,MAAM,EAAET,cAAc,CAAC,EACjEC,GAAG,CAACS,OAAO,GAAG+B,YAAY,CAAC3C,mBAAmB,CAACY,OAAO,CAAC,EACvD4B,OAAO,IAAIA,OAAO,CAAC5F,OAAO,CAAElC,EAAE,IAAKA,EAAE,CAACyF,GAAG,CAAC,CAAC;IAC/CA,GAAG,CAAC2B,aAAa,GAAGQ,cAAc,GAC9B,MAAM,CAAC,OAAOA,cAAc,KAAK,UAAU,GAAGA,cAAc,EAAE,GAAGA,cAAc,EAC1EjH,GAAG,CAACuH,mBAAmB,CAAC,GAC7B,IAAI;IACRzC,GAAG,CAAC4B,QAAQ,GAAGU,SAAS,GACpB,MAAM,CAAC,OAAOA,SAAS,KAAK,UAAU,GAAGA,SAAS,EAAE,GAAGA,SAAS,EAAEpH,GAAG,CAACwH,cAAc,CAAC,GACrF,IAAI;EACZ,CAAC,CAAG;EACJ,OAAQ,iBAAkB1C;EAAG;AACjC;AACA;AACA;AACA;AACA;AACA,SAASyC,mBAAmB,CAACjO,IAAI,EAAE;EAC/B;EACA,MAAMwL,GAAG,GAAG2C,eAAe,CAACnO,IAAI,CAAC,IAAIoO,eAAe,CAACpO,IAAI,CAAC;EAC1D,IAAI+K,SAAS,IAAI,CAACS,GAAG,EAAE;IACnB,MAAM,IAAIxN,KAAK,CAAE,IAAGgC,IAAI,CAACW,IAAK,kDAAiD,CAAC;EACpF;EACA,OAAQ,iBAAkB6K;EAAG;AACjC;AACA;AACA;AACA;AACA;AACA,SAAS0C,cAAc,CAAClO,IAAI,EAAE;EAC1B;EACA,MAAMwL,GAAG,GAAG6C,UAAU,CAACrO,IAAI,CAAC;EAC5B,IAAI+K,SAAS,IAAI,CAACS,GAAG,EAAE;IACnB,MAAM,IAAIxN,KAAK,CAAE,IAAGgC,IAAI,CAACW,IAAK,wBAAuB,CAAC;EAC1D;EACA,OAAQ,iBAAkB6K;EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS8C,cAAc,CAAC9C,GAAG,EAAE;EACzB;EACA,MAAM3E,GAAG,GAAG;IACR7G,IAAI,EAAEwL,GAAG,CAACxL,IAAI;IACduO,SAAS,EAAE/C,GAAG,CAAC+C,SAAS,IAAItD,WAAW;IACvCuD,YAAY,EAAEhD,GAAG,CAACgD,YAAY,IAAIvD,WAAW;IAC7CnL,OAAO,EAAE0L,GAAG,CAAC1L,OAAO,IAAImL,WAAW;IACnCwD,OAAO,EAAEjD,GAAG,CAACiD,OAAO,IAAIxD,WAAW;IACnCyD,uBAAuB,EAAE;EAC7B,CAAC;EACD,OAAQ,iBAAkB7H;EAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmH,YAAY,CAACW,GAAG,EAAEC,SAAS,EAAE;EAClC,IAAID,GAAG,IAAI,IAAI,EACX,OAAO3D,SAAS;EACpB;EACA,MAAM6D,SAAS,GAAG,CAAC,CAAC;EACpB,KAAK,MAAMC,WAAW,IAAIH,GAAG,EAAE;IAC3B,IAAIA,GAAG,CAACvQ,cAAc,CAAC0Q,WAAW,CAAC,EAAE;MACjC;MACA,IAAIC,UAAU,GAAGJ,GAAG,CAACG,WAAW,CAAC;MACjC;MACA,IAAIE,YAAY,GAAGD,UAAU;MAC7B,IAAItI,KAAK,CAACwI,OAAO,CAACF,UAAU,CAAC,EAAE;QAC3BC,YAAY,GAAGD,UAAU,CAAC,CAAC,CAAC;QAC5BA,UAAU,GAAGA,UAAU,CAAC,CAAC,CAAC;MAC9B;MACAF,SAAS,CAACE,UAAU,CAAC,GAAGD,WAAW;MACnC,IAAIF,SAAS,EAAE;QACVA,SAAS,CAACG,UAAU,CAAC,GAAGC,YAAY;MACzC;IACJ;EACJ;EACA,OAAOH,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,UAAU,CAACC,cAAc,EAAE;EAChC;EACA,MAAM5D,cAAc,GAAI,gBAAkB,CAAC,CAAG;EAC9C,OAAO;IACHS,MAAM,EAAEgC,YAAY,CAACmB,cAAc,CAACnD,MAAM,EAAET,cAAc,CAAC;IAC3DA,cAAc,EAAEA,cAAc;IAC9BU,OAAO,EAAE+B,YAAY,CAACmB,cAAc,CAAClD,OAAO;EAChD,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMmD,eAAe,GAAI,iBAAmB,gBAAkBhE,eAAmB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiE,UAAU,CAACC,OAAO,EAAE;EACzB,OAAQ,kBAAoB,gBAAkB;MAC1C3O,IAAI,EAAE2O,OAAO,CAAC3O,IAAI;MAClBnB,OAAO,EAAE8P,OAAO,CAAC9P,OAAO;MACxB+P,IAAI,EAAED,OAAO,CAACC,IAAI,KAAK,KAAK;MAC5BxC,SAAS,EAAEuC,OAAO,CAACtP,IAAI,CAAC4B,SAAS,CAACoL,WAAW,IAAI;IACrD;EAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmB,eAAe,CAACnO,IAAI,EAAE;EAC3B,OAAS,iBAAkBA,IAAI,CAAI3B,gBAAgB,CAAC,IAAI;EAAI;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS+P,eAAe,CAACpO,IAAI,EAAE;EAC3B,OAAS,iBAAkBA,IAAI,CAAIzB,gBAAgB,CAAC,IAAI;EAAI;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS8P,UAAU,CAACrO,IAAI,EAAE;EACtB,OAAS,iBAAkBA,IAAI,CAAInB,WAAW,CAAC,IAAI;EAAI;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS2Q,cAAc,CAACxP,IAAI,EAAEyP,aAAa,EAAE;EACzC;EACA,kBAAmB,MAAMzQ,WAAW,GAAK,gBAAkBgB,IAAI,CAAIjB,aAAa,CAAC,IAAI,IAAI;EACzF,IAAI,CAACC,WAAW,IAAIyQ,aAAa,KAAK,IAAI,EAAE;IACxC,MAAM,IAAIzR,KAAK,CAAE,QAAOuI,SAAS,CAACvG,IAAI,CAAE,wCAAuC,CAAC;EACpF;EACA,OAAOhB,WAAW;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS0Q,WAAW,CAACC,MAAM,EAAEC,QAAQ,EAAEC,GAAG,EAAE;EACxC,IAAIF,MAAM,IAAIC,QAAQ,EAAE;IACpBE,UAAU,CAACD,GAAG,CAAC;EACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,cAAc,CAACJ,MAAM,EAAEC,QAAQ,EAAEC,GAAG,EAAE;EAC3C,IAAIF,MAAM,IAAIC,QAAQ,EAAE;IACpBE,UAAU,CAACD,GAAG,CAAC;EACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,cAAc,CAACL,MAAM,EAAEC,QAAQ,EAAEC,GAAG,EAAE;EAC3C,IAAIF,MAAM,IAAIC,QAAQ,EAAE;IACpBE,UAAU,CAACD,GAAG,CAAC;EACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,iBAAiB,CAACN,MAAM,EAAEC,QAAQ,EAAEC,GAAG,EAAE;EAC9C,IAAIF,MAAM,IAAIC,QAAQ,EAAE;IACpBE,UAAU,CAACD,GAAG,CAAC;EACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,aAAa,CAACP,MAAM,EAAEE,GAAG,EAAE;EAChC,IAAIF,MAAM,IAAI,IAAI,EAAE;IAChBG,UAAU,CAACD,GAAG,CAAC;EACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,mBAAmB,CAACR,MAAM,EAAEE,GAAG,GAAG,oFAAoF,EAAE;EAC7H,IAAI,CAAC1B,eAAe,CAACwB,MAAM,CAAC,EAAE;IAC1BG,UAAU,CAACD,GAAG,CAAC;EACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,kBAAkB,CAACT,MAAM,EAAEE,GAAG,GAAG,gFAAgF,EAAE;EACxH,IAAI,CAACL,cAAc,CAACG,MAAM,CAAC,EAAE;IACzBG,UAAU,CAACD,GAAG,CAAC;EACnB;AACJ;AACA;AACA;AACA;AACA;AACA,SAASC,UAAU,CAACD,GAAG,EAAE;EACrB;EACA,SAAS,CAAC;EACV,MAAM,IAAI7R,KAAK,CAAE,oBAAmB6R,GAAI,EAAC,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA,SAASQ,aAAa,CAACC,IAAI,EAAE;EACzBZ,WAAW,CAACY,IAAI,YAAYC,IAAI,EAAE,IAAI,EAAE,sDAAsD,CAAC;AACnG;AACA;AACA;AACA;AACA;AACA,SAASC,sBAAsB,CAACC,QAAQ,EAAE;EACtCf,WAAW,CAACe,QAAQ,EAAE,IAAI,EAAE,0CAA0C,CAAC;AAC3E;AACA;AACA;AACA;AACA;AACA,SAASC,eAAe,CAAC9G,KAAK,EAAE;EAC5BsG,aAAa,CAACtG,KAAK,CAAC+G,MAAM,EAAE,4CAA4C,CAAC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiB,CAACC,GAAG,EAAErO,KAAK,EAAE;EACnCwN,cAAc,CAACxN,KAAK,EAAEqO,GAAG,GAAGA,GAAG,CAACnO,MAAM,GAAG,CAAC,EAAE,yCAAyC,CAAC;AAC1F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoO,KAAK,GAAG,CAAC;AACf;AACA,MAAMC,KAAK,GAAG,CAAC;AACf;AACA,MAAMC,MAAM,GAAG,CAAC;AAChB;AACA,MAAMC,IAAI,GAAG,CAAC;AACd;AACA,MAAMC,OAAO,GAAG,CAAC;AACjB;AACA,MAAMC,IAAI,GAAG,CAAC;AACd;AACA,MAAMC,SAAS,GAAG,CAAC;AACnB;AACA;AACA,MAAMC,aAAa,GAAG,CAAC;AACvB;AACA,MAAMC,OAAO,GAAG,CAAC;AACjB;AACA,MAAMC,OAAO,GAAG,CAAC;AACjB;AACA,MAAMC,QAAQ,GAAG,EAAE;AACnB;AACA,MAAMC,gBAAgB,GAAG,EAAE;AAC3B;AACA,MAAMC,QAAQ,GAAG,EAAE;AACnB;AACA,MAAMC,SAAS,GAAG,EAAE;AACpB;AACA,MAAMC,IAAI,GAAG,EAAE;AACf;AACA,MAAMC,eAAe,GAAG,EAAE;AAC1B;AACA,MAAMC,eAAe,GAAG,EAAE;AAC1B;AACA,MAAMC,gBAAgB,GAAG,EAAE;AAC3B;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,EAAE;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CAAC;AACtB;AACA,MAAMC,KAAK,GAAG,CAAC;AACf;AACA;AACA;AACA,MAAMC,MAAM,GAAG,CAAC;AAChB;AACA,MAAMC,aAAa,GAAG,CAAC;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,CAAC;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,eAAe;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,CAAC;AACf;AACA,MAAMC,eAAe,GAAG,CAAC;AACzB;AACA,MAAMC,0BAA0B,GAAG,CAAC;AACpC;AACA,MAAMC,kBAAkB,GAAI,gBAAkB,CAAC,CAAG;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,CAAC;EACtB;AACJ;AACA;AACA;AACA;EACIxS,WAAW,CAACX,OAAO;EACnB;AACJ;AACA;EACIoT,cAAc,EAAEC,oBAAoB,EAAE;IAClC,IAAI,CAACrT,OAAO,GAAGA,OAAO;IACtB;AACR;AACA;AACA;IACQ,IAAI,CAACsT,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,mBAAmB,GAAGH,cAAc;IACzC,IAAI,CAACI,UAAU,GAAGH,oBAAoB;EAC1C;AACJ;AACA;AACA,MAAMI,gBAAgB,GAAGN,mBAAmB,CAAC/Q,SAAS;AACtD;AACA;AACA;AACA;AACA,SAASsR,SAAS,CAACvE,GAAG,EAAE;EACpB;EACA,OAAOA,GAAG,IAAI,IAAI,IAAI,OAAOA,GAAG,IAAI,QAAQ,IAAIlN,MAAM,CAAC0R,cAAc,CAACxE,GAAG,CAAC,IAAIsE,gBAAgB;AAClG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,WAAW,CAAChN,CAAC,EAAEC,CAAC,EAAE;EACvB;EACA;EACA,OAAO,EAAED,CAAC,KAAKA,CAAC,IAAIC,CAAC,KAAKA,CAAC,CAAC,IAAID,CAAC,K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CAAC,CAAG,CAAC;EACpF;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIgU,iBAAiB;AACrB;AACA;AACA;AACA,SAASC,oBAAoB,GAAG;EAC5B;EACA,OAAOD,iBAAiB;AAC5B;AACA;AACA;AACA;AACA,SAASE,yBAAyB,GAAG;EACjCF,iBAAiB,EAAE;AACvB;AACA;AACA;AACA;AACA,SAASG,yBAAyB,GAAG;EACjCH,iBAAiB,EAAE;AACvB;AACA;AACA,IAAII,mBAAmB,GAAG,IAAI;AAC9B;AACA;AACA;AACA,SAASC,sBAAsB,GAAG;EAC9B;EACA,OAAOD,mBAAmB;AAC9B;AACA;AACA;AACA;AACA;AACA,SAASE,sBAAsB,CAAC3O,GAAG,EAAE;EACjCyO,mBAAmB,GAAGzO,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI4O,eAAe;AACnB;AACA;AACA;AACA,SAASC,kBAAkB,GAAG;EAC1B;EACA,OAAOD,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,cAAc,GAAG;EACtBF,eAAe,GAAG,IAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,eAAe,GAAG;EACvBH,eAAe,GAAG,KAAK;AAC3B;AACA;AACA;AACA;AACA,SAASI,QAAQ,GAAG;EAChB,OAAOxG,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASyG,WAAW,CAACC,aAAa,EAAE;EAChCC,YAAY,GAAI,iBAAmB,gBAAkBD,aAAiB;AAC1E;AACA;AACA;AACA;AACA;AACA,IAAIE,qBAAqB;AACzB;AACA;AACA;AACA,SAASC,wBAAwB,GAAG;EAC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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIigC,MAAM,GAAG;IAAE,IAAI,CAACjgC,MAAM,CAACjQ,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;EAAgB;EACrD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIowC,QAAQ,GAAG;IAAE,IAAI,CAACngC,MAAM,CAACjQ,KAAK,CAAC,IAAI,EAAE,CAAC;EAAgB;EACtD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIg/B,aAAa,GAAG;IAAEC,qBAAqB,CAAC,IAAI,CAAChvB,MAAM,EAAE,IAAI,CAACgB,OAAO,CAAC;EAAE;EACpE;AACJ;AACA;AACA;AACA;AACA;AACA;EACIkuB,cAAc,GAAG;IAAEA,cAAc,CAAC,IAAI,CAACluB,OAAO,CAAC;EAAE;EACjD;AACJ;AACA;AACA;EACIo/B,wBAAwB,CAACC,KAAK,EAAE;IAC5B,IAAI,IAAI,CAACV,OAAO,EAAE;MACd,MAAM,IAAI3iD,KAAK,CAAC,+DAA+D,CAAC;IACpF;IACA,IAAI,CAAC4iD,iBAAiB,GAAGS,KAAK;EAClC;EACA;AACJ;AACA;EACIC,gBAAgB,GAAG;IAAE,IAAI,CAACX,OAAO,GAAG,IAAI;EAAE;EAC1C;AACJ;AACA;AACA;EACIY,cAAc,CAACC,MAAM,EAAE;IACnB,IAAI,IAAI,CAACZ,iBAAiB,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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM8xE,kBAAkB,CAAC;EACrB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOluE,OAAO,CAACxF,SAAS,EAAE;IACtB,OAAOgzE,0BAA0B,CAAChzE,SAAS,CAAC;EAChD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAO2zE,gBAAgB,CAAC3zE,SAAS,EAAE8Q,MAAM,EAAE;IACvC;IACA,MAAM8iE,2BAA2B,GAAGF,kBAAkB,CAACluE,OAAO,CAACxF,SAAS,CAAC;IACzE,OAAO0zE,kBAAkB,CAACG,qBAAqB,CAACD,2BAA2B,EAAE9iE,MAAM,CAAC;EACxF;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAO+iE,qBAAqB,CAAC7zE,SAAS,EAAE8Q,MAAM,EAAE;IAC5C,OAAO,IAAIgjE,mBAAmB,CAAC9zE,SAAS,EAAE8Q,MAAM,CAAC;EACrD;AACJ;AACA,MAAMgjE,mBAAmB,CAAC;EACtB;AACJ;AACA;AACA;AACA;EACIxzE,WAAW,CAACyzE,UAAU,EAAE7zB,OAAO,EAAE;IAC7B;AACR;AACA;IACQ,IAAI,CAAC8zB,oBAAoB,GAAG,CAAC;IAC7B,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACjjE,MAAM,GAAGovC,OAAO,IAAI,IAAI;IAC7B;IACA,MAAM+zB,GAAG,G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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAGJ,UAAU,GAAGT,WAAW,GAAG,CAAC3I,SAAS,EAAEl8D,KAAK,KAAKulE,SAAS;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,QAAQ,GAAGL,UAAU,GAAGR,KAAK,GAAG,CAAC9tB,CAAC,EAAE3b,CAAC,KAAKA,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMuqC,iBAAiB,GAAGN,UAAU,GAAGL,cAAc,GAAG,CAACC,SAAS,EAAEzuD,MAAM,KAAK,IAAI;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMovD,eAAe,GAAGP,UAAU,GAAGF,YAAY,GAAI/pC,CAAC,IAAK,IAAI;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMyqC,MAAM,CAAC;EACT;AACJ;AACA;EACIn6E,WAAW,CAAC;IAAEo6E,oBAAoB,GAAG;EAAM,CAAC,EAAE;IAC1C,IAAI,CAACC,oBAAoB,GAAG,KAAK;IACjC,IAAI,CAACC,oBAAoB,GAAG,KAAK;IACjC;AACR;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB;AACR;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,IAAI5f,YAAY,CAAC,KAAK,CAAC;IACzC;AACR;AACA;AACA;AACA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,OAAOoT,CAAC,EAAE;IACNm7D,MAAM,CAAC5F,iBAAiB,CAAC,MAAM2G,YAAY,CAAC5T,WAAW,CAACtoD,CAAC,CAAC,CAAC;IAC3D;IACA,MAAMA,CAAC;EACX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS67D,cAAc,CAACM,GAAG,EAAE/O,IAAI,EAAE;EAC/B,IAAIvtE,KAAK,CAACwI,OAAO,CAAC+kE,IAAI,CAAC,EAAE;IACrB+O,GAAG,GAAG/O,IAAI,CAAC7V,MAAM,CAACskB,cAAc,EAAEM,GAAG,CAAC;EAC1C,CAAC,MACI;IACDA,GAAG,GAAGthF,MAAM,CAAC+B,MAAM,CAAC,CAAC,CAAC,EAAEu/E,GAAG,EAAI,gBAAkB/O,IAAI,CAAI;EAC7D;EACA,OAAO+O,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAML,cAAc,CAAC;EACjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIviF,WAAW,CAAC6iF,KAAK,EAAE/T,QAAQ,EAAEuS,SAAS,EAAEyB,iBAAiB,EAAEC,yBAAyB,EAAEC,WAAW,EAAE;IAC/F,IAAI,CAACH,KAAK,GAAGA,KAAK;IAClB,IAAI,CAAC/T,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACuS,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACyB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AC;AAC1G;AACA,MAAMohC,4CAA4C,GAAGljC,sBAAsB;AAC3E;AACA,MAAMmjC,2CAA2C,GAAGnvC,IAAI;AACxD;AACA,MAAMivC,iCAAiC,GAAGE,2CAA2C;;AAErF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,CAAC;AAExB;AACA;AACA;AACAA,iBAAiB,CAACjnF,iBAAiB,GAAG,MAAMknF,kCAAkC,EAAE;AAChF;AACA,MAAMC,6CAA6C,GAAG9hC,uBAAuB;AAC7E;AACA,MAAM+hC,4CAA4C,GAAG,CAAC,GAAGrlF,IAAI,KAAK,CAAE,CAAC;AACrE;AACA,MAAMmlF,kCAAkC,GAAGE,4CAA4C;;AAEvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,SAASJ,iBAAiB,CAAC;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,eAAe,SAASD,SAAS,CAAC;;AAGxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAME,aAAa,CAAC;EAChB;AACJ;AACA;AACA;EACIxmF,WAAW,CAACQ,IAAI,EAAEqlB,QAAQ,EAAE;IACxB,IAAI,CAACrlB,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACqlB,QAAQ,GA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,IAAI,EAAE,CAACtB,QAAQ;AAAE,CAAC,EAC1C;EAAEY,OAAO,EAAE8mC,mBAAmB;EAAEpmC,IAAI,EAAE;AAAG,CAAC,EAC1C;EAAEV,OAAO,EAAEg/B,OAAO;EAAEt+B,IAAI,EAAE;AAAG,CAAC,CACjC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMu3C,YAAY,GAAGtP,qBAAqB,CAAC,IAAI,EAAE,MAAM,EAAEqP,wBAAwB,CAAC;;AAElF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,SAAS,GAAG,IAAInwF,cAAc,CAAC,UAAU,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMowF,YAAY,GAAG,IAAIpwF,cAAc,CAAC,cAAc,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqwF,mBAAmB,GAAG,IAAIrwF,cAAc,CAAC,oBAAoB,CAAC;AACpE;AACA,MAAMswF,0BAA0B,GAAG;EAC/BxyF,KAAK,EAAE,CAAC;EACRyyF,OAAO,EAAE,CAAC;EACVC,MAAM,EAAE;AACZ,CAAC;AACDF,0BAA0B,CAACA,0BAA0B,CAACxyF,KAAK,CAAC,GAAG,OAAO;AACtEwyF,0BAA0B,CAACA,0BAA0B,CAACC,OAAO,CAAC,GAAG,SAAS;AAC1ED,0BAA0B,CAACA,0BAA0B,CAACE,MAAM,CAAC,GAAG,QAAQ;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuB,GAAG;EAC/B,OAAOV,sBAAsB;AACjC;AACA;AACA;AACA;AACA,SAASW,uBAAuB,GAAG;EAC/B,OAAOV,sBAAsB;AACjC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}