{"ast":null,"code":"/**\n * @license Angular v7.2.16\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ɵgetDOM } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nclass BrowserXhr {\n  constructor() {}\n  /**\n   * @return {?}\n   */\n  build() {\n    return (/** @type {?} */new XMLHttpRequest()\n    );\n  }\n}\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) {\n  return new (t || BrowserXhr)();\n};\nBrowserXhr.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: BrowserXhr,\n  factory: BrowserXhr.ɵfac\n});\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst RequestMethod = {\n  Get: 0,\n  Post: 1,\n  Put: 2,\n  Delete: 3,\n  Options: 4,\n  Head: 5,\n  Patch: 6\n};\nRequestMethod[RequestMethod.Get] = 'Get';\nRequestMethod[RequestMethod.Post] = 'Post';\nRequestMethod[RequestMethod.Put] = 'Put';\nRequestMethod[RequestMethod.Delete] = 'Delete';\nRequestMethod[RequestMethod.Options] = 'Options';\nRequestMethod[RequestMethod.Head] = 'Head';\nRequestMethod[RequestMethod.Patch] = 'Patch';\n/** @enum {number} */\nconst ReadyState = {\n  Unsent: 0,\n  Open: 1,\n  HeadersReceived: 2,\n  Loading: 3,\n  Done: 4,\n  Cancelled: 5\n};\nReadyState[ReadyState.Unsent] = 'Unsent';\nReadyState[ReadyState.Open] = 'Open';\nReadyState[ReadyState.HeadersReceived] = 'HeadersReceived';\nReadyState[ReadyState.Loading] = 'Loading';\nReadyState[ReadyState.Done] = 'Done';\nReadyState[ReadyState.Cancelled] = 'Cancelled';\n/** @enum {number} */\nconst ResponseType = {\n  Basic: 0,\n  Cors: 1,\n  Default: 2,\n  Error: 3,\n  Opaque: 4\n};\nResponseType[ResponseType.Basic] = 'Basic';\nResponseType[ResponseType.Cors] = 'Cors';\nResponseType[ResponseType.Default] = 'Default';\nResponseType[ResponseType.Error] = 'Error';\nResponseType[ResponseType.Opaque] = 'Opaque';\n/** @enum {number} */\nconst ContentType = {\n  NONE: 0,\n  JSON: 1,\n  FORM: 2,\n  FORM_DATA: 3,\n  TEXT: 4,\n  BLOB: 5,\n  ARRAY_BUFFER: 6\n};\nContentType[ContentType.NONE] = 'NONE';\nContentType[ContentType.JSON] = 'JSON';\nContentType[ContentType.FORM] = 'FORM';\nContentType[ContentType.FORM_DATA] = 'FORM_DATA';\nContentType[ContentType.TEXT] = 'TEXT';\nContentType[ContentType.BLOB] = 'BLOB';\nContentType[ContentType.ARRAY_BUFFER] = 'ARRAY_BUFFER';\n/** @enum {number} */\nconst ResponseContentType = {\n  Text: 0,\n  Json: 1,\n  ArrayBuffer: 2,\n  Blob: 3\n};\nResponseContentType[ResponseContentType.Text] = 'Text';\nResponseContentType[ResponseContentType.Json] = 'Json';\nResponseContentType[ResponseContentType.ArrayBuffer] = 'ArrayBuffer';\nResponseContentType[ResponseContentType.Blob] = 'Blob';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Headers {\n  // TODO(vicb): any -> string|string[]\n  /**\n   * @param {?=} headers\n   */\n  constructor(headers) {\n    /**\n     * \\@internal header names are lower case\n     */\n    this._headers = new Map();\n    /**\n     * \\@internal map lower case names to actual names\n     */\n    this._normalizedNames = new Map();\n    if (!headers) {\n      return;\n    }\n    if (headers instanceof Headers) {\n      headers.forEach((values, name) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n    Object.keys(headers).forEach(name => {\n      /** @type {?} */\n      const values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n  /**\n   * Returns a new Headers instance from the given DOMString of Response Headers\n   * @param {?} headersString\n   * @return {?}\n   */\n  static fromResponseHeaderString(headersString) {\n    /** @type {?} */\n    const headers = new Headers();\n    headersString.split('\\n').forEach(line => {\n      /** @type {?} */\n      const index = line.indexOf(':');\n      if (index > 0) {\n        /** @type {?} */\n        const name = line.slice(0, index);\n        /** @type {?} */\n        const value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n    return headers;\n  }\n  /**\n   * Appends a header to existing list of header values for a given header name.\n   * @param {?} name\n   * @param {?} value\n   * @return {?}\n   */\n  append(name, value) {\n    /** @type {?} */\n    const values = this.getAll(name);\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n  /**\n   * Deletes all header values for the given name.\n   * @param {?} name\n   * @return {?}\n   */\n  delete(name) {\n    /** @type {?} */\n    const lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  forEach(fn) {\n    this._headers.forEach((values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n  /**\n   * Returns first header that matches given name.\n   * @param {?} name\n   * @return {?}\n   */\n  get(name) {\n    /** @type {?} */\n    const values = this.getAll(name);\n    if (values === null) {\n      return null;\n    }\n    return values.length > 0 ? values[0] : null;\n  }\n  /**\n   * Checks for existence of header by given name.\n   * @param {?} name\n   * @return {?}\n   */\n  has(name) {\n    return this._headers.has(name.toLowerCase());\n  }\n  /**\n   * Returns the names of the headers\n   * @return {?}\n   */\n  keys() {\n    return Array.from(this._normalizedNames.values());\n  }\n  /**\n   * Sets or overrides header value for given name.\n   * @param {?} name\n   * @param {?} value\n   * @return {?}\n   */\n  set(name, value) {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n  /**\n   * Returns values of all headers.\n   * @return {?}\n   */\n  values() {\n    return Array.from(this._headers.values());\n  }\n  /**\n   * Returns string of all headers.\n   * @return {?}\n   */\n  // TODO(vicb): returns {[name: string]: string[]}\n  toJSON() {\n    /** @type {?} */\n    const serialized = {};\n    this._headers.forEach((values, name) => {\n      /** @type {?} */\n      const split = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[/** @type {?} */this._normalizedNames.get(name)] = split;\n    });\n    return serialized;\n  }\n  /**\n   * Returns list of header values for a given name.\n   * @param {?} name\n   * @return {?}\n   */\n  getAll(name) {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  }\n  /**\n   * This method is not implemented.\n   * @return {?}\n   */\n  entries() {\n    throw new Error('\"entries\" method is not implemented on Headers class');\n  }\n  /**\n   * @private\n   * @param {?} name\n   * @return {?}\n   */\n  mayBeSetNormalizedName(name) {\n    /** @type {?} */\n    const lcName = name.toLowerCase();\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass ResponseOptions {\n  /**\n   * @param {?=} opts\n   */\n  constructor(opts = {}) {\n    const {\n      body,\n      status,\n      headers,\n      statusText,\n      type,\n      url\n    } = opts;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n  /**\n   * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n   * override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * This may be useful when sharing a base `ResponseOptions` object inside tests,\n   * where certain properties may change from test to test.\n   *\n   * \\@usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * import {ResponseOptions, Response} from '\\@angular/http';\n   *\n   * var options = new ResponseOptions({\n   *   body: {name: 'Jeff'}\n   * });\n   * var res = new Response(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('options.url:', options.url); // null\n   * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n   * console.log('res.url:', res.url); // https://google.com\n   * ```\n   * @param {?=} options\n   * @return {?}\n   */\n  merge(options) {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url\n    });\n  }\n}\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass BaseResponseOptions extends ResponseOptions {\n  constructor() {\n    super({\n      status: 200,\n      statusText: 'Ok',\n      type: ResponseType.Default,\n      headers: new Headers()\n    });\n  }\n}\nBaseResponseOptions.ɵfac = function BaseResponseOptions_Factory(t) {\n  return new (t || BaseResponseOptions)();\n};\nBaseResponseOptions.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: BaseResponseOptions,\n  factory: BaseResponseOptions.ɵfac\n});\n/** @nocollapse */\nBaseResponseOptions.ctorParameters = () => [];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseResponseOptions, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\nclass ConnectionBackend {}\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\nclass Connection {}\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\nclass XSRFStrategy {}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n  if (typeof method !== 'string') return method;\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n/** @type {?} */\nconst isSuccess = status => status >= 200 && status < 300;\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n  /** @type {?} */\n  const view = new Uint16Array(input.length);\n  for (let i = 0, strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams = '') {\n  /** @type {?} */\n  const map = new Map();\n  if (rawParams.length > 0) {\n    /** @type {?} */\n    const params = rawParams.split('&');\n    params.forEach(param => {\n      /** @type {?} */\n      const eqIdx = param.indexOf('=');\n      const [key, val] = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      /** @type {?} */\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n *\n */\nclass QueryEncoder {\n  /**\n   * @param {?} key\n   * @return {?}\n   */\n  encodeKey(key) {\n    return standardEncoding(key);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  encodeValue(value) {\n    return standardEncoding(value);\n  }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass URLSearchParams {\n  /**\n   * @param {?=} rawParams\n   * @param {?=} queryEncoder\n   */\n  constructor(rawParams = '', queryEncoder = new QueryEncoder()) {\n    this.rawParams = rawParams;\n    this.queryEncoder = queryEncoder;\n    this.paramsMap = paramParser(rawParams);\n  }\n  /**\n   * @return {?}\n   */\n  clone() {\n    /** @type {?} */\n    const clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n  /**\n   * @param {?} param\n   * @return {?}\n   */\n  has(param) {\n    return this.paramsMap.has(param);\n  }\n  /**\n   * @param {?} param\n   * @return {?}\n   */\n  get(param) {\n    /** @type {?} */\n    const storedParam = this.paramsMap.get(param);\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n  /**\n   * @param {?} param\n   * @return {?}\n   */\n  getAll(param) {\n    return this.paramsMap.get(param) || [];\n  }\n  /**\n   * @param {?} param\n   * @param {?} val\n   * @return {?}\n   */\n  set(param, val) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    /** @type {?} */\n    const list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  /**\n   * @param {?} searchParams\n   * @return {?}\n   */\n  setAll(searchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      /** @type {?} */\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n  /**\n   * @param {?} param\n   * @param {?} val\n   * @return {?}\n   */\n  append(param, val) {\n    if (val === void 0 || val === null) return;\n    /** @type {?} */\n    const list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `append(name, value)`\n  // for each value in `values`.\n  //\n  // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  /**\n   * @param {?} searchParams\n   * @return {?}\n   */\n  appendAll(searchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      /** @type {?} */\n      const list = this.paramsMap.get(param) || [];\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n  // A merge operation\n  // For each name-values pair in `searchParams`, perform `delete(name)`,\n  // followed by `set(name, values)`\n  //\n  // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n  //\n  // TODO(@caitp): document this better\n  /**\n   * @param {?} searchParams\n   * @return {?}\n   */\n  replaceAll(searchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      /** @type {?} */\n      const list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n  /**\n   * @return {?}\n   */\n  toString() {\n    /** @type {?} */\n    const paramsList = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(v => paramsList.push(this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n  /**\n   * @param {?} param\n   * @return {?}\n   */\n  delete(param) {\n    this.paramsMap.delete(param);\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nclass Body {\n  /**\n   * Attempts to return body as parsed `JSON` object, or raises an exception.\n   * @return {?}\n   */\n  json() {\n    if (typeof this._body === 'string') {\n      return JSON.parse( /** @type {?} */this._body);\n    }\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n    return this._body;\n  }\n  /**\n   * Returns the body as a string, presuming `toString()` can be called on the response body.\n   *\n   * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n   * bytes in the buffer will be interpreted. Valid values are:\n   *\n   * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n   *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n   *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n   *   into consideration. This is the default behavior to avoid breaking apps, but should be\n   *   considered deprecated.\n   *\n   * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n   * @param {?=} encodingHint\n   * @return {?}\n   */\n  text(encodingHint = 'legacy') {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array( /** @type {?} */this._body));\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array( /** @type {?} */this._body));\n        default:\n          throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n      }\n    }\n    if (this._body == null) {\n      return '';\n    }\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n    return this._body.toString();\n  }\n  /**\n   * Return the body as an ArrayBuffer\n   * @return {?}\n   */\n  arrayBuffer() {\n    if (this._body instanceof ArrayBuffer) {\n      return (/** @type {?} */this._body\n      );\n    }\n    return stringToArrayBuffer(this.text());\n  }\n  /**\n   * Returns the request's body as a Blob, assuming that body exists.\n   * @return {?}\n   */\n  blob() {\n    if (this._body instanceof Blob) {\n      return (/** @type {?} */this._body\n      );\n    }\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Response extends Body {\n  /**\n   * @param {?} responseOptions\n   */\n  constructor(responseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status = /** @type {?} */responseOptions.status;\n    this.ok = this.status >= 200 && this.status <= 299;\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = /** @type {?} */responseOptions.type;\n    this.url = /** @type {?} */responseOptions.url;\n  }\n  /**\n   * @return {?}\n   */\n  toString() {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _nextRequestId = 0;\n/** @type {?} */\nconst JSONP_HOME = '__ng_jsonp__';\n/** @type {?} */\nlet _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n  /** @type {?} */\n  const w = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\n// Make sure not to evaluate this in a non-browser environment!\nclass BrowserJsonp {\n  // Construct a <script> element with the specified URL\n  /**\n   * @param {?} url\n   * @return {?}\n   */\n  build(url) {\n    /** @type {?} */\n    const node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n  /**\n   * @return {?}\n   */\n  nextRequestID() {\n    return `__req${_nextRequestId++}`;\n  }\n  /**\n   * @param {?} id\n   * @return {?}\n   */\n  requestCallback(id) {\n    return `${JSONP_HOME}.${id}.finished`;\n  }\n  /**\n   * @param {?} id\n   * @param {?} connection\n   * @return {?}\n   */\n  exposeConnection(id, connection) {\n    /** @type {?} */\n    const connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n  /**\n   * @param {?} id\n   * @return {?}\n   */\n  removeConnection(id) {\n    /** @type {?} */\n    const connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n  // Attach the <script> element to the DOM\n  /**\n   * @param {?} node\n   * @return {?}\n   */\n  send(node) {\n    document.body.appendChild( /** @type {?} */node);\n  }\n  // Remove <script> element from the DOM\n  /**\n   * @param {?} node\n   * @return {?}\n   */\n  cleanup(node) {\n    if (node.parentNode) {\n      node.parentNode.removeChild( /** @type {?} */node);\n    }\n  }\n}\nBrowserJsonp.ɵfac = function BrowserJsonp_Factory(t) {\n  return new (t || BrowserJsonp)();\n};\nBrowserJsonp.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: BrowserJsonp,\n  factory: BrowserJsonp.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserJsonp, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass JSONPConnection {\n  /**\n   * \\@internal\n   * @param {?} req\n   * @param {?} _dom\n   * @param {?=} baseResponseOptions\n   */\n  constructor(req, _dom, baseResponseOptions) {\n    this._dom = _dom;\n    this.baseResponseOptions = baseResponseOptions;\n    this._finished = false;\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable(responseObserver => {\n      this.readyState = ReadyState.Loading;\n      /** @type {?} */\n      const id = this._id = _dom.nextRequestID();\n      _dom.exposeConnection(id, this);\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      /** @type {?} */\n      const callback = _dom.requestCallback(this._id);\n      /** @type {?} */\n      let url = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n      /** @type {?} */\n      const script = this._script = _dom.build(url);\n      /** @type {?} */\n      const onLoad = event => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!this._finished) {\n          /** @type {?} */\n          let responseOptions = new ResponseOptions({\n            body: JSONP_ERR_NO_CALLBACK,\n            type: ResponseType.Error,\n            url\n          });\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n        /** @type {?} */\n        let responseOptions = new ResponseOptions({\n          body: this._responseData,\n          url\n        });\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n      /** @type {?} */\n      const onError = error => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        /** @type {?} */\n        let responseOptions = new ResponseOptions({\n          body: error.message,\n          type: ResponseType.Error\n        });\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n      _dom.send(script);\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        this._dom.cleanup(script);\n      };\n    });\n  }\n  /**\n   * Callback called when the JSONP request completes, to notify the application\n   * of the new data.\n   * @param {?=} data\n   * @return {?}\n   */\n  finished(data) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n}\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass JSONPBackend extends ConnectionBackend {\n  /**\n   * \\@internal\n   * @param {?} _browserJSONP\n   * @param {?} _baseResponseOptions\n   */\n  constructor(_browserJSONP, _baseResponseOptions) {\n    super();\n    this._browserJSONP = _browserJSONP;\n    this._baseResponseOptions = _baseResponseOptions;\n  }\n  /**\n   * @param {?} request\n   * @return {?}\n   */\n  createConnection(request) {\n    return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n  }\n}\nJSONPBackend.ɵfac = function JSONPBackend_Factory(t) {\n  return new (t || JSONPBackend)(ɵngcc0.ɵɵinject(BrowserJsonp), ɵngcc0.ɵɵinject(ResponseOptions));\n};\nJSONPBackend.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: JSONPBackend,\n  factory: JSONPBackend.ɵfac\n});\n/** @nocollapse */\nJSONPBackend.ctorParameters = () => [{\n  type: BrowserJsonp\n}, {\n  type: ResponseOptions\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JSONPBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: BrowserJsonp\n    }, {\n      type: ResponseOptions\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass XHRConnection {\n  /**\n   * @param {?} req\n   * @param {?} browserXHR\n   * @param {?=} baseResponseOptions\n   */\n  constructor(req, browserXHR, baseResponseOptions) {\n    this.request = req;\n    this.response = new Observable(responseObserver => {\n      /** @type {?} */\n      const _xhr = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      /** @type {?} */\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        /** @type {?} */\n        let status = _xhr.status === 1223 ? 204 : _xhr.status;\n        /** @type {?} */\n        let body = null;\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = typeof _xhr.response === 'undefined' ? _xhr.responseText : _xhr.response;\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n        /** @type {?} */\n        const headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        /** @type {?} */\n        const url = getResponseURL(_xhr) || req.url;\n        /** @type {?} */\n        const statusText = _xhr.statusText || 'OK';\n        /** @type {?} */\n        let responseOptions = new ResponseOptions({\n          body,\n          status,\n          headers,\n          statusText,\n          url\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        /** @type {?} */\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      /** @type {?} */\n      const onError = err => {\n        /** @type {?} */\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n      this.setDetectedContentType(req, _xhr);\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader( /** @type {?} */name, values.join(',')));\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n      _xhr.send(this.request.getBody());\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n  /**\n   * @param {?} req\n   * @param {?} _xhr\n   * @return {?}\n   */\n  setDetectedContentType(req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        /** @type {?} */\n        const blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass CookieXSRFStrategy {\n  /**\n   * @param {?=} _cookieName\n   * @param {?=} _headerName\n   */\n  constructor(_cookieName = 'XSRF-TOKEN', _headerName = 'X-XSRF-TOKEN') {\n    this._cookieName = _cookieName;\n    this._headerName = _headerName;\n  }\n  /**\n   * @param {?} req\n   * @return {?}\n   */\n  configureRequest(req) {\n    /** @type {?} */\n    const xsrfToken = ɵgetDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass XHRBackend {\n  /**\n   * @param {?} _browserXHR\n   * @param {?} _baseResponseOptions\n   * @param {?} _xsrfStrategy\n   */\n  constructor(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n    this._browserXHR = _browserXHR;\n    this._baseResponseOptions = _baseResponseOptions;\n    this._xsrfStrategy = _xsrfStrategy;\n  }\n  /**\n   * @param {?} request\n   * @return {?}\n   */\n  createConnection(request) {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\n}\nXHRBackend.ɵfac = function XHRBackend_Factory(t) {\n  return new (t || XHRBackend)(ɵngcc0.ɵɵinject(BrowserXhr), ɵngcc0.ɵɵinject(ResponseOptions), ɵngcc0.ɵɵinject(XSRFStrategy));\n};\nXHRBackend.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: XHRBackend,\n  factory: XHRBackend.ɵfac\n});\n/** @nocollapse */\nXHRBackend.ctorParameters = () => [{\n  type: BrowserXhr\n}, {\n  type: ResponseOptions\n}, {\n  type: XSRFStrategy\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(XHRBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: BrowserXhr\n    }, {\n      type: ResponseOptions\n    }, {\n      type: XSRFStrategy\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass RequestOptions {\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   * @return {?}\n   */\n  get search() {\n    return this.params;\n  }\n  /**\n   * @deprecated from 4.0.0. Use params instead.\n   * @param {?} params\n   * @return {?}\n   */\n  set search(params) {\n    this.params = params;\n  }\n  // TODO(Dzmitry): remove search when this.search is removed\n  /**\n   * @param {?=} opts\n   */\n  constructor(opts = {}) {\n    const {\n      method,\n      headers,\n      body,\n      url,\n      search,\n      params,\n      withCredentials,\n      responseType\n    } = opts;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n  /**\n   * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n   * existing values. This method will not change the values of the instance on which it is being\n   * called.\n   *\n   * Note that `headers` and `search` will override existing values completely if present in\n   * the `options` object. If these values should be merged, it should be done prior to calling\n   * `merge` on the `RequestOptions` instance.\n   *\n   * ```typescript\n   * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n   *\n   * const options = new RequestOptions({\n   *   method: RequestMethod.Post\n   * });\n   * const req = new Request(options.merge({\n   *   url: 'https://google.com'\n   * }));\n   * console.log('req.method:', RequestMethod[req.method]); // Post\n   * console.log('options.url:', options.url); // null\n   * console.log('req.url:', req.url); // https://google.com\n   * ```\n   * @param {?=} options\n   * @return {?}\n   */\n  merge(options) {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials : this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType : this.responseType\n    });\n  }\n  /**\n   * @private\n   * @param {?=} params\n   * @return {?}\n   */\n  _mergeSearchParams(params) {\n    if (!params) return this.params;\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n    return this._parseParams(params);\n  }\n  /**\n   * @private\n   * @param {?=} objParams\n   * @return {?}\n   */\n  _parseParams(objParams = {}) {\n    /** @type {?} */\n    const params = new URLSearchParams();\n    Object.keys(objParams).forEach(key => {\n      /** @type {?} */\n      const value = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach(item => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n  /**\n   * @private\n   * @param {?} key\n   * @param {?} value\n   * @param {?} params\n   * @return {?}\n   */\n  _appendParam(key, value, params) {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass BaseRequestOptions extends RequestOptions {\n  constructor() {\n    super({\n      method: RequestMethod.Get,\n      headers: new Headers()\n    });\n  }\n}\nBaseRequestOptions.ɵfac = function BaseRequestOptions_Factory(t) {\n  return new (t || BaseRequestOptions)();\n};\nBaseRequestOptions.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: BaseRequestOptions,\n  factory: BaseRequestOptions.ɵfac\n});\n/** @nocollapse */\nBaseRequestOptions.ctorParameters = () => [];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseRequestOptions, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Request extends Body {\n  /**\n   * @param {?} requestOptions\n   */\n  constructor(requestOptions) {\n    super();\n    // TODO: assert that url is present\n    /** @type {?} */\n    const url = requestOptions.url;\n    this.url = /** @type {?} */requestOptions.url;\n    /** @type {?} */\n    const paramsArg = requestOptions.params || requestOptions.search;\n    if (paramsArg) {\n      /** @type {?} */\n      let params;\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n      if (params.length > 0) {\n        /** @type {?} */\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = this.url[this.url.length - 1] == '&' ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName( /** @type {?} */requestOptions.method);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = /** @type {?} */requestOptions.withCredentials;\n    this.responseType = /** @type {?} */requestOptions.responseType;\n  }\n  /**\n   * Returns the content type enum based on header options.\n   * @return {?}\n   */\n  detectContentType() {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n  /**\n   * Returns the content type of request's body based on its type.\n   * @return {?}\n   */\n  detectContentTypeFromBody() {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob$1) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer$1) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n  /**\n   * Returns the request's body according to its type. If body is undefined, return\n   * null.\n   * @return {?}\n   */\n  getBody() {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n  /** @type {?} */\n  const searchParams = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    /** @type {?} */\n    const value = params[key];\n    if (value && Array.isArray(value)) {\n      value.forEach(element => searchParams.append(key, element.toString()));\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n/** @type {?} */\nconst noop = function () {};\n/** @type {?} */\nconst w = typeof window == 'object' ? window : noop;\n/** @type {?} */\nconst FormData = /** @type {?} */w['FormData'] || noop;\n/** @type {?} */\nconst Blob$1 = /** @type {?} */w['Blob'] || noop;\n/** @type {?} */\nconst ArrayBuffer$1 = /** @type {?} */w['ArrayBuffer'] || noop;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n  return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n  /** @type {?} */\n  const newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return (/** @type {?} */newOptions.merge(new RequestOptions({\n        method: providedOpts.method || method,\n        url: providedOpts.url || url,\n        search: providedOpts.search,\n        params: providedOpts.params,\n        headers: providedOpts.headers,\n        body: providedOpts.body,\n        withCredentials: providedOpts.withCredentials,\n        responseType: providedOpts.responseType\n      }))\n    );\n  }\n  return (/** @type {?} */newOptions.merge(new RequestOptions({\n      method,\n      url\n    }))\n  );\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Http {\n  /**\n   * @param {?} _backend\n   * @param {?} _defaultOptions\n   */\n  constructor(_backend, _defaultOptions) {\n    this._backend = _backend;\n    this._defaultOptions = _defaultOptions;\n  }\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {\\@link BaseRequestOptions} before performing the request.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n  request(url, options) {\n    /** @type {?} */\n    let responseObservable;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */url)));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n  /**\n   * Performs a request with `get` http method.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n  get(url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n  /**\n   * Performs a request with `post` http method.\n   * @param {?} url\n   * @param {?} body\n   * @param {?=} options\n   * @return {?}\n   */\n  post(url, body, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n      body: body\n    })), options, RequestMethod.Post, url)));\n  }\n  /**\n   * Performs a request with `put` http method.\n   * @param {?} url\n   * @param {?} body\n   * @param {?=} options\n   * @return {?}\n   */\n  put(url, body, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n      body: body\n    })), options, RequestMethod.Put, url)));\n  }\n  /**\n   * Performs a request with `delete` http method.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n  delete(url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n  /**\n   * Performs a request with `patch` http method.\n   * @param {?} url\n   * @param {?} body\n   * @param {?=} options\n   * @return {?}\n   */\n  patch(url, body, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({\n      body: body\n    })), options, RequestMethod.Patch, url)));\n  }\n  /**\n   * Performs a request with `head` http method.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n  head(url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n  /**\n   * Performs a request with `options` http method.\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n  options(url, options) {\n    return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\n}\nHttp.ɵfac = function Http_Factory(t) {\n  return new (t || Http)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions));\n};\nHttp.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: Http,\n  factory: Http.ɵfac\n});\n/** @nocollapse */\nHttp.ctorParameters = () => [{\n  type: ConnectionBackend\n}, {\n  type: RequestOptions\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Http, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ConnectionBackend\n    }, {\n      type: RequestOptions\n    }];\n  }, null);\n})();\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Jsonp extends Http {\n  /**\n   * @param {?} backend\n   * @param {?} defaultOptions\n   */\n  constructor(backend, defaultOptions) {\n    super(backend, defaultOptions);\n  }\n  /**\n   * Performs any type of http request. First argument is required, and can either be a url or\n   * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n   * object can be provided as the 2nd argument. The options object will be merged with the values\n   * of {\\@link BaseRequestOptions} before performing the request.\n   *\n   * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n   * supported by all current browsers. Because JSONP creates a `<script>` element with\n   * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n   * source could expose your application to XSS risks. Data exposed by JSONP may also be\n   * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n   * future security issues (e.g. content sniffing).  For more detail, see the\n   * [Security Guide](http://g.co/ng/security).\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n  request(url, options) {\n    /** @type {?} */\n    let responseObservable;\n    if (typeof url === 'string') {\n      url = new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */url));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n}\nJsonp.ɵfac = function Jsonp_Factory(t) {\n  return new (t || Jsonp)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions));\n};\nJsonp.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: Jsonp,\n  factory: Jsonp.ɵfac\n});\n/** @nocollapse */\nJsonp.ctorParameters = () => [{\n  type: ConnectionBackend\n}, {\n  type: RequestOptions\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Jsonp, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ConnectionBackend\n    }, {\n      type: RequestOptions\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n  return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass HttpModule {}\nHttpModule.ɵfac = function HttpModule_Factory(t) {\n  return new (t || HttpModule)();\n};\nHttpModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: HttpModule\n});\nHttpModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [\n  // TODO(pascal): use factory type annotations once supported in DI\n  // issue: https://github.com/angular/angular/issues/3183\n  {\n    provide: Http,\n    useFactory: httpFactory,\n    deps: [XHRBackend, RequestOptions]\n  }, BrowserXhr, {\n    provide: RequestOptions,\n    useClass: BaseRequestOptions\n  }, {\n    provide: ResponseOptions,\n    useClass: BaseResponseOptions\n  }, XHRBackend, {\n    provide: XSRFStrategy,\n    useFactory: _createDefaultCookieXSRFStrategy\n  }]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [\n      // TODO(pascal): use factory type annotations once supported in DI\n      // issue: https://github.com/angular/angular/issues/3183\n      {\n        provide: Http,\n        useFactory: httpFactory,\n        deps: [XHRBackend, RequestOptions]\n      }, BrowserXhr, {\n        provide: RequestOptions,\n        useClass: BaseRequestOptions\n      }, {\n        provide: ResponseOptions,\n        useClass: BaseResponseOptions\n      }, XHRBackend, {\n        provide: XSRFStrategy,\n        useFactory: _createDefaultCookieXSRFStrategy\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated see https://angular.io/api/common/http/HttpClient#jsonp\n * \\@publicApi\n */\nclass JsonpModule {}\nJsonpModule.ɵfac = function JsonpModule_Factory(t) {\n  return new (t || JsonpModule)();\n};\nJsonpModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: JsonpModule\n});\nJsonpModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [\n  // TODO(pascal): use factory type annotations once supported in DI\n  // issue: https://github.com/angular/angular/issues/3183\n  {\n    provide: Jsonp,\n    useFactory: jsonpFactory,\n    deps: [JSONPBackend, RequestOptions]\n  }, BrowserJsonp, {\n    provide: RequestOptions,\n    useClass: BaseRequestOptions\n  }, {\n    provide: ResponseOptions,\n    useClass: BaseResponseOptions\n  }, JSONPBackend]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [\n      // TODO(pascal): use factory type annotations once supported in DI\n      // issue: https://github.com/angular/angular/issues/3183\n      {\n        provide: Jsonp,\n        useFactory: jsonpFactory,\n        deps: [JSONPBackend, RequestOptions]\n      }, BrowserJsonp, {\n        provide: RequestOptions,\n        useClass: BaseRequestOptions\n      }, {\n        provide: ResponseOptions,\n        useClass: BaseResponseOptions\n      }, JSONPBackend]\n    }]\n  }], null, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('7.2.16');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserJsonp as ɵangular_packages_http_http_e, Body as ɵangular_packages_http_http_f, _createDefaultCookieXSRFStrategy as ɵangular_packages_http_http_a, httpFactory as ɵangular_packages_http_http_b, jsonpFactory as ɵangular_packages_http_http_c, BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION };","map":{"version":3,"names":["Injectable","NgModule","Version","Observable","ɵgetDOM","ɵngcc0","BrowserXhr","constructor","build","XMLHttpRequest","ɵfac","BrowserXhr_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","ctorParameters","ngDevMode","ɵsetClassMetadata","type","RequestMethod","Get","Post","Put","Delete","Options","Head","Patch","ReadyState","Unsent","Open","HeadersReceived","Loading","Done","Cancelled","ResponseType","Basic","Cors","Default","Error","Opaque","ContentType","NONE","JSON","FORM","FORM_DATA","TEXT","BLOB","ARRAY_BUFFER","ResponseContentType","Text","Json","ArrayBuffer","Blob","Headers","headers","_headers","Map","_normalizedNames","forEach","values","name","value","append","Object","keys","Array","isArray","delete","fromResponseHeaderString","headersString","split","line","index","indexOf","slice","trim","set","getAll","push","lcName","toLowerCase","fn","get","length","has","from","join","mayBeSetNormalizedName","toJSON","serialized","v","entries","ResponseOptions","opts","body","status","statusText","url","merge","options","BaseResponseOptions","BaseResponseOptions_Factory","ConnectionBackend","Connection","XSRFStrategy","normalizeMethodName","method","toUpperCase","isSuccess","getResponseURL","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","stringToArrayBuffer","input","view","Uint16Array","i","strLen","charCodeAt","buffer","paramParser","rawParams","map","params","param","eqIdx","key","val","list","QueryEncoder","encodeKey","standardEncoding","encodeValue","encodeURIComponent","replace","URLSearchParams","queryEncoder","paramsMap","clone","appendAll","storedParam","setAll","searchParams","replaceAll","toString","paramsList","k","Body","json","_body","parse","text","encodingHint","String","fromCharCode","apply","Uint8Array","stringify","arrayBuffer","blob","Response","responseOptions","ok","_nextRequestId","JSONP_HOME","_jsonpConnections","_getJsonpConnections","w","window","BrowserJsonp","node","document","createElement","src","nextRequestID","requestCallback","id","exposeConnection","connection","connections","removeConnection","send","appendChild","cleanup","parentNode","removeChild","BrowserJsonp_Factory","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","req","_dom","baseResponseOptions","_finished","TypeError","request","response","responseObserver","readyState","_id","callback","lastIndexOf","substring","script","_script","onLoad","event","error","_responseData","next","complete","onError","message","addEventListener","removeEventListener","finished","data","JSONPBackend","_browserJSONP","_baseResponseOptions","createConnection","JSONPBackend_Factory","ɵɵinject","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","withCredentials","responseText","err","setDetectedContentType","setRequestHeader","responseType","getBody","abort","contentType","CookieXSRFStrategy","_cookieName","_headerName","configureRequest","xsrfToken","getCookie","XHRBackend","_browserXHR","_xsrfStrategy","XHRBackend_Factory","RequestOptions","search","_mergeSearchParams","_parseParams","objParams","item","_appendParam","BaseRequestOptions","BaseRequestOptions_Factory","Request","requestOptions","paramsArg","urlEncodeParams","prefix","detectContentType","ArrayBuffer$1","detectContentTypeFromBody","FormData","Blob$1","element","noop","httpRequest","backend","mergeOptions","defaultOpts","providedOpts","newOptions","Http","_backend","_defaultOptions","responseObservable","post","put","patch","head","Http_Factory","Jsonp","defaultOptions","Jsonp_Factory","_createDefaultCookieXSRFStrategy","httpFactory","xhrBackend","jsonpFactory","jsonpBackend","HttpModule","HttpModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","provide","useFactory","deps","useClass","args","JsonpModule","JsonpModule_Factory","VERSION","ɵangular_packages_http_http_e","ɵangular_packages_http_http_f","ɵangular_packages_http_http_a","ɵangular_packages_http_http_b","ɵangular_packages_http_http_c"],"sources":["C:/Users/win10/Desktop/invoice crud/node_modules/@angular/http/__ivy_ngcc__/fesm2015/http.js"],"sourcesContent":["/**\n * @license Angular v7.2.16\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ɵgetDOM } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nclass BrowserXhr {\n    constructor() { }\n    /**\n     * @return {?}\n     */\n    build() { return (/** @type {?} */ ((new XMLHttpRequest()))); }\n}\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) { return new (t || BrowserXhr)(); };\nBrowserXhr.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BrowserXhr, factory: BrowserXhr.ɵfac });\n/** @nocollapse */\nBrowserXhr.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst RequestMethod = {\n    Get: 0,\n    Post: 1,\n    Put: 2,\n    Delete: 3,\n    Options: 4,\n    Head: 5,\n    Patch: 6,\n};\nRequestMethod[RequestMethod.Get] = 'Get';\nRequestMethod[RequestMethod.Post] = 'Post';\nRequestMethod[RequestMethod.Put] = 'Put';\nRequestMethod[RequestMethod.Delete] = 'Delete';\nRequestMethod[RequestMethod.Options] = 'Options';\nRequestMethod[RequestMethod.Head] = 'Head';\nRequestMethod[RequestMethod.Patch] = 'Patch';\n/** @enum {number} */\nconst ReadyState = {\n    Unsent: 0,\n    Open: 1,\n    HeadersReceived: 2,\n    Loading: 3,\n    Done: 4,\n    Cancelled: 5,\n};\nReadyState[ReadyState.Unsent] = 'Unsent';\nReadyState[ReadyState.Open] = 'Open';\nReadyState[ReadyState.HeadersReceived] = 'HeadersReceived';\nReadyState[ReadyState.Loading] = 'Loading';\nReadyState[ReadyState.Done] = 'Done';\nReadyState[ReadyState.Cancelled] = 'Cancelled';\n/** @enum {number} */\nconst ResponseType = {\n    Basic: 0,\n    Cors: 1,\n    Default: 2,\n    Error: 3,\n    Opaque: 4,\n};\nResponseType[ResponseType.Basic] = 'Basic';\nResponseType[ResponseType.Cors] = 'Cors';\nResponseType[ResponseType.Default] = 'Default';\nResponseType[ResponseType.Error] = 'Error';\nResponseType[ResponseType.Opaque] = 'Opaque';\n/** @enum {number} */\nconst ContentType = {\n    NONE: 0,\n    JSON: 1,\n    FORM: 2,\n    FORM_DATA: 3,\n    TEXT: 4,\n    BLOB: 5,\n    ARRAY_BUFFER: 6,\n};\nContentType[ContentType.NONE] = 'NONE';\nContentType[ContentType.JSON] = 'JSON';\nContentType[ContentType.FORM] = 'FORM';\nContentType[ContentType.FORM_DATA] = 'FORM_DATA';\nContentType[ContentType.TEXT] = 'TEXT';\nContentType[ContentType.BLOB] = 'BLOB';\nContentType[ContentType.ARRAY_BUFFER] = 'ARRAY_BUFFER';\n/** @enum {number} */\nconst ResponseContentType = {\n    Text: 0,\n    Json: 1,\n    ArrayBuffer: 2,\n    Blob: 3,\n};\nResponseContentType[ResponseContentType.Text] = 'Text';\nResponseContentType[ResponseContentType.Json] = 'Json';\nResponseContentType[ResponseContentType.ArrayBuffer] = 'ArrayBuffer';\nResponseContentType[ResponseContentType.Blob] = 'Blob';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Headers {\n    // TODO(vicb): any -> string|string[]\n    /**\n     * @param {?=} headers\n     */\n    constructor(headers) {\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach((values, name) => {\n                values.forEach(value => this.append(name, value));\n            });\n            return;\n        }\n        Object.keys(headers).forEach((name) => {\n            /** @type {?} */\n            const values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            this.delete(name);\n            values.forEach(value => this.append(name, value));\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    static fromResponseHeaderString(headersString) {\n        /** @type {?} */\n        const headers = new Headers();\n        headersString.split('\\n').forEach(line => {\n            /** @type {?} */\n            const index = line.indexOf(':');\n            if (index > 0) {\n                /** @type {?} */\n                const name = line.slice(0, index);\n                /** @type {?} */\n                const value = line.slice(index + 1).trim();\n                headers.set(name, value);\n            }\n        });\n        return headers;\n    }\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    append(name, value) {\n        /** @type {?} */\n        const values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    }\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    delete(name) {\n        /** @type {?} */\n        const lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    forEach(fn) {\n        this._headers.forEach((values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n    }\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    get(name) {\n        /** @type {?} */\n        const values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    has(name) { return this._headers.has(name.toLowerCase()); }\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    keys() { return Array.from(this._normalizedNames.values()); }\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    set(name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    }\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    values() { return Array.from(this._headers.values()); }\n    /**\n     * Returns string of all headers.\n     * @return {?}\n     */\n    // TODO(vicb): returns {[name: string]: string[]}\n    toJSON() {\n        /** @type {?} */\n        const serialized = {};\n        this._headers.forEach((values, name) => {\n            /** @type {?} */\n            const split = [];\n            values.forEach(v => split.push(...v.split(',')));\n            serialized[(/** @type {?} */ (this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    }\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    getAll(name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    }\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    entries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n    /**\n     * @private\n     * @param {?} name\n     * @return {?}\n     */\n    mayBeSetNormalizedName(name) {\n        /** @type {?} */\n        const lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass ResponseOptions {\n    /**\n     * @param {?=} opts\n     */\n    constructor(opts = {}) {\n        const { body, status, headers, statusText, type, url } = opts;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    merge(options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    }\n}\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass BaseResponseOptions extends ResponseOptions {\n    constructor() {\n        super({ status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() });\n    }\n}\nBaseResponseOptions.ɵfac = function BaseResponseOptions_Factory(t) { return new (t || BaseResponseOptions)(); };\nBaseResponseOptions.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BaseResponseOptions, factory: BaseResponseOptions.ɵfac });\n/** @nocollapse */\nBaseResponseOptions.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseResponseOptions, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\nclass ConnectionBackend {\n}\n/**\n * Abstract class from which real connections are derived.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\nclass Connection {\n}\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @abstract\n */\nclass XSRFStrategy {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n/** @type {?} */\nconst isSuccess = (status) => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    /** @type {?} */\n    const view = new Uint16Array(input.length);\n    for (let i = 0, strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams = '') {\n    /** @type {?} */\n    const map = new Map();\n    if (rawParams.length > 0) {\n        /** @type {?} */\n        const params = rawParams.split('&');\n        params.forEach((param) => {\n            /** @type {?} */\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n            /** @type {?} */\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n *\n */\nclass QueryEncoder {\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    encodeKey(key) { return standardEncoding(key); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    encodeValue(value) { return standardEncoding(value); }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass URLSearchParams {\n    /**\n     * @param {?=} rawParams\n     * @param {?=} queryEncoder\n     */\n    constructor(rawParams = '', queryEncoder = new QueryEncoder()) {\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    clone() {\n        /** @type {?} */\n        const clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    has(param) { return this.paramsMap.has(param); }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    get(param) {\n        /** @type {?} */\n        const storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    getAll(param) { return this.paramsMap.get(param) || []; }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    set(param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        /** @type {?} */\n        const list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    }\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    setAll(searchParams) {\n        searchParams.paramsMap.forEach((value, param) => {\n            /** @type {?} */\n            const list = this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            this.paramsMap.set(param, list);\n        });\n    }\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    append(param, val) {\n        if (val === void 0 || val === null)\n            return;\n        /** @type {?} */\n        const list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    }\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `append(name, value)`\n    // for each value in `values`.\n    //\n    // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    appendAll(searchParams) {\n        searchParams.paramsMap.forEach((value, param) => {\n            /** @type {?} */\n            const list = this.paramsMap.get(param) || [];\n            for (let i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            this.paramsMap.set(param, list);\n        });\n    }\n    // A merge operation\n    // For each name-values pair in `searchParams`, perform `delete(name)`,\n    // followed by `set(name, values)`\n    //\n    // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n    //\n    // TODO(@caitp): document this better\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    replaceAll(searchParams) {\n        searchParams.paramsMap.forEach((value, param) => {\n            /** @type {?} */\n            const list = this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (let i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            this.paramsMap.set(param, list);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        /** @type {?} */\n        const paramsList = [];\n        this.paramsMap.forEach((values, k) => {\n            values.forEach(v => paramsList.push(this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n        });\n        return paramsList.join('&');\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    delete(param) { this.paramsMap.delete(param); }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nclass Body {\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    json() {\n        if (typeof this._body === 'string') {\n            return JSON.parse((/** @type {?} */ (this._body)));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    }\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    text(encodingHint = 'legacy') {\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array((/** @type {?} */ (this._body))));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array((/** @type {?} */ (this._body))));\n                default:\n                    throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    }\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    arrayBuffer() {\n        if (this._body instanceof ArrayBuffer) {\n            return (/** @type {?} */ (this._body));\n        }\n        return stringToArrayBuffer(this.text());\n    }\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    blob() {\n        if (this._body instanceof Blob) {\n            return (/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Response extends Body {\n    /**\n     * @param {?} responseOptions\n     */\n    constructor(responseOptions) {\n        super();\n        this._body = responseOptions.body;\n        this.status = (/** @type {?} */ (responseOptions.status));\n        this.ok = (this.status >= 200 && this.status <= 299);\n        this.statusText = responseOptions.statusText;\n        this.headers = responseOptions.headers;\n        this.type = (/** @type {?} */ (responseOptions.type));\n        this.url = (/** @type {?} */ (responseOptions.url));\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet _nextRequestId = 0;\n/** @type {?} */\nconst JSONP_HOME = '__ng_jsonp__';\n/** @type {?} */\nlet _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    /** @type {?} */\n    const w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\n// Make sure not to evaluate this in a non-browser environment!\nclass BrowserJsonp {\n    // Construct a <script> element with the specified URL\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    build(url) {\n        /** @type {?} */\n        const node = document.createElement('script');\n        node.src = url;\n        return node;\n    }\n    /**\n     * @return {?}\n     */\n    nextRequestID() { return `__req${_nextRequestId++}`; }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    requestCallback(id) { return `${JSONP_HOME}.${id}.finished`; }\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    exposeConnection(id, connection) {\n        /** @type {?} */\n        const connections = _getJsonpConnections();\n        connections[id] = connection;\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    removeConnection(id) {\n        /** @type {?} */\n        const connections = _getJsonpConnections();\n        connections[id] = null;\n    }\n    // Attach the <script> element to the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    send(node) { document.body.appendChild((/** @type {?} */ ((node)))); }\n    // Remove <script> element from the DOM\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    cleanup(node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild((/** @type {?} */ ((node))));\n        }\n    }\n}\nBrowserJsonp.ɵfac = function BrowserJsonp_Factory(t) { return new (t || BrowserJsonp)(); };\nBrowserJsonp.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BrowserJsonp, factory: BrowserJsonp.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserJsonp, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n/** @type {?} */\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Base class for an in-flight JSONP request.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass JSONPConnection {\n    /**\n     * \\@internal\n     * @param {?} req\n     * @param {?} _dom\n     * @param {?=} baseResponseOptions\n     */\n    constructor(req, _dom, baseResponseOptions) {\n        this._dom = _dom;\n        this.baseResponseOptions = baseResponseOptions;\n        this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        this.request = req;\n        this.response = new Observable((responseObserver) => {\n            this.readyState = ReadyState.Loading;\n            /** @type {?} */\n            const id = this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            /** @type {?} */\n            const callback = _dom.requestCallback(this._id);\n            /** @type {?} */\n            let url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n            }\n            /** @type {?} */\n            const script = this._script = _dom.build(url);\n            /** @type {?} */\n            const onLoad = (event) => {\n                if (this.readyState === ReadyState.Cancelled)\n                    return;\n                this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!this._finished) {\n                    /** @type {?} */\n                    let responseOptions = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url });\n                    if (baseResponseOptions) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.error(new Response(responseOptions));\n                    return;\n                }\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({ body: this._responseData, url });\n                if (this.baseResponseOptions) {\n                    responseOptions = this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            /** @type {?} */\n            const onError = (error) => {\n                if (this.readyState === ReadyState.Cancelled)\n                    return;\n                this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return () => {\n                this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                this._dom.cleanup(script);\n            };\n        });\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @param {?=} data\n     * @return {?}\n     */\n    finished(data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    }\n}\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass JSONPBackend extends ConnectionBackend {\n    /**\n     * \\@internal\n     * @param {?} _browserJSONP\n     * @param {?} _baseResponseOptions\n     */\n    constructor(_browserJSONP, _baseResponseOptions) {\n        super();\n        this._browserJSONP = _browserJSONP;\n        this._baseResponseOptions = _baseResponseOptions;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    createConnection(request) {\n        return new JSONPConnection(request, this._browserJSONP, this._baseResponseOptions);\n    }\n}\nJSONPBackend.ɵfac = function JSONPBackend_Factory(t) { return new (t || JSONPBackend)(ɵngcc0.ɵɵinject(BrowserJsonp), ɵngcc0.ɵɵinject(ResponseOptions)); };\nJSONPBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: JSONPBackend, factory: JSONPBackend.ɵfac });\n/** @nocollapse */\nJSONPBackend.ctorParameters = () => [\n    { type: BrowserJsonp },\n    { type: ResponseOptions }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JSONPBackend, [{\n        type: Injectable\n    }], function () { return [{ type: BrowserJsonp }, { type: ResponseOptions }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass XHRConnection {\n    /**\n     * @param {?} req\n     * @param {?} browserXHR\n     * @param {?=} baseResponseOptions\n     */\n    constructor(req, browserXHR, baseResponseOptions) {\n        this.request = req;\n        this.response = new Observable((responseObserver) => {\n            /** @type {?} */\n            const _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            /** @type {?} */\n            const onLoad = () => {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                /** @type {?} */\n                let status = _xhr.status === 1223 ? 204 : _xhr.status;\n                /** @type {?} */\n                let body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                /** @type {?} */\n                const headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                /** @type {?} */\n                const url = getResponseURL(_xhr) || req.url;\n                /** @type {?} */\n                const statusText = _xhr.statusText || 'OK';\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({ body, status, headers, statusText, url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                /** @type {?} */\n                const response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            /** @type {?} */\n            const onError = (err) => {\n                /** @type {?} */\n                let responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach((values, name) => _xhr.setRequestHeader((/** @type {?} */ (name)), values.join(',')));\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(this.request.getBody());\n            return () => {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    setDetectedContentType(req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                /** @type {?} */\n                const blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    }\n}\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass CookieXSRFStrategy {\n    /**\n     * @param {?=} _cookieName\n     * @param {?=} _headerName\n     */\n    constructor(_cookieName = 'XSRF-TOKEN', _headerName = 'X-XSRF-TOKEN') {\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    configureRequest(req) {\n        /** @type {?} */\n        const xsrfToken = ɵgetDOM().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    }\n}\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass XHRBackend {\n    /**\n     * @param {?} _browserXHR\n     * @param {?} _baseResponseOptions\n     * @param {?} _xsrfStrategy\n     */\n    constructor(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    createConnection(request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    }\n}\nXHRBackend.ɵfac = function XHRBackend_Factory(t) { return new (t || XHRBackend)(ɵngcc0.ɵɵinject(BrowserXhr), ɵngcc0.ɵɵinject(ResponseOptions), ɵngcc0.ɵɵinject(XSRFStrategy)); };\nXHRBackend.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: XHRBackend, factory: XHRBackend.ɵfac });\n/** @nocollapse */\nXHRBackend.ctorParameters = () => [\n    { type: BrowserXhr },\n    { type: ResponseOptions },\n    { type: XSRFStrategy }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(XHRBackend, [{\n        type: Injectable\n    }], function () { return [{ type: BrowserXhr }, { type: ResponseOptions }, { type: XSRFStrategy }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass RequestOptions {\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @return {?}\n     */\n    get search() { return this.params; }\n    /**\n     * @deprecated from 4.0.0. Use params instead.\n     * @param {?} params\n     * @return {?}\n     */\n    set search(params) { this.params = params; }\n    // TODO(Dzmitry): remove search when this.search is removed\n    /**\n     * @param {?=} opts\n     */\n    constructor(opts = {}) {\n        const { method, headers, body, url, search, params, withCredentials, responseType } = opts;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    merge(options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    }\n    /**\n     * @private\n     * @param {?=} params\n     * @return {?}\n     */\n    _mergeSearchParams(params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    }\n    /**\n     * @private\n     * @param {?=} objParams\n     * @return {?}\n     */\n    _parseParams(objParams = {}) {\n        /** @type {?} */\n        const params = new URLSearchParams();\n        Object.keys(objParams).forEach((key) => {\n            /** @type {?} */\n            const value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach((item) => this._appendParam(key, item, params));\n            }\n            else {\n                this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    }\n    /**\n     * @private\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    _appendParam(key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    }\n}\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass BaseRequestOptions extends RequestOptions {\n    constructor() { super({ method: RequestMethod.Get, headers: new Headers() }); }\n}\nBaseRequestOptions.ɵfac = function BaseRequestOptions_Factory(t) { return new (t || BaseRequestOptions)(); };\nBaseRequestOptions.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: BaseRequestOptions, factory: BaseRequestOptions.ɵfac });\n/** @nocollapse */\nBaseRequestOptions.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseRequestOptions, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jeffbcross): properly implement body accessors\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Request extends Body {\n    /**\n     * @param {?} requestOptions\n     */\n    constructor(requestOptions) {\n        super();\n        // TODO: assert that url is present\n        /** @type {?} */\n        const url = requestOptions.url;\n        this.url = (/** @type {?} */ (requestOptions.url));\n        /** @type {?} */\n        const paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            /** @type {?} */\n            let params;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                /** @type {?} */\n                let prefix = '?';\n                if (this.url.indexOf('?') != -1) {\n                    prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                this.url = url + prefix + params;\n            }\n        }\n        this._body = requestOptions.body;\n        this.method = normalizeMethodName((/** @type {?} */ (requestOptions.method)));\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        this.headers = new Headers(requestOptions.headers);\n        this.contentType = this.detectContentType();\n        this.withCredentials = (/** @type {?} */ (requestOptions.withCredentials));\n        this.responseType = (/** @type {?} */ (requestOptions.responseType));\n    }\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    detectContentType() {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    }\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    detectContentTypeFromBody() {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    }\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    getBody() {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    }\n}\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n    /** @type {?} */\n    const searchParams = new URLSearchParams();\n    Object.keys(params).forEach(key => {\n        /** @type {?} */\n        const value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(element => searchParams.append(key, element.toString()));\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\n/** @type {?} */\nconst noop = function () { };\n/** @type {?} */\nconst w = typeof window == 'object' ? window : noop;\n/** @type {?} */\nconst FormData = ((/** @type {?} */ (w)))['FormData'] || noop;\n/** @type {?} */\nconst Blob$1 = ((/** @type {?} */ (w)))['Blob'] || noop;\n/** @type {?} */\nconst ArrayBuffer$1 = ((/** @type {?} */ (w)))['ArrayBuffer'] || noop;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    /** @type {?} */\n    const newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return (/** @type {?} */ (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        }))));\n    }\n    return (/** @type {?} */ (newOptions.merge(new RequestOptions({ method, url }))));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import {map} from 'rxjs/operators';\n *\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .pipe(map(res => res.json()))\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Http {\n    /**\n     * @param {?} _backend\n     * @param {?} _defaultOptions\n     */\n    constructor(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(url, options) {\n        /** @type {?} */\n        let responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, (/** @type {?} */ (url)))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    }\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    get(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    }\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    post(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    }\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    put(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    }\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    delete(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    }\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    patch(url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    }\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    head(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    }\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    options(url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    }\n}\nHttp.ɵfac = function Http_Factory(t) { return new (t || Http)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions)); };\nHttp.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Http, factory: Http.ɵfac });\n/** @nocollapse */\nHttp.ctorParameters = () => [\n    { type: ConnectionBackend },\n    { type: RequestOptions }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Http, [{\n        type: Injectable\n    }], function () { return [{ type: ConnectionBackend }, { type: RequestOptions }]; }, null); })();\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass Jsonp extends Http {\n    /**\n     * @param {?} backend\n     * @param {?} defaultOptions\n     */\n    constructor(backend, defaultOptions) {\n        super(backend, defaultOptions);\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    request(url, options) {\n        /** @type {?} */\n        let responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, (/** @type {?} */ (url))));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    }\n}\nJsonp.ɵfac = function Jsonp_Factory(t) { return new (t || Jsonp)(ɵngcc0.ɵɵinject(ConnectionBackend), ɵngcc0.ɵɵinject(RequestOptions)); };\nJsonp.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Jsonp, factory: Jsonp.ɵfac });\n/** @nocollapse */\nJsonp.ctorParameters = () => [\n    { type: ConnectionBackend },\n    { type: RequestOptions }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Jsonp, [{\n        type: Injectable\n    }], function () { return [{ type: ConnectionBackend }, { type: RequestOptions }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n */\nclass HttpModule {\n}\nHttpModule.ɵfac = function HttpModule_Factory(t) { return new (t || HttpModule)(); };\nHttpModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: HttpModule });\nHttpModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        // TODO(pascal): use factory type annotations once supported in DI\n        // issue: https://github.com/angular/angular/issues/3183\n        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n        BrowserXhr,\n        { provide: RequestOptions, useClass: BaseRequestOptions },\n        { provide: ResponseOptions, useClass: BaseResponseOptions },\n        XHRBackend,\n        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                    BrowserXhr,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    XHRBackend,\n                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                ]\n            }]\n    }], null, null); })();\n/**\n * The module that includes jsonp's providers\n *\n * @deprecated see https://angular.io/api/common/http/HttpClient#jsonp\n * \\@publicApi\n */\nclass JsonpModule {\n}\nJsonpModule.ɵfac = function JsonpModule_Factory(t) { return new (t || JsonpModule)(); };\nJsonpModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: JsonpModule });\nJsonpModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        // TODO(pascal): use factory type annotations once supported in DI\n        // issue: https://github.com/angular/angular/issues/3183\n        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n        BrowserJsonp,\n        { provide: RequestOptions, useClass: BaseRequestOptions },\n        { provide: ResponseOptions, useClass: BaseResponseOptions },\n        JSONPBackend,\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                    BrowserJsonp,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    JSONPBackend,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated see https://angular.io/guide/http\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('7.2.16');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserJsonp as ɵangular_packages_http_http_e, Body as ɵangular_packages_http_http_f, _createDefaultCookieXSRFStrategy as ɵangular_packages_http_http_a, httpFactory as ɵangular_packages_http_http_b, jsonpFactory as ɵangular_packages_http_http_c, BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}